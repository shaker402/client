{"setter":"api","artifact":"Exchange.Windows.ActiveDirectory.PrivilegedUsers","op":"set","definition":"name: Exchange.Windows.ActiveDirectory.PrivilegedUsers\n\nauthor: liteman @kevinfosec\n\ndescription: |\n   If on a Domain Controller (ProductType = 2), recursively enumerate\n   membership of privileged groups, then for each user, collect\n   details relevant to an investigation: Create Date, Last Logon,\n   Group Membership, SID\n\n   If not on a Domain Controller, return nothing\n\ntype: CLIENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET info \u003c= SELECT * from info()\n\n      LET script \u003c= '\n\n                $prodtype = Get-WmiObject -Class Win32_OperatingSystem | Select -ExpandProperty ProductType\n\n                if ($prodType -eq 2) {\n                  import-module activedirectory\n\n                  $users = @()\n\n                  $groups = @(\"Domain Admins\", \"Enterprise Admins\", \"Administrators\", \"Schema Admins\", \"Account Operators\", \"Backup Operators\", \"Print Operators\", \"Server Operators\", \"Cert Publishers\")\n\n                  foreach ($group in $groups) {\n                      foreach ($user in @(Get-AdGroupMember -Identity $group -Recursive)) {\n                          if (-Not $users.contains($user)) {\n                              $users += $user\n                          }\n                      }\n\n                  }\n\n                  $userdetails = @()\n                  foreach ($user in ($users | Sort-Object | Get-Unique)) {\n                    $userdetails += Get-ADUser -Identity $user -Properties *\n                  }\n\n                  ConvertTo-Json -InputObject $userdetails\n\n                }\n      '\n\n      LET out = SELECT parse_json_array(data=Stdout) AS Output\n          FROM execve(argv=[\"powershell\",\n               \"-ExecutionPolicy\", \"Unrestricted\", \"-encodedCommand\",\n                  base64encode(string=utf16_encode(\n                  string=script))\n            ], length=1000000)\n      SELECT * FROM foreach(row=out.Output[0],\n      query={\n          SELECT\n            SamAccountName,\n            DistinguishedName,\n            SID.Value as UserSID,\n            SID.AccountDomainSid as DomainSID,\n            Enabled,\n            adminCount,\n            timestamp(epoch=grok(data=Created, grok=\"%{INT:timestamp}\").timestamp) as created,\n            DisplayName,\n            timestamp(winfiletime=lastLogon) as last_logon,\n            timestamp(epoch=grok(data=Modified, grok=\"%{INT:timestamp}\").timestamp) as modified,\n            MemberOf as Groups,\n            timestamp(winfiletime=pwdLastSet) as password_last_set\n\n          FROM scope()\n      })\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Server.Enrichment.AI.Anthropic","op":"set","definition":"name: Exchange.Server.Enrichment.AI.Anthropic\nauthor: Matt Green - @mgreen27\ndescription: |\n  Query Anthropic AI for analysis of data.\n  \n  Paramaters:\n  \n  * `PrePrompt` - Added as preprompt. Default is: \n  \"You are a Cyber Incident Responder and need to analyze data. You have an eye \n  for detail and like to use short precise technical language. Analyze the \n  following data and provide summary analysis:\"\n  * `Prompt` - Is User prompt as string: When pushing a dict object via \n  PromtData good practice is add some strings related to the type of data for \n  analysis or artifact name to provide context.\n  * `PromptData` - add optional object to be serialized and added to the User prompt.\n  * `Model` - Model to use for your request. Default is claude-3-7-sonnet-20250219\n  * AnthropicVersion - anthropic-version header\n  * `MaxTokens` - Set max token size  default 64000\n  \n  This artifact can be called from within another artifact (such as one looking \n  for files) to enrich the data made available by that artifact.\n  \ntype: SERVER\n\nparameters:\n    - name: PrePrompt\n      type: string\n      description: |\n        Prompt to send with data. For example, when asking \n        a question, then providing data separately\n      default: |\n        You are a Cyber Incident responder and need to analyse forensic \n        collections. You have an eye for detail and like to use short precise \n        technical language. Your PRIMARY goal is to analyse the following data \n        and provide summary analysis:\n    - name: Prompt\n      type: string\n      default: Can you list 10 Windows persistance items in bullet points?\n    - name: PromptData\n      type: string\n      description: The data sent to Anthropic - this data is serialised and added to the prompt\n    - name: Model\n      type: string\n      description: The model used for processing the prompt\n      default: claude-3-7-sonnet-20250219\n    - name: AnthropicVersion\n      type: string\n      description: anthropic-version header\n      default: \"2023-06-01\"\n    - name: AnthropicToken\n      type: string\n      description: Token for Anthropic. Leave blank here if using server metadata store.\n    - name: MaxTokens\n      type: int\n      default: 64000\n\nsources:\n  - query: |\n        LET Creds \u003c= if(\n            condition=AnthropicToken,\n            then=AnthropicToken,\n            else=server_metadata().AnthropicToken)\n        LET messages = if(condition=PromptData,\n                        then = dict(role='user',content=PrePrompt + Prompt + ' ' + serialize(item=PromptData)) ,\n                        else= dict(role='user',content=PrePrompt + Prompt) )\n        LET Data = if(condition=MaxTokens,\n                        then= dict(model=Model, messages=[messages,],max_tokens=MaxTokens),\n                        else= dict(model=Model, messages=[messages,]) \n                    )\n\n        SELECT\n            messages.content as UserPrompt,\n            parse_json(data=Content).content[0].text AS ResponseText,\n            parse_json(data=Content) AS ResponseDetails\n        FROM http_client(\n            url='https://api.anthropic.com/v1/messages',\n            headers=dict(\n                    `x-api-key`=Creds, \n                    `Content-Type`=\"application/json\", \n                    `anthropic-version`=AnthropicVersion\n                ),\n            method=\"POST\",\n            data=Data )\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.Registry.AteraNetworks","op":"set","definition":"name: Exchange.Windows.Registry.AteraNetworks\ndescription: |\n    Find AteraNetworks configuration details in the registry.\n    This artifact is best combined with Windows.Forensics.FilenameSearch \n    searching for the string \"atera\".\n\nauthor: original author Eduardo Mattos - @eduardfir\n\nreference:\n  - https://www.advanced-intel.com/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent\n  \nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: \\HKEY_LOCAL_MACHINE\\SOFTWARE\\ATERA Networks\\AlphaAgent\\**\n    description: Use a glob to define the registry hives that will be searched.\n\nsources:\n  - query: |\n        SELECT  ModTime as LastModified,\n                FullPath,\n                Name as KeyName,\n                Data.value as KeyValue,\n                Data.type as KeyType\n        FROM glob(globs=SearchRegistryGlob, accessor='registry')\n        WHERE NOT Data.type = 'key'\n\ncolumn_types:\n  - name: Modified\n    type: timestamp\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.Carving.BRc4","op":"set","definition":"name: Exchange.Windows.Carving.BRc4\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact extracts Brute Ratel C4 (BRc4) configuration from a byte stream, \n  process or file on disk. BRc4 is an emerging red-teaming and adversarial \n  attack simulation tool.\n  \n  The User can define bytes, file glob, process name or pid regex as a target.\n  The artifact firstly discovers BruteRatel configuration and extracts bytes, \n  before parsing with Velociraptor Binary Parser.\n  \n  * BRc4's configuration consits of 8 characters inside several sections. \n  * Character lists reversed in order\n  * This list of characters is: either base64 + RC4 encoded or in clear text. \n  \n  This content simply carves the configuration and does not unpack files on\n  disk. That means pointing this artifact as a packed or obfuscated file may not\n  obtain the expected results.\n\nreference:\n  - https://unit42.paloaltonetworks.com/brute-ratel-c4-tool/\n  - https://github.com/Immersive-Labs-Sec/BruteRatel-DetectionTools\n  \n\nparameters:\n  - name: TargetBytes\n    default:\n  - name: TargetFileGlob\n    default:\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: ProcessRegex\n    default: .\n    type: regex\n  - name: DecodeKey\n    default: \"bYXJm/3#M?:XyMBF\"\n  - name: FindConfig\n    type: hidden\n    description: Final Yara option and the default if no other options provided.\n    default: |\n        rule BruteRatelConfig\n            {\n                strings:\n                    $config_block = { 50 48 b8 [8] 50 68}\n                    $split_marker = { 50 48 b8 [8] 50 48 b8 }\n            \n                condition:\n                    $config_block and #split_marker \u003e 30\n            }\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- dynamic functions to reverse list order\n      LET _Reverse(data) = SELECT *, count() as Count FROM foreach(row=data) ORDER BY Count desc\n      LET Reverse(data) = _Reverse(data=data)._value\n\n      -- binary parse profile to extract BRc4 configuration. NOTE: need reverse dynamic fuctions above\n      LET PROFILE = '''[\n                [BRc4Config, 0, [\n                    [\"__FindConfig\",0, \"String\",{term_hex: \"5048b8\"}],\n                    [\"Reversed\",\"x=\u003elen(list=x.__FindConfig) + 3\", \"String\", { term_hex: \"5068\" }],\n                    [\"ConfigData\",0,\"Value\",{ \"value\": \"x=\u003ejoin(array=Reverse(data=split(string=x.Reversed,sep_string=unhex(string='5048b8'))))\" }],\n                    [\"DecodedConfig\",0,\"Value\",{ \"value\": \"x=\u003ecrypto_rc4(string=base64decode(string=x.ConfigData),key=DecodeKey)\" }],\n                    [\"Config\",0,\"Value\",{ \"value\": \"x=\u003eif(condition= x.DecodedConfig, then=x.DecodedConfig, else=x.ConfigData)\" }],\n                ]\n            ]]'''\n      \n      -- Bytes usecase: scan DataBytes for BRc4 config\n      LET ByteConfiguration = SELECT\n            Rule,\n            len(list=TargetBytes) as Size,\n            hash(path=TargetBytes,accessor='data') as Hash,\n            String.Offset as HitOffset,\n            parse_binary(accessor=\"data\",filename=String.Data,profile=PROFILE,struct='BRc4Config').Config as _RawConfig\n        FROM yara(\n                files=TargetBytes,\n                accessor='data',\n                rules=FindConfig,\n                number=1,\n                context=1000\n            )\n      \n      -- Glob usecase: find target files\n      LET TargetFiles = SELECT OSPath,Size\n        FROM glob(globs=TargetFileGlob) WHERE NOT IsDir\n\n      -- Glob usecase: Extract config from files in scope\n      LET FileConfiguration = SELECT * FROM foreach(row=TargetFiles,\n            query={\n                SELECT \n                    Rule,\n                    OSPath, Size,\n                    hash(path=OSPath) as Hash,\n                    String.Offset as HitOffset,\n                    parse_binary(accessor=\"data\",filename=String.Data,profile=PROFILE,struct='BRc4Config').Config as _RawConfig\n                FROM yara(\n                        files=OSPath,\n                        rules=FindConfig,\n                        number=1,\n                        context=1000\n                    )\n            })\n            \n      -- find velociraptor process\n      LET me \u003c= SELECT * FROM if(condition= NOT ( TargetFileGlob OR TargetBytes ),\n                    then = { SELECT Pid FROM pslist(pid=getpid()) })\n\n      -- find all processes and add filters\n      LET processes = SELECT Name as ProcessName, Exe, CommandLine, Pid\n        FROM pslist()\n        WHERE\n            Name =~ ProcessRegex\n            AND format(format=\"%d\", args=Pid) =~ PidRegex\n            AND NOT Pid in me.Pid\n      \n      -- scan processes in scope with our rule, limit 1 hit and extract context to parse\n      LET ProcessConfiguration = SELECT * FROM foreach(\n        row=processes,\n        query={\n            SELECT\n                Rule,\n                Pid, ProcessName, CommandLine,\n                String.Offset as HitOffset,\n                parse_binary(accessor=\"data\",filename=String.Data,profile=PROFILE,struct='BRc4Config').Config as _RawConfig\n             FROM yara( \n                    files=format(format=\"/%d\", args=Pid),\n                    accessor='process',\n                    rules=FindConfig,\n                    number=1,\n                    context=1000\n                )\n          })\n\n\n      -- generate results remove any FPs\n      SELECT *,\n            { \n                SELECT _value \n                FROM foreach(row=split(string=_RawConfig,sep_string='|')) \n                WHERE _value \n            } as BRc4Config, \n            _RawConfig\n      FROM if(condition=TargetBytes,\n            then=ByteConfiguration,\n            else= if(condition=TargetFileGlob,\n                then= FileConfiguration,\n                else= ProcessConfiguration))\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.System.BinaryVersion","op":"set","definition":"name: Exchange.Windows.System.BinaryVersion\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n   This artifact will search the MFT for any matching filenames and return\n   binary details. This artifact can be used to find all instances of a \n   binary on disk so its great for scoping both legititimate and illegitimate \n   files.\n\nparameters:\n   - name: TargetLibrary\n     default: 'kernel32.dll'\n     description: regex of target library filename e.g file.dll or ^(file.dll|file2.exe)$\n   - name: TargetDrive\n     default: 'C:\\'\n   - name: TargetAllDrives\n     type: bool\n     \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET hits = SELECT FileName, OSPath,\n            dict(\n                    LastModified0x10=LastModified0x10,\n                    LastAccess0x10=LastAccess0x10,\n                    LastRecordChange0x10=LastRecordChange0x10,\n                    Created0x10=Created0x10\n                ) as SI_Timestamps,\n            dict(\n                    LastModified0x30=LastModified0x30,\n                    LastAccess0x30=LastAccess0x30,\n                    LastRecordChange0x30=LastRecordChange0x30,\n                    Created0x30=Created0x30\n                ) as FN_Timestamps,\n            SI_Lt_FN, uSecZeros,\n            parse_pe(file=OSPath) as PE,\n            authenticode(filename=OSPath) as Authenticode,\n            InUse,\n            FileSize\n      FROM Artifact.Windows.NTFS.MFT(MFTDrive=TargetDrive,\n            AllDrives=TargetAllDrives,\n            FileRegex=TargetLibrary)\n\n      SELECT *,\n        InUse as MFTAllocated,\n        hash(path=OSPath) as Hash,\n        PE,\n        Authenticode\n      FROM hits\n      WHERE PE OR Authenticode OR MFTAllocated = 'false'\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Bitsadmin","op":"set","definition":"name: Exchange.Windows.EventLogs.Bitsadmin\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n    This content will extract BITS Transfer events and enable filtering by URL \n    and TLD.\n\nreference:\n  - https://attack.mitre.org/techniques/T1197/\n  - https://mgreen27.github.io/posts/2018/02/18/Sharing_my_BITS.html\n\nparameters:\n  - name: EventLog\n    default: C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-Bits-Client%4Operational.evtx\n  - name: TldAllowListRegex\n    description: TLD allow list regex - anchor TLD - e.g live.com\n    default: '(office365|dell|live|mozilla|sun|adobe|onenote|microsoft|windowsupdate|google|oracle|hp)\\.(net|com|(|\\.au))|\\.(office\\.net|sentinelone\\.net|connectwise.net)|(oneclient\\.sfx|aka)\\.ms|(edgedl.me|redirector)\\.gvt1\\.com|^(10|192\\.168|172\\.(1[6-9]|2[0-9]|3[0-1]))\\.\\d{1,3}\\.\\d{1,3}$'\n  - name: UrlAllowListRegex\n    description: Secondary whitelist regex. Used for Url\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- Find Files in scope\n      LET files = SELECT * FROM glob(globs=EventLog)\n      \n      LET results = SELECT * FROM foreach(\n        row=files,\n        query={\n            SELECT\n                timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,\n                System.Computer as Computer,\n                System.EventID.Value as EventId,\n                System.Security.UserID as UserId,\n                EventData.transferId as TransferId,\n                EventData.name as Name,\n                EventData.id as Id,\n                EventData.url as Url,\n                url(parse=EventData.url).Host AS TLD,\n                EventData.peer as Peer,\n                timestamp(epoch=EventData.fileTime) as FileTime,\n                EventData.fileLength as fileLength,\n                EventData.bytesTotal as bytesTotal,\n                EventData.bytesTransferred as bytesTransferred,\n                EventData.bytesTransferredFromPeer\n            FROM parse_evtx(filename=OSPath)\n            WHERE \n                EventId = 59\n                AND NOT if( condition= TldAllowListRegex,\n                            then= TLD =~ TldAllowListRegex,\n                            else= FALSE)\n                AND NOT if( condition= UrlAllowListRegex,\n                            then= Url =~ UrlAllowListRegex,\n                            else= FALSE)\n        })\n\n      SELECT * FROM results\n      \n    notebook:\n      - type: vql_suggestion\n        name: Stack rank by TLD\n        template: |\n            /*\n            ## TLD stacking - find potential to add to Ignore regex and triage low counts\n            */\n            SELECT TLD,count() as TldTotal,\n                Url as UrlExample\n            FROM source(artifact=\"Windows.EventLogs.Bitsadmin\")\n            GROUP BY TLD\n            ORDER BY TldTotal\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.Forensics.UEFI.BootApplication","op":"set","definition":"name: Exchange.Windows.Forensics.UEFI.BootApplication\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n    This artifact parses Windows MeasuredBoot TCGLogs to extract PathName of \n    EV_EFI_Boot_Services_Application events, which can assist detection of \n    potential ESP based persistance.  \n    \n    \\EFI\\Microsoft\\Boot\\bootmgfw.efi - the Windows boot manager on systems with \n    UEFI firmware.\n\n    \n    The artifact leverages Velociraptor tools to deploy and execute a powershell \n    module to parse TCGLogs on disk and memory.\n    \n    NOTE:\n    \n    - Recommended to host TCGLogTools and TCGLogToolsExecution locally to mitigate github connection limits.\n    - AllParsedTCGLog can be large and is best suited to triage.\n    - Thank you to mattifestation for TCGTools!\n\nreference:\n  - https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/\n  \ntype: CLIENT\nresources:\n  timeout: 6000\n\ntools:\n    - name: TCGLogTools\n      url: https://raw.githubusercontent.com/mattifestation/TCGLogTools/master/TCGLogTools.psm1\n    - name: TCGLogToolsExecution\n      url: https://gist.githubusercontent.com/mgreen27/d7bd2480069f714f31296d5f38fe7f0c/raw/708002dd858a38e8e8885e926c3016f80057a7d4/Run-TCGLogTools.ps1\n      \n\nparameters:\n  - name: TCGLogLocationGlob\n    default: c:\\Windows\\Logs\\MeasuredBoot\\*.log\n  - name: AllParsedTCGLog\n    type: bool\n    description: Return all parsed TCGLog data. This can be very large so best used as triage only!\n\n\nprecondition:\n      SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n      -- Get the path to the TCGLogTools tool\n      LET module \u003c= SELECT OSPath\n            FROM Artifact.Generic.Utils.FetchBinary(\n                ToolName=\"TCGLogTools\",\n                IsExecutable=FALSE\n                )\n      LET script \u003c= SELECT OSPath\n            FROM Artifact.Generic.Utils.FetchBinary(\n                ToolName=\"TCGLogToolsExecution\",\n                IsExecutable=FALSE\n                )\n      \n      -- Run the tool and relay back the output\n      LET data = SELECT *    \n        FROM execve(argv=['powershell','-ExecutionPolicy','Unrestricted','-NoProfile','-File',script.OSPath[0]],\n            env=dict(\n                `TCGLogTools` = str(str=module.OSPath[0]),\n                `TCGLogLocation` = TCGLogLocationGlob ),\n            length=100000000)\n        WHERE Stdout\n        \n      LET file_info(path) = SELECT OSPath,Size,Mtime,Atime,Ctime,Btime \n        FROM stat(filename=path)\n      \n      LET results \u003c= SELECT *,\n            if(condition= LogPath,\n                then= file_info(path=LogPath)[0],\n                else= Null ) as FileInfo\n        FROM parse_json_array(data=data.Stdout)\n        \n      -- quick dynamic function to clean up multi entries for PathName\n      LET bootapplication(data) = SELECT PathName FROM data.Event.DevicePath.DeviceInfo \n        WHERE PathName\n        GROUP BY lowcase(string=PathName)\n        \n      LET clean_bootapplication(data) = SELECT _value as PathName FROM foreach(row=data) GROUP BY _value\n        \n      LET boot_application = SELECT \n            if(condition=FileInfo,\n                then= FileInfo.OSPath,\n                else= 'Current InMemory' ) as OSPath,\n            FileInfo.Size as Size,\n            FileInfo.Mtime as Mtime,\n            FileInfo.Ctime as Ctime,\n            FileInfo.Btime as Btime,\n            clean_bootapplication(data=array(a=Events.PCR4.Event.DevicePath.DeviceInfo.PathName)).PathName as BootApplication\n        FROM results\n        \n      -- cleaning up results and ensuring single string if not multiple BootApplication entries\n      SELECT *,\n        if(condition=len(list=BootApplication)=1,\n            then= BootApplication[0],\n            else= BootApplication ) as BootApplication\n      FROM boot_application\n\n    notebook:\n      - type: vql\n        name: BootApplication count\n        template: |\n          /*\n          ## BootApplication by count\n          */\n          SELECT \n                BootApplication,\n                min(item=Btime) as EarliestBtime,\n                count() as TotalBoots\n          FROM source(artifact=\"Exchange.Windows.Forensics.UEFI.BootApplication\")\n          GROUP BY lowcase(string=BootApplication)\n          \n          /*\n          ##  All BootApplication\n          */\n          SELECT BootApplication, OSPath, Size, Mtime, Ctime, Btime\n          FROM source(artifact=\"Exchange.Windows.Forensics.UEFI.BootApplication\")\n          \n  - name: AllParsed\n    queries:\n      - |\n        SELECT FileInfo,Header,Events\n        FROM if(condition=AllParsedTCGLog, \n            then= results )\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.Carving.BumbleBee","op":"set","definition":"name: Exchange.Windows.Carving.BumbleBee\nauthor: Angelo Violetti @SEC Defence\ntype: CLIENT\ndescription: |\n        This artficat will detect running BumbleBee processes and subsequently extract the command and control servers with the destination port 443.\nreference:\n  - sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/\nparameters:\n  - name: TargetFileGlob\n    default:\n  - name: PidRegex\n    default: .\n  - name: ProcessRegex\n    default: .\n  - name: DetectionYara\n    default: |\n        rule BumbleBee_Unpacked{\n            meta:\n                author = \"Angelo Violetti @ SEC Defence\"\n                date = \"2023-02-23\"\n            \n            strings:\n                $s1 = {?? 83 ?? 18 10 72 03 ?? 8B ?? 44 8B ?? 48 8B ?? 48 8D 4C 24 30 E8 ?? ?? FF FF 90}\n                $s2 = {48 8D 4C 24 30 E8 ?? ?? FF FF 90}\n                $s3 = {48 8d 4c 24 30 e8 ?? ?? FF FF}\n            \n            condition:\n                all of ($s*)\n        }\n        \n  - name: ExtractIPsYara\n    default: |\n        rule BumbleBee_IPs{\n            meta:\n                author = \"Angelo Violetti @ SEC Defence\"\n                date = \"2023-02-23\"\n                description = \"Extracts the IP addresses with the destination port equal to 443 from BumbleBee processes\"\n            \n            strings:\n            $IP = {?? ?? ?? 2e ?? ?? ?? 2e ?? ?? ?? 2e ?? ?? ?? 00 (?? | ?? ??) 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 34 34 33 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 0F 00 00 00 00 00 00 00}\n          condition:\n            $IP\n        }\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        -- Find velociraptor process\n        LET me \u003c= getpid()\n\n        -- Find all processes and add filters\n        LET processes = SELECT Name AS ProcessName, CommandLine, Pid\n                        FROM pslist()\n                        WHERE Name =~ ProcessRegex\n                            AND Pid =~ PidRegex\n                            AND NOT Pid in me.Pid\n\n        -- Scan processes in scope with our DetectionYara\n        LET processDetections = SELECT * FROM foreach(row=processes,\n                                query={\n                                    SELECT * FROM if(condition=TargetFileGlob=\"\",\n                                        then={\n                                            SELECT *, ProcessName, CommandLine, Pid, Rule AS YaraRule\n                                            FROM proc_yara(pid=Pid, rules=DetectionYara)\n                                        })\n                                })\n                                \n        -- Scan the process for the IP addresses\n        LET ipaddressDetections = SELECT ProcessName, CommandLine, Pid, Strings.Data AS IPAddresses FROM foreach(row=processDetections, query={SELECT *, ProcessName, CommandLine, Pid FROM proc_yara(pid=Pid, rules=ExtractIPsYara)})\n        \n        -- Extract the command and control servers\n        LET CommandandControlServers = SELECT * FROM foreach(row=ipaddressDetections, query={SELECT ProcessName, CommandLine, Pid, g1 FROM parse_records_with_regex(accessor=\"data\", file=IPAddresses, regex='''(\\d+\\.\\d+\\.\\d+\\.\\d+)''')})\n\n        -- Output the command and control servers\n        SELECT ProcessName, CommandLine, Pid, str(str=g1) AS BumbleBeeC2 FROM CommandandControlServers\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.Registry.CVE_2021_40444","op":"set","definition":"name: Exchange.Windows.Registry.CVE_2021_40444\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact will enable both application and removal of the\n    reccomended mitigation for CVE-2021-40444.\n\n    Disabling the installation of all ActiveX controls in Internet\n    Explorer mitigates this attack. This can be accomplished for all\n    sites by updating the registry. Previously-installed ActiveX\n    controls will continue to run, but do not expose this\n    vulnerability.\n\n    To disable installing ActiveX controls in Internet Explorer in all\n    zones\n\n    ```\n    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\0]\n    \"1001\"=dword:00000003\n    \"1004\"=dword:00000003\n\n    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\1]\n    \"1001\"=dword:00000003\n    \"1004\"=dword:00000003\n\n    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2]\n    \"1001\"=dword:00000003\n    \"1004\"=dword:00000003\n\n    [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\3]\n    \"1001\"=dword:00000003\n    \"1004\"=dword:00000003\n    ```\n\n    This sets the `URLACTION_DOWNLOAD_SIGNED_ACTIVEX` (0x1001) and\n    `URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX` (0x1004) to `DISABLED` (3) for all\n    internet zones for 64-bit and 32-bit processes. New ActiveX controls will\n    not be installed. Previously-installed ActiveX controls will continue to run.\n\n    **NOTE**: if both AddMitigation and DeleteMitigation is selected\n    DeleteMitigation will take preference. Reboot may be required.\n\nreference:\n  - https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-40444\n\ntype: CLIENT\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/{0,1,2,3}/*\n  - name: AddMitigation\n    type: bool\n    description: Add registry key mitigations for CVE-2021-40444.\n  - name: DeleteMitigation\n    type: bool\n    description: Remove registry key mitigations for CVE-2021-40444.\n\nsources:\n  - query: |\n        -- set registry values\n        LET setvalues = SELECT\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/0/1001/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/0/1004/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/1/1001/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/1/1004/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/2/1001/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/2/1004/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/3/1001/',\n                type='DWORD',value=3,create='Y'),\n            reg_set_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/3/1004/',\n                type='DWORD',value=3,create='Y')\n        FROM scope()\n\n        LET rmvalues = SELECT\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/0/1001/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/0/1004/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/1/1001/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/1/1004/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/2/1001/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/2/1004/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/3/1001/'),\n            reg_rm_value(path='HKEY_LOCAL_MACHINE/SOFTWARE/Policies/Microsoft/Windows/CurrentVersion/Internet Settings/Zones/3/1004/')\n        FROM scope()\n\n        LET values \u003c= SELECT *\n            FROM if(condition=DeleteMitigation,\n                then= rmvalues,\n                else=if(condition=AddMitigation,\n                    then=setvalues))\n\n        -- output rows add some description on applied settings.\n        SELECT\n            timestamp(string=Mtime) as ModifiedTime,\n            FullPath as KeyPath,\n            Data.value as Value,\n            if(condition= FullPath=~'1001$',\n                then='URLACTION_DOWNLOAD_SIGNED_ACTIVEX (0x1001) - mitigation to DISABLED (3)',\n                else= if(condition= FullPath=~'1004$',\n                    then='URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX (0x1004) - mitigation to DISABLED (3)',\n                    else= 'UNKNOWN')) as Description\n        FROM glob(globs=SearchRegistryGlob, accessor='registry')\n        WHERE Data.type = 'DWORD'\n","id":78560752944729352,"_ts":1757377132}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.CondensedAccountUsage","op":"set","definition":"name: Exchange.Windows.EventLogs.CondensedAccountUsage\ndescription: |\n   This artifact will extract condensed information on logon / logoff events.\n   \n   Security channel - EventIDs in 4624, 4625, 4634, 4647, 4648, 4672, 4778,\n   4779, 4800, 4801, 4802, and 4803.\n   \n   Exclude by default events related to:  \n     - UserName egal to SYSTEM, ANONYMOUS LOGON, LOCAL SERVICE, NETWORK\n       SERVICE, or %ComputerName%$.  \n     - Domain egal to NT AUTHORITY, Font Driver Host, or Window Manager.\n    \n   Inspired from work by Brian Maloney and @0x47617279.  \n   Thanks to Mike Cohen (scudette) for its help optimizing the query.  \n   \n\nauthor: Thomas DIOT (Qazeer)\n\ntype: CLIENT\n\nparameters:\n   - name: SecurityEvtx\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx'\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      \n      LET DomainNameLookup \u003c= dict(\n            `4624` = 'TargetDomainName',\n            `4625` = 'TargetDomainName',\n            `4634` = 'TargetDomainName',\n            `4647` = 'TargetDomainName',\n            `4648` = 'SubjectDomainName',\n            `4672` = 'SubjectDomainName',\n            `4778` = 'AccountDomain',\n            `4779` = 'AccountDomain',\n            `4800` = 'TargetDomainName',\n            `4801` = 'TargetDomainName',\n            `4802` = 'TargetDomainName',\n            `4803` = 'TargetDomainName')\n      \n      LET UserNameLookup \u003c= dict(\n            `4624` = 'TargetUserName',\n            `4625` = 'TargetUserName',\n            `4634` = 'TargetUserName',\n            `4647` = 'TargetUserName',\n            `4648` = 'SubjectUserName',\n            `4672` = 'SubjectUserName',\n            `4778` = 'AccountName',\n            `4779` = 'AccountName',\n            `4800` = 'TargetUserName',\n            `4801` = 'TargetUserName',\n            `4802` = 'TargetUserName',\n            `4803` = 'TargetUserName')\n      \n      LET LogonIdLookup \u003c= dict(\n            `4624` = 'TargetLogonId',\n            `4625` = '-',\n            `4634` = 'TargetLogonId',\n            `4647` = 'TargetLogonId',\n            `4648` = 'SubjectLogonId',\n            `4672` = 'SubjectLogonId',\n            `4778` = 'LogonID',\n            `4779` = 'LogonID',\n            `4800` = 'TargetLogonId',\n            `4801` = 'TargetLogonId',\n            `4802` = 'TargetLogonId',\n            `4803` = 'TargetLogonId')\n            \n      LET LogonDescriptionLookup \u003c= dict(\n            `4624` = 'ACCOUNT_LOGGED_ON',\n            `4625` = 'ACCOUNT_FAILED_TO_LOGON',\n            `4634` = 'ACCOUNT_LOGGED_OFF',\n            `4647` = 'ACCOUNT_INITITATED_LOGOFF',\n            `4648` = 'LOGON_ATTEMPT_EXPLICIT_CREDENTIALS',\n            `4672` = 'PRIVILEGED_LOGON',\n            `4778` = 'SESSION_RECONNECTED',\n            `4779` = 'SESSION_DISCONNECTED',\n            `4800` = 'WORKSATION_LOCKED',\n            `4801` = 'WORKSATION_UNLOCKED',\n            `4802` = 'SCREENSAVER_INVOKED',\n            `4803` = 'SCREENSAVER_DISMISSED')\n\n      LET LogonTypeLookup \u003c= dict(\n            `0` = 'SYSTEM_LOGON',\n            `2` = 'INTERACTIVE_LOGON',\n            `3` = 'NETWORK_LOGON',\n            `4` = 'BATCH_LOGON',\n            `5` = 'SERVICE_LOGON',\n            `7` = 'UNLOCK_LOGON',\n            `8` = 'NETWORK_CLEARTEXT_LOGON',\n            `9` = 'NEW_CREDENTIALS',\n            `10` = 'REMOTE_INTERACTIVE_LOGON',\n            `11` = 'CACHED_INTERACTIVE_LOGON',\n            `12` = 'CACHED_REMOTE_INTERACTIVE_LOGON',\n            `13` = 'CACHED_UNLOCK_LOGON')\n      \n      SELECT\n        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,\n        System.Computer as Computer,\n        System.EventID.Value as EventID,\n        get(item=LogonDescriptionLookup,\n            member=str(str=System.EventID.Value)) as Description,\n        get(item=EventData,\n            member=get(item=DomainNameLookup,\n                       member=str(str=System.EventID.Value))) AS DomainName,\n        get(item=EventData,\n            member=get(item=UserNameLookup,\n                       member=str(str=System.EventID.Value))) AS UserName,\n        get(item=EventData,\n            member=get(item=LogonIdLookup,\n                       member=str(str=System.EventID.Value))) AS LogonId,\n        if(condition= System.EventID.Value = 4648,\n           then= join(array=[EventData.TargetDomainName,\n                             EventData.TargetUserName],\n                      sep='\\\\'),\n           else= '-') as CredentialsUsedFor4648,\n        if(condition= EventData.LogonType,\n           then= EventData.LogonType,\n           else= '-') as LogonType,\n        if(condition= EventData.LogonType,\n           then= get(item=LogonTypeLookup,\n                     member=str(str=EventData.LogonType)),\n           else= '-') as LogonTypeDescription,\n        if(condition= EventData.AuthenticationPackageName,\n           then= EventData.AuthenticationPackageName,\n           else= '-' ) as AuthenticationPackageName,\n        if(condition= EventData.IpAddress,\n           then= EventData.IpAddress,\n           else= if(condition= EventData.ClientAddress,\n                    then= EventData.ClientAddress,\n                    else= '-')) as IpAddress,\n        if(condition= EventData.WorkstationName,\n           then= EventData.WorkstationName,\n           else= if(condition= EventData.ClientName,\n                    then= EventData.ClientName,\n                    else= '-')) as ClientName\n        FROM parse_evtx(filename=expand(path=SecurityEvtx))\n        WHERE System.Provider.Name =~ \"Security-Auditing\"\n        AND System.EventID.Value in (4624, 4625, 4634, 4647, 4648, 4672, 4778, 4779, 4800, 4801, 4802, 4803)\n        AND NOT UserName =~ '^(SYSTEM|ANONYMOUS LOGON|LOCAL SERVICE|NETWORK SERVICE)$'\n        AND NOT UserName = expand(path='%ComputerName%$')\n        AND NOT DomainName =~ '^(NT AUTHORITY|FONT DRIVER HOST|WINDOW MANAGER)$'\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Linux.Detection.ConfluenceLogs","op":"set","definition":"name: Exchange.Linux.Detection.ConfluenceLogs\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n  This artifact enables grep of Linux logs and targets strings observed in \n  exploitation of CVE-2022-26134.\n  \n  CVE-2022-26134, a critical unauthenticated remote code execution vulnerability \n  in Confluence Server and Confluence Data Center. \n  \nreference:\n  - https://www.rapid7.com/blog/post/2022/06/02/active-exploitation-of-confluence-cve-2022-26134/\n\nparameters:\n  - name: TargetFiles\n    default: '/{/var/log/**,/opt/atlassian/confluence*/**/logs/*}'\n  - name: SearchRegex\n    description: \"Regex of strings to search in log line.\"\n    default: '%24%7B|(GET|POST).{0,20}\\$\\{|154\\.146\\.34\\.145|154\\.16\\.105\\.147|156\\.146\\.34\\.46|156\\.146\\.34\\.52|156\\.146\\.34\\.9|156\\.146\\.56\\.136|198\\.147\\.22\\.148|221\\.178\\.126\\.244|45\\.43\\.19\\.91|59\\.163\\.248\\.170|64\\.64\\.228\\.239|66\\.115\\.182\\.102|66\\.115\\.182\\.111|67\\.149\\.61\\.16|98\\.32\\.230\\.38'\n    type: regex\n  - name: FilterRegex\n    description: \"Regex of strings to leave out of output.\"\n    default:\n    type: regex\n  - name: ExcludeDirectoryRegex\n    type: regex\n    description: \"Does not descend into directories that match this Regex.\"\n    default: \"^/(shared|proc|snap)\"\n  - name: ExcludePathRegex\n    description: \"Regex of paths to exclude from scanning.\"\n    default: '\\.journal$'\n    type: regex\n    \nsources:\n  - query: |\n      LET RecursionCB \u003c= if(condition= ExcludeDirectoryRegex,\n         then=\"x =\u003e NOT x.OSPath =~ ExcludeDirectoryRegex\",\n         else=\"x =\u003e NOT x.OSPath =~ '^/proc' \")\n      \n      LET files = SELECT OSPath \n        FROM glob(globs=TargetFiles,\n            nosymlink=TRUE,\n            recursion_callback=RecursionCB)\n        WHERE NOT IsDir AND NOT OSPath =~ ExcludePathRegex\n          AND log(message=\"Scanning %v\", args=OSPath)\n      LET hits = SELECT * FROM foreach(row=files,\n          query={\n              SELECT OSPath, Line FROM parse_lines(filename=OSPath)\n              WHERE Line =~ SearchRegex\n          })\n          \n      SELECT * FROM if(condition=FilterRegex,\n        then={ \n           SELECT * FROM hits\n           WHERE NOT Line =~ FilterRegex\n        },\n        else={ \n           SELECT * FROM hits        \n        })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Detection.Confluence_CVE_2023_22527","op":"set","definition":"name: Exchange.Generic.Detection.Confluence_CVE_2023_22527\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact detects evidence of exploitation of Confluence RCE CVE-2023-22527.\n  \n  The artifact checks conf_access logs for a malicious POST request and should \n  return full line of any hit (IP address and http code).\n  \n  Note: the underlying artifact uses Generic.Detection.Yara.Glob(). \n  Please run he notbook suggestion view hit strings for further analysis.\n\nreference:\n    - https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/\n    \ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     default: /**/atlassian/confluence/logs/conf_access*.log\n   - name: YaraRule\n     default: |\n        rule LOG_CVE_2023_22527_Confluence_Jan23 {\n            meta:\n                description = \"Detects exploitation attempts for Confluence RCE CVE-2023-22527\"\n                author = \"Matt Green - @mgreen27\"\n                reference = \"https://blog.projectdiscovery.io/atlassian-confluence-ssti-remote-code-execution/\"\n                date = \"2024-01-25\"\n            strings:\n             $s1 = /\\[.{,100} POST \\/template\\/aui\\/text-inline\\.vm [^\\n]{10,500}/\n            condition:\n              any of them\n        }\n   - name: UploadHits\n     type: bool\n     description: upload any logs with hits.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux'\n\n    query: |\n      SELECT * FROM Artifact.Generic.Detection.Yara.Glob(\n                        PathGlob=TargetGlob,\n                        YaraRule=YaraRule,\n                        NumberOfHits=999999,\n                        UploadHits=UploadHits )\n    notebook:\n      - type: vql_suggestion\n        name: View hit strings\n        template: |             \n            /*\n            ## Show all hit strings for post processing\n            */\n            LET m \u003c= memoize(query={\n                SELECT vfs_path.Base as Key, vfs_path\n                FROM uploads()\n            }, key='Key')\n            \n            \n            SELECT Fqdn,OSPath,Mtime,Rule,HitOffset,\n                read_file(accessor='fs',filename=get(item=m, field=str(str=HitContext.StoredName)).vfs_path) as HitContext\n            FROM source()\n                           \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.MobaXterm.Passwords","op":"set","definition":"name: Exchange.Windows.MobaXterm.Passwords\nauthor: \"Yaron King - @Sam0rai\"\ndescription: |\n   Extract MobaXterm encrypted saved Master Passwords, Passwords and Credentials from registry.\n   Further information regarding decryption can be found here: https://www.xmcyber.com/blog/extracting-encrypted-credentials-from-common-tools-2/\n\ntype: CLIENT\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: HKEY_USERS\\\\S-1-5-21-*\\\\SOFTWARE\\\\Mobatek\\MobaXterm\\\\{M,P,C}\\\\**\n    description: Use a glob to define the registry path to search for saved (M)aster passwords, (P)asswords and (C)redentials.\n\nsources:\n  - query: |\n        SELECT Data.value as EncryptedCreds, FullPath, ModTime\n        FROM glob(globs=SearchRegistryGlob, accessor='reg')\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.WinSCP.Passwords","op":"set","definition":"name: Exchange.Windows.WinSCP.Passwords\nauthor: \"Yaron King - @Sam0rai\"\ndescription: |\n   Extract WinSCP obfuscated saved passwords from registry.\n   Further information regarding deobfuscation can be found here: https://www.xmcyber.com/blog/extracting-encrypted-credentials-from-common-tools-2/\n\ntype: CLIENT\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: HKEY_USERS\\\\S-1-5-21-*\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions\\\\*\\\\password\n    description: Use a glob to define the registry path to search for saved passwords.\n\nsources:\n  - query: |\n        SELECT Data.value as ObfuscatedPassword, FullPath, ModTime\n        FROM glob(globs=SearchRegistryGlob, accessor='reg')\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Analysis.CyberChefServer","op":"set","definition":"name: Exchange.Server.Analysis.CyberChefServer\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n  Analyze/transform data with CyberChef-server.\n\n  Note that this requires an accessible Cyberchef-server instance to\n  work.\n\n  If you prefer not to run a local instance, you might consider\n  altering the artifact to leverage something like\n  https://prod.apifor.io.\n\n  **Reference**: https://github.com/gchq/CyberChef-server\n\n  **Examples**:\n\n    This artifact can be called from within another artifact to\n    analyze/transform the data made available by that artifact.\n\n    `SELECT * from Artifact.Exchange.Analysis.CyberchefServer(Input=$YOURDATA,Recipe=$YOURRECIPE)`\n\n    If a default recipe is used, only the input will need to be passed, like so:\n\n    `SELECT * from Artifact.Exchange.Analysis.CyberchefServer(Input=$YOURDATA)`\n\n\n    The server metadata store can be used to store the URL of\n    Cyberchef-server (with a key value of `CyberChefServerURL`).\n\n    Examples of recipes can be found here:\n\n    https://github.com/mattnotmax/cyberchef-recipes\n\ntype: server\n\nparameters:\n    - name: Url\n      description: URL of CyberChef-server\n      default: https://mycyberchefserver\n    - name: Input\n      type: string\n      default:\n      description: The data to send to Cyberchef-server.\n    - name: Recipe\n      type: string\n      description: CyberChef recipe to use for processing data.\n      default:\n    - name: DisableSSLVerify\n      type: bool\n      default: True\n\nsources:\n  - queries:\n    - |\n        LET CCS_Url = if(\n                  condition=Url,\n                  then=Url,\n                  else=server_metadata().CyberChefServerURL)\n    - |\n        LET BakedData = SELECT parse_json(data=Content).value AS TransformedValue from http_client(url=CCS_Url + \"/bake\", method='POST', headers=dict(`Content-Type`='application/json'), data=dict(`input`=Input, `recipe`=parse_json_array(data=Recipe)), disable_ssl_security=DisableSSLVerify)\n    - |\n        SELECT * FROM BakedData\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.CyberTriage.Collector","op":"set","definition":"name: Exchange.CyberTriage.Collector\ndescription: \n     Runs the Cyber Triage (http://cybertriage.com) Collector to copy\n     forensic artifacts for automated analysis. The Dynamic collection\n     will include EXEs, DLLs, and other files referenced by artifacts. \n\n     The output of the collection can be saved to a Velociraptor server, \n     a Cyber Triage server, or cloud storage (S3 or Azure).\n\n     Configuration information is available at - \n         https://docs.cybertriage.com/en/latest/chapters/integrations/velociraptor_collect.html\n     \n     It requires the Velociraptor server to have copies of the Cyber Triage Deployer script and \n     optional configuration files. \n     \n     History.\n     1.0 - Initial artifact creation\n\n     Contact support@cybertriage.com with any questions.\n\n     Copyright (c) 2025 Sleuth Kit Labs LLC. All rights reserved. \n     \ntype: CLIENT\n\nresources:\n   timeout: 14400\n   max_upload_bytes: 4294967296\n\nparameters:\n   - name: PowerShellExe\n     default: \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"\n     description: Where the PowerShell executable is located, this should not be changed unless you are using \n       a newer verison of PowerShell\n     \n   - name: script_temp_location\n     default: \"C:\\\\Windows\\\\temp\\\\deploy_cyber_triage_collector.ps1\"\n     description: Where the Deployer script will be downloaded to\n\n   - name: CollectorConfig_temp_location\n     default: \"C:\\\\Windows\\\\temp\\\\CollectorConfig.yaml\"\n     description: Where the (optional) cloud storage configuration file will be copied to\n     \n   - name: filesets_temp_location\n     default: \"C:\\\\Windows\\\\temp\\\\filesets.yaml\"\n     description: Where the custom file rules configuration file will be copied to\n\n     # This needs to be updated if the Deployer script writes data to a different location\n   - name: outputFilesSpec\n     description: List of files to copy back after the Collector runs. \n     type: csv\n     default: |\n       Glob\n       Windows\\Temp\\file.json.gz*\n\n   - name: Root\n     description: |\n       On Windows, this is the device to apply all the glob on\n       (e.g. `C:`). On *NIX, this should be a path to a subdirectory or\n       /.\n     default: \"C:\"\n\n   - name: Accessor\n     default: auto\n     description: |\n       On Windows, this can be changed to `ntfs`.\n\ntools:\n  - name: deploy_cyber_triage_collector\n    serve_locally: false\n\n# TODO: Uncomment this if using cloud storage\n#  - name: CollectorConfig.yaml\n#    serve_locally: false\n\n# TODO: Uncomment this if using custom file rules\n#  - name: filesets.yaml\n#    serve_locally: false\n\n    \nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n   - name: Run Deployer Script\n     query: |\n       // Get the path to the Deployer script on the server.\n       LET collector \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n                 ToolName= \"deploy_cyber_triage_collector\", IsExecutable=FALSE,\n                 TemporaryOnly=FALSE)\n\n       // Copy powershell script from Tools to c:\\Windows\\Temp. We had escaping issues when running from the download location.\n       LET cp \u003c= SELECT copy(filename=collector[0].OSPath, accessor=\"file\", \n                             dest=script_temp_location)\n                   FROM scope()\n\n                 \n       // TODO: Uncomment below if using cloud storage config file. This copies the file from the server to temp folder. \n       //LET CollectorConfig \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n       //                            ToolName= \"CollectorConfig.yaml\", IsExecutable=FALSE,\n       //                            TemporaryOnly=FALSE)\n       //LET cp1 \u003c= SELECT copy(filename=CollectorConfig[0].OSPath, accessor=\"file\", \n       //                          dest=CollectorConfig_temp_location)\n       //                FROM scope()\n\n\n       \n       // TODO: Uncomment below if using custom file collection rules. This copies the file from the server to temp folder. \n       //LET filesets \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n       //             ToolName= \"filesets.yaml\", IsExecutable=FALSE,\n       //             TemporaryOnly=FALSE)\n       //LET cp2 \u003c= SELECT copy(filename=filesets[0].OSPath, accessor=\"file\", \n       //                          dest=filesets_temp_location)\n       //                FROM scope()\n\n       \n       // Launch the script - it will download and run the Collector\n       SELECT * FROM execve(argv=[PowerShellExe,\n                    \"-ExecutionPolicy\", \"Unrestricted\", \"-encodedCommand\",\n                 base64encode(string=utf16_encode(string=script_temp_location))])\n\n       // TODO: Remove the rest of this file if the Deployer script sends data to cloud or CT Server. \n       // This section will send the JSON file back to the server. \n   - name: Get Collector File Metadata and Upload\n     query: |\n       LET RootPath \u003c= pathspec(Path=Root, accessor=Accessor)\n\n       // Generate the collection globs for each device\n       LET specs = SELECT RootPath + Glob AS Glob\n            FROM outputFilesSpec\n            WHERE log(message=format(\n               format=\"Processing Device %v with %v: glob is %v\",\n               args=[Root, Accessor, Glob]))\n\n       // Join all the collection rules into a single Glob plugin. This ensure we\n       // only make one pass over the filesystem. We only want LFNs.\n       LET hits = SELECT OSPath AS SourceFile, Size\n        FROM glob(globs=specs.Glob, accessor=Accessor)\n        WHERE NOT IsDir AND log(message=\"Found \" + SourceFile)\n\n       // Pass all the results to the next query. This will serialize\n       // to disk if there are too many results.\n       LET all_results \u003c=\n         SELECT Size, SourceFile\n         FROM hits\n       // Upload the files\n       LET uploaded_files = SELECT * FROM foreach(row={\n          SELECT * FROM all_results\n        },\n        workers=30,\n        query={\n          SELECT SourceFile, Size,\n               upload(file=SourceFile, accessor=Accessor) AS Upload\n            FROM scope()\n        })\n\n       // Separate the hashes into their own column.\n       SELECT now() AS CopiedOnTimestamp, SourceFile,\n             Upload.Path AS DestinationFile,\n               Size AS FileSize, Upload.sha256 AS SourceFileSha256\n        FROM uploaded_files\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Applications.Cylance","op":"set","definition":"name: Exchange.Windows.Applications.Cylance\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n  Parse Cylance logs.\n\nparameters:\n  - name: FileGlob\n    default: C:\\ProgramData\\Cylance\\Status\\Status.json\n\nsources:\n  - query: |\n      LET files = SELECT * FROM glob(globs=FileGlob)\n      \n      LET parse_json_files = SELECT \n            FullPath,\n            parse_json(data=Data) as json\n        FROM read_file(filenames=FullPath)\n      \n      LET results \u003c= SELECT * FROM foreach(\n          row=files,\n          query=parse_json_files\n        )\n        \n      SELECT \n        FullPath,\n        json.SnapshotTime as SnapshotTime,\n        json.ProductInfo as ProductInfo,\n        json.Policy as Policy,\n        json.ScanState as ScanState\n      FROM results\n      \n  - name: Threats\n    queries:\n      - |\n        SELECT * FROM foreach(row={\n                SELECT json.Threats.Threat as Threats\n                FROM results\n            },\n           query={\n                SELECT * FROM foreach(row=Threats,\n                query={\n                    SELECT \n                        time_stamp,\n                        file_hash_id,\n                        file_md5,\n                        file_path,\n                        full_file_path,\n                        is_running,\n                        auto_run,\n                        file_status,\n                        file_type,\n                        score,\n                        file_size\n                    FROM scope()\n                })\n           })\n      \n  - name: Scripts\n    queries:\n      - |\n        SELECT * FROM foreach(row={\n                SELECT json.Scripts.Script as Scripts\n                FROM results\n            },\n           query={\n                SELECT * FROM foreach(row=Scripts,\n                query={\n                    SELECT \n                        EventDetail,\n                        script_path,\n                        script_name,\n                        file_hash_id,\n                        file_md5,\n                        file_sha1,\n                        drive_type,\n                        last_modified,\n                        interpreter,\n                        username,\n                        groups,\n                        sid,\n                        action\n                    FROM scope()\n                })\n           })\n\n\n  - name: Exploits\n    queries:\n      - |\n        SELECT * FROM foreach(row={\n                SELECT json.Exploits.Exploit as Exploits\n                FROM results\n            },\n           query={\n                SELECT * FROM foreach(row=Exploits,\n                query={\n                    SELECT \n                        EventDetail,\n                        ProcessId,\n                        ProcessTag,\n                        ImagePath,\n                        ImageHash,\n                        FileVersion,\n                        Username,\n                        Groups,\n                        Sid,\n                        ItemType,\n                        State,\n                        MemDefVersion,\n                        Count\n                    FROM scope()\n                })\n           })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Applications.DIEC","op":"set","definition":"name: Exchange.Windows.Applications.DIEC\ndescription: |\n    Execute DetectItEasy (console version) on specified paths and\n    return rows of results to hunt/filter on binaries based types of\n    files (E.g.: Packed binaries and its packers)\n\nauthor: Eduardo Mattos - @eduardfir\n\nreference:\n  - https://github.com/horsicq/Detect-It-Easy\n\ntype: CLIENT\n\ntools:\n  - name: DIEC\n    url: https://github.com/horsicq/DIE-engine/releases/download/3.03b/die_win64_portable_3.03.zip\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: TargetGlob\n    default: C:\\Users\\**\\*.{exe,dll}\n\n  - name: EntropyScan\n    type: bool\n\nsources:\n  - query: |\n        -- preparation\n        LET Toolzip \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"DIEC\", IsExecutable=FALSE)\n        LET TmpDir \u003c= tempdir(remove_last=TRUE)\n        LET UnzipIt \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n\n        LET Targets \u003c= SELECT FullPath FROM glob(globs=TargetGlob)\n\n        -- execute DIEC\n        LET ExecDIEC \u003c= SELECT * FROM if(condition=EntropyScan,\n                        then={ -- execute EntropyScan\n                            SELECT * FROM foreach(row=Targets,\n                                query={\n                                    SELECT parse_json(data=Stdout) as DiecOutput, FullPath\n                                    FROM execve(argv=[\n                                        TmpDir + \"/die_win64_portable/diec.exe\",\n                                        \"-e\",\n                                        \"-j\",\n                                        FullPath])\n                                })\n                        },\n                        else={ -- execute DeepScan\n                            SELECT * FROM foreach(row=Targets,\n                                query={\n                                    SELECT parse_json(data=Stdout) as DiecOutput, FullPath\n                                    FROM execve(argv=[\n                                        TmpDir + \"/die_win64_portable/diec.exe\",\n                                        \"-d\",\n                                        \"-j\",\n                                        FullPath])\n                                })\n                        })\n\n        -- format the output according to selected scan type\n        SELECT * FROM if(condition=EntropyScan,\n            then={\n                SELECT\n                    DiecOutput.records as Records,\n                    DiecOutput.status as Status,\n                    DiecOutput.total as Entropy,\n                    FullPath\n                FROM ExecDIEC\n            },\n            else={\n                SELECT\n                    dict(Arch=DiecOutput.arch,\n                    Endianess=DiecOutput.endianess,\n                    FileType=DiecOutput.filetype,\n                    Mode=DiecOutput.mode,\n                    Type=DiecOutput.type) as PEInfo,\n                    DiecOutput.detects as Detects,\n                    FullPath\n                FROM ExecDIEC\n            })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Registry.DefenderConfig","op":"set","definition":"name: Exchange.Windows.Registry.DefenderConfig\nauthor: Matt Green - @mgreen27\ndescription: |\n    Thit artifact enables extracting Windows Defender configuration from \n    SOFTWARE registry hive.\n    \n    Availible parameters enable filtering on RegKey, KeyName or KeyValue.\n    \n    1. KeyRegex - Regex for string in registry key. For example we could use \n    Exclusions\\\\Process for process exclusions\n    2. NameRegex - Regex for KeyName. For example we could use process.exe \n    for a process in exclusions or specific setting name of interest.\n    3. ValueRegex - Regex for KeyValue.\n    \ntype: CLIENT\n\nparameters:\n  - name: TargetKey\n    default: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\**\n  - name: KeyRegex\n    default: .\n    description: Regex for string in registry key. For example we could use Exclusions\\\\Process for process exclusions\n    type: regex\n  - name: NameRegex\n    default: .\n    description: Regex for KeyName. For example we could use process.exe for a process in exclusions or specific setting.\n    type: regex\n  - name: ValueRegex\n    default: .\n    description: Regex for KeyValue.\n    type: regex\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT \n        Mtime as LastWriteTime,\n        OSPath.dirname as RegKey,\n        OSPath.basename as KeyName,\n        Data.value as KeyValue,\n        Data.type as KeyType\n      FROM glob(globs=TargetKey, accessor=\"reg\")\n      WHERE NOT KeyType = 'key'\n        AND RegKey=~ KeyRegex AND KeyName=~NameRegex AND KeyValue=~ValueRegex\n      ORDER BY RegKey\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Applications.DefenderDHParser","op":"set","definition":"name: Exchange.Windows.Applications.DefenderDHParser\n\ndescription: |\n    This artifact leverages Windows Defender DetectionHistory tool to parse and return\n    the parameters of Windows Defender detections contained in Detection History files.\n\nauthor: Eduardo Mattos - @eduardfir\n\nreference: \n  - https://github.com/jklepsercyber/defender-detectionhistory-parser\n  - https://www.sans.org/blog/uncovering-windows-defender-real-time-protection-history-with-dhparser/\n\ntools:\n  - name: DHParser\n    url:  https://github.com/jklepsercyber/defender-detectionhistory-parser/archive/refs/tags/v1.0.zip\n\nparameters:\n  - name: DetectionHistoryPath\n    description: \"Path to Defender Detection History Files\"\n    default: C:\\ProgramData\\Microsoft\\Windows Defender\\Scans\\History\\Service\\\n\nsources:\n  - query: |\n        -- preparation\n        LET Hostname \u003c= SELECT Hostname as Host FROM info()\n        LET Toolzip \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"DHParser\", IsExecutable=FALSE)\n        LET TmpDir \u003c= tempdir(remove_last=TRUE)\n        LET UnzipIt \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n        LET DHParseExePath \u003c= SELECT NewPath as ExePath FROM UnzipIt\n                              WHERE OriginalPath =~ \"dhparser.exe\"\n\n        -- execute DHParser\n        LET ExecDHParser \u003c= SELECT * FROM execve(argv=[\n                        DHParseExePath.ExePath[0], \n                        \"-rgf\", DetectionHistoryPath,\n                        \"-o\", TmpDir + \"\\\\Output\"])\n               \n        -- store json files' results paths          \n        LET jsonFiles \u003c= SELECT Name, FullPath FROM glob(globs=\"/Output/*\", root=TmpDir)\n   \n        -- parse json files\n        SELECT * FROM foreach(row=jsonFiles,\n            query={\n                SELECT parse_json(data=Data) as Detection,\n                    { SELECT Host FROM Hostname } as Hostname\n                FROM read_file(filenames=FullPath)\n        })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Utils.DefenderExclusion","op":"set","definition":"name: Exchange.Windows.Utils.DefenderExclusion\n\nauthor: |\n    @predictiple - 2024-08-18\n\ndescription: |\n   **Adds a Microsoft Defender real-time scanning process exclusion for\n   Velociraptor.**\n\n   Generally you should not need to use this unless Defender is interfering\n   with your collections.\n   This may happen if the collection uses tools or associated files that\n   trigger Microsoft Defender detections.\n\n   Some initial info is also gathered to aid with troubleshooting.\n\n   The exclusion is checked every minute by default and reapplied if necessary.\n\n   As a side-effect the exclusion also makes some collection operations faster,\n   particularly those that are filesystem-intensive and that use the OS 'file'\n   accessor.\n\n   #### Notes\n\n   - Exclusions *do* apply to some Microsoft Defender for Endpoint capabilities,\n   such as attack surface reduction rules.\n   - Exclusions *do* apply to potentially unwanted apps (PUA) detections as well.\n   - Exclusions *do* apply to some ASR rule exclusions. See [Attack surface\n   reduction rules reference - Microsoft Defender Antivirus exclusions and ASR\n   rules](https://learn.microsoft.com/en-us/defender-endpoint/attack-surface-reduction-rules-reference#microsoft-defender-antivirus-exclusions-and-asr-rules).\n   - Excluded files can still trigger Endpoint Detection and Response (EDR)\n   alerts and other detections. To exclude files broadly, add them to the\n   Microsoft Defender for Endpoint custom indicators.\n   - See References below to learn more about Defender exclusions in general.\n\n   A more compact version of this artifact is listed below which can be included\n   in the client configuration, as shown, and run with the\n   `Client.additional_event_artifacts` setting. This will run the artifact\n   as an event artifact as long as the client is running, starting even before\n   enrollment. This may be useful if there are specific clients where Defender\n   is causing problems.\n\n   ```yaml\n   autoexec:\n     artifact_definitions:\n     - name: Windows.Utils.DefenderExclusionCompact\n       precondition: SELECT OS From info() where OS = \"windows\"\n       parameters:\n         - name: CmdApply\n           default: \"powershell.exe -ExecutionPolicy Unrestricted -encodedCommand\"\n       sources:\n         - query: |\n             LET schedule = SELECT * FROM clock(period=60)\n             LET HostInfo \u003c= SELECT * FROM info()\n             SELECT {\n                      SELECT *\n                      FROM execve(\n                        argv=[commandline_split(command=CmdApply) + base64encode(\n                          string=utf16_encode(\n                            string=format(\n                              format='Add-MpPreference -ExclusionProcess \"%v\"',\n                              args=HostInfo[0].Exe)))])\n                      WHERE log(\n                        message=\"Applied process exclusion: %v\",\n                        args=HostInfo[0].Exe,\n                        level=\"INFO\")\n                    }\n             FROM schedule\n    Client:\n      additional_event_artifacts:\n      - Windows.Utils.DefenderExclusionCompact\n    ```\n\nreference:\n  - https://learn.microsoft.com/en-us/defender-endpoint/defender-endpoint-antivirus-exclusions\n  - https://learn.microsoft.com/en-us/previous-versions/windows/desktop/defender/add-msft-mppreference\n  - https://learn.microsoft.com/en-us/defender-endpoint/configure-local-policy-overrides-microsoft-defender-antivirus\n  - https://cloudbrothers.info/en/guide-to-defender-exclusions/\n\ntype: CLIENT_EVENT\n\nrequired_permissions:\n  - EXECVE\n\nprecondition: SELECT OS From info() where OS = \"windows\"\n\nparameters:\n\n   - name: CmdApply\n     default: \"powershell.exe -ExecutionPolicy Unrestricted -encodedCommand\"\n\nsources:\n\n  - name: InitialExclusions\n    query: |\n      LET MpPreference \u003c= SELECT *\n                          FROM wmi(query='SELECT * FROM MSFT_MpPreference',\n                                   namespace='root/microsoft/windows/defender')\n\n      SELECT * FROM column_filter(query=MpPreference, include=\"Exclusion\")\n\n  - name: ApplyExclusion\n    query: |\n      -- Check on a schedule that the exclusion is still being applied\n      LET schedule = SELECT * FROM clock(period=60)\n\n      -- Get the Velociraptor exe location\n      LET HostInfo \u003c= SELECT * FROM info()\n\n      -- Checking is not really necessary because adding exclusions is an\n      -- idempotent operation but it's useful to see it in the log\n      LET ExclusionCheck(VelociExe) =\n                SELECT ExclusionProcess\n                FROM wmi(query='SELECT * FROM MSFT_MpPreference', namespace='root/microsoft/windows/defender')\n                WHERE VelociExe IN ExclusionProcess\n                AND log(message=\"WMI check: %v is excluded\", args=ExclusionProcess, dedup=-1, level=\"INFO\")\n\n      LET ExclusionApply(VelociExe) =\n                SELECT *\n                FROM execve(argv=[commandline_split(command=CmdApply) + base64encode(string=utf16_encode(\n                        string=format(format='Add-MpPreference -ExclusionProcess \"%v\"',args=VelociExe)))])\n                WHERE log(message=\"Applied process exclusion: %v\", args=VelociExe, dedup=-1, level=\"INFO\")\n\n      SELECT if(condition= NOT ExclusionCheck(VelociExe=HostInfo[0].Exe),\n             then={ SELECT ExclusionApply(VelociExe=HostInfo[0].Exe) FROM scope() })\n      FROM schedule\n\n\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Applications.DefenderQuarantineExtract","op":"set","definition":"name: Exchange.Windows.Applications.DefenderQuarantineExtract\nauthor: \"Eduardo Mattos - @eduardfir\"\ndescription: |\n   Extracts Quarantine Files from Windows Defender.\n\n   This artifact decrypts the RC4 encrypted Windows Defender Quarantined files\n   and returns information about it. If it is a PE, it also parses the PE.\n\n   You may also choose to upload the extracted binaries for deeper malware analysis.\n\nreference:\n  - https://reversingfun.com/posts/how-to-extract-quarantine-files-from-windows-defender\n\ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     description: Target Files\n     default: C:/ProgramData/Microsoft/Windows Defender/Quarantine/ResourceData/*/*\n   - name: UploadDecodedFiles\n     description: Select to upload decoded quarantined files.\n     type: bool\n   - name: DefenderRC4KeyHex\n     default: \"1e87781b8dbaa844ce69702c0c78b786a3f623b738f5edf9af83530fb3fc54faa21eb9cf1331fd0f0da954f687cb9e18279697900e53fb317c9cbce48e23d05371ecc15951b8f3649d7ca33ed68dc9047e82c9baad9799d0d458cb847ca9ffbe3c8a775233557dde13a8b14087cc1bc8f10f6ecdd083a959cff84a9d1d50755e3e191818af23e2293558766d2c07e25712b2ca0b535ed8f6c56ce73d24bdd0291771861a54b4c285a9a3db7aca6d224aeacd621db9f2a22ed1e9e11d75bed7dc0ecb0a8e68a2ff1263408dc808dffd164b116774cd0b9b8d05411ed6262e429ba495676b8398db2f35d3c1b9ced52636f2765e1a95cb7ca4c3ddabddbff38253\"\n\nsources:\n  - query: |\n        LET Targets \u003c= SELECT Mtime, Name, OSPath FROM glob(globs=TargetGlob)\n\n        LET DefenderRC4Key \u003c= unhex(string=DefenderRC4KeyHex)\n\n        LET DeQuarantine = SELECT read_file(filename=crypto_rc4(key=DefenderRC4Key, string=read_file(filename=OSPath, accessor=\"file\")), accessor=\"data\", offset=204) as DecodedFile,\n                            Name,\n                            OSPath,\n                            Mtime\n                           FROM Targets\n\n        LET TempQuery = SELECT magic(path=DecodedFile, accessor=\"data\") as Magic,\n                            hash(path=DecodedFile, accessor=\"data\") as Hash,\n                            DecodedFile,\n                            Name,\n                            OSPath,\n                            Mtime\n                        FROM DeQuarantine\n\n        SELECT\n            Mtime,\n            Magic,\n            parse_pe(file=DecodedFile, accessor=\"data\") as ParsedPE,\n            Hash,\n            OSPath,\n            if(condition=UploadDecodedFiles,\n             then={\n                SELECT\n                upload(file=DecodedFile,\n                    accessor=\"data\",\n                    name=Name + \"_Defender_Quarantine_Extract.bin\") as FileDetails\n                FROM TempQuery\n             }) as Upload\n        FROM TempQuery\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Utils.DeleteClientLabel","op":"set","definition":"name: Exchange.Server.Utils.DeleteClientLabel\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact completely removes a client from the data store if a configured\n  label is set.\n\n  We reccomend running as a server artifact then if happy with actions add as an\n  action for monitoring.\n\n  Be careful with this one: there is no way to recover old\n  data. However, if the client still exists, it will just\n  automatically re-enroll when it next connects. You will still be able\n  to talk to it, it is just that old collected data is deleted.\n\ntype: SERVER\n\nparameters:\n  - name: LabelToDelete\n    description: A label to delete the client if applied to machine.\n    default: todelete\n  - name: ReallyDoIt\n    description: If you really want to delete the client, check this.\n    type: bool\n\nsources:\n  - query: |\n        LET to_remove = SELECT\n            client_id AS ClientId,\n            os_info.hostname as Hostname,\n            timestamp(epoch=first_seen_at) AS FirstSeen,\n            timestamp(epoch=last_seen_at) AS LastSeen,\n            agent_information.version AS AgentVersion,\n            agent_information.build_time AS AgentBuildTime,\n            os_info.release as OS,\n            os_info.machine as Architecture,\n            os_info.fqdn as Fqdn,\n            last_ip AS LastIp,\n            labels,\n            os_info.mac_addresses as mac_addresses\n        FROM clients()\n        WHERE LabelToDelete IN labels\n\n        LET deleted_files \u003c= SELECT *\n            FROM client_delete(client_id=to_remove.ClientId, really_do_it=ReallyDoIt)\n\n        SELECT *,\n            {\n                SELECT vfs_path\n                FROM deleted_files\n                WHERE client_id = ClientId\n            } AS DeletedFiles,\n            {\n                SELECT type\n                FROM deleted_files\n                WHERE client_id = ClientId\n                GROUP BY type\n            } AS DeletedFileType,\n            {\n                SELECT really_do_it\n                FROM deleted_files\n                WHERE client_id = ClientId\n                GROUP BY really_do_it\n            } AS really_do_it\n        FROM to_remove\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Import.DetectRaptor","op":"set","definition":"name: Exchange.Server.Import.DetectRaptor\nauthor: Matt Green - @mgreen27\ndescription: |\n   DetectRaptor is a collection of publicly availible Velociraptor detection content. \n   Most content is managed by a series of csv files and artifacts are automatically updated.\n   \n   This artifact will import the latest DetectRaptor bundle into the current server.\n   \n   A SHA1 of the imported DetectRaptor collection is stored in server metadata \n   for versioning.  \n   A SHA1 of each artifact is generated on import to enable versioning confirmation.\n   \n   Last updated: 2023-09-09.   \n\n   Current artifacts include:  \n   \n   - Windows.Detection.Amcache\n   - Windows.Detection.Applications\n   - Windows.Detection.BinaryRename\n   - Windows.Detection.Evtx\n   - Windows.Detection.HijackLibsEnv\n   - Windows.Detection.HijackLibsMFT\n   - Windows.Detection.LolDrivers\n   - Windows.Detection.MFT\n   - Windows.Detection.NamedPipes\n   - Windows.Detection.Powershell.ISEAutoSave\n   - Windows.Detection.Powershell.PSReadline\n   - Windows.Detection.Webhistory\n   - Windows.Detection.ZoneIdentifier\n   - Server.StartHunts\n\nreference:\n  - https://github.com/mgreen27/DetectRaptor\n  - https://github.com/svch0stz/velociraptor-detections\n  - https://github.com/SigmaHQ/sigma\n\ntype: SERVER\n\nrequired_permissions:\n- SERVER_ADMIN\n\nparameters:\n   - name: ReleaseURL\n     default: https://api.github.com/repos/mgreen27/DetectRaptor/releases\n   - name: Prefix\n     default: DetectRaptor.\n     description: Prefix to append to all imported artifacts.\n   - name: UpdateAnyway\n     type: bool\n     description: Import all artifacts even if previous version matches\n\nsources:\n  - query: |\n      -- first check for version timestamp and find zip url\n      LET content \u003c= SELECT parse_json_array(data=Content)[0].assets[0] as Content \n        FROM http_client(url=ReleaseURL, headers=dict(`User-Agent`=\"Velociraptor - DetectRaptor\"))\n      LET check_version = SELECT Content.browser_download_url as TargetUrl,\n            Content.updated_at as ZipTimestamp,\n            if(condition= server_metadata().DetectRaptor,\n                        then= parse_json(data=server_metadata().DetectRaptor).Timestamp\n                            ) as InstalledTimestamp\n        FROM content\n        WHERE UpdateAnyway \n           OR NOT server_metadata().DetectRaptor\n           OR NOT InstalledTimestamp \n           OR InstalledTimestamp \u003c ZipTimestamp\n                           \n      -- get content return a row if new content or UpdateAnyway\n      LET get_content = SELECT ZipPath,ZipTimestamp,ZipSHA1\n        FROM foreach(row= check_version,\n            query={ \n                SELECT Content as ZipPath, \n                    ZipTimestamp,\n                    hash(path=Content,hashselect='SHA1').SHA1 as ZipSHA1 ,\n                    if(condition= server_metadata().DetectRaptor,\n                        then= parse_json(data=server_metadata().DetectRaptor).SHA1\n                            ) as InstalledZipSHA1\n                FROM http_client(remove_last=TRUE, \n                    tempfile_extension=\".zip\", url=TargetUrl,\n                    headers=dict(`User-Agent`=\"Velociraptor - DetectRaptor\"))\n                WHERE NOT if(condition= UpdateAnyway,\n                            then= False,\n                            else= ZipSHA1 = InstalledZipSHA1 )\n            })\n                        \n      -- extract and set artifacts\n      LET set_artifacts \u003c= SELECT \n            artifact_set(prefix=Prefix, definition=Definition) AS Definition,\n            SHA1,\n            ZipTimestamp,ZipSHA1\n        FROM foreach(row=get_content, \n            query={\n              SELECT read_file(accessor=\"zip\", filename=OSPath) AS Definition,\n                hash(path=OSPath,accessor='zip',hashselect='SHA1').SHA1 as SHA1,\n                ZipTimestamp,ZipSHA1\n              FROM glob(\n                 globs='/**/*.yaml',\n                 root=pathspec(\n                    DelegateAccessor=\"auto\",\n                    DelegatePath=ZipPath),\n                 accessor=\"zip\")\n            })\n            \n      -- Add new sha1 if set_artifacts\n      LET add_new_metadata \u003c= SELECT ZipSHA1,ZipTimestamp,\n            server_set_metadata(\n                metadata=dict(DetectRaptor=dict(\n                    Timestamp=ZipTimestamp,\n                    SHA1=ZipSHA1 ))) as SetMeta\n        FROM set_artifacts\n        WHERE log(level='INFO',\n                message='DetectRaptor Server MetaData added: Timestamp=%v,SHA1=%v',\n                args=[ZipTimestamp,ZipSHA1] )\n        GROUP BY ZipSHA1\n\n      SELECT Definition.name AS Name,\n        Definition.description AS Description,\n        Definition.author AS Author,\n        SHA1\n      FROM set_artifacts\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Detection.Application.CursedChrome","op":"set","definition":"name: Exchange.Detection.Application.CursedChrome\nauthor: Matt Dri - @mattdri-ir\ndescription: |\n   Detects the [Cursed Chrome](https://github.com/mandatoryprogrammer/CursedChrome) extension. Starts by searching for permissive extensions configured within `Secure Preferences`. Locates the path of the extensions and scans using Yara.\n\ntype: CLIENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'darwin'\n\n    query: |\n        LET yaraScan = '''\n        rule cursed_chrome\n        {\n            strings:\n                $s0 = \"new WebSocket(\\\"ws://\"\n                $s1 = \"new WebSocket(\\\"wss://\"\n                $s2 = \"[1e7]+-1e3+-4e3+-8e3+-1e11\"\n            condition:\n                ($s0 or $s1) and $s2\n        }\n        '''\n        \n        LET ext = SELECT parse_json(data=read_file(filename=FullPath)).extensions.settings AS ext\n          FROM glob(\n            globs=['''*:\\Users\\*\\AppData\\Local\\Google\\Chrome\\User Data\\*\\Secure Preferences''', '''/Users/*/Library/Application Support/Google/Chrome/*/Secure Preferences'''])\n            \n        LET ext_of_interest = SELECT _value.path AS path\n          FROM flatten(\n            query={\n              SELECT _value\n              FROM foreach(\n                row={\n                  SELECT items(item=ext) AS config\n                  FROM ext\n                },\n                column=[\"config\"])\n            })\n          WHERE _value.granted_permissions.api =~ \"webRequest\"\n           and (_value.granted_permissions.explicit_host =~ \"\u003call_urls\u003e\" or _value.granted_permissions.explicit_host =~ \"https://*/*\")\n        \n        SELECT *\n        FROM foreach(\n          row={\n            SELECT FullPath\n            FROM foreach(\n              row={\n                SELECT path\n                FROM ext_of_interest\n              },\n              query={\n                SELECT *\n                FROM glob(root=path,\n                          globs=\"**\")\n                WHERE NOT IsDir\n              })\n          },\n          query={\n            SELECT *\n            FROM yara(files=FullPath,\n                      rules=yaraScan)\n          })\n\n\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Docker.Image.Export","op":"set","definition":"name: Exchange.Docker.Image.Export\nauthor: Brady Semm - @btsemm / DoppioRistretto\ndescription: |\n    Uses the Docker UNIX socket to export a Docker image to a\n    tempfile and upload to Velociraptor.\n    \n    Analysis Tips:  \n        - https://jellyparks.com/posts/compromised-container-analysis-primer/\n\n    #docker\n    \nparameters:\n  - name: dockerSocket\n    description: |\n      Docker server socket. You will normally need to be root to connect.\n    default: /var/run/docker.sock\n  - name: ImageNameOrID\n    description: |\n      Docker Image name or ID to export. Can include tag (eg. \"image:latest\")\n    default: empty\n\nsources:\n  - precondition: |\n      SELECT OS From info() where OS = 'darwin' OR OS = 'linux'\n    query: |\n\n        LET EncodedImageNameOrID = regex_replace(source=ImageNameOrID, replace_lambda=\"x=\u003eformat(format='%%%02x',args=x)\", re=\"[^a-z0-9\\\\-_.~?]\")\n        LET docker_api_path = format(format=\"%v:unix/images/%v/get\", args=[dockerSocket, EncodedImageNameOrID])\n        LET response \u003c= SELECT Content FROM http_client(url=docker_api_path, tempfile_extension=\".tar\", remove_last=true)\n        \n        SELECT upload(file=response.Content) from scope()\n\n        \n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.ESET.Logs","op":"set","definition":"name: Exchange.Windows.ESET.Logs\nauthor: Ján Trenčanský - j91321@infosec.exchange\ndescription: |\n   Parse logs from ESET antivirus products. This log contains information about detections made by the ESET modules such as Real-time filesystem proteciton, Firewall, HIPS, Device Control, HTTP filter, AMSI Scanner etc.\n \ntype: CLIENT\n \ntools:\n  - name: ESETLogCollector\n    url: https://download.eset.com/com/eset/tools/diagnosis/log_collector/latest/esetlogcollector.exe\n    expected_hash: c5c9b4ec7feca3f3ac43c71454e7e51f13f19ce52a0583d34b32f7df4bbea5db\n    serve_locally: true\n \nprecondition: SELECT OS From info() where OS = 'windows'\n \nparameters:\n   - name: LogTargets\n     default: \"Threat,Hips,Fw,Web,Dev,BlkF\"\n     description: Selection of log targets to collect\n \nrequired_permissions:\n- EXECVE\n \nsources:\n  - name: Antivirus\n    query: |\n        LET tool \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"ESETLogCollector\")\n        LET tempfolder \u003c= tempdir(remove_last=true)\n        LET exe \u003c= SELECT * FROM execve(argv= [ tool[0].OSPath,\n           \"/accepteula\", \"/OType:xml\", \"/Targets:\"+LogTargets, tempfolder+'\\\\logstmp.zip' ], length=10000000)\n        LET zip \u003c= SELECT * FROM unzip(filename=tempfolder+'\\\\logstmp.zip',output_directory=tempfolder+'\\\\logs')\n         \n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Common\\\\virlog.dat.xml')\n        SELECT * FROM foreach(\n            row=xml.entries,\n            query={SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'virlog.dat' AS Log, _value.Threat AS Threat, _value.AttrLevel AS Level, _value.Action AS Action, _value.Name AS Object, _value.Col7 AS SHA1, _value.Info AS Information, _value.Col8 AS Firstseen, _value.Scanner AS Scanner, _value.Object AS ObjectType, _value.User AS User, _value.AttrDeleted AS DeletedInLog FROM foreach(row=_value)})\n            \n  - name: HIPS\n    query: |\n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Common\\\\hipslog.dat.xml')\n        SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'hipslog.dat' AS Log, _value.Rule AS RuleName, _value.AttrLevel AS Level, _value.Action AS Action, _value.Application AS Application, _value.Application_Hash AS ApplicationSHA1, _value.Target AS Target, _value.Target_Hash AS TargetSHA1, _value.AttrDeleted AS DeletedInLog FROM foreach(\n            row=xml.entries,\n            query={SELECT * FROM foreach(row=_value)})  \n             \n  - name: Firewall\n    query: |\n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Net\\\\epfwlog.dat.xml')\n        SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'epfwlog.dat' AS Log, _value.Event AS Event, _value.Rule_worm_name AS RuleName, _value.AttrLevel AS Level, _value.Action AS Action, _value.Source AS Source, _value.Target AS Target, _value.Protocol AS Protocol, _value.Application AS Application, _value.Hash AS SHA1, _value.User AS User, _value.AttrDeleted AS DeletedInLog FROM foreach(\n            row=xml.entries,\n            query={SELECT * FROM foreach(row=_value)})\n             \n  - name: FilteredWebsites\n    query: |\n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Net\\\\urllog.dat.xml')\n        SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'urllog.dat' AS Log, _value.URL AS URL, _value.Status AS Action, _value.Detection AS Threat, _value.AttrLevel AS Level, _value.Application AS Application, _value.Hash AS SHA1, _value.User AS User, _value.IP_address AS IPAddress, _value.AttrDeleted AS DeletedInLog FROM foreach(\n            row=xml.entries,\n            query={SELECT * FROM foreach(row=_value)})\n             \n  - name: BlockedFiles\n    query: |\n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Common\\\\blocked.dat.xml')\n        SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'blocked.dat' AS Log, _value.File AS File, _value.Source AS Blocker, _value.Reason AS Reason, _value.AttrLevel AS Level, _value.Application AS Application, _value.Hash AS SHA1, _value.User AS User, _value.First_seen_here AS FirstSeen, _value.AttrDeleted AS DeletedInLog FROM foreach(\n            row=xml.entries,\n            query={SELECT * FROM foreach(row=_value)})\n             \n  - name: DeviceControl\n    query: |\n        LET xml \u003c= SELECT get(item=parse_xml(file=OSPath), member='Events.Event') AS entries FROM glob(globs=tempfolder+'\\\\logs\\\\ESET\\\\Logs\\\\Common\\\\devctrllog.dat.xml')\n        SELECT _value.AttrIdx AS ID, _value.AttrTime AS Timestamp, 'devctrllog.dat' AS Log, _value.Device AS Device, _value.Status AS Action, _value.AttrLevel AS Level, _value.User AS User, _value.User_SID AS SID, _value.Group AS Group, _value.Group_SID AS GroupSID, _value.Device_details AS DeviceDetails, _value.Event_details AS EventDetails, _value.AttrDeleted AS DeletedInLog FROM foreach(\n            row=xml.entries,\n            query={SELECT * FROM foreach(row=_value)})","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Detection.EffluenceWebshell","op":"set","definition":"name: Exchange.Generic.Detection.EffluenceWebshell\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact detects Effluence Webshell observed deployed during exploitation \n  of Atlassian Confluence CVE-2023-22515.\n\nreference:\n    - https://www.aon.com/cyber-solutions/aon_cyber_labs/detecting-effluence-an-unauthenticated-confluence-web-shell/\n    \ntype: CLIENT\n\nparameters:\n  - name: ProcessRegex\n    default: java\n    type: regex\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: YaraRule\n    type: yara\n    default: |\n      rule ConfluencePageIndicator {\n        meta:\n            description = \"Detects strings indicative of a web shell in Confluence page\"\n            author = \"Stroz Friedberg\"\n            date = \"2023-11-06\"\n    \n        strings:\n            $confluence_title = \"\u003ctitle\u003e - Confluence\u003c/title\u003e\" ascii wide\n            $hide_plugin_function = \"hidePlugin(\" ascii wide\n            $system_plugin_key = \"ALWAYS_SYSTEM_PLUGIN_KEYS\" ascii wide\n            $dashes = \" ----- \" ascii wide\n    \n        condition:\n            $confluence_title and $hide_plugin_function and $dashes and $system_plugin_key\n      }\n  - name: NumberOfHits\n    description: THis artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int64\n\n\nsources:\n  - query: |\n      LET linux = SELECT * FROM Artifact.Linux.Detection.Yara.Process(\n                            ProcessRegex=ProcessRegex,\n                            PidRegex=PidRegex,\n                            YaraRule=YaraRule,\n                            NumberOfHits=NumberOfHits,\n                            ContextBytes=ContextBytes )\n\n      LET windows = SELECT * FROM Artifact.Windows.Detection.Yara.Process(\n                            ProcessRegex=ProcessRegex,\n                            PidRegex=PidRegex,\n                            YaraRule=YaraRule,\n                            NumberOfHits=NumberOfHits,\n                            ContextBytes=ContextBytes )\n        \n      LET system = SELECT OS From info() where OS\n      \n      SELECT * FROM if(condition= system[0].OS=windows,\n                        then= windows,\n                        else= linux )\n                            \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Label.User","op":"set","definition":"name: Exchange.Label.User\ndescription: |\n   This artifact watches for new client enrollments and automatically\n   label the client with the required label if the user exists.\n\n   This artifact can be the starting point for automatically labeling\n   a machine based on any other property - just change the artifact to\n   watch and the result filter.\n\n   #server #event #labels\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: Label\n    default: MikesBox\n  - name: NameRegex\n    default: mike\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET user_flows = SELECT *\n        FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n        WHERE Flow.artifacts_with_results =~ \"Generic.Client.Info/Users\"\n\n        LET results = SELECT *,\n           label(client_id=ClientId, labels=Label, op=\"set\")\n           FROM source(artifact=\"Generic.Client.Info/Users\" ,\n                       client_id=ClientId, flow_id=FlowId)\n           WHERE Name =~ NameRegex\n\n        SELECT * FROM foreach(row=user_flows, query=results)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Enrichment.Gimphash","op":"set","definition":"name: Exchange.Server.Enrichment.Gimphash\ndescription: |\n    Calculate the Gimphash for a Golang binary.\n    \n    See: https://github.com/NextronSystems/gimphash\n    \n    This artifact can be called from within another artifact (such as one looking for Golang binaries) to enrich the data made available by that artifact.\n  \n    Ex.\n  \n    `SELECT * from Artifact.Server.Enrichment.Gimphash(File=$YOURFILE)`\n    \n    NOTE: You will need to change the tool URL if using Linux as your server OS.\n    \nauthor: Wes Lambert -- @therealwlambert\ntools:\n  - name: Gimphash\n    url: https://github.com/NextronSystems/gimphash/releases/download/0.2.0/go_gimphash_windows.exe\nparameters:\n  - name: File\n    type: string\n    description: File for which Gimphash is to be calculated\n    default:\nsources:\n  - query: |\n        LET GH \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Gimphash\", IsExecutable=FALSE)\n        LET ExecGH \u003c= SELECT * FROM execve(argv=[\n                        GH.FullPath[0], File])\n        SELECT grok(grok=(\"%{DATA:gimphash} %{GREEDYDATA:file}\"), data=Stdout).file AS File, grok(grok=(\"%{DATA:gimphash} %{GREEDYDATA:file}\"), data=Stdout).gimphash AS Gimphash FROM ExecGH \n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Hayabusa.Takajo","op":"set","definition":"name: Exchange.Windows.EventLogs.Hayabusa.Takajo\ndescription: |\n   [Takajo] (https://github.com/Yamato-Security/takajo) is a fast forensics analyzer\n   for Hayabusa results written in Nim. Takajō means \"Falconer\" in Japanese\n   and was chosen as it analyzes Hayabusa's \"catches\" (results).\n   \n   First, it will call Exchange.Windows.EventLogs.Hayabusa to execute the following commandline to create the hayabusa_results.jsonl: \"hayabusa.exe json-timeline -d \u003cEVTX-DIR\u003e -L -o hayabusa_results.jsonl -w -p verbose\"\n   Then, it will be launched Takajo with \"automagic\" option: which executes as many commands as possible and output results to a \"case-0\" folder and will upload all the content with the following commandline: \"takajo.exe automagic -t hayabusa_tempdir/ -o case-0 \"\n   All the output results will be uploaded.\n\nauthor: Eric Capuano - @eric_capuano, Whitney Champion - @shortxstack, Zach Mathis - @yamatosecurity\n\ntools:\n - name: Hayabusa-2.14.0\n   url: https://github.com/Yamato-Security/hayabusa/releases/download/v2.14.0/hayabusa-2.14.0-win-x64.zip\n   expected_hash: de8abff4f6ed35f28e1e2897659e4f7adcca13ef84d2764afa786ca3f60224ec\n - name: Takajo-2.5.0\n   url: https://github.com/Yamato-Security/takajo/releases/download/v2.5.0/takajo-2.5.0-win.zip\n   expected_hash: bba76ce84484c53145f7df368560cfeae267729df9c404e570ee7fb544c86b01\n\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n - name: EvtxDirectory\n   description: \"Directory of .evtx files\"\n   default: C:/Windows/System32/winevt/Logs\n\nsources:\n - name: Upload\n   query: |\n        -- Fetch the binary\n        LET ToolzipHB \u003c= SELECT FullPath\n        FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Hayabusa-2.14.0\", IsExecutable=FALSE)\n\n        LET TmpDirHB \u003c= tempdir()\n\n        -- Unzip the binary\n        LET _ \u003c= SELECT *\n        FROM unzip(filename=ToolzipHB.FullPath, output_directory=TmpDirHB)\n\n        LET HayabusaExe \u003c= TmpDirHB + '\\\\hayabusa-2.14.0-win-x64.exe'\n        LET HayabusaCmd \u003c= \"json-timeline\"\n        LET ResultFileHB \u003c= TmpDirHB + '\\\\hayabusa_results.jsonl'\n\n        -- Build the command line considering all options\n        -- If it does not match if(condition...), it returns Null, so remove Null with filter(....regex=\".+\")\n        LET cmdlineHB \u003c= filter(list=(\n          HayabusaExe, HayabusaCmd,\n          \"-d\", EvtxDirectory,\n          \"-L\",\n          \"-o\", ResultFileHB,\n          \"-w\",\n          \"-p\", \"verbose\",\n        ), regex=\".+\")\n\n        -- Run the tool and divert messages to logs.\n        LET ExecHB \u003c= SELECT *\n        FROM execve(argv=cmdlineHB, sep=\"\\n\", length=9999999)\n        WHERE log(message=Stdout)\n\n        -- Fetch the binary\n        LET ToolzipTK \u003c= SELECT FullPath\n        FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Takajo-2.5.0\", IsExecutable=FALSE)\n\n        -- Unzip the binary\n        LET _ \u003c= SELECT *\n        FROM unzip(filename=ToolzipTK.FullPath, output_directory=TmpDirHB)\n\n        LET TakajoExe \u003c= TmpDirHB + '\\\\takajo.exe'\n        LET TakajoCmd \u003c= \"automagic\"\n        LET ResultFileTK \u003c= TmpDirHB + '\\\\case-0\\\\'\n\n        -- Build the command line considering all options\n        -- If it does not match if(condition...), it returns Null, so remove Null with filter(....regex=\".+\")\n        LET cmdlineTK \u003c= filter(list=(\n          TakajoExe, TakajoCmd,\n          \"-q\",\n          \"-s\",\n          \"-t\", TmpDirHB, \n          \"-o\", ResultFileTK,\n        ), regex=\".+\")\n\n        -- Run the tool and divert messages to logs.\n        LET ExecTK \u003c= SELECT *\n        FROM execve(argv=cmdlineTK, sep=\"\\n\", length=99999999)\n        WHERE log(message=Stdout)\n\n        -- Upload the results folder.\n        SELECT upload(file=OSPath, accessor=directory) AS Uploads FROM glob(globs=\"*\\**\", root=ResultFileTK)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.System.PowerShell.DetectResponder","op":"set","definition":"name: Exchange.Windows.System.PowerShell.DetectResponder\nauthor: \"Dhruv Majumdar, Jamie Bhoohe\"\ndescription: |\n  This artifact allows to detect responder in the environment\n  https://tcm-sec.com/llmnr-poisoning-and-how-to-prevent-it/\ntype: CLIENT_EVENT\nrequired_permissions:\n  - EXECVE\n\nprecondition:\n  SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: PowerShellExe\n    default: \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"\n  - name: ReloadPeriod\n    description: Checks for responder activity\n    default: \"600\"\n    type: int\n\nsources:\n  - query: |\n     SELECT * FROM foreach(\n        row={\n            SELECT * FROM clock(period=ReloadPeriod)\n        },\n        query={\n            SELECT * FROM execve(argv=[PowerShellExe,\n            \"-ExecutionPolicy\", \"Unrestricted\", '''$llmnr = (Resolve-DnsName -LlmnrOnly evilname) 2\u003e $NULL \n            if ($llmnr) { \n            $evil_IP = $llmnr.IPAddress -Join \", \" \n            $msg = \"Subject: HIGH SEV - Responder Detcted `nDomain: $env:USERDNSDOMAIN `nHostname: ${env:computername} `nRouge LLMNR Server: $evil_IP\" \n            echo $msg \n            }'''])\n            WHERE log(message=\"Responder Detection Running\")\n        })\n\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Binary.Exports","op":"set","definition":"name: Exchange.Windows.Binary.Exports\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact can be used to extract all binary exports to research\n   potential lolbins.  Selecting the AllBinaryInfo tickbox will return\n   complete Binary information.\n\ntype: CLIENT\n\nparameters:\n  - name: TargetGlob\n    default: C:/ProgramData/*\n    description: Glob to target\n  - name: AllBinaryInfo\n    type: bool\n    description: Select to extract all binary info\n\nsources:\n  - query: |\n      Let Targets = SELECT * FROM glob(globs=TargetGlob)\n        WHERE NOT IsDir\n\n      LET all_binary_info = SELECT\n            dict(OSPath=OSPath,Name=Name,Size=Size,IsLink=IsLink) as FileDetails,\n            dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as SI,\n            parse_pe(file=OSPath) as BinaryInfo,\n            authenticode(filename=OSPath) as Authenticode,\n            hash(path=OSPath) as Hash\n          FROM Targets\n          WHERE BinaryInfo\n\n      LET binary_exports = SELECT\n            dict(OSPath=OSPath,Name=Name,Size=Size,IsLink=IsLink) as FileDetails,\n            parse_pe(file=OSPath).Exports as Exports\n          FROM Targets\n          WHERE Exports\n\n      SELECT * FROM if(condition=AllBinaryInfo,\n            then=all_binary_info,\n            else=binary_exports)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Applications.FTKImager","op":"set","definition":"name: Exchange.Windows.Applications.FTKImager\ndescription: |\n    Create an E01 Image of the C drive using FTK Imager (Command Line\n    Version)\n\n    SourceDriveToImage usually will be 0 (as in \\\\.\\PHYSICALDRIVE0)\n    for the C: drive, on a Windows system.\n\n    If you intend to image the secondary drive, use, for example,\n    SourceDriveToImage = 1, for \\\\.\\PHYSICALDRIVE1\n\nauthor: Eduardo Mattos - @eduardfir\n\nreference:\n  - https://accessdata.com/products-services/forensic-toolkit-ftk/ftkimager\n\ntype: CLIENT\n\ntools:\n  - name: FTKImager\n    url: https://ad-zip.s3.amazonaws.com/FTKImager.3.1.1_win32.zip\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: SourceDriveToImage\n    default: \"0\"\n\n  - name: OutputPath\n    default: \"D:\\\\E01\"\n\nsources:\n  - query: |\n      -- get context on target binary\n      LET bin \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n                    ToolName=\"FTKImager\")\n\n      LET tmpdir \u003c= tempdir()\n\n      LET zip_file \u003c= SELECT *\n                        FROM unzip(filename=bin[0].FullPath,\n                        output_directory=tmpdir)\n                        WHERE OriginalPath =~ \"ftkimager.exe\"\n\n      -- execute payload\n        SELECT Stdout, Stderr\n        FROM execve(argv=[\n            zip_file.NewPath[0],\n            \"\\\\\\\\.\\\\PHYSICALDRIVE\" + SourceDriveToImage,\n            OutputPath])\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Forensics.FileZilla","op":"set","definition":"name: Exchange.Windows.Forensics.FileZilla\ndescription: |\n   This artifact enumerate's all user directories on a system and will\n   parse three files within a users AppData\\Roaming\\FileZilla\n   directory: filezilla.xml, recentservers.xml, and queue.sqlite3\n   \n   The three files provide valuable data to incident responders if data was\n   exfiltrated using FileZilla.\n   \n   - filezilla.xml - contains saved user settings\n   - recentservers.xml - contains recently accessed servers\n   - queue.sqlite3 - contains multiple tables that can be used to identify what\n   files were exfiltrated and to where (remote hostname and file path).\n   \n   Using the sqlite() plugin, VR will parse user's queue.sqlite3 file and\n   join data from various tables.\n   \n   You can read more about filezilla.xml and recentservers.xml forensic\n   artifacts here: \n   https://www.hecfblog.com/2013/09/daily-blog-93-filezilla-artifacts.html\n   \n   The queue.sqlite3 does not have much documentation out there that I could\n   find. However, it is a sqlite database that contains 5 tables: files,\n   local_paths, remote_paths, servers, and sqlite_sequence that provide \n   valuable information to incident responders and shed light on what data\n   was exfiltrated by a threat actor.\n   \nauthor: \"Dan Kelly - @dan_kelly17\"\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: FileZillaGlob\n     default: \\AppData\\Roaming\\FileZilla\\\n     \n   - name: queueSQLQuery\n     default: |\n        SELECT local_paths.path AS PATH, files.source_file AS File, servers.host FROM files JOIN local_paths ON local_paths.id = files.local_path JOIN servers ON servers.id = files.server\n     \n   - name: userRegex\n     default: .\n     type: regex\n\nprecondition: \n    SELECT OS FROM info() WHERE OS = 'windows'\n\nsources:\n  - name: FileZilla\n    query: |\n      -- get the filezilla.xml file\n      LET filezilla_xml = SELECT * from foreach(\n          row={\n             SELECT Uid, Name AS User,\n                    expand(path=Directory) AS HomeDirectory\n             FROM Artifact.Windows.Sys.Users()\n             WHERE Name =~ userRegex\n          },\n          query={\n             SELECT \n                User, \n                OSPath, \n                parse_xml(file=OSPath).FileZilla3.Settings.Setting.Tabs.Tab as Tab,\n                Mtime\n             FROM glob(globs=FileZillaGlob + 'filezilla.xml', root=HomeDirectory)\n          })\n      \n      SELECT * FROM foreach(row=filezilla_xml,\n        query={\n            SELECT \n                *, \n                OSPath AS SourceFilePath\n                FROM foreach(row=Tab, query={\n                    SELECT * FROM _value\n                })\n            })\n\n  - name: RecentServers\n    query: |\n      LET recentservers_xml = SELECT * from foreach(\n          row={\n             SELECT Uid, Name AS User,\n                    expand(path=Directory) AS HomeDirectory\n             FROM Artifact.Windows.Sys.Users()\n             WHERE Name =~ userRegex\n          },\n          query={\n             SELECT \n                User, \n                OSPath, \n                parse_xml(file=OSPath).FileZilla3.RecentServers.Server as Server,\n                Mtime\n             FROM glob(globs=FileZillaGlob + 'recentservers.xml', root=HomeDirectory)\n          })\n          \n      SELECT * FROM foreach(row=recentservers_xml,\n        query={\n            SELECT \n            *,\n            OSPath AS SourceFilePath\n            FROM foreach(row=Server, query={\n                SELECT * FROM _value\n            })\n        })\n        \n  - name: Queue_SQLITE3\n    query: |\n      LET queue_sqlite = SELECT * from foreach(\n          row={\n             SELECT Uid, Name AS User,\n                    expand(path=Directory) AS HomeDirectory\n             FROM Artifact.Windows.Sys.Users()\n             WHERE Name =~ userRegex\n          },\n          query={\n             SELECT \n                User, \n                OSPath, \n                Mtime\n             FROM glob(globs=FileZillaGlob + 'queue.sqlite3', root=HomeDirectory)\n          })\n      \n      SELECT * FROM foreach(row=queue_sqlite,\n        query={\n            SELECT \n            *,\n            OSPath as SourceFilePath\n            FROM sqlite(file=OSPath, query=queueSQLQuery)\n        })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Findflows","op":"set","definition":"name: Exchange.Server.Findflows\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact enables searching over client flow results with regex\n  and returns a link to the Flow for followup.\n\ntype: SERVER\nparameters:\n  - name: ClientData\n    description: Glob for client data - may need to modify for non default installation\n    default: /opt/velociraptor/clients/**\n  - name: DateAfter\n    type: timestamp\n    description: \"search for flow data after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for flow data before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: Workers\n    type: int\n    default: 100\n    description: Number of concurrent workers\n  - name: SearchRegex\n    type: regex\n    description: Second option Yara choice is a Velociraptor shorthand Yara rule\n    default:\n  - name: FindKeywordTemplate\n    type: hidden\n    default: |\n        rule findregex {\n            strings:\n                $regex = /(REPLACEME)/i\n\n            condition:\n                $regex\n        }\n\nsources:\n  - query: |\n      -- create regex yara for search performance\n      LET FinderYara = regex_replace(source=FindKeywordTemplate,re='REPLACEME',replace=SearchRegex)\n\n      -- time testing\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n\n\n      -- first find all matching glob\n      LET files \u003c= SELECT FinderYara,FullPath, Name, Size, Mtime, Atime, Ctime, Btime\n        FROM glob(globs=ClientData,nosymlink='True')\n        WHERE FullPath =~ '/F\\\\.[^\\\\./]+\\\\.json$'\n          AND NOT IsDir AND NOT IsLink\n          AND\n             ( time_test(stamp=Mtime)\n            OR time_test(stamp=Atime)\n            OR time_test(stamp=Ctime) )\n\n\n      -- scan files\n      LET hits \u003c= SELECT * FROM foreach(row=files,\n            query={\n                SELECT\n                    FileName as FullPath,\n                    File.Size AS Size,Mtime,\n                    str(str=String.Data) AS HitContext\n                FROM yara(rules=FinderYara,files=FullPath)\n                LIMIT 1\n            },workers=Workers)\n\n\n      -- find configuration information\n      LET find_hostname(ClientId) = SELECT os_info.hostname as Hostname FROM clients() WHERE client_id = ClientId\n      \n\n      -- enrich results\n      LET flows = SELECT *,\n            { SELECT HitContext FROM hits WHERE FullPath = FullPath GROUP BY lowcase(string=HitContext) } as HitContext, Mtime, FullPath,\n            parse_string_with_regex(string=FullPath,regex='clients/(?P\u003cClientId\u003eC\\\\.[^/]+)/artifacts').ClientId as ClientId,\n            parse_string_with_regex(string=FullPath,regex='/(?P\u003cFlowId\u003eF\\\\.[^\\\\.]+)\\\\.json$').FlowId as FlowId\n        FROM hits\n        WHERE ClientId AND FlowId\n        GROUP BY FullPath\n\n\n      -- output rows\n      SELECT\n            find_hostname(ClientId=ClientId)[0].Hostname as Hostname,\n            HitContext,\n            Mtime as FlowModTime,\n            '#/collected/' + ClientId + '/' + FlowId + '/notebook' as FlowNotebook,\n            ClientId,FlowId\n        FROM flows\n\n\ncolumn_types:\n  - name: FlowModTime\n    type: timestamp\n  - name: FlowNotebook\n    type: url\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.PostProcess.FluentBit","op":"set","definition":"name: Exchange.Server.PostProcess.FluentBit\n\nauthor: |\n    @predictiple - 2025-07-13\n\ndescription: |\n    Post-process collection results using [Fluent Bit](https://fluentbit.io/).\n\n    Fluent Bit will read the JSONL-formattted results file for each completed\n    client collection, which can then be modified, filtered, and forwarded to\n    any of it's large number of supported\n    [outputs](https://docs.fluentbit.io/manual/pipeline/outputs).\n    The specific outputs used here are just for demonstration purposes, and you\n    can easily change the Fluent Bit pipeline config to use a different one.\n\n    The processed data is _not_ returned to Velociraptor - it is shipped to\n    external destinations. Although it is possible to read back the data from\n    stdout it's pointless to do so, unless perhaps you're testing something new\n    or troubleshooting some issue.\n\n    #### How it works\n\n    Results files are processed individually, per artifact or\n    artifact/namedsource.\n\n    - If a collection consists of multiple artifacts, only the ones specified in\n      `ClientArtifactsToWatch` will be processed.\n    - If an artifact contains multiple named sources, then only the ones\n      designated in `ClientArtifactsToWatch` will be processed.\n\n    Enrichments and transformations can be added to Fluent Bit's pipeline via\n    its Processors and Filters, or alternatively (and probably more easily) such\n    things can be done on the receiving end.\n\n    This artifact configures Fluent Bit via a YAML config file. This config file\n    contains the pipeline definition, parser definitions, and other config\n    options. This is easier to work with rather than specifying everything on\n    the command line, especially if you want to define more complex pipelines.\n\n    Velociraptor's `execve()` plugin runs programs in an isolated environment,\n    into which  some of env variables are injected via the `env` argument. The\n    data in these variables augments the flow data: `ClientId`, `FlowId`, and\n    `ArtifactName` are added to the processed records for downstream tracking\n    purposes, but you may choose not to do so. The artifact injects these into\n    the execve environment and the Fluent config specifies the var =\u003e field\n    mapping to retrieve them.\n\n    To avoid unnecessarily exposing credentials for the external systems\n    (outputs) we store these in environment variables so that they aren't\n    written to any logs. In the Fluent Bit config we specify which env vars to\n    retrieve the values from using the `${VARIABLE}` notation.\n\n    These sensitive variables are defined in text files, to which access will be\n    restricted. A utility program called `envdir` is used to read and populate\n    the environment with these variables. This program is available in the\n    official repos for most Linux distributions, and can be installed as\n    follows:\n\n    ```sh\n    sudo apt install daemontools\n    ```\n\n    The files containing the sensitive env vars can be created as follows (as\n    root):\n\n    ```sh\n    mkdir /etc/opensearch_creds\n    echo \"192.168.1.104\" \u003e /etc/opensearch_creds/OPENSEARCH_HOST\n    echo \"9200\" \u003e /etc/opensearch_creds/OPENSEARCH_PORT\n    echo \"admin\" \u003e /etc/opensearch_creds/OPENSEARCH_USER\n    echo \"ONEtwo333$$$\" \u003e /etc/opensearch_creds/OPENSEARCH_PASSWD\n    ```\n\n    If your Velociraptor is running as a service then only the `velociraptor`\n    service account needs access to the credential files, and in that case set\n    permissions on them so that only that specific user has access:\n\n    ```sh\n    chown -v velociraptor:velociraptor /etc/opensearch_creds/*\n    chmod -v 600 /etc/opensearch_creds/*\n    ```\n\n    Extra fields - `ClientId`, `FlowId`, and `ArtifactName` - are added to the\n    processed records for downstream tracking purposes, but you may choose not\n    to do so, or to add other fields. The artifact injects these into the execve\n    environment and the Fluent config specifies the var -\u003e field mapping to\n    retrieve them.\n\n    We don't parse any timestamp from the data because Velociraptor doesn't have\n    a primary timestamp field, nor even require any timestamps in results.\n\n    #### Server preparation checklist\n\n    1. Fluent Bit should be installed on the server. It's best to install it\n       [from the official repos](https://docs.fluentbit.io/manual/installation/linux)\n       in which case the binary should be located at\n       `/opt/fluent-bit/bin/fluent-bit`.\n    2. Install the `envdir` utility via the `daemontools` package, as described\n       above.\n    3. Create and secure the sensitive environment variable files, as described\n       above.\n\n    #### Other command line data processors\n\n    Other log forwarders such as Logstash and Filebeats work similarly, in\n    principle, to Fluent Bit. So this artifact could be used as the basis for\n    other forwarders or any other command line applications that consume JSONL\n    format. Any other CLI apps that read and process JSONL data could be used in\n    the same way using the basic processing logic contained in this artifact.\n    However, fast startup time is a critical aspect because the application\n    needs to be launched for each targeted flow, so bloated apps such as\n    Logstash are likely to be impractical when used this way. Fluent Bit is\n    lightweight and fast!\n\n    This artifact could also be easily modified to watch for server collection\n    completions instead of client collections.\n\n    #### Tested with\n\n    - Fluent Bit v4.0.3\n    - Velociraptor v0.74.5\n    - Opensearch v3.1.0\n\n    ---\n\n    Tags: #post-processing #Elasticsearch #OpenSearch #Splunk #Graylog #BigQuery\n    #Chronicle #CloudWatch #Amazon #S3 #Azure #Datadog #Dynatrace #InfluxDB\n    #Kafka #LogDNA #Loki #Oracle #PostgreSQL\n\nreference:\n  - https://docs.fluentbit.io/manual\n  - https://fluentbit.io/\n  - https://manpages.ubuntu.com/manpages/jammy/man8/envdir.8.html\n\ntype: SERVER_EVENT\n\nprecondition: SELECT OS From info() where OS = \"linux\"\n\nrequired_permissions:\n  - EXECVE\n\nparameters:\n\n  - name: ClientArtifactsToWatch\n    description: Select the client artifacts to be watched for completions\n    type: artifactset\n    artifact_type: CLIENT\n    sources: TRUE\n    default: |\n      Artifact\n      Windows.Registry.AppCompatCache\n      Windows.Forensics.SRUM/Execution Stats\n\n  - name: FluentBinary\n    description: The Fluent Bit binary\n    type: string\n    default: /opt/fluent-bit/bin/fluent-bit\n\n  - name: FluentConfig\n    description: The Fluent configuration in YAML format\n    type: string\n    default: |\n        parsers:\n          - name: json\n            format: json\n        service:\n            flush: 1\n        pipeline:\n          inputs:\n            - name: tail\n              path: ${RESULTSPATH}\n              parser: json\n              tag: velociraptor\n              read_from_head: true\n              threaded: false\n              exit_on_eof: true\n              inotify_watcher: false\n              mem_buf_limit: 10mb\n              buffer_chunk_size: 128kb\n              buffer_max_size: 128kb\n              storage.type: memory\n              processors:\n                logs:\n                  - name: content_modifier\n                    action: insert\n                    key: client_id\n                    value: ${CLIENTID}\n                  - name: content_modifier\n                    action: insert\n                    key: flow_id\n                    value: ${FLOWID}\n                  - name: content_modifier\n                    action: insert\n                    key: artifact_name\n                    value: ${ARTIFACTNAME}\n          \n          outputs:\n            # we generate this is for the Velociraptor monitoring GUI\n            - name: counter\n              match: velociraptor\n\n            # uncomment for testing\n            # - name: stdout\n            #   match: velociraptor\n            #   format: json_lines\n\n            # uncomment if you want to write to a file (for testing)\n            # - name: file\n            #   match: velociraptor\n            #   path: /tmp/fluent/\n            #   file: ${FLOWID}_${INDEX}.json\n            #   format: plain\n            #   mkdir: true\n              \n            # send the data to Opensearch\n            - name: opensearch\n              match: velociraptor\n              host: ${OPENSEARCH_HOST}\n              port: ${OPENSEARCH_PORT}\n              http_user: ${OPENSEARCH_USER}\n              http_passwd: ${OPENSEARCH_PASSWD}\n              logstash_format: on\n              logstash_prefix: ${INDEX}\n              trace_error: on\n              trace_output: off\n              tls.verify: off\n              tls: on\n              suppress_type_name: on\n              compress: gzip\n              buffer_size: 1mb\n              retry_limit: 20\n              workers: 1\n\n\nsources:\n  - query: |\n\n       -- We write to a temp file and reuse it as long as the monitoring task is active.\n       LET FluentConfigFile \u003c= tempfile(data=FluentConfig, extension=\".yaml\")\n       LET _ \u003c= log(message=\"Config file created at %v\", args=FluentConfigFile)\n\n       LET Completions = SELECT *\n         FROM watch_monitoring(artifact='System.Flow.Completion')\n         -- Try to match ANY artifact in flow against ANY artifact in ClientArtifactsToWatch.\n         -- Returns flows where there is at least one match in the completed flow.\n         WHERE Flow.artifacts_with_results =~ join(array=ClientArtifactsToWatch.Artifact, sep=\"|\")\n\n       -- Run Fluent Bit for each results file\n       LET PostProcess(ClientId, FlowId, ArtifactName, ResultsPath) =\n         SELECT *\n         FROM execve(argv=[ \"envdir\", \"/etc/opensearch_creds/\", FluentBinary, \"-q\" \"-c\", FluentConfigFile ],\n\n                     -- Inject these vars into the execve environment.\n                     -- Fluent Bit will retrieve them and add them to the data.\n                     env=dict(CLIENTID=ClientId,\n                              FLOWID=FlowId,\n                              INDEX=lowcase(string=regex_replace(source=ArtifactName, re='''[/ ]''',replace=\"_\")),\n                              ARTIFACTNAME=ArtifactName,\n                              RESULTSPATH=ResultsPath\n                              ),\n\n                     -- Under normal circumstances length and line breaks are\n                     -- irrelevant since we aren't reading the data back.\n                     --sep=\"\\n\",\n                     length=99999999)\n\n\n       LET GetResultsFile(ClientId, FlowId, ArtifactName) =\n         SELECT\n           file_store(path=Data.VFSPath) AS ResultsPath\n         FROM enumerate_flow(client_id=ClientId, flow_id=FlowId)\n         WHERE Type = \"Result\"\n         -- Match either named or unnamed sources\n         AND ( Data.VFSPath =~ ArtifactName\n           OR pathspec(parse=Data.VFSPath).Components[-3] + \"/\" +\n              pathspec(parse=Data.VFSPath).Components[-1] =~ ArtifactName )\n\n       SELECT *,\n              PostProcess(ClientId=ClientId,\n                          FlowId=FlowId,\n                          ArtifactName=ArtifactName,\n                          ResultsPath=ResultsPath)[0].Stdout AS RecordsProcessed\n       FROM foreach(row=Completions,\n                    query={ SELECT *,\n                              GetResultsFile(ClientId=ClientId,\n                                             FlowId=FlowId,\n                                             ArtifactName=ArtifactName)[0].ResultsPath AS ResultsPath\n                            -- We need to check each result within each artifact to see if\n                            -- it is associated with the flow match that previously occurred.\n                            FROM foreach(row=Flow.artifacts_with_results,\n                                         query={ SELECT _value AS ArtifactName, ClientId, FlowId\n                                                 FROM scope()\n                                                 WHERE ArtifactName IN ClientArtifactsToWatch.Artifact\n                                               }\n                                        )\n                          },\n                    workers=10\n                   )\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.FreeBSD.Sys.Utx","op":"set","definition":"name: Exchange.FreeBSD.Sys.Utx\nauthor: Herbert Bärschneider\ndescription: |\n  Parse the utx file of the system (similar to wtmp on Linux). This covers user sessions, boots, shutdowns and system time changes.\n  Because FreeBSD discards fields for the entries of the utx file based on type (see `man getutxent`), no direct parsing of the file using \"vtypes\" is done (too complicated for me to define a structure for parsing), but rather native tools are used for accessing the data.\n  \n  Using a value of \"time\" with the \"userRegex\" Parameter will give you all entries related to boots, shutdowns and system time changes.\n  \n  Beware: logout times are given in localtime! Furthermore, that column is not automatically parsed into timestamp values, because the tool output is not consistently a recognizable datetime.\n\ntype: CLIENT\n\nparameters:\n  - name: utxGlobs\n    default: /var/log/utx.log*\n    description: |\n      glob for covering the files that should be parsed; default covers the usual location of the utx file on FreeBSD\n  - name: userRegex\n    type: regex\n    default: \".\"\n    description: |\n      Regex for filtering the users, showing those you are interested in \n  - name: DateAfter\n    type: timestamp\n    description: |\n      timestamp used for filtering the login time\n  - name: DateBefore\n    type: timestamp\n    description: |\n      timestamp used for filtering the login time\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'freebsd'\n    query: |\n      -- timestamps given by the system command \"last\" are in local time, so we tell Velociraptor to handle them accordingly when converting with the VQL function \"timestamp()\"\n      LET PARSE_TZ \u003c= \"local\"\n      \n      -- time test function (taken from Windows.NTFS.MFT)\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n      \n      -- expand the glob and get all files that are matched by it\n      LET Files = SELECT OSPath FROM glob(globs=split(string=utxGlobs, sep=\",\"))\n      \n      -- for each targeted file, parse the data out of it using system built-in command \n      LET UtxParsing = SELECT * FROM foreach(row=Files,\n      query={\n        -- TODO: try the command while setting env variable \"TZ\" to UTC and check, if the timestamps are changed accordingly\n        SELECT * \n        FROM execve(argv=[\"last\", \"-wy\", \"--libxo=json\", \"-f\", OSPath])\n        WHERE log(message=\"stderr: \" + Stderr) \n      })\n      \n      -- parse the output from each file as json\n      LET UtxContent = SELECT parse_json(data=Stdout) as Content FROM UtxParsing\n      \n      -- pull out the interesting information from the nested json content\n      LET s = scope() -- a little helper to suppress \"symbol not found error\" for elements of the content that are sometimes missing\n      LET FormatedContent = SELECT * FROM foreach(row=UtxContent,\n      query={\n        SELECT user, timestamp(string=`login-time`) AS login_time, s.`logout-time` AS logout_time, s.`session-length` AS session_length, s.tty AS tty, s.`from` AS remote, Content.`last-information`.utxdb AS utx_log FROM foreach(row=Content.`last-information`.last)\n      })\n      \n      SELECT * FROM FormatedContent WHERE\n        user =~ userRegex\n        AND time_test(stamp=login_time)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Enrichment.AI.Gemini","op":"set","definition":"name: Exchange.Server.Enrichment.AI.Gemini\nauthor: Matt Green - @mgreen27\ndescription: |\n  Query Gemini AI for analysis of data.\n  \n  Paramaters:\n  \n  * `PrePrompt` - Added as preprompt. Default is: \n  \"You are a Cyber Incident Responder and need to analyze data. You have an eye \n  for detail and like to use short precise technical language. Analyze the \n  following data and provide summary analysis:\"\n  * `Prompt` - Is User prompt as string: When pushing a dict object via \n  PromtData good practice is add some strings related to the type of data for \n  analysis or artifact name to provide context.\n  * `PromptData` - add optional object to be serialized and added to the User prompt.\n  * `Model` - Model to use for your request. Default is gemini-2.0-flash\n  * `MaxTokens` - Set max token size  default 64000\n  \n  This artifact can be called from within another artifact (such as one looking \n  for files) to enrich the data made available by that artifact.\n  \n  e.g\n  \n  `LET results = SELECT field1, field2, field3.... FROM source() WHERE ...`  \n  `SELECT * FROM Artifact.Server.Enrichment.AI.Gemini(Prompt=\"Review Autoruns data:\",PromptData=results)`\n\n  NOTE: there appears to be a bug in serialize() that is causing some issues in some large collections. \n  If you run into issues try reducing token size and filtering unnecessary data. \n  This is resolved in head 0.74.2 commit:99dba70 and full 1000000 tokens can be used\n  \ntype: SERVER\n\nparameters:\n    - name: PrePrompt\n      type: string\n      description: |\n        Prompt to send with data. For example, when asking \n        a question, then providing data separately\n      default: |\n        You are a Cyber Incident responder and need to analyse forensic \n        collections. You have an eye for detail and like to use short precise \n        technical language. Your PRIMARY goal is to analyse the following data \n        and provide summary analysis:\n    - name: Prompt\n      type: string\n      default: what is prefetch?\n    - name: PromptData\n      type: string\n      description: The data sent to Google - this data is serialised and added to the prompt\n    - name: Model\n      type: string\n      description: The model used for processing the prompt\n      default: gemini-2.0-flash\n    - name: GeminiApiKey\n      type: string\n      description: Token for Gemini. Leave blank here if using server metadata store.\n    - name: MaxTokens\n      type: int\n      default: 100000\n\nsources:\n  - query: |\n        LET Creds \u003c= if(\n            condition=GeminiApiKey,\n            then=GeminiApiKey,\n            else=server_metadata().GeminiApiKey)\n        LET parts = if(condition=PromptData,\n                        then= dict(text=PrePrompt + Prompt + serialize(item=PromptData)),\n                        else= dict(text=PrePrompt + Prompt)\n                    )\n        LET Data = dict(contents=dict(parts=[parts,]))\n\n        SELECT\n            parts.text as UserPrompt,\n            parse_json(data=Content).candidates[0].content.parts[0].text AS ResponseText,\n            parse_json(data=Content) AS ResponseDetails\n        FROM http_client(\n            url='https://generativelanguage.googleapis.com/v1beta/models/' + Model + ':generateContent?key=' + Creds,\n            headers=dict(`Content-Type`=\"application/json\"),\n            method=\"POST\",\n            data=Data\n        )\n\ncolumn_types:\n  - name: ResponseText\n    type: nobreak\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Collection.UAC","op":"set","definition":"name: Exchange.Generic.Collection.UAC\nauthor: Thiago Canozzo Lahr - @tclahr\ndescription: |\n    This artifact leverages UAC (Unix-like Artifacts Collector) to collect artifacts\n    from Unix-like systems, and then upload the output to the Velociraptor server.\n\nreference:\n    - https://github.com/tclahr/uac\n\ntype: CLIENT\n\ntools:\n    - name: uac\n      github_project: tclahr/uac\n      github_asset_regex: uac-.+\\.tar\\.gz\n\nprecondition: SELECT OS FROM info() WHERE OS = \"darwin\" OR OS = \"freebsd\" OR OS = \"linux\"\n\nparameters:\n    - name: CommandLineOptions\n      default: -p ir_triage\n      type: string\n      description: Command line options.\n\nsources:\n    - query: |\n        // fetch uac .tar.gz package\n        LET uac_package \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"uac\", IsExecutable=FALSE, TemporaryOnly=TRUE)\n        // create temp dir\n        LET temp_dir \u003c= tempdir(remove_last=true)\n        // uncompress the .tar.gz container\n        LET uncompress_tar_gz \u003c= SELECT * FROM execve(argv=['tar', 'zxf', uac_package.OSPath[0]], cwd=temp_dir)\n        // search for the correct uac source directory name\n        LET uac_source_directory \u003c= SELECT OSPath FROM glob(globs=[\"uac-*\"], root=temp_dir) WHERE IsDir = true\n        // run uac\n        LET run_uac \u003c= SELECT * FROM execve(argv=[\n                                                \"/bin/sh\",\n                                                \"-c\",\n                                                \"./uac -u \" + CommandLineOptions + \" .\"\n                                            ],\n                                            cwd=uac_source_directory.OSPath[0],\n                                            sep=\"\\n\",\n                                            length=2048\n                                        )\n        // upload output and log file\n        LET upload_output_files \u003c= SELECT OSPath, upload(accessor=\"file\", file=OSPath, name=OSPath.Basename) AS Upload FROM glob(globs=[\"uac-*.log\", \"uac-*.tar.gz\"], root=uac_source_directory.OSPath[0])\n        SELECT * FROM chain(\n            a=run_uac,\n            b=upload_output_files\n        )\n\n# CHANGELOG:\n# 2023-10-01: v3.0 released\n#   - FetchBinary now uses TemporaryOnly=TRUE to use a temporary directory to hold the binary and remove it afterward.\n#   - The FullPath column of the Glob plugin is deprecated so it was replaced by OSPath.\n# 2023-03-01: v2.0 released\n#   - UAC tool needs to be either fetched via upstream URL or manually provided as a .tar.gz package.\n# 2023-02-19: v1.0 released\n#   - Initial release.\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Detection.LunasecLog4shell","op":"set","definition":"name: Exchange.Generic.Detection.LunasecLog4shell\nauthor: \"Marinus Boekelo \u0026 Noël Keijzer - Northwave CERT\"\ndescription: |\n  Uses the Log4Shell scanner of Lunasec to scan the file systems of\n  all drives of the host for any sign of vulnerabilities related to\n  Log4shell\n\ntools:\n  - name: log4shell_linux_amd64\n    github_project: lunasec-io/lunasec\n    github_asset_regex: Linux_x86_64\n    serve_locally: true\n\n  - name: log4shell_linux_x86\n    github_project: lunasec-io/lunasec\n    github_asset_regex: Linux_i386\n    serve_locally: true\n\n  - name: log4shell_windows_amd64\n    github_project: lunasec-io/lunasec\n    github_asset_regex: Windows_x86_64\n    serve_locally: true\n\n  - name: log4shell_windows_x86\n    github_project: lunasec-io/lunasec\n    github_asset_regex: Windows_i386\n    serve_locally: true\n\nreference:\n  - https://github.com/lunasec-io/lunasec/releases/\n\nprecondition: SELECT OS From info() where OS = \"windows\" or OS = \"linux\"\n\nrequired_permissions:\n  - EXECVE\n\nparameters:\n  - name: ToolInfo\n    description: Override Tool information.\n\nsources:\n  - query: |\n      LET os_info \u003c= SELECT Architecture, OS FROM info()\n\n      // Get the path to the binary.\n      LET bin \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n              ToolName= \"log4shell_\" + os_info[0].OS + \"_\" + os_info[0].Architecture,\n              ToolInfo=ToolInfo)\n\n      // Select the Disks to scan\n      LET disks = if(condition=(os_info[0].OS=\"windows\"),\n            then= {\n                SELECT Mountpoint + \"\\\\\\\\\" as Mountpoint\n                FROM filesystems()\n            },\n            else={\n                SELECT \"/\" as Mountpoint\n                FROM scope()\n            })\n\n      // Scan every disk\n      LET results = SELECT * FROM foreach(row=disks,\n            query={\n                SELECT parse_json(data=Stdout) AS record\n                FROM execve(argv=[bin[0].FullPath,\"scan\",\"--json\",Mountpoint], sep=\"\\n\")\n                WHERE Stdout\n            })\n\n      // output rows\n      SELECT * FROM foreach(row= results,\n        query={ SELECT * FROM record })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Detection.WebShells","op":"set","definition":"name: Exchange.Generic.Detection.WebShells\nauthor: Herbert Bärschneider @SEC Defence\ndescription: |\n    This artifact looks for evidence of a web shell being present on the system. It targets Windows and Linux hosts.\n    The artifact should be run on web servers, be it dedicated web servers or systems with integrated web servers. \n    For such machines, find the root directory of the web server and change the artifact parameters as needed.\n\n    Multiple indicators for web shells are used: \n    * files with suspicious strings commonly used in web shells\n    * suspicious processes being spawned by the webserver process (Windows only)\n    * recently created and changed files under the webroot directory\n    False-positives might arise from web sites with remote code execution functionality willingly built in as well as recent changes to the served web sites.\n    The artifact was envisioned for hunting after potential malicious activity, so noise should be expected with the output.\n\nreference:\n    - https://attack.mitre.org/techniques/T1505/003/\n    - https://github.com/nsacyber/Mitigating-Web-Shells/blob/master/extended.webshell_detection.yara\n    - https://car.mitre.org/analytics/CAR-2021-02-001/\n\ntype: CLIENT\n\nparameters:\n   - name: WindowsWebRoot \n     description: glob used to identify all files belonging to the web root on Windows; if you want to target a directory structure, don't forget to append \"**\"\n     default: \"C:\\\\inetpub\\\\wwwroot\\\\**\"\n   - name: LinuxWebRoot\n     description: glob used to identify all files belonging to the web root on Linux; if you want to target a directory structure, don't forget to append \"**\"\n     default: \"/var/www/**\"\n   - name: WebshellRegex\n     description: regex for filtering the files in the webroot when looking at file creations and modifications\n     type: regex\n     default: '\\.php|\\.asp|\\.aspx|\\.jsp|\\.jar|\\.ps1|\\.sh'\n   - name: WebserverProcessRegex\n     description: regex of processes which are considered as web servers when searching for suspicious process creations\n     type: regex\n     default: 'w3wp\\.exe|httpd\\.exe|tomcat*\\.exe|nginx\\.exe'\n   - name: SpawnedProcessRegex\n     description: regex of processes, which are to be considered suspicious when spawned from a web server process \n     type: regex\n     default: 'cmd\\.exe|powershell\\.exe|pwsh\\.exe|net\\.exe|net1\\.exe|whoami\\.exe|hostname\\.exe|systeminfo\\.exe|ipconfig\\.exe'\n   - name: DateAfter\n     type: timestamp\n   - name: DateBefore\n     type: timestamp\n   - name: YaraRule\n     type: yara\n     description: yara rule used to search for web shells\n     default: |\n        private rule b374k\n        {\n            meta:\n            author = \"Blair Gillam (@blairgillam)\"\n\n            strings:\n                $string = \"b374k\"\n                $password_var = \"$s_pass\"\n                $default_password = \"0de664ecd2be02cdd54234a0d1229b43\"\n\n            condition:\n                any of them\n        }\n\n        private rule pas_tool\n        {\n            meta:\n                author = \"US CERT\"\n\n            strings:\n                $php = \"\u003c?php\"\n                $base64decode = /\\='base'\\.\\(\\d+\\*\\d+\\)\\.'_de'\\.'code'/ \n                $strreplace = \"(str_replace(\"\n                $md5 = \".substr(md5(strrev(\"\n                $gzinflate = \"gzinflate\"\n                $cookie = \"_COOKIE\"\n                $isset = \"isset\"\n\n            condition:\n                (filesize \u003e 20KB and filesize \u003c 22KB) and\n                #cookie == 2 and\n                #isset == 3 and\n                all of them\n        }\n\n        private rule pbot\n        {\n            meta:\n                author = \"Jacob Baines (Tenable)\"\n\n            strings:\n                $ = \"class pBot\" ascii\n                $ = \"function start(\" ascii\n                $ = \"PING\" ascii\n                $ = \"PONG\" ascii\n\n            condition:\n                all of them\n        }\n\n        private rule passwordProtection\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $md5 = /md5\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*['\"][0-9a-f]{32}['\"]/ nocase\n                $sha1 = /sha1\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*['\"][0-9a-f]{40}['\"]/ nocase\n            condition:\n                (any of them) \n        }\n\n        private rule ObfuscatedPhp\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $eval = /(\u003c\\?php|[;{}])[ \\t]*@?(eval|preg_replace|system|assert|passthru|(pcntl_)?exec|shell_exec|call_user_func(_array)?)\\s*\\(/ nocase  // ;eval( \u003c- this is dodgy\n                $eval_comment = /(eval|preg_replace|system|assert|passthru|(pcntl_)?exec|shell_exec|call_user_func(_array)?)\\/\\*[^\\*]*\\*\\/\\(/ nocase  // eval/*lol*/( \u003c- this is dodgy\n                $b374k = \"'ev'.'al'\"\n                $align = /(\\$\\w+=[^;]*)*;\\$\\w+=@?\\$\\w+\\(/  //b374k\n                $weevely3 = /\\$\\w=\\$[a-zA-Z]\\('',\\$\\w\\);\\$\\w\\(\\);/  // weevely3 launcher\n                $c99_launcher = /;\\$\\w+\\(\\$\\w+(,\\s?\\$\\w+)+\\);/  // http://bartblaze.blogspot.fr/2015/03/c99shell-not-dead.html\n                $nano = /\\$[a-z0-9-_]+\\[[^]]+\\]\\(/ //https://github.com/UltimateHackers/nano\n                $ninja = /base64_decode[^;]+getallheaders/ //https://github.com/UltimateHackers/nano\n                $variable_variable = /\\${\\$[0-9a-zA-z]+}/\n                $too_many_chr = /(chr\\([\\d]+\\)\\.){8}/  // concatenation of more than eight `chr()`\n                $concat = /(\\$[^\\n\\r]+\\.){5}/  // concatenation of more than 5 words\n                $concat_with_spaces = /(\\$[^\\n\\r]+\\. ){5}/  // concatenation of more than 5 words, with spaces\n                $var_as_func = /\\$_(GET|POST|COOKIE|REQUEST|SERVER)\\s*\\[[^\\]]+\\]\\s*\\(/\n                $comment = /\\/\\*([^*]|\\*[^\\/])*\\*\\/\\s*\\(/  // eval /* comment */ (php_code)\n        condition:\n                (any of them)\n        }\n\n        private rule DodgyPhp\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $basedir_bypass = /curl_init\\s*\\(\\s*[\"']file:\\/\\// nocase\n                $basedir_bypass2 = \"file:file:///\" // https://www.intelligentexploit.com/view-details.html?id=8719\n                $disable_magic_quotes = /set_magic_quotes_runtime\\s*\\(\\s*0/ nocase\n\n                $execution = /\\b(eval|assert|passthru|exec|include|system|pcntl_exec|shell_exec|base64_decode|`|array_map|ob_start|call_user_func(_array)?)\\s*\\(\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))/ nocase  // function that takes a callback as 1st parameter\n                $execution2 = /\\b(array_filter|array_reduce|array_walk(_recursive)?|array_walk|assert_options|uasort|uksort|usort|preg_replace_callback|iterator_apply)\\s*\\(\\s*[^,]+,\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))/ nocase  // functions that takes a callback as 2nd parameter\n                $execution3 = /\\b(array_(diff|intersect)_u(key|assoc)|array_udiff)\\s*\\(\\s*([^,]+\\s*,?)+\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))\\s*\\[[^]]+\\]\\s*\\)+\\s*;/ nocase  // functions that takes a callback as 2nd parameter\n\n                $htaccess = \"SetHandler application/x-httpd-php\"\n                $iis_com = /IIS:\\/\\/localhost\\/w3svc/\n                $include = /include\\s*\\(\\s*[^\\.]+\\.(png|jpg|gif|bmp)/  // Clever includes\n                $ini_get = /ini_(get|set|restore)\\s*\\(\\s*['\"](safe_mode|open_basedir|disable_(function|classe)s|safe_mode_exec_dir|safe_mode_include_dir|register_globals|allow_url_include)/ nocase\n                $register_function = /register_[a-z]+_function\\s*\\(\\s*['\"]\\s*(eval|assert|passthru|exec|include|system|shell_exec|`)/  // https://github.com/nbs-system/php-malware-finder/issues/41\n                $safemode_bypass = /\\x00\\/\\.\\.\\/|LD_PRELOAD/\n                $shellshock = /\\(\\)\\s*{\\s*[a-z:]\\s*;\\s*}\\s*;/\n                $udp_dos = /fsockopen\\s*\\(\\s*['\"]udp:\\/\\// nocase\n                $various = \"\u003c!--#exec cmd=\"  //http://www.w3.org/Jigsaw/Doc/User/SSI.html#exec\n                $at_eval = /@eval\\s*\\(/ nocase\n                $double_var = /\\${\\s*\\${/\n                $extract = /extract\\s*\\(\\s*\\$_(GET|POST|REQUEST|COOKIE|SERVER)/\n                $reversed = /noitcnuf_etaerc|metsys|urhtssap|edulcni|etucexe_llehs/ nocase\n                        $silenced_include =/@\\s*include\\s*/ nocase\n\n            condition:\n                (any of them)\n        }\n\n        private rule DangerousPhp\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $system = \"system\" fullword nocase  // localroot bruteforcers have a lot of this\n\n                $ = \"array_filter\" fullword nocase\n                $ = \"assert\" fullword nocase\n                $ = \"backticks\" fullword nocase\n                $ = \"call_user_func\" fullword nocase\n                $ = \"eval\" fullword nocase\n                $ = \"exec\" fullword nocase\n                $ = \"fpassthru\" fullword nocase\n                $ = \"fsockopen\" fullword nocase\n                $ = \"function_exists\" fullword nocase\n                $ = \"getmygid\" fullword nocase\n                $ = \"shmop_open\" fullword nocase\n                $ = \"mb_ereg_replace_callback\" fullword nocase\n                $ = \"passthru\" fullword nocase\n                $ = /pcntl_(exec|fork)/ fullword nocase\n                $ = \"php_uname\" fullword nocase\n                $ = \"phpinfo\" fullword nocase\n                $ = \"posix_geteuid\" fullword nocase\n                $ = \"posix_getgid\" fullword nocase\n                $ = \"posix_getpgid\" fullword nocase\n                $ = \"posix_getppid\" fullword nocase\n                $ = \"posix_getpwnam\" fullword nocase\n                $ = \"posix_getpwuid\" fullword nocase\n                $ = \"posix_getsid\" fullword nocase\n                $ = \"posix_getuid\" fullword nocase\n                $ = \"posix_kill\" fullword nocase\n                $ = \"posix_setegid\" fullword nocase\n                $ = \"posix_seteuid\" fullword nocase\n                $ = \"posix_setgid\" fullword nocase\n                $ = \"posix_setpgid\" fullword nocase\n                $ = \"posix_setsid\" fullword nocase\n                $ = \"posix_setsid\" fullword nocase\n                $ = \"posix_setuid\" fullword nocase\n                $ = \"preg_replace_callback\" fullword\n                $ = \"proc_open\" fullword nocase\n                $ = \"proc_close\" fullword nocase\n                $ = \"popen\" fullword nocase\n                $ = \"register_shutdown_function\" fullword nocase\n                $ = \"register_tick_function\" fullword nocase\n                $ = \"shell_exec\" fullword nocase\n                $ = \"shm_open\" fullword nocase\n                $ = \"show_source\" fullword nocase\n                $ = \"socket_create(AF_INET, SOCK_STREAM, SOL_TCP)\" nocase\n                $ = \"stream_socket_pair\" nocase\n                $ = \"suhosin.executor.func.blacklist\" nocase\n                $ = \"unregister_tick_function\" fullword nocase\n                $ = \"win32_create_service\" fullword nocase\n                $ = \"xmlrpc_decode\" fullword nocase \n                $ = /ob_start\\s*\\(\\s*[^\\)]/  //ob_start('assert'); echo $_REQUEST['pass']; ob_end_flush();\n\n                $whitelist = /escapeshellcmd|escapeshellarg/ nocase\n\n            condition:\n                (not $whitelist and (5 of them or #system \u003e 250))\n        }\n\n        private rule IRC\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $ = \"USER\" fullword nocase\n                $ = \"PASS\" fullword nocase\n                $ = \"PRIVMSG\" fullword nocase\n                $ = \"MODE\" fullword nocase\n                $ = \"PING\" fullword nocase\n                $ = \"PONG\" fullword nocase\n                $ = \"JOIN\" fullword nocase\n                $ = \"PART\" fullword nocase\n\n            condition:\n                5 of them\n        }\n\n        private rule base64_strings\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $user_agent = \"SFRUUF9VU0VSX0FHRU5UCg\"\n                $eval = \"ZXZhbCg\"\n                $system = \"c3lzdGVt\"\n                $preg_replace = \"cHJlZ19yZXBsYWNl\"\n                $exec = \"ZXhlYyg\"\n                $base64_decode = \"YmFzZTY0X2RlY29kZ\"\n                $perl_shebang = \"IyEvdXNyL2Jpbi9wZXJsCg\"\n                $cmd_exe = \"Y21kLmV4ZQ\"\n                $powershell = \"cG93ZXJzaGVsbC5leGU\"\n\n            condition:\n                any of them\n        }\n\n        private rule hex\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $globals = \"\\\\x47\\\\x4c\\\\x4f\\\\x42\\\\x41\\\\x4c\\\\x53\" nocase\n                $eval = \"\\\\x65\\\\x76\\\\x61\\\\x6C\\\\x28\" nocase\n                $exec = \"\\\\x65\\\\x78\\\\x65\\\\x63\" nocase\n                $system = \"\\\\x73\\\\x79\\\\x73\\\\x74\\\\x65\\\\x6d\" nocase\n                $preg_replace = \"\\\\x70\\\\x72\\\\x65\\\\x67\\\\x5f\\\\x72\\\\x65\\\\x70\\\\x6c\\\\x61\\\\x63\\\\x65\" nocase\n                $http_user_agent = \"\\\\x48\\\\124\\\\x54\\\\120\\\\x5f\\\\125\\\\x53\\\\105\\\\x52\\\\137\\\\x41\\\\107\\\\x45\\\\116\\\\x54\" nocase\n                $base64_decode = \"\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65\\\\x28\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65\\\\x28\" nocase\n            \n            condition:\n                any of them\n        }\n\n        private rule Hpack\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $globals = \"474c4f42414c53\" nocase\n                $eval = \"6576616C28\" nocase\n                $exec = \"65786563\" nocase\n                $system = \"73797374656d\" nocase\n                $preg_replace = \"707265675f7265706c616365\" nocase\n                $base64_decode = \"61736536345f6465636f646528677a696e666c61746528\" nocase\n            \n            condition:\n                any of them\n        }\n\n        private rule strrev\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $globals = \"slabolg\" nocase fullword\n                $preg_replace = \"ecalper_gerp\" nocase fullword\n                $base64_decode = \"edoced_46esab\" nocase fullword\n                $gzinflate = \"etalfnizg\" nocase fullword\n            \n            condition:\n                any of them\n        }\n\n\n        private rule SuspiciousEncoding\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            condition:\n                (base64_strings or hex or strrev or Hpack)\n        }\n\n        private rule DodgyStrings\n        {\n            meta:\n                source = \"https://github.com/nbs-system/php-malware-finder\"\n                \n            strings:\n                $ = \".bash_history\"\n                $ = \"404 not found\" nocase\n                $ = \"file not found\" nocase\n                $ = \"forbidden\" nocase\n                $ = /AddType\\s+application\\/x-httpd-(php|cgi)/ nocase\n                $ = /php_value\\s*auto_prepend_file/ nocase\n                $ = /SecFilterEngine\\s+Off/ nocase  // disable modsec\n                $ = /Add(Handler|Type|OutputFilter)\\s+[^\\s]+\\s+\\.htaccess/ nocase\n                $ = \".mysql_history\"\n                $ = \".ssh/authorized_keys\"\n                $ = \"/(.*)/e\"  // preg_replace code execution\n                $ = \"/../../../\"\n                $ = \"/etc/passwd\"\n                $ = \"/etc/proftpd.conf\"\n                $ = \"/etc/resolv.conf\"\n                $ = \"/etc/shadow\"\n                $ = \"/etc/syslog.conf\"\n                $ = \"/proc/cpuinfo\" fullword\n                $ = \"/var/log/lastlog\"\n                $ = \"/windows/system32/\"\n                $ = \"LOAD DATA LOCAL INFILE\" nocase\n                $ = \"WScript.Shell\"\n                $ = \"WinExec\"\n                $ = \"b374k\" fullword nocase\n                $ = \"backdoor\" fullword nocase\n                $ = /(c99|r57|fx29)shell/\n                $ = \"cmd.exe\" fullword nocase\n                $ = \"powershell.exe\" fullword nocase\n                $ = /defac(ed|er|ement|ing)/ fullword nocase\n                $ = \"evilc0ders\" fullword nocase\n                $ = \"exploit\" fullword nocase\n                $ = \"find . -type f\" fullword\n                $ = \"hashcrack\" nocase\n                $ = \"id_rsa\" fullword\n                $ = \"ipconfig\" fullword nocase\n                $ = \"kernel32.dll\" fullword nocase\n                $ = \"kingdefacer\" nocase\n                $ = \"Wireghoul\" nocase fullword\n                $ = \"LD_PRELOAD\" fullword\n                $ = \"libpcprofile\"  // CVE-2010-3856 local root\n                $ = \"locus7s\" nocase\n                $ = \"ls -la\" fullword\n                $ = \"meterpreter\" fullword\n                $ = \"nc -l\" fullword\n                $ = \"netstat -an\" fullword\n                $ = \"php://\"\n                $ = \"ps -aux\" fullword\n                $ = \"rootkit\" fullword nocase\n                $ = \"slowloris\" fullword nocase\n                $ = \"suhosin\" fullword\n                $ = \"sun-tzu\" fullword nocase // quote from the Art of War\n                $ = /trojan (payload)?/\n                $ = \"uname -a\" fullword\n                $ = \"visbot\" nocase fullword\n                $ = \"warez\" fullword nocase\n                $ = \"whoami\" fullword\n                $ = /(r[e3]v[e3]rs[e3]|w[3e]b|cmd)\\s*sh[e3]ll/ nocase\n                $ = /-perm -0[24]000/ // find setuid files\n                $ = /\\/bin\\/(ba)?sh/ fullword\n                $ = /hack(ing|er|ed)/ nocase\n                $ = /(safe_mode|open_basedir) bypass/ nocase\n                $ = /xp_(execresultset|regenumkeys|cmdshell|filelist)/\n\n                $vbs = /language\\s*=\\s*vbscript/ nocase\n                $asp = \"scripting.filesystemobject\" nocase\n\n            condition:\n                (IRC or 2 of them)\n        }\n\n        private rule generic_jsp\n        {\n            meta:\n                source= \"https://www.tenable.com/blog/hunting-for-web-shells\"\n\n            strings:\n                $ = /Runtime.getRuntime\\(\\).exec\\(request.getParameter\\(\\\"[a-zA-Z0-9]+\\\"\\)\\);/ ascii\n\n            condition:\n                all of them\n        }\n\n        private rule eval\n        {\n            meta:\n                source = \"https://www.tenable.com/blog/hunting-for-web-shells\"\n\n            strings:\n                $ = /eval[\\( \\t]+((base64_decode[\\( \\t]+)|(str_rot13[\\( \\t]+)|(gzinflate[\\( \\t]+)|(gzuncompress[\\( \\t]+)|(strrev[\\( \\t]+)|(gzdecode[\\( \\t]+))+/\n\n            condition:\n                all of them\n        }\n\n        private rule fopo\n        {\n            meta:\n                source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\n\n            strings:\n                $ = /\\$[a-zA-Z0-9]+=\\\"\\\\(142|x62)\\\\(141|x61)\\\\(163|x73)\\\\(145|x65)\\\\(66|x36)\\\\(64|x34)\\\\(137|x5f)\\\\(144|x64)\\\\(145|x65)\\\\(143|x63)\\\\(157|x6f)\\\\(144|x64)\\\\(145|x65)\\\";@eval\\(/\n\n            condition:\n                all of them\n        }\n\n        private rule hardcoded_urldecode\n        {\n            meta:\n                source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\n\n            strings:\n                $ = /urldecode[\\t ]*\\([\\t ]*'(%[0-9a-fA-F][0-9a-fA-F])+'[\\t ]*\\)/\n\n            condition:\n                all of them\n        }\n\n        private rule chr_obfuscation\n        {\n            meta:\n                source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\n\n            strings:\n                $ = /\\$[^=]+=[\\t ]*(chr\\([0-9]+\\)\\.?){2,}/\n\n            condition:\n                all of them\n        }\n\n        private rule phpInImage\n        {\n            meta:\n                source = \"Vlad https://github.com/vlad-s\"\n\n            strings:\n                $php_tag = \"\u003c?php\"\n                $gif = {47 49 46 38 ?? 61} // GIF8[version]a\n                $jfif = { ff d8 ff e? 00 10 4a 46 49 46 }\n                $png = { 89 50 4e 47 0d 0a 1a 0a }\n                $jpeg = {FF D8 FF E0 ?? ?? 4A 46 49 46 } \n\n            condition:\n                (($gif at 0) or ($jfif at 0) or ($png at 0) or ($jpeg at 0)) and $php_tag\n        }\n\n        rule hiddenFunctionality\n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Hidden functionality allows malware to masquerade as another filetype\"\n\n            condition:\n                phpInImage\n        }\n\n        rule webshellArtifact \n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Artifacts common to web shells and rare in benign files\"\n\n            condition:\n                b374k or pas_tool or pbot or generic_jsp\n        }\n\n        rule suspiciousFunctionality\n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Artifacts common to web shells and somewhat rare in benign files\"\n\n            condition:\n                passwordProtection or hardcoded_urldecode or fopo or eval\n        }\n\n        rule obfuscatedFunctionality\n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Obfuscation sometimes hides malicious functionality\"\n\n            condition:\n                ObfuscatedPhp or chr_obfuscation or SuspiciousEncoding\n        }\n\n        rule possibleIndicator\n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Artifacts common to web shells and less common in benign files\"\n\n            condition:\n                DodgyPhp or DangerousPhp or DodgyStrings\n        }\n\n\n        private rule APT_Backdoor_MSIL_SUNBURST_1\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"This rule is looking for portions of the SUNBURST backdoor that are vital to how it functions. The first signature fnv_xor matches a magic byte xor that the sample performs on process, service, and driver names/paths. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_1.yar\"\n            \n            strings:\n                $cmd_regex_encoded = \"U4qpjjbQtUzUTdONrTY2q42pVapRgooABYxQuIZmtUoA\" wide\n                $cmd_regex_plain = { 5C 7B 5B 30 2D 39 61 2D 66 2D 5D 7B 33 36 7D 5C 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 33 32 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 31 36 7D }\n                $fake_orion_event_encoded = \"U3ItS80rCaksSFWyUvIvyszPU9IBAA==\" wide\n                $fake_orion_event_plain = { 22 45 76 65 6E 74 54 79 70 65 22 3A 22 4F 72 69 6F 6E 22 2C }\n                $fake_orion_eventmanager_encoded = \"U3ItS80r8UvMTVWyUgKzfRPzEtNTi5R0AA==\" wide\n                $fake_orion_eventmanager_plain = { 22 45 76 65 6E 74 4E 61 6D 65 22 3A 22 45 76 65 6E 74 4D 61 6E 61 67 65 72 22 2C }\n                $fake_orion_message_encoded = \"U/JNLS5OTE9VslKqNqhVAgA=\" wide\n                $fake_orion_message_plain = { 22 4D 65 73 73 61 67 65 22 3A 22 7B 30 7D 22 }\n                $fnv_xor = { 67 19 D8 A7 3B 90 AC 5B }\n            condition:\n                $fnv_xor and ($cmd_regex_encoded or $cmd_regex_plain) or ( ($fake_orion_event_encoded or $fake_orion_event_plain) and ($fake_orion_eventmanager_encoded or $fake_orion_eventmanager_plain) and ($fake_orion_message_encoded and $fake_orion_message_plain) )\n        }\n\n        private rule APT_Backdoor_MSIL_SUNBURST_2\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"The SUNBURST backdoor uses a domain generation algorithm (DGA) as part of C2 communications. This rule is looking for each branch of the code that checks for which HTTP method is being used. This is in one large conjunction, and all branches are then tied together via disjunction. The grouping is intentionally designed so that if any part of the DGA is re-used in another sample, this signature should match that re-used portion. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_2.yar\"\n            \n            strings:\n                $a = \"0y3Kzy8BAA==\" wide\n                $aa = \"S8vPKynWL89PS9OvNqjVrTYEYqNa3fLUpDSgTLVxrR5IzggA\" wide\n                $ab = \"S8vPKynWL89PS9OvNqjVrTYEYqPaauNaPZCYEQA=\" wide\n                $ac = \"C88sSs1JLS4GAA==\" wide\n                $ad = \"C/UEAA==\" wide\n                $ae = \"C89MSU8tKQYA\" wide\n                $af = \"8wvwBQA=\" wide\n                $ag = \"cyzIz8nJBwA=\" wide\n                $ah = \"c87JL03xzc/LLMkvysxLBwA=\" wide\n                $ai = \"88tPSS0GAA==\" wide\n                $aj = \"C8vPKc1NLQYA\" wide\n                $ak = \"88wrSS1KS0xOLQYA\" wide\n                $al = \"c87PLcjPS80rKQYA\" wide\n                $am = \"Ky7PLNAvLUjRBwA=\" wide\n                $an = \"06vIzQEA\" wide\n                $b = \"0y3NyyxLLSpOzIlPTgQA\" wide\n                $c = \"001OBAA=\" wide\n                $d = \"0y0oysxNLKqMT04EAA==\" wide\n                $e = \"0y3JzE0tLknMLQAA\" wide\n                $f = \"003PyU9KzAEA\" wide\n                $h = \"0y1OTS4tSk1OBAA=\" wide\n                $i = \"K8jO1E8uytGvNqitNqytNqrVA/IA\" wide\n                $j = \"c8rPSQEA\" wide\n                $k = \"c8rPSfEsSczJTAYA\" wide\n                $l = \"c60oKUp0ys9JAQA=\" wide\n                $m = \"c60oKUp0ys9J8SxJzMlMBgA=\" wide\n                $n = \"8yxJzMlMBgA=\" wide\n                $o = \"88lMzygBAA==\" wide\n                $p = \"88lMzyjxLEnMyUwGAA==\" wide\n                $q = \"C0pNL81JLAIA\" wide\n                $r = \"C07NzXTKz0kBAA==\" wide\n                $s = \"C07NzXTKz0nxLEnMyUwGAA==\" wide\n                $t = \"yy9IzStOzCsGAA==\" wide\n                $u = \"y8svyQcA\" wide\n                $v = \"SytKTU3LzysBAA==\" wide\n                $w = \"C84vLUpOdc5PSQ0oygcA\" wide\n                $x = \"C84vLUpODU4tykwLKMoHAA==\" wide\n                $y = \"C84vLUpO9UjMC07MKwYA\" wide\n                $z = \"C84vLUpO9UjMC04tykwDAA==\" wide\n            condition:\n                ($a and $b and $c and $d and $e and $f and $h and $i) or ($j and $k and $l and $m and $n and $o and $p and $q and $r and $s and ($aa or $ab)) or ($t and $u and $v and $w and $x and $y and $z and ($aa or $ab)) or ($ac and $ad and $ae and $af and $ag and $ah and ($am or $an)) or ($ai and $aj and $ak and $al and ($am or $an))\n        }\n\n        private rule APT_Backdoor_MSIL_SUNBURST_3\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"This rule is looking for certain portions of the SUNBURST backdoor that deal with C2 communications. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_3.yar\"\n            \n            strings:\n                $sb1 = { 05 14 51 1? 0A 04 28 [2] 00 06 0? [0-16] 03 1F ?? 2E ?? 03 1F ?? 2E ?? 03 1F ?? 2E ?? 03 1F [1-32] 03 0? 05 28 [2] 00 06 0? [0-32] 03 [0-16] 59 45 06 }\n                $sb2 = { FE 16 [2] 00 01 6F [2] 00 0A 1? 8D [2] 00 01 [0-32] 1? 1? 7B 9? [0-16] 1? 1? 7D 9? [0-16] 6F [2] 00 0A 28 [2] 00 0A 28 [2] 00 0A [0-32] 02 7B [2] 00 04 1? 6F [2] 00 0A [2-32] 02 7B [2] 00 04 20 [4] 6F [2] 00 0A [0-32] 13 ?? 11 ?? 11 ?? 6E 58 13 ?? 11 ?? 11 ?? 9? 1? [0-32] 60 13 ?? 0? 11 ?? 28 [4] 11 ?? 11 ?? 9? 28 [4] 28 [4-32] 9? 58 [0-32] 6? 5F 13 ?? 02 7B [2] 00 04 1? ?? 1? ?? 6F [2] 00 0A 8D [2] 00 01 }\n                $ss1 = \"\\x00set_UseShellExecute\\x00\"\n                $ss2 = \"\\x00ProcessStartInfo\\x00\"\n                $ss3 = \"\\x00GetResponseStream\\x00\"\n                $ss4 = \"\\x00HttpWebResponse\\x00\"\n            \n            condition:\n                (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and all of them\n        }\n\n        private rule APT_Backdoor_MSIL_SUNBURST_4\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"This rule is looking for specific methods used by the SUNBURST backdoor. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_4.yar\"\n            \n            strings:\n                $ss1 = \"\\x00set_UseShellExecute\\x00\"\n                $ss2 = \"\\x00ProcessStartInfo\\x00\"\n                $ss3 = \"\\x00GetResponseStream\\x00\"\n                $ss4 = \"\\x00HttpWebResponse\\x00\"\n                $ss5 = \"\\x00ExecuteEngine\\x00\"\n                $ss6 = \"\\x00ParseServiceResponse\\x00\"\n                $ss7 = \"\\x00RunTask\\x00\"\n                $ss8 = \"\\x00CreateUploadRequest\\x00\"\n            \n            condition:\n                (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and all of them\n        }\n\n        private rule APT_Dropper_Raw64_TEARDROP_1\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"This rule looks for portions of the TEARDROP backdoor that are vital to how it functions. TEARDROP is a memory only dropper that can read files and registry keys, XOR decode an embedded payload, and load the payload into memory. TEARDROP persists as a Windows service and has been observed dropping Cobalt Strike BEACON into memory.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/TEARDROP/yara/APT_Dropper_Raw64_TEARDROP_1.yar\"\n            \n            strings:\n                $sb1 = { C7 44 24 ?? 80 00 00 00 [0-64] BA 00 00 00 80 [0-32] 48 8D 0D [4-32] FF 15 [4] 48 83 F8 FF [2-64] 41 B8 40 00 00 00 [0-64] FF 15 [4-5] 85 C0 7? ?? 80 3D [4] FF }\n                $sb2 = { 80 3D [4] D8 [2-32] 41 B8 04 00 00 00 [0-32] C7 44 24 ?? 4A 46 49 46 [0-32] E8 [4-5] 85 C0 [2-32] C6 05 [4] 6A C6 05 [4] 70 C6 05 [4] 65 C6 05 [4] 67 }\n                $sb3 = { BA [4] 48 89 ?? E8 [4] 41 B8 [4] 48 89 ?? 48 89 ?? E8 [4] 85 C0 7? [1-32] 8B 44 24 ?? 48 8B ?? 24 [1-16] 48 01 C8 [0-32] FF D0 }\n            \n            condition:\n                all of them\n        }\n\n        private rule APT_Dropper_Win64_TEARDROP_2\n        {\n            meta:\n                author = \"FireEye\"\n                description = \"This rule is intended match specific sequences of opcode found within TEARDROP, including those that decode the embedded payload. TEARDROP is a memory only dropper that can read files and registry keys, XOR decode an embedded payload, and load the payload into memory. TEARDROP persists as a Windows service and has been observed dropping Cobalt Strike BEACON into memory.\"\n                source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/TEARDROP/yara/APT_Dropper_Win64_TEARDROP_2.yar\"\n            \n            strings:\n                $loc_4218FE24A5 = { 48 89 C8 45 0F B6 4C 0A 30 }\n                $loc_4218FE36CA = { 48 C1 E0 04 83 C3 01 48 01 E8 8B 48 28 8B 50 30 44 8B 40 2C 48 01 F1 4C 01 FA }\n                $loc_4218FE2747 = { C6 05 ?? ?? ?? ?? 6A C6 05 ?? ?? ?? ?? 70 C6 05 ?? ?? ?? ?? 65 C6 05 ?? ?? ?? ?? 67 }\n                $loc_5551D725A0 = { 48 89 C8 45 0F B6 4C 0A 30 48 89 CE 44 89 CF 48 F7 E3 48 C1 EA 05 48 8D 04 92 48 8D 04 42 48 C1 E0 04 48 29 C6 }\n                $loc_5551D726F6 = { 53 4F 46 54 57 41 52 45 ?? ?? ?? ?? 66 74 5C 43 ?? ?? ?? ?? 00 }\n            \n            condition:\n                (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and any of them\n        }\n\n        import \"pe\"\n        private rule SentinelLabs_SUPERNOVA\n        {\n            meta:\n                description = \"Identifies potential versions of App_Web_logoimagehandler.ashx.b6031896.dll weaponized with SUPERNOVA\"\n                date = \"2020-12-22\"\n                author = \"SentinelLabs\"\n                source = \"https://labs.sentinelone.com/solarwinds-understanding-detecting-the-supernova-webshell-trojan/\"\n                \n            strings:\n                $ = \"clazz\"\n                $ = \"codes\"\n                $ = \"args\"\n                $ = \"ProcessRequest\"\n                $ = \"DynamicRun\"\n                $ = \"get_IsReusable\"\n                $ = \"logoimagehandler.ashx\" wide\n                $ = \"SiteNoclogoImage\" wide\n                $ = \"SitelogoImage\" wide\n\n            condition:\n                (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and pe.imports(\"mscoree.dll\")) and all of them\n        }\n\n        rule SolarWindsArtifacts\n        {\n            meta:\n                author = \"NSA Cybersecurity\"\n                description = \"Artifacts common to the SolarWinds compromise.\"\n\n            condition:\n                APT_Backdoor_MSIL_SUNBURST_1 \n                or APT_Backdoor_MSIL_SUNBURST_2 \n                or APT_Backdoor_MSIL_SUNBURST_3 \n                or APT_Backdoor_MSIL_SUNBURST_4 \n                or APT_Dropper_Raw64_TEARDROP_1 \n                or APT_Dropper_Win64_TEARDROP_2\n                or SentinelLabs_SUPERNOVA\n        }\n\n        rule reGeorg_Variant_Web_shell {\n            meta:\n                description = \"Matches the reGeorg variant web shell used by the actors.\"\n                date = \"2021-07-01\"\n                author = \"National Security Agency\"\n                source = \"https://media.defense.gov/2021/Jul/01/2002753896/-1/-1/1/CSA_GRU_GLOBAL_BRUTE_FORCE_CAMPAIGN_UOO158036-21.PDF\"\n                \n            strings:\n                $pageLanguage = \"\u003c%@ Page Language=\\\"C#\\\"\"\n                $obfuscationFunction = \"StrTr\"\n                $target = \"target_str\"\n                $IPcomms = \"System.Net.IPEndPoint\"\n                $addHeader = \"Response.AddHeader\"\n                $socket = \"Socket\"\n                \n            condition:\n                5 of them\n        }\n\nsources:\n  - name: YaraHits\n    query: |\n      LET webroot = SELECT * FROM switch(\n        windows={SELECT WindowsWebRoot AS Dir FROM info() WHERE OS = \"windows\"},\n        linux={SELECT LinuxWebRoot AS Dir FROM info() WHERE OS = \"linux\"}\n      ) \n      LET webroot_dir \u003c= webroot[0].Dir\n      Select * FROM Artifact.Generic.Detection.Yara.Glob(PathGlob=webroot_dir, YaraRule=YaraRule, DateAfter=DateAfter)\n  - name: WindowsProcessCreation\n    precondition:\n      SELECT OS From info() where OS = 'windows'\n    query: |\n      SELECT * FROM Artifact.Windows.EventLogs.Evtx(EvtxGlob='%SystemRoot%\\\\System32\\\\winevt\\\\Logs\\\\{*Sysmon*,Security}\\.evtx', IDRegex=\"1|4688\")\n      WHERE ( Channel =~ 'sysmon' AND EventID = 1 AND EventData.ParentImage =~ WebserverProcessRegex AND EventData.Image =~ SpawnedProcessRegex )\n        OR ( Channel =~ 'Security' AND EventID = 4688 AND EventData.ParentProcessName =~ WebserverProcessRegex AND EventData.NewProcessName =~ SpawnedProcessRegex )\n  - name: FileSystemChanges\n    query: |\n      -- time test function (taken from Windows.NTFS.MFT)\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n      \n      LET webroot = SELECT * FROM switch(\n        windows={SELECT WindowsWebRoot AS Dir FROM info() WHERE OS = \"windows\"},\n        linux={SELECT LinuxWebRoot AS Dir FROM info() WHERE OS = \"linux\"}\n      ) \n      LET webroot_dir \u003c= webroot[0].Dir\n      SELECT * FROM glob(globs=webroot_dir, accessor=\"auto\")\n      WHERE \n        NOT IsDir \n        AND (time_test(stamp=Btime) OR time_test(stamp=Mtime))\n        AND Name =~ WebshellRegex\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Events.TrackNetworkConnections","op":"set","definition":"name: Exchange.Generic.Events.TrackNetworkConnections\nauthor: Herbert Bärschneider @SEC Consult\ndescription: |\n   This artifact is meant for monitoring network connections on clients.\n   It periodically queries the existing network connections and emits lines for differences (new connections and missing/removed ones).\n   Network connections are tracked and compared based on following elements: process id, layer 3 protocol, layer 4 protocol, local address used, local port used, remote address used, remote port used.\n   \n   The network connection information is enriched with process information to make it easier to analyze emited lines.\n\ntype: CLIENT_EVENT\n\nparameters:\n   - name: Period\n     default: 2\n     type: int\n     description: how many seconds the artifact waits between checking network connections for changes\n\nsources:\n    - query: |\n        LET NetworkConnections = SELECT *, format(format=\"%v %v %v %v %v %v %v\", args=[Pid, Family, Type, Laddr.IP, Laddr.Port, Raddr.IP, Raddr.Port]) AS DiffKey FROM netstat()\n      \n        LET EventQuery = SELECT * FROM diff(query=NetworkConnections, period=Period, key=\"DiffKey\")\n      \n        SELECT *, process_tracker_get(id=Pid) AS ProcInfo FROM EventQuery\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Generic.Forensics.CyLR","op":"set","definition":"name: Exchange.Generic.Forensics.CyLR\ndescription: |\n  Uses CyLR tool to do live forensic on the host.\n\n  Note this requires syncing the CyLR binary from the host.\n\ntools:\n  - name: Cylr_amd64\n    serve_locally: true\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: TargetDir\n    type: string\n    default: \"%SystemDrive%\\\\\"\n  - name: ZipPassword\n    type: string\n    default: \"\"\n  - name: ToolInfo\n    type: hidden\n    description: Override Tool information.\n\nsources:\n  - query: |\n      LET os_info \u003c= SELECT Architecture,Hostname FROM info()\n\n      // Get the path to the binary.\n      LET bin \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n              ToolName= \"Cylr_\" + os_info[0].Architecture,\n              ToolInfo=ToolInfo)\n              \n      // Set necessary variables\n      LET hostname = os_info[0].Hostname\n      LET outputDir \u003c= expand(path=TargetDir)\n      LET outputFile = upcase(string=hostname)+\".zip\"\n      LET logFile \u003c= outputDir + \"\\\\\" + \"CylR.log\"\n      LET fullOutputFile \u003c= outputDir + \"\\\\\" + outputFile\n      \n      // Call the binary and return all its output in a single row.\n      LET output \u003c= SELECT * FROM execve(argv=[bin[0].FullPath, '-od', outputDir, ], cwd=outputDir, length=10000000)\n\n      // Upload the forensic file and report additional data.\n      SELECT upload(file=logFile) AS LogFile, upload(file=fullOutputFile) AS ForensicFile FROM scope()\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Server.Alerts.GenericMonitor","op":"set","definition":"name: Exchange.Server.Alerts.GenericMonitor\ndescription: |\n   This is a template artifact to allow alerting on a monitoring artifact.\n   \n   Simply enter ArtifactName and modify VQL as desired.\n   \n   \ntype: SERVER_EVENT\n\nparameters:\n  - name: ArtifactName\n    default: Windows.ETW.ETWSessions\n\nsources:\n  - query: |\n        SELECT * from watch_monitoring(artifact=ArtifactName)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Linux.Sys.Getcap","op":"set","definition":"name: Exchange.Linux.Sys.Getcap\nauthor: Matt Green - @mgreen27\ndescription: |\n    Inspects extended file capabilities with getcap.  \n    Since Linux 2.6.24, setcap can attach fine-grained privilege bits to \n    executables, letting them perform the specific privileged actions they \n    require instead of running as root.   \n    If a binary that’s writable or executable by non-privileged users is granted \n    excessive capabilities, attackers can exploit it for privilege escalation.\n    \nreference:\n    - https://dfir.ch/posts/linux_capabilities/\n    - https://man7.org/linux/man-pages/man7/capabilities.7.html\n    \n    \nparameters:\n  - name: TargetPath\n    default: /\n    description: Target path for getcap. Default / will scan all. Globs also work - e.g /usr/bin/*\n  - name: CapRegex\n    default: .\n    description: \"Regex for capability to search for: e.g cap_setuid=ep\"\n\nrequired_permissions:\n  - EXECVE\n  \nsources:\n  - precondition: |\n       SELECT OS\n       FROM info()\n       WHERE OS = 'linux'\n\n\n    query: |\n       LET results = SELECT Stdout\n         FROM execve(argv=[\"getcap\", \"-r\", TargetPath], sep='\\n')\n         WHERE Stdout =~ \"cap\"\n       \n       LET caps = SELECT split(sep=' ', string=Stdout)[:-1][0] AS Binary,\n                         split(sep=' ', string=Stdout)[-1] AS Capabilities\n         FROM results\n         WHERE Capabilities =~ CapRegex\n       \n       SELECT *\n       FROM foreach(row=caps,\n                    query={\n           SELECT OSPath,\n                  Capabilities,\n                  Mode.String AS ModeString,\n                  Size,\n                  Mtime,\n                  Atime,\n                  Ctime,\n                  Btime\n           FROM stat(filename=Binary)\n         })\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Remediation.Glob","op":"set","definition":"name: Exchange.Windows.Remediation.Glob\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact uses glob to remove a file or folder.  \n   To recursively target a folder: ```C:\\folder\\path{,\\**}```  \n   To target multiple folders: ```C:\\{folder2\\path2{,\\**},folder\\path{,\\**}}``` \n   however advised to just run 2 collections...   \n     \n    WARNING: There has been a bug in older versions of Velociraptor that ```\\**```\n    glob path will select all files. PLEASE SCOPE FIRST and use appropriate targeting.\n    \ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     default: C:\\Path\\to\\File\n   - name: NoDir\n     description: Do not scope folders\n     type: bool\n   - name: ReallyDoIt\n     description: When selected will really remove!\n     type: bool\n\nsources:\n  - query: |\n      LET targets = SELECT * FROM glob(globs=TargetGlob)\n        WHERE NOT if(condition=NoDir,\n                then= IsDir,\n                else= FALSE)\n        ORDER BY OSPath DESC -- need to order by path to ensure recursive delete works.\n      \n      LET delete_targets = SELECT *, rm(filename=OSPath) as Removed FROM targets\n\n      SELECT OSPath,Removed,Size,Mtime,Ctime,Btime,IsDir,IsLink\n      FROM if(condition=ReallyDoIt,\n            then= delete_targets,\n            else= { SELECT *, FALSE as Removed FROM targets } )\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Registry.HVCI","op":"set","definition":"name: Exchange.Windows.Registry.HVCI\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact will return the Enabled KeyValue in the Hypervisor-protected Code \n    Integrity (HVCI) registry path. An adversary may set the Enabled key to 0 \n    if they intend to manipulate UEFI boot process.\n    \n    The artifact will group by KeyName, KeyValue and KeyType to account for \n    multiple control sets.\n\nreference:\n  - https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/\n  - https://learn.microsoft.com/en-us/windows/security/hardware-security/enable-virtualization-based-protection-of-code-integrity\n\nparameters:\n - name: KeyGlob\n   default: HKEY_LOCAL_MACHINE\\SYSTEM\\*ControlSet*\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\\**\n - name: OnlyShowZero\n   type: bool\n   description: If this is set, the results will only show KeyValues = 0\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT \n        Mtime, \n        OSPath,\n        Data.type as KeyType,\n        Name as KeyName,\n        Data.value as KeyValue\n      FROM glob(globs=KeyGlob, accessor=\"registry\")\n      WHERE KeyName = 'Enabled'\n        AND if(condition= OnlyShowZero,\n                then= KeyValue = 0,\n                else= True )\n      GROUP BY KeyName, KeyValue, KeyType\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Registry.HiddenUsers","op":"set","definition":"name: Exchange.Windows.Registry.HiddenUsers\ndescription: |\n    Find hidden user accounts through registry values on the filesystem.\n\n    In Windows, adversaries may hide user accounts via settings in the Registry. \n    For example, an adversary may add a value to the Windows Registry \n    (via Reg or other means) that will hide the user \"test\" from \n    the Windows login screen: \n    \n    reg.exe ADD 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList' /v test /t REG_DWORD /d 0 /f.\n\n    * ATT\u0026CK tactic: Defense Evasion, Hide Artifacts: Hidden Users\n    * ATT\u0026CK technique: T1564.002\n\nreference:\n  - https://attack.mitre.org/techniques/T1564/002/\n  - https://github.com/Res260/conti_202202_leak_procedures/blob/main/12_using_anydesk.txt\n  \ntype: CLIENT\n\nauthor: Eduardo Mattos - @eduardfir\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\**\n    description: Use a glob to define the keys that will be searched.\n\nsources:\n  - query: |\n        SELECT  Name,\n                FullPath,\n                Data,\n                Sys,\n                ModTime as Modified\n        FROM glob(globs=SearchRegistryGlob, accessor='registry')\n\ncolumn_types:\n  - name: Modified\n    type: timestamp\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.Windows.Memory.HollowsHunter","op":"set","definition":"name: Exchange.Windows.Memory.HollowsHunter\ndescription: |\n   Use hollows_hunter to detect suspicious process injections.\n\n   Upload any findings to the server, including process dumps.\n\ntools:\n - name: hollows_hunter\n   github_project: hasherezade/hollows_hunter\n   github_asset_regex: hollows_hunter64.exe\n   serve_locally: true\n\nprecondition:\n   SELECT OS From info() where OS = 'windows'\n   \nsources:\n  - name: Output\n    query: |\n      -- Get the path to the hollows_hunter tool and a fresh temp directory.\\\n      LET TempDir \u003c= tempdir(remove_last=TRUE)\n      LET binaries \u003c= SELECT FullPath\n      FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"hollows_hunter\")\n\n      -- Run the tool and relay back the output, as well as upload all the files from the tempdir.\n      SELECT *\n      FROM execve(argv=[binaries[0].FullPath,\"/hooks\",\n           \"/json\", \"/dir\", TempDir], sep=\"\\n\")\n           \n  - name: Summary\n    query: |\n      LET LookupPid(pid) = SELECT Name, CommandLine, Exe FROM pslist(pid=pid)\n\n      SELECT *, LookupPid(pid=pid)[0] AS ProcessInfo\n      FROM foreach(row=parse_json(\n            data=read_file(filename=TempDir + \"/summary.json\")).suspicious)  \n            \n  - name: Uploads\n    query: |\n      SELECT upload(file=FullPath) AS Upload\n      FROM glob(globs=\"*\", root=TempDir)\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.IPCheck.Virustotal","op":"set","definition":"name: Exchange.IPCheck.Virustotal\nauthor: Adrian Lopez Moreno @AdrianX21\ndescription: |\n  Submit a IP to Virustotal. Default Public API restriction is 4 requests/min (Inspired on Virustotal file Check created by Wes Lambert -- @therealwlambert).\n\n  This artifact can be called from within another artifact \n\n  Ex.\n\n    `SELECT * from Artifact.IPCheck.Virustotal(DestIP=$IP)`\n\n     EX 2\n     \n     Check ip into a netstat: \n     Call the artifact -\u003e Windows.Network.NetstatEnriched\n     \n      `SELECT * FROM source() WHERE DestIP != \"127.0.0.1\" AND Pid = 14604  (malicious connection)`\n      VT Notebook analysis.\n      \n      `LET VTKey \u003c= \"Your key\"`\n      `Let Results = SELECT * from source() WHERE DestIP != \"127.0.0.1\" AND DestIP`\n      `GROUP BY DestIP`\n      `SELECT *, {SELECT VTRating FROM Artifact.IPCheck.Virustotal(VirustotalKey=VTKey, ip=DestIP) } AS VTResults FROM foreach(row=Results)`\n      `ORDER BY VTResults DESC`\n\ntype: SERVER\n\nparameters:\n    - name: ip\n      type: string\n      description: IP to check on Virustotal.\n      default:\n\n    - name: VirustotalKey\n      type: string\n      description: API key for Virustotal.\n      default:\n\nsources:\n  - query: |\n        LET Creds = if(\n           condition=VirustotalKey,\n           then=VirustotalKey,\n           else=server_metadata().VirustotalKey)\n\n        LET URL \u003c= 'https://www.virustotal.com/api/v3/ip_addresses/' + ip\n\n        LET Data = SELECT parse_json(data=Content) AS VTData\n        FROM http_client(url=URL, headers=dict(`x-apikey`=Creds))\n\n        SELECT format(format='%v/%v',\n             args=[VTData.data.attributes.last_analysis_stats.malicious,\n                   VTData.data.attributes.last_analysis_stats.malicious +\n                   VTData.data.attributes.last_analysis_stats.undetected]) As VTRating,\n            timestamp(epoch=VTData.data.attributes.first_seen_itw_date) AS FirstSeen,\n            timestamp(epoch=VTData.data.attributes.first_submission_date) AS FirstSubmitted,\n            timestamp(epoch=VTData.data.attributes.last_analysis_date) AS LastAnalysis,\n            VTData.data.attributes.crowdsourced_yara_results AS YARAResults,\n            VTData AS _Data\n        FROM Data\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.IRIS.Sync.Asset","op":"set","definition":"name: Exchange.IRIS.Sync.Asset\n\nauthor: Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult) | Updated 2024-08 - [10root Cyber Security] (https://10root.com)\n\ndescription: |\n   Synchronizes client information from Velociraptor to [DFIR-IRIS](https://dfir-iris.org/).\n\n   Parses available information from clients such as network interfaces, IP addresses, asset type and applied labels.\n   Once it has been added, the asset ID from DFIR-IRIS will be added as client metadata and `IRIS` will be added as label.\n\n   If this artifact is applied on a client that has the asset ID set in its metadata, it won't be readded but rather\n   updated: Labels and the compromised status will by synchronized.\n\n   *Tested with Dfir-Iris API v2.0.4 (IRIS v2.4.7)*\n\n   #### Hints:\n\n   - If it fails to add the client to IRIS, it will assign the `IRIS-ERROR` label to it. A successful run afterwards will remove it.\n   - It is **recommended** to add the parameters with 'Iris' prefix to the \u003ca href=\"#/host/server\"\u003eServer Metadata\u003c/a\u003e to ease the usage of the artifact. The metadata can alternatively be set from a notebook using VQL similar to this example:\n\n   ```\n   SELECT server_set_metadata(IrisURL=\"https://dfir-iris.local:4433\",\n                              IrisKey=\"This-is-an_API_KEY\",\n                              IrisCaseId=\"1\",\n                              IrisRootCA='''-----BEGIN CERTIFICATE-----\n                              \u003c...\u003e\n                              -----END CERTIFICATE-----'''),server_metadata() FROM scope()\n   ```\n\n   - You can define the compromise status of a system when creating and when updating the information. **However, if an asset is categorized as *compromised*, you cannot change the status using this artifact.** This is a safety measure to mitigate a potential high impact error. Beside that, you can freely change the status between *No*, *Unknown* and *To be determined*.\n   - The true power of this artifact lies in the ability to quickly add many clients to DFIR-IRIS. As it is usually not needed to add all clients that are enrolled in Velociraptor to IRIS but rather an excerpt of important, suspicious, or compromised systems, you will *most likely use this artifact from within a notebook*.\n\n   #### Example:\n\n   to add just a few systems and have the results of the operation as JSON:\n\n   ```VQL\n   SELECT client_id,{SELECT * FROM Artifact.Exchange.IRIS.Sync.Asset(clientId=client_id,isCompromised=\"Y\")} FROM clients(search=\"label:compromised\")\n   ```\n\n   **Example** to add many systems in a performant way and have the results in well-structured columns.\n\n   ```VQL\n   SELECT * FROM foreach(row={SELECT * FROM clients(search=\"label:suspicious\")},query={SELECT * FROM Artifact.Exchange.IRIS.Sync.Asset(clientId=client_id,isCompromised=\"UNK\")},async=true)\n   ```\n   **ATTENTION: ALWAYS USE ASYNC=FALSE IF CLIENTS ARE PRESENT IN THE TABLE MULTIPLE TIMES! OTHERWISE THESE ASSETS MIGHT BE DUPLICATED IN IRIS!!!**\n\ntype: SERVER\n\nparameters:\n  - name: clientId\n    description: Client Id of the client that should be synced to DFIR-IRIS\n  - name: isCompromised\n    default: TBD\n    description: Specify whether this asset should be marked as compromised in IRIS using \"Y\" (compromised), \"N\" (not compromised), \"TBD\" (to be determined), or \"UNK\" (unknown).\n    type: choices\n    choices:\n      - Y\n      - N\n      - TBD\n      - UNK\n  - name: labelIgnoreListRegex\n    default: \"IRIS|^Workstation$|^Server$|^Domain Controller$|^Linux$\"\n    description: Labels that should be ignored and not added to IRIS\n  - name: IrisURL\n    type: server_metadata\n    description: URL of DFIR-IRIS. Preferred method is to use the server metadata\n  - name: IrisKey\n    type: server_metadata\n    description: API Key of DFIR-IRIS. Preferred method is to use the server metadata\n  - name: IrisCaseId\n    type: server_metadata\n    description: Case ID of the current case. Preferred method is to use the server metadata\n  - name: IrisRootCA\n    type: server_metadata\n    description: RootCA of DFIR-IRIS for self-signed or internal certificates of DFIR-IRIS. Preferred over completely skipping SSL verification.\n  - name: DisableSSLVerify\n    type: bool\n    default: false\n    description: Disable TLS verification for HTTPS request to DFIR-IRIS.\n\nsources:\n  - query: |\n\n      LET AssetType = SELECT * FROM switch(\n        a = {SELECT {\n                SELECT if(condition = `Computer Info`.DomainRole =~ \"Workstation\",\n                    then = 9,\n                    else = if(condition= `Computer Info`.DomainRole =~ \"Server\",\n                        then = 10,\n                        else = if(condition= `Computer Info`.DomainRole =~ \"Domain Controller\",\n                            then = 11\n                    )))\n                FROM flow_results(client_id=clientId,flow_id=last_interrogate_flow_id,artifact=\"Generic.Client.Info/WindowsInfo\")\n              } as AssetTypeId\n              FROM clients(client_id=clientId)\n              WHERE os_info.system =~ \"windows\"\n        },\n        b = {SELECT 3 as AssetTypeId\n              FROM clients(client_id=clientId)\n              WHERE os_info.system =~ \"linux\"})\n\n      LET resolveIPs =\n          SELECT\n            {SELECT `Network Info` FROM flow_results(client_id=client_id,flow_id=last_interrogate_flow_id,artifact=\"Generic.Client.Info/WindowsInfo\")} as NetworkInfo\n          FROM clients(client_id=clientId)\n\n      LET primaryIP =\n          SELECT parse_string_with_regex(string=if(condition=NetworkInfo[0],then=NetworkInfo[0].IPAddresses,else=NetworkInfo.IPAddresses),regex=\"(?P\u003cIP\u003e[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3})\").IP as PrimaryIPv4Address\n          FROM resolveIPs\n\n      LET networkInterfaces =\n          SELECT parse_string_with_regex(string=NetworkInfo.Caption,regex=\"^\\\\[.*\\\\] (?P\u003cIF\u003e.*)\").IF as NetworkInterface,\n                            NetworkInfo.IPAddresses as IPAddresses, NetworkInfo.MACAddress as MACAddress\n          FROM flatten(query=resolveIPs)\n\n      LET NetInfo =\n          SELECT format(format=\"%v (%v): %v\",args=[NetworkInterface,MACAddress,IPAddresses]) AS fmt FROM networkInterfaces\n\n      LET networkInterfacesDescription =\n          SELECT join(array=NetInfo.fmt, sep=\"\\n\") as NetworkInfo\n          FROM NetInfo\n\n      LET labelToTags =\n          join(array=filter(list=labels, condition=\"x=\u003eNOT x =~ labelIgnoreListRegex\"),sep=\",\")\n\n      LET metadata_preparation =\n          SELECT client_metadata(client_id=clientId) as metadata FROM scope() WHERE metadata.IRIS_AssetId\n\n      LET assetId =\n          SELECT metadata_preparation.metadata[0].IRIS_AssetId as assetId FROM scope()\n\n      LET addMetadata(assetIdValue) =\n          SELECT client_set_metadata(client_id=clientId,metadata=client_metadata(client_id=clientId) + dict(IRIS_AssetId=assetIdValue)), client_metadata(client_id=clientId)\n          FROM scope()\n\n      LET assetProperties =\n          serialize(item=dict(\n                    asset_name=format(format=\"%v\",args=[os_info.hostname]),\n                    asset_type_id=AssetType.AssetTypeId[0],\n                    analysis_status_id=1,\n                    asset_compromise_status_id=if(condition=isCompromised=~\"^Y$\",then=1,else=if(condition=isCompromised=~\"^N$\",then=2,else=if(condition=isCompromised=~\"^UNK$\",then=3,else=0))),\n                    asset_domain=format(format=\"%v\",args=[join(array=slice(list=split(sep_string=\".\",string=os_info.fqdn),start=1,end=-1),sep=\".\")]),\n                    asset_ip=format(format=\"%v\",args=[primaryIP.PrimaryIPv4Address]),\n                    asset_tags=if(condition=labelToTags,then=format(format=\"Velo,%v\",args=[labelToTags]),else=\"Velo\"),\n                    asset_description=format(format=\"Velo ClientId: %v\\nVelo Agent First seen: %v\\nAsset added to IRIS by Velo: %v\\nNetwork Info:\\n%v\", args=[client_id,timestamp(epoch=first_seen_at),timestamp(epoch=now()),networkInterfacesDescription.NetworkInfo[0]])\n                ), format=\"json\" )\n\n      LET apiRequestIrisAdd =\n          SELECT *, if(condition=parse_json(data=Content).data.asset_id,\n                    then={ SELECT addMetadata(assetIdValue=format(format=\"%v\",\n                                  args=parse_json(data=Content).data.asset_id)),\n                                  label(client_id=clientId,op=\"set\",labels=\"IRIS\"),\n                                  label(client_id=clientId,op=\"remove\",labels=\"IRIS-ERROR\")\n                           FROM scope()},\n                    else={ SELECT label(client_id=clientId,op=\"set\",labels=\"IRIS-ERROR\")\n                           FROM scope()}) as applyLabels\n          FROM http_client(\n                 data=assetProperties,\n                 headers=dict(\n                 `Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\",\n                   args=[IrisKey])),\n                 skip_verify=DisableSSLVerify,\n                 root_ca=IrisRootCA,\n                 method=\"POST\",\n                 url=format(format=\"%v/case/assets/add?cid=%v\", args=[IrisURL,IrisCaseId]))\n\n      LET apiRequestIrisGet(assetId) =\n          SELECT parse_json(data=Content),\n                 parse_json(data=Content).data.asset_name as asset_name,\n                 parse_json(data=Content).data.asset_type_id as asset_type_id,\n                 parse_json(data=Content).data.analysis_status_id as analysis_status_id,\n                 parse_json(data=Content).data.asset_tags as asset_tags,\n                 parse_json(data=Content).data.linked_ioc as linked_ioc,\n                 parse_json(data=Content).data.custom_attributes as custom_attributes,\n                 parse_json(data=Content).data.asset_compromise_status_id as asset_compromise_status_id\n          FROM http_client(\n                  headers=dict(\n                     `Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\",\n                  args=[IrisKey])),\n                  skip_verify=DisableSSLVerify,\n                  root_ca=IrisRootCA,\n                  method=\"GET\",\n                  url=format(format=\"%v/case/assets/%v?cid=%v\", args=[IrisURL,assetId,IrisCaseId]))\n\n      LET assetPropertiesUpdate = serialize(\n          item=dict(\n            asset_name=currentAsset.asset_name[0],\n            asset_type_id=currentAsset.asset_type_id[0],\n            analysis_status_id=currentAsset.analysis_status_id[0],\n            asset_compromise_status_id=if(\n              condition=isCompromised =~ \"^Y$\",\n              then=1,\n              else=if(\n                condition=currentAsset.asset_compromise_status_id[0] = 1,\n                then=1,\n                else=if(\n                  condition=isCompromised =~ \"^N$\",\n                  then=2,\n                  else=if(\n                    condition=isCompromised =~ \"^UNK$\",\n                    then=3,\n                    else=if(\n                      condition=isCompromised =~ \"^TBD$\",\n                        then=0,\n                        else=currentAsset.asset_compromise_status_id[0]))))),\n            asset_tags=if(\n              condition=labelToTags,\n              then=format(format=\"Velo,%v\", args=[labelToTags]),\n              else=\"Velo\")),\n          format=\"json\")\n\n      LET apiRequestIrisUpdate(currentAsset,assetId) =\n          SELECT *,\n                 if(condition= Response=200,\n                 then={ SELECT addMetadata(assetIdValue=format(format=\"%v\",args=parse_json(data=Content).data.asset_id)),\n                              label(client_id=clientId,op=\"set\",labels=\"IRIS\"),\n                              label(client_id=clientId,op=\"remove\",labels=\"IRIS-ERROR\")\n                        FROM scope()},\n                 else={ SELECT label(client_id=clientId,op=\"set\",labels=\"IRIS-ERROR\") FROM scope()}) as applyLabels\n                        FROM http_client(data=assetPropertiesUpdate,\n                                         headers=dict(\n                                           `Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\",\n                                             args=[IrisKey])),\n                                         skip_verify=DisableSSLVerify,\n                                         root_ca=IrisRootCA,\n                                         method=\"POST\",\n                                         url=format(format=\"%v/case/assets/update/%v?cid=%v\",\n                                                           args=[IrisURL,assetId,IrisCaseId]))\n\n      LET addAsset =\n          SELECT { SELECT * FROM apiRequestIrisAdd } as apiRequestIrisAdd FROM clients(client_id=clientId)\n\n      LET updateAsset =\n          SELECT { SELECT * FROM apiRequestIrisUpdate(currentAsset=apiRequestIrisGet(assetId=client_metadata(client_id=clientId).IRIS_AssetId),assetId=client_metadata(client_id=clientId).IRIS_AssetId) } as apiRequestIrisUpdate\n          FROM clients(client_id=clientId)\n\n\n      SELECT * FROM if(condition= metadata_preparation,\n        then={ SELECT\n               \"Already Added -\u003e Update labels and compromise status in IRIS\" AS Action,\n               if(\n                 condition=apiRequestIrisUpdate.Response = 200,\n                 then=\"SUCCESS\",\n                 else=\"ERROR\") AS Result,\n               parse_json(\n                 data=apiRequestIrisUpdate.Content).data AS AssetProperties,\n               apiRequestIrisUpdate.applyLabels[0].`addMetadata(assetIdValue=format(format=\"%v\", args=parse_json(data=Content).data.asset_id))`[0].`client_metadata(client_id=clientId)`.IRIS_AssetId AS IRIS_AssetId,\n               apiRequestIrisUpdate AS _rawEvent\n            FROM updateAsset\n        },\n        else={ SELECT\n             \"Needs to be added\" AS Action,\n             if(\n               condition=apiRequestIrisAdd.Response = 200,\n               then=\"SUCCESS\",\n               else=\"ERROR\") AS Result,\n             parse_json(\n               data=apiRequestIrisAdd.Content).data AS AssetProperties,\n             apiRequestIrisAdd.applyLabels[0].`addMetadata(assetIdValue=format(format=\"%v\", args=parse_json(data=Content).data.asset_id))`[0].`client_metadata(client_id=clientId)`.IRIS_AssetId AS IRIS_AssetId,\n             apiRequestIrisAdd AS _rawEvent\n             FROM addAsset\n            }\n        )\n\n","id":78560752944729352,"_ts":1757377133}
{"setter":"api","artifact":"Exchange.IRIS.Timeline.Add","op":"set","definition":"name: Exchange.IRIS.Timeline.Add\n\nauthor: Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult) | Updated 2024-08 - [10root Cyber Security] (https://10root.com)\n\ndescription: |\n   Adds Velociraptor rows as timeline entries to [DFIR-IRIS](https://dfir-iris.org/).\n\n   Links the assets and IOCs as specified in the parameters. Additionally, if the client does not yet exist in Iris, this artifact will leverage the **IRIS.Sync.Asset** artifact to add the asset to Iris first and link it in the event.\n\n   *Tested with Dfir-Iris API v2.0.4 (IRIS v2.4.7)*\n\n   #### Notes:\n\n   - The following parameters are *mandatory*:\n     1. **Timestamp**: This specifies the name of the field in the source containing the event timestamp. For this artifact to parse it correctly the field should contain a parsed timestamp object. If you are using this artifact from a global notebook then the field is probably already parsed. If not then you should ensure that it is parsed in your source using the `timestamp` function.\n     2. **Title**: This specifies the name of the field in the source containing the event title which will be used on the Iris timeline.\n\n   #### Hints:\n\n   - It is **recommended** to add the parameters with 'Iris' prefix to the \u003ca href=\"#/host/server\"\u003eServer Metadata\u003c/a\u003e to ease the usage of the artifact. The metadata can alternatively be set from a notebook using VQL similar to this example:\n\n   ```\n   SELECT server_set_metadata(IrisURL=\"https://dfir-iris.local:4433\",IrisKey=\"This-is-an_API_KEY\",IrisCaseId=\"1\",IrisRootCA='''-----BEGIN CERTIFICATE-----\n   \u003c...\u003e\n   -----END CERTIFICATE-----'''),server_metadata() FROM scope()\n   ```\n\n   - The true power of this artifact lies in the ability to quickly add many entries to DFIR-IRIS. You will *most likely use this artifact from within a notebook*.\n   - There is a basic mechanism established to stop duplicates from being added. An event is compared to existing entries based on asset name, flow id, timestamp and the description. You can add multiple events happening at the same time for the same asset originating from the same flow as long as the description varies, e.g. by including dynamic details of the activity that differentiates between the events at the same time like a process name.\n\n   #### Notebook usage example:\n\n   ```VQL\n   LET ClientId \u003c= '''C.daa3bab35a125058'''\n   LET FlowId \u003c= '''F.CPTTPTRO63LF6'''\n   LET ArtifactName \u003c= '''Windows.Timeline.MFT'''\n\n   -- This is the query that should return the events you want to add to Iris.\n   -- You might want to add a WHERE clause to filter out unwanted events or\n   -- select only specific fields. In this example we limit it to 10 records.\n   LET eventsToAdd = SELECT * FROM source(artifact=ArtifactName)\n                     LIMIT 10\n\n   SELECT * FROM foreach(\n     row={\n       SELECT to_dict(item=_value) AS event,\n              serialize(format=\"json\", item=_value) AS raw_event\n       FROM items(item={ SELECT * FROM eventsToAdd })\n     },\n     query={\n       SELECT *\n       FROM Artifact.IRIS.Timeline.Add(\n         AdditionalAssetId=\"1,2,3\",\n         AddToGraph=true,\n         AddToSummary=false,\n         IocId=\"8,9,10\",\n         Category=\"pers\",\n         clientId=ClientId,\n         Description=format(\n           format=\"Malicious file dropped to the system to establish persistence.\\nFile path: %v\\nActivity: %v\",\n           args=[event.path, event.message]),\n         RawEvent=raw_event,\n         DisableSSLVerify=true,\n         FlowId=FlowId,\n         Timestamp=event.event_time,\n         Title=\"Persistence established via Autostart Location\")\n     },\n     async=false)\n   ```\n   **ATTENTION: ALWAYS USE ASYNC=FALSE OTHERWISE ANY ASSETS THAT NEED TO BE CREATED MIGHT BE DUPLICATED!!!**\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: SERVER\n\nparameters:\n  - name: clientId\n    description: Client Id of the client that should be synced to DFIR-IRIS\n  - name: AdditionalAssetId\n    description: Comma seperated list of IRIS AssetIds of additional assets beside the client to link in this event.\n  - name: IocId\n    description: Comma seperated list of IRIS IocIds to link IOCs in this event.\n  - name: Timestamp\n    description: Timestamp of the event as a time.Time object. This can be a field in the source data containing a timestamp object.\n  - name: Title\n    description: Title of the event.\n  - name: FlowId\n    description: FlowId or HuntId of the event source. This is needed to allow detection of duplicates!\n  - name: Tags\n    description: List of comma seperated tags to be added to the event.\n  - name: Description\n    description: Description of the event. Very important to actually understand what this entry is all about :)\n  - name: AddToSummary\n    description: Add it to timeline summary?\n    type: bool\n  - name: AddToGraph\n    description: Add it to attack graph?\n    type: bool\n  - name: Category\n    description: \"Category of the action, mostly MITRE Enterprise Tactics. Allowed options are abbreviations and their MITRE ID: tbd,legit,rem,ini,exec,pers,priv,def,creds,disc,lat,coll,c2,exfil,imp\"\n    type: choices\n    choices:\n      - tbd\n      - legit\n      - rem\n      - ini\n      - exec\n      - pers\n      - priv\n      - def\n      - creds\n      - disc\n      - lat\n      - coll\n      - c2\n      - exfil\n      - imp\n  - name: Color\n    description: Specify the color for this event in Iris. Green by default for obvious reasons.\n    type: choices\n    choices:\n      - green\n      - white\n      - blue\n      - lightblue\n      - purple\n      - red\n      - orange\n  - name: RawEvent\n    description: Add the raw event, message or the entire row as additional information.\n  - name: IrisURL\n    type: server_metadata\n    description: URL of DFIR-IRIS. Preferred method is to use the server metadata\n  - name: IrisKey\n    type: server_metadata\n    description: API Key of DFIR-IRIS. Preferred method is to use the server metadata\n  - name: IrisCaseId\n    type: server_metadata\n    description: Case ID of the current case. Preferred method is to use the server metadata\n  - name: IrisRootCA\n    type: server_metadata\n    description: RootCA of DFIR-IRIS for self-signed or internal certificates of DFIR-IRIS. Preferred over completely skipping SSL verification.\n  - name: DisableSSLVerify\n    type: bool\n    default: false\n    description: Disable TLS verification for HTTPS request to DFIR-IRIS.\n\nsources:\n\n  - query: |\n\n      LET metadata_preparation = SELECT client_metadata(client_id=clientId) as metadata\n       FROM scope() WHERE metadata.IRIS_AssetId\n\n      LET syncAsset = SELECT * FROM Artifact.IRIS.Sync.Asset(\n         clientId=clientId,\n         IrisURL=IrisURL,\n         IrisCaseId=IrisCaseId,\n         IrisKey=IrisKey,\n         IrisRootCA=IrisRootCA,\n         DisableSSLVerify=DisableSSLVerify)\n\n      LET eventAsset1 = if(\n         condition=metadata_preparation,\n         then=array(a=metadata_preparation.metadata[0].IRIS_AssetId),\n         else=if(condition=syncAsset.Result[0]=\"SUCCESS\",\n                 then=array(a=metadata_preparation.metadata[0].IRIS_AssetId),else=[]))\n\n      LET eventAsset2 = if(condition=AdditionalAssetId,then=split(string=AdditionalAssetId,sep=\",|;\"),else=[])\n\n      LET eventCategory = if(condition=Category=~\"^legit\",then=2,\n                    else= if(condition=Category=~\"^rem\",then=3,\n                    else= if(condition=Category=~\"^ini|^ta0001$\",then=4,\n                    else= if(condition=Category=~\"^exec|^ta0002$\",then=5,\n                    else= if(condition=Category=~\"^pers|^ta0003$\",then=6,\n                    else= if(condition=Category=~\"^priv|^ta0004$\",then=7,\n                    else= if(condition=Category=~\"^def|^ta0005$\",then=8,\n                    else= if(condition=Category=~\"^cred|^ta0006$\",then=9,\n                    else= if(condition=Category=~\"^disc|^ta0007$\",then=10,\n                    else= if(condition=Category=~\"^lat|^ta0008$\",then=11,\n                    else= if(condition=Category=~\"^coll|^ta0009$\",then=12,\n                    else= if(condition=Category=~\"^c2|^com|^ta0011$\",then=13,\n                    else= if(condition=Category=~\"^exf|^ta0010$\",then=14,\n                    else= if(condition=Category=~\"^imp|^ta0040$\",then=15,\n                    else= 1))))))))))))))\n\n      LET eventColor = if(condition=Color =~ \"^white\",then=\"#fff\",\n                else = if(condition=Color =~ \"^blue\",then=\"#1572E899\",\n                else = if(condition=Color =~ \"^purple\",then=\"#6861CE99\",\n                else = if(condition=Color =~ \"^lightblue\",then=\"#48ABF799\",\n                else = if(condition=Color =~ \"^red\",then=\"#F2596199\",\n                else = if(condition=Color =~ \"^orange\",then=\"#FFAD4699\",\n                else = \"#31CE3699\"))))))\n\n      LET eventDate = format(format=\"%d-%02d-%02dT%02d:%02d:%02d.%03.f\", args=[\n                                      Timestamp.Year, Timestamp.Month, Timestamp.Day,\n                                      Timestamp.Hour, Timestamp.Minute, Timestamp.Second,\n                                      Timestamp.Nanosecond / 1000000\n                            ])\n\n      LET eventProperties = serialize(\n                            item=dict(\n                                event_title=Title,\n                                event_source=if(condition=FlowId,then=format(format=\"Velo: %v\",args=[FlowId]),else=\"Velo\"),\n                                event_assets=if(condition=eventAsset1 OR eventAsset2,then=eventAsset1 + eventAsset2,else=[]),\n                                event_iocs=if(condition=IocId,then=split(string=IocId,sep=\",|;\"),else=[]),\n                                event_tags=if(condition=Tags,then=format(format=\"Velo,%v\",args=[Tags]),else=\"Velo\"),\n                                event_category_id=eventCategory,\n                                event_in_summary=AddToSummary,\n                                event_in_graph=AddToGraph,\n                                event_color=eventColor,\n                                event_date=eventDate,\n                                event_tz=\"+00:00\",\n                                event_content=Description,\n                                event_raw=RawEvent\n                            )\n                            ,format=\"json\"\n                        )\n\n      LET apiRequestIrisAddEvent =\n          SELECT *\n          FROM http_client(\n              data=eventProperties,\n              headers=dict(`Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\", args=[IrisKey])),\n              skip_verify=DisableSSLVerify,\n              root_ca=IrisRootCA,\n              method=\"POST\",\n              url=format(format=\"%v/case/timeline/events/add?cid=%v\", args=[IrisURL,IrisCaseId]))\n\n      LET resolveHostname = SELECT os_info.hostname as hostname from clients(client_id=clientId)\n\n      LET filterParams = dict(cid=IrisCaseId,q=format(format='{\"asset\":[\"%v\"],\"source\":[\"%v\"],\"startDate\":[\"%v\"],\"endDate\":[\"%v\"]}',args=[resolveHostname.hostname[0],FlowId,eventDate,eventDate]))\n\n      LET checkExistingEntries =\n          SELECT * FROM flatten(query={ SELECT parse_json(data=Content).data.timeline as Timeline\n                                        FROM http_client(\n                                            headers=dict(`Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\", args=[IrisKey])),\n                                            method=\"GET\",\n                                            root_ca=IrisRootCA,\n                                            skip_verify=DisableSSLVerify,\n                                            params=filterParams,\n                                            url=format(format=\"%v/case/timeline/advanced-filter\", args=[IrisURL])) GROUP BY Timeline })\n                                       WHERE base64encode(string=Timeline.event_content) = base64encode(string=Description)\n\n      SELECT * FROM if(condition=checkExistingEntries,\n                then={SELECT \"Already Added -\u003e Skipping the event. Check for existing entries manually!\" as Action FROM scope()},\n                else={SELECT \"Needs to be added\" as Action, if(condition= Response=200,then=\"SUCCESS\",else=\"ERROR\") as Result,\n                      parse_json(data=eventProperties) AS _RequestData, parse_json(data=Content).data as _ResponseData\n                      FROM apiRequestIrisAddEvent})\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Windows.System.Powershell.ISEAutoSave","op":"set","definition":"name: Exchange.Windows.System.Powershell.ISEAutoSave\ndescription: |\n   This artifact hunts for Powershell ISE autosave files and extracts ISE user \n   config.\n   \n   Powershell ISE generates auto-save files for if the editor crashes.  \n   user.config holds ISE session metadata including a MRU for the relevant user.  \n   \ntype: CLIENT\n\nparameters:\n  - name: AutoSaveFiles\n    default: C:\\Users\\*\\AppData\\*\\Microsoft_Corporation\\Powershell_ISE.exe*\\*\\AutoSaveFiles\\*.ps1\n    description: ISE Autosave file glob\n  - name: UserConfig\n    default: C:\\Users\\*\\AppData\\*\\Microsoft_Corporation\\Powershell_ISE.exe*\\*\\user.config\n    description: ISE user config file glob\n  - name: ContentRegex\n    default: .\n    description: Content regex to hunt for in ISEAutoSave files\n  - name: ContentWhitelist\n    default:\n    description: Content whitelist to exclude from results in ISEAutoSave files\n     \n\nsources:\n  - precondition: SELECT OS From info() where OS = 'windows'\n    query: |\n      LET files = SELECT OSPath, Size, Mtime, Btime, Ctime, Atime\n        FROM glob(globs=AutoSaveFiles)\n        \n      SELECT \n        OSPath, Size, Mtime, Btime, Ctime, Atime,\n        read_file(filename=OSPath) as Content\n      FROM foreach(row=files)\n      WHERE Content =~ ContentRegex\n        AND NOT if(condition=ContentWhitelist,\n                then= Content =~ ContentWhitelist,\n                else= False )\n\n\n  - name: UserConfig\n    query: |\n      LET files = SELECT OSPath, Size, Mtime, Btime, Ctime, Atime\n        FROM glob(globs=UserConfig)\n      \n      SELECT \n        OSPath, Size, Mtime, Btime, Ctime, Atime,\n        parse_xml(file=Data,accessor='data').configuration.userSettings.UserSettings.setting[5].value.ArrayOfString.string as MRU,\n        parse_xml(file=Data,accessor='data').configuration as Configuration,\n        Data as RawXml\n      FROM foreach(row=files, query={\n            SELECT *, OSPath, Size, Mtime, Btime, Ctime, Atime \n            FROM read_file(filenames=OSPath)\n            WHERE OSPath =~ 'user.config$'\n        })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Windows.Detection.IdatLoader","op":"set","definition":"name: Exchange.Windows.Detection.IdatLoader\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact enables running Yara over processes in memory.\n  Targeting detection of IDAT Loader and final payloads \n  observed in field.  \n  \n  Note: may see some false positives on security tools, \n  add to whitelist appropriately.\n\ntype: CLIENT\nreference:\n  - https://www.rapid7.com/blog/post/2023/08/31/fake-update-utilizes-new-idat-loader-to-execute-stealc-and-lumma-infostealers/\n  \nparameters:\n  - name: ProcessRegex\n    default: .\n    type: regex\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: UploadHits\n    type: bool\n  - name: YaraRule\n    type: yara\n    description: Final Yara option and the default if no other options provided.\n    default: |\n        rule MAL_Loader_IDAT_August_2023\n        {\n            meta:\n                description = \"IDAT Loader August 2023\"\n                author = \"Natalie Zargarov\"\n            strings:\n                $trait_0 = {C6 A5 79 EA F4 B4 07 9A}\n                $trait_1 = {3D ED C0 D3}\n                $trait_2 = {C6 45 FC 4D C6 45 FD 5A}\n                $trait_3 = {68 77 94 91 2C 8B 45 ?? 50 E8}\n            condition:\n                2 of ($trait_*)\n        }\n        \n        rule MAL_Loader_IDAT_Shellcode_Dec_2023\n        {\n             meta:\n                author = \"Thomas Elkins - Rapid7\"\n                description = \"Yara detects in memory IDAT Loader shellcode\"\n                date = \"20-12-2023\"\n                \n            strings:\n                $stage1_32_1 = { 8B D1 8D 04 09 D1 EA 33 D0 8D 04 09 56 81 E2 55 55 55 55 33 D0 8B F2 8B C2 C1 E0 02 C1 EE 02 33 } // function from IDAT API Hashing Routine\n                $stage1_32_2 = { 8A 44 0D 08 30 04 32 8D 41 01 83 E9 03 42 F7 D9 1B C9 23 C8 3B D7 72 E8 } // XOR encrpytion routine for creation of encrypted temp file\n                $stage1_64_1 = { 8B 44 24 08 25 55 55 55 55 D1 E0 8B 4C 24 08 D1 E9 81 E1 55 55 55 55 0B C1 89 44 24 08 } // function from IDAT API Hashing Routine\n                $stage1_64_2 = { 8B 04 24 8B 4C 24 04 0F B6 4C 0C 08 48 8B 54 24 20 0F B6 04 02 33 C1 8B 0C 24 48 8B 54 24 20 88 } // XOR encryption for creation of encrypted temp file\n                $stage2_1 = { FF 57 0C 33 D2 6A 1A 59 F7 F1 66 0F BE 44 15 DC 66 89 04 73 46 3B 75 FC 72 E6 } // Function turns computer name into UpperCase only characters using srand function\n                $stage2_2 = { 8B 00 33 04 8A 8B 4D E8 89 01 8B 55 E4 83 EA 01 39 55 F4 75 } // decryption loop for final payload\n                \n            condition:\n                2 of ($stage1_32_*) or 2 of ($stage1_64_*) or 2 of ($stage2_*)\n        }\n        \n        rule win_stealc_w0 {\n           meta:\n               malware = \"Stealc\"\n               description = \"Find standalone Stealc sample based on decryption routine or characteristic strings\"\n               reference = \"https://blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-1/\"\n               author = \"crep1x\"\n               notes = \"removed MZ header condition\"\n           strings:\n               $dec = { 55 8b ec 8b 4d ?? 83 ec 0c 56 57 e8 ?? ?? ?? ?? 6a 03 33 d2 8b f8 59 f7 f1 8b c7 85 d2 74 04 } //deobfuscation function\n               \n               $str01 = \"------\" ascii\n               $str02 = \"Network Info:\" ascii\n               $str03 = \"- IP: IP?\" ascii\n               $str04 = \"- Country: ISO?\" ascii\n               $str05 = \"- Display Resolution:\" ascii\n               $str06 = \"User Agents:\" ascii\n               $str07 = \"%s\\\\%s\\\\%s\" ascii\n           condition:\n                ($dec or 5 of ($str*))\n        }\n        \n        rule win_lumma_auto {\n            meta:\n                author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n                date = \"2023-07-11\"\n                description = \"Detects win.lumma.\"\n            strings:\n                $sequence_0 = { 57 53 ff767c ff7678 }\n                $sequence_1 = { 53 49 83fc00 75e8 8b4508 49 89ca }\n                $sequence_2 = { e8???????? ff7614 e8???????? ff7608 e8???????? 83c414 83c8ff }\n                $sequence_3 = { 4d 6be404 49 83ec04 }\n                $sequence_4 = { 41 5b 41 5c }\n                $sequence_5 = { c1e002 50 e8???????? 894614 8b461c c1e002 }\n                $sequence_6 = { 0fb64203 83c204 33c1 c1e908 }\n                $sequence_7 = { 41 5a cb 55 89e5 8b550c }\n                $sequence_8 = { 4d 6bdb08 4c 01dc }\n                $sequence_9 = { 50 e8???????? 894604 8b461c }\n                $sequence_10 = { 41 8b0a 41 8b5204 }\n                $sequence_11 = { 4d 89f3 49 83eb04 }\n                $sequence_12 = { 57 8bf2 8bd9 6a2e 56 }\n                $sequence_13 = { 03c0 3bc2 0f47d0 e8???????? 85c0 }\n                $sequence_14 = { c1e002 50 e8???????? 89460c 8b461c c1e002 }\n            condition:\n                7 of them\n        }\n        \n        rule win_amadey_auto {\n            meta:\n                author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n                date = \"2023-07-11\"\n                description = \"Detects win.amadey.\"\n            strings:\n                $sequence_0 = { 8945f4 837df408 744f 8d85e8fdffff 890424 e8???????? c70424???????? }\n                $sequence_1 = { c745fc00000000 e8???????? 84c0 750c c7042401000000 e8???????? e8???????? }\n                $sequence_2 = { 89442404 891424 e8???????? 85c0 7510 8b45fc 40 }\n                $sequence_3 = { 890424 e8???????? c7042400000000 e8???????? 81c424040000 }\n                $sequence_4 = { e8???????? 8945f4 837df40a 0f842e010000 }\n                $sequence_5 = { e8???????? c7442404???????? 8b4508 890424 e8???????? 85c0 7e75 }\n                $sequence_6 = { 890424 e8???????? c7042401000000 e8???????? 89442404 8d85e8fbffff 890424 }\n                $sequence_7 = { e8???????? 8b4508 c60000 c9 }\n                $sequence_8 = { 68???????? e8???????? 8d4dcc e8???????? 83c418 }\n                $sequence_9 = { 83fa10 722f 8b8d78feffff 42 8bc1 81fa00100000 7214 }\n                $sequence_10 = { 52 51 e8???????? 83c408 8b955cfeffff }\n                $sequence_11 = { 50 68???????? 83ec18 8bcc 68???????? }\n                $sequence_12 = { 8b7dfc 8d4201 3bcb 7ccb 837e1410 }\n                $sequence_13 = { 83c408 8b554c c7453000000000 c745340f000000 c6452000 83fa10 0f8204ffffff }\n                $sequence_14 = { 68e8030000 ff15???????? 8b551c 83fa10 7228 8b4d08 }\n                $sequence_15 = { 83fa10 722f 8b8d60feffff 42 }\n                $sequence_16 = { 68???????? e8???????? 8d4db4 e8???????? 83c418 }\n                $sequence_17 = { c78514feffff0f000000 c68500feffff00 83fa10 722f 8b8de8fdffff 42 }\n                $sequence_18 = { 83c408 8b95fcfdffff c78510feffff00000000 c78514feffff0f000000 c68500feffff00 83fa10 }\n            condition:\n                7 of them\n        }\n        \n        rule MALWARE_Win_RedLine {\n            meta:\n                author = \"ditekSHen\"\n                description = \"Detects RedLine infostealer\"\n                clamav_sig = \"MALWARE.Win.Trojan.RedLine-1, MALWARE.Win.Trojan.RedLine-2\"\n            strings:\n                $s1 = { 23 00 2b 00 33 00 3b 00 43 00 53 00 63 00 73 00 }\n                $s2 = { 68 10 84 2d 2c 71 ea 7e 2c 71 ea 7e 2c 71 ea 7e\n                        32 23 7f 7e 3f 71 ea 7e 0b b7 91 7e 2b 71 ea 7e\n                        2c 71 eb 7e 5c 71 ea 7e 32 23 6e 7e 1c 71 ea 7e\n                        32 23 69 7e a2 71 ea 7e 32 23 7b 7e 2d 71 ea 7e }\n                $s3 = { 83 ec 38 53 b0 ?? 88 44 24 2b 88 44 24 2f b0 ??\n                        88 44 24 30 88 44 24 31 88 44 24 33 55 56 8b f1\n                        b8 0c 00 fe ff 2b c6 89 44 24 14 b8 0d 00 fe ff\n                        2b c6 89 44 24 1c b8 02 00 fe ff 2b c6 89 44 24\n                        18 b3 32 b8 0e 00 fe ff 2b c6 88 5c 24 32 88 5c\n                        24 41 89 44 24 28 57 b1 ?? bb 0b 00 fe ff b8 03\n                        00 fe ff 2b de 2b c6 bf 00 00 fe ff b2 ?? 2b fe\n                        88 4c 24 38 88 4c 24 42 88 4c 24 47 c6 44 24 34\n                        78 c6 44 24 35 61 88 54 24 3a c6 44 24 3e 66 c6\n                        44 24 41 33 c6 44 24 43 ?? c6 44 24 44 74 88 54\n                        24 46 c6 44 24 40 ?? c6 44 24 39 62 c7 44 24 10 }\n                $s4 = \"B|BxBtBpBlBhBdB`B\\\\BXBTBPBLBHBDB@B\u003cB8B4B0B,B(B$B B\" fullword wide\n                $s5 = \" delete[]\" fullword ascii\n                $s6 = \"constructor or from DllMain.\" ascii\n        \n                $x1 = \"RedLine.Reburn\" ascii\n                $x2 = \"RedLine.Client.\" ascii\n                $x3 = \"hostIRemotePanel, CommandLine: \" fullword wide\n                $u1 = \"\u003cParseCoinomi\u003e\" ascii\n                $u2 = \"\u003cParseBrowsers\u003e\" ascii\n                $u3 = \"\u003cGrabScreenshot\u003e\" ascii\n                $u4 = \"UserLog\" ascii nocase\n                $u5 = \"FingerPrintT\" fullword ascii\n                $u6 = \"InstalledBrowserInfoT\" fullword ascii\n                $u7 = \"RunPE\" fullword ascii\n                $u8 = \"DownloadAndEx\" fullword ascii\n                $u9 = \".Data.Applications.Wallets\" ascii\n                $u10 = \".Data.Browsers\" ascii\n                $u11 = \".Models.WMI\" ascii\n                $u12 = \"DefenderSucks\" wide\n        \n                $pat1 = \"(((([0-9.])\\\\d)+){1})\" fullword wide\n                $pat2 = \"^(?:2131|1800|35\\\\\\\\d{3})\\\\\\\\d{11}$\" fullword wide\n                $pat3 = \"6(?:011|5[0-9]{2})[0-9]{12}$/C\" fullword wide\n                $pat4 = \"Telegramprofiles^(6304|6706|6709|6771)[0-9]{12,15}$\" fullword wide\n                $pat5 = \"host_key^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14})$\" fullword wide\n                $pat6 = \"^3(?:0[0-5]|[68][0-9])[0-9]{11}$\" wide\n                $pat7 = \"settingsprotocol^(5018|5020|5038|6304|6759|6761|6763)[0-9]{8,15}$\" wide\n                $pat8 = \"Opera GX4[0-9]{12}(?:[0-9]{3})?$cookies\" wide\n                $pat9 = \"^9[0-9]{15}$Coinomi\" wide\n                $pat10 = \"wallets^(62[0-9]{14,17})$\" wide\n                $pat11 = \"hostpasswordUsername_value\" wide\n                $pat12 = \"credit_cards^389[0-9]{11}$\" wide\n                $pat13 = \"NWinordVWinpn.eWinxe*WinhostUsername_value\" wide\n                $pat14 = /(\\/|,\\s)CommandLine:/ wide\n                // another variant\n                $v2_1 = \"ListOfProcesses\" fullword ascii\n                $v2_2 = /get_Scan(ned)?(Browsers|ChromeBrowsersPaths|Discord|FTP|GeckoBrowsersPaths|Screen|Steam|Telegram|VPN|Wallets)/ fullword ascii\n                $v2_3 = \"GetArguments\" fullword ascii\n                $v2_4 = \"VerifyUpdate\" fullword ascii\n                $v2_5 = \"VerifyScanRequest\" fullword ascii\n                $v2_6 = \"GetUpdates\" fullword ascii\n                // yet another variant\n                $v3_1 = \"localhost.IUserServiceu\" fullword ascii\n                $v3_2 = \"ParseNetworkInterfaces\" fullword ascii\n                $v3_3 = \"ReplyAction0http://tempuri.org/IUserService/GetUsersResponse\" fullword ascii\n                $v3_4 = \"Action(http://tempuri.org/IUserService/GetUsersT\" fullword ascii\n                $v3_5 = \"basicCfg\" fullword wide\n                // more variants\n                $vx4_1 = \"C:\\\\\\\\Windows\\\\\\\\Microsoft.NET\\\\\\\\Framework\\\\\\\\v4.0.30319\\\\\\\\AddInProcess32.exe\" fullword wide\n                $v4_2 = \"isWow64\" fullword ascii\n                $v4_3 = \"base64str\" fullword ascii\n                $v4_4 = \"stringKey\" fullword ascii\n                $v4_5 = \"BytesToStringConverted\" fullword ascii\n                $v4_6 = \"FromBase64\" fullword ascii\n                $v4_7 = \"xoredString\" fullword ascii\n                $v4_8 = \"procName\" fullword ascii\n                $v4_9 = \"base64EncodedData\" fullword ascii\n                // another variant 2021-10-23\n                $v5_1 = \"DownloadAndExecuteUpdate\" fullword ascii\n                $v5_2 = \"ITaskProcessor\" fullword ascii\n                $v5_3 = \"CommandLineUpdate\" fullword ascii\n                $v5_4 = \"DownloadUpdate\" fullword ascii\n                $v5_5 = \"FileScanning\" fullword ascii\n                $v5_6 = \"GetLenToPosState\" fullword ascii\n                $v5_7 = \"RecordHeaderField\" fullword ascii\n                $v5_8 = \"EndpointConnection\" fullword ascii\n                $v5_9 = \"BCRYPT_KEY_LENGTHS_STRUCT\" fullword ascii\n                // another variant (v11?)\n                $v6_1 = \"%localappdata%\\\\\" fullword wide\n                $v6_2 = \"GetDecoded\" fullword ascii\n                $v6_3 = \"//settinString.Removeg[@name=\\\\PasswString.Removeord\\\\]/valuString.RemoveeROOT\\\\SecurityCenter\" fullword wide\n                $v6_4 = \"AppData\\\\Roaming\\\\ //settString.Replaceing[@name=\\\\UString.Replacesername\\\\]/vaString.Replaceluemoz_cookies\" wide\n                $v6_5 = \"\u003cGetWindowsVersion\u003eg__HKLM_GetString|11_0\" fullword ascii\n                $v6_6 = \"net.tcp://\" fullword wide\n                \n            condition:\n                (all of ($s*) or 2 of ($x*) or 7 of ($u*) or 7 of ($pat*) or (1 of ($x*) and (5 of ($u*) or 2 of ($pat*))) or 5 of ($v2*) or 4 of ($v3*) or (3 of ($v2*) and (2 of ($pat*) or 2 of ($u*)) or (1 of ($vx4*) and 5 of ($v4*)) or 5 of ($v4*) or 6 of ($v5*)) or 5 of ($v6*) or (4 of ($v6*) and 3 of them )) or ((all of ($x*) and 4 of ($s*)) or (4 of ($v6*) and 4 of them))\n        }\n\n  - name: NumberOfHits\n    description: THis artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int64\n  - name: ExePathWhitelist\n    description: Regex of ProcessPaths to exclude\n    type: regex\n    default: \"C:\\\\Program Files\\\\Sophos\\\\\"\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT Pid,ProcessName,ExePath,CommandLine,\n        Rule,Meta,YaraString,HitOffset, HitContext,\n        process_tracker_callchain(id=Pid).data as ProcessChain\n      FROM Artifact.Windows.Detection.Yara.Process(\n                PidRegex=PidRegex,\n                ProcessRegex=ProcessRegex,\n                YaraRule=YaraRule,\n                YaraRule=YaraRule,\n                NumberOfHits=str(str=NumberOfHits),\n                ContextBytes=ContextBytes,\n                ExePathWhitelist=ExePathWhitelist )\n\ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Windows.Memory.InjectedThreadEx","op":"set","definition":"name: Exchange.Windows.Memory.InjectedThreadEx\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n   This artifact runs Get-InjetedThreadEx to detect process injection and hooking.\n\n    The artifact uses environment variables to configure the scan and outputs \n    parsed fields, as well as a raw section. Some of the scanning options include: \n    Default, Brief and Aggressive. The User can also target a specific ProcessId.\n\n    For all process scanning the recommendation would be first run in brief mode, \n    then add more aggressive scanning as required. The default timeout has been \n    increased significantly to cover aggressive scanning mode.  \n\n    IMPORTANT NOTES::\n    \n    - this query is complex powershell. Run it after a scriptblock hunt as it \n    will generate scriptblock logs, even if not configured.\n    - Some EPP/EDR tools may block the scriptblock execution, please ensure \n    exclusions are made for velociraptor child powershell processes.  \n    - The default output for Default and Aggressive scan excludes Thread User \n    information, however this can be confired by the field IsUniqueThreadToken \n    and if 'True' checked in raw data in the Windows.Memory.InjectedThreadEx/RawResults \n    namespace.\n\nreference:\n    - https://www.elastic.co/security-labs/get-injectedthreadex-detection-thread-creation-trampolines\ntype: CLIENT\nresources:\n  timeout: 6000\n\ntools:\n    - name: Get-InjectedThreadEx\n      url: https://gist.githubusercontent.com/mgreen27/b37467aa725e0445d966c9589c90381a/raw/a3f8ac05fead58f5ba9465da67ae5881576b1762/Get-InjectedThreadEx.ps1\n\nparameters:\n  - name: TargetPid\n    type: int\n    description: Pid to pass through to tool. Default no entry scans all Pids, only one specific Pid can be added at a time.\n  - name: ScanType\n    type: choices\n    description: Select memory permission you would like to return. Default All.\n    default: Default\n    choices:\n      - Default\n      - Brief\n      - Aggressive\n\n\nprecondition:\n      SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n      -- Get the path to the Get-InjectedThread tool\n      LET script \u003c= SELECT FullPath\n            FROM Artifact.Generic.Utils.FetchBinary(\n                ToolName=\"Get-InjectedThreadEx\",\n                IsExecutable='N'\n                )\n      LET scan_type = if(condition= ScanType='Default', \n                        then= '',\n                        else= ScanType)\n      LET target_pid = if(condition= TargetPid=0, then='', else= TargetPid)\n\n      -- Run the tool and relay back the output\n      LET results \u003c= SELECT *,\n            parse_string_with_regex(\n                string=Stdout,\n                  regex=['''ProcessName\\s+:\\s+(?P\u003cProcessName\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessId\\s+:\\s+(?P\u003cProcessId\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessLogonId\\s+:\\s+(?P\u003cProcessLogonId\u003e\\d*)\\s+\\w+\\s+:''',\n                    '''\\s+Wow64\\s+:\\s+(?P\u003cWow64\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+Path\\s+:\\s+(?P\u003cPath\u003e[ -~]*)\\s+\\w+\\s+:''',\n                    '''\\s+KernelPath\\s+:\\s+(?P\u003cKernelPath\u003e[ -~]*)\\s+\\w+\\s+:''',\n                    '''\\s+CommandLine\\s+:\\s+(?P\u003cCommandLine\u003e[ -~]*)\\s+\\w+\\s+:''',\n                    '''\\s+PathMismatch\\s+:\\s+(?P\u003cPathMismatch\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessIntegrity\\s+:\\s+(?P\u003cProcessIntegrity\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessPrivilege\\s+:\\s+(?P\u003cProcessPrivilege\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessLogonId\\s+:\\s+(?P\u003cProcessLogonId\u003e\\d*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessSecurityIdentifier\\s+:\\s+(?P\u003cProcessSecurityIdentifier\u003e[S\\d\\-]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessUserName\\s+:\\s+(?P\u003cProcessUserName\u003e[ -~]*)\\s\\s+\\w+\\s+:''',\n                    '''\\s+ProcessLogonSessionStartTime\\s+:\\s+(?P\u003cProcessLogonSessionStartTime\u003e[\\d:/ ]*\\w{2})\\s+\\w+\\s+:''',\n                    '''\\s+ProcessLogonType\\s+:\\s+(?P\u003cProcessLogonType\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ProcessAuthenticationPackage\\s+:\\s+(?P\u003cProcessAuthenticationPackage\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadId\\s+:\\s+(?P\u003cThreadId\u003e\\d*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadStartTime\\s+:\\s+(?P\u003cThreadStartTime\u003e[\\d:/ ]*\\w{2})\\s+\\w+\\s+:''',\n                    '''\\s+BasePriority\\s+:\\s+(?P\u003cBasePriority\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+WaitReason\\s+:\\s+(?P\u003cWaitReason\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+IsUniqueThreadToken\\s+:\\s+(?P\u003cIsUniqueThreadToken\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadIntegrity\\s+:\\s+(?P\u003cThreadIntegrity\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+AdditionalThreadPrivilege\\s+:\\s+(?P\u003cAdditionalThreadPrivilege\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadLogonId\\s+:\\s+(?P\u003cThreadLogonId\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadSecurityIdentifier\\s+:\\s+(?P\u003cThreadSecurityIdentifier\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadUserName\\s+:\\s+(?P\u003cThreadUserName\u003e.*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadLogonSessionStartTime\\s+:\\s+(?P\u003cThreadLogonSessionStartTime\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadLogonType\\s+:\\s+(?P\u003cThreadLogonType\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+ThreadAuthenticationPackage\\s+:\\s+(?P\u003cThreadAuthenticationPackage\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+AllocatedMemoryProtection\\s+:\\s+(?P\u003cAllocatedMemoryProtection\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+MemoryProtection\\s+:\\s+(?P\u003cMemoryProtection\u003e[\\w_]*)\\s+\\w+\\s+:''',\n                    '''\\s+MemoryState\\s+:\\s+(?P\u003cMemoryState\u003e[\\w_]*)\\s+\\w+\\s+:''',\n                    '''\\s+MemoryType\\s+:\\s+(?P\u003cMemoryType\u003e[\\w_]*)\\s+\\w+\\s+:''',\n                    '''\\s+Win32StartAddress\\s+:\\s+(?P\u003cWin32StartAddress\u003e[0-9A-F]*)\\s+\\w+\\s+:''',\n                    '''\\s+Win32StartAddressModule\\s+:\\s+(?P\u003cWin32StartAddressModule\u003e[ -~]*)\\s+\\w+\\s+:''',\n                    '''\\s+Win32StartAddressModuleSigned\\s+:\\s+(?P\u003cWin32StartAddressModuleSigned\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+Win32StartAddressPrivate\\s+:\\s+(?P\u003cWin32StartAddressPrivate\u003e[^\\s]*)\\s+\\w+\\s+:''',\n                    '''\\s+Size\\s+:\\s+(?P\u003cSize\u003e\\d*)\\s+\\w+\\s+:''',\n                    '''\\s+TailBytes\\s+:\\s+(?P\u003cTailBytes\u003e[0-9A-F]*)\\s+''',\n                    '''\\s+StartBytes\\s+:\\s+(?P\u003cStartBytes\u003e[0-9A-F]*)''',\n                    '''\\s+Detections\\s+:\\s+(?P\u003cDetections\u003e.*)$'''\n                    ]) as Parsed  \n        FROM execve(argv=['powershell','-ExecutionPolicy','Unrestricted','-NoProfile','-File',script.FullPath[0]],\n            env=dict(\n                `GetInjectedThreadScan` = scan_type,\n                `GetInjectedThreadTarget` = str(str=target_pid) ),\n            sep='\\r\\n\\r\\n')\n        WHERE Stdout\n            \n\n      -- output rows\n      --SELECT * FROM foreach(row=results.Parsed) WHERE NOT Stdout =~ '^WARNING'\n      SELECT * FROM column_filter(\n            query={ \n                    SELECT * FROM foreach(row=results.Parsed) \n                    WHERE NOT Stdout =~ '^WARNING'\n            },\n            exclude=['ThreadIntegrity','AdditionalThreadPrivilege','ThreadLogonId','ThreadSecurityIdentifier',\n            'ThreadUserName','ThreadLogonSessionStartTime','ThreadLogonType','ThreadAuthenticationPackage']\n        )\n      \n  - name: RawResults\n    queries:\n      - |\n        SELECT Stdout, Stderr, ReturnCode, Complete,\n            dict(   ScanType = scan_type,\n                    PidTarget = str(str=target_pid) ) as ScanSettings\n        FROM results\n        \n        \ncolumn_types:\n  - name: ProcessLogonSessionStartTime\n    type: timestamp\n  - name: ThreadStartTime\n    type: timestamp\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Windows.Applications.KACE_SW_Process","op":"set","definition":"name: Exchange.Windows.Applications.KACE_SW_Process\nauthor:  Matt Green - @mgreen27\ndescription: |\n  This artifact parses the KACE software monitoring sqlite database - ksw_process.db\n  which provides excellent third party evidence of execution that may \n  be useful during investigation or detection work.  \n  \n  The artifact can also be modified to target other KACE sqlite databases or set \n  timebounds using stime or etime fields.  \n    e.g:    \n    `SELECT * FROM process WHERE stime \u003e '2023-01'`   \n    `SELECT * FROM process WHERE etime \u003c '2022-12-25'`  \n    `SELECT * FROM process WHERE stime \u003e '2023-01' AND etime \u003c '2023-01-06'`     \n\n\nparameters:\n  - name: TargetGlob\n    default: C:/ProgramData/Quest/KACE/ksw_process.db\n    description: glob of sqlite db to target\n  - name: SqlQuery\n    description: SQL query to run\n    default: |\n        SELECT * FROM process\n  - name: UserRegex\n    description: regex of strings to match in user field\n    default: .\n    type: regex\n  - name: ProcessNameRegex\n    description: regex of strings to match in name field\n    default: .\n    type: regex\n  - name: ProcessExclusionRegex\n    description: regex of strings to exclude in name field.\n    default: \n    type: regex\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n        -- find files in scope\n        LET files = SELECT OSPath FROM glob(globs=TargetGlob)\n        \n        -- query db and output results\n        SELECT * FROM foreach(row=files,\n            query={\n                SELECT *\n                FROM sqlite(\n                      file=TargetGlob,\n                      query=SqlQuery)\n                WHERE   user =~ UserRegex\n                    AND name =~ ProcessNameRegex\n                    AND NOT if(condition= ProcessExclusionRegex,\n                                then= name=~ProcessExclusionRegex,\n                                else= False)\n            })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Windows.Remediation.KillProcess","op":"set","definition":"name: Exchange.Windows.Remediation.KillProcess\nauthor: Matt Green - @mgreen27\ndescription: |\n   Quick and dirty monitoring artifact to kill a process by Image Name.\n   We monitor the Microsoft-Windows-Kernel-Process ETW provider and leverage \n   taskkill to kill the process.\n   \n   There are no guardrails on this artifact please be VERY careful adding new entries.\n\ntype: CLIENT_EVENT\n\nparameters:\n   - name: ProcessToKill\n     type: csv\n     default: |\n        ImageRegex,Description\n        \\\\folder\\\\folder2\\\\file\\.exe$,Example target image\n        \\\\psexesvc\\.exe$,Default psexec executable on target machine.\n        \\\\calc\\.exe$,Test fast running process: start \u003e run calc.exe\n        \\\\calculator\\.exe$,Test killing calc.exe alias (modern Windows calc.exe)\n        \n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET name_regex = join(array=ProcessToKill.ImageRegex,sep='|')\n      LET watch_processes = SELECT System.TimeStamp AS CreateTime,\n                   EventData.ImageName AS ImageName,\n                   int(int=EventData.ProcessID) AS Pid,\n                   EventData.MandatoryLabel AS MandatoryLabel,\n                   EventData.ProcessTokenElevationType AS ProcessTokenElevationType,\n                   EventData.ProcessTokenIsElevated AS TokenIsElevated\n        FROM watch_etw(guid=\"{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}\", any=0x10)\n        WHERE System.ID = 1 AND ImageName =~ name_regex\n        \n      SELECT *, pskill(pid=Pid) as TaskKill\n      FROM watch_processes\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.MacOS.Forensics.KnockKnock","op":"set","definition":"name: Exchange.MacOS.Forensics.KnockKnock\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact will run Knocknock to collect autorun output.\n\nreference:\n  - https://objective-see.org/products/knockknock.html\n\nrequired_permissions:\n  - EXECVE\n\ntools:\n  - name: KnockKnock\n    url: https://github.com/objective-see/KnockKnock/releases/download/v2.5.0/KnockKnock_2.5.0.zip\n    expected_hash: 1ba31195a8312b97c40955db3c554947b261a82c319d29cface4619fa50f3daa\n    version: 2.5.0\n    serve_locally: true\n    \n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nparameters:\n  - name: IncludeAppleItems\n    description: Include apple/system items.\n    type: bool\n  - name: QueryVT\n    description: If Selected will query VirusTotal. Using this switch is not reccomended - enrich server side instead.\n    type: bool\n\nsources:\n  - name: Authorization Plugins\n    query: |\n      LET tool \u003c= SELECT *\n        FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"KnockKnock\", IsExecutable='N')\n      LET tempfolder \u003c= tempdir()\n        \n      LET bin \u003c= SELECT * FROM unzip(filename=tool.OSPath[0],output_directory=tempfolder)\n      \n      LET other_commands = if(condition=IncludeAppleItems AND  QueryVT,\n                                then= ['-apple'],\n                     else = if(condition=IncludeAppleItems AND NOT QueryVT,\n                                then= ['-apple','-skipVT'],\n                     else = if(condition= NOT IncludeAppleItems AND NOT QueryVT,\n                                then= ['-skipVT'],\n                     else= '')))\n      \n      LET results \u003c= SELECT parse_json(data=Stdout) as KnockKnockResults \n        FROM execve(argv=[tempfolder + '/KnockKnock.app/Contents/MacOS/KnockKnock','-whosthere',other_commands],length=10000000)\n\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Authorization Plugins`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Browser Extensions\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Browser Extensions`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Background Managed Tasks\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Background Managed Tasks`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Cron Jobs\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Cron Jobs`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Dir. Services Plugins\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Dir. Services Plugins`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Dock Tiles Plugins\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Dock Tiles Plugins`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Event Rules\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Event Rules`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Extensions and Widgets\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Extensions and Widgets`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Kernel Extensions\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Kernel Extensions`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Launch Items\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Launch Items`,\n            query={SELECT * FROM foreach(row=_value)} )\n\n  - name: Library Inserts\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Library Inserts`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Library Proxies\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Library Proxies`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Login Items\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Login Items`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Login/Logout Hooks\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Login/Logout Hooks`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Periodic Scripts\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Periodic Scripts`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Quicklook Plugins\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Quicklook Plugins`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Library Inserts\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Library Inserts`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Spotlight Importers\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Spotlight Importers`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: Startup Scripts\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`Startup Scripts`,\n            query={SELECT * FROM foreach(row=_value)} )\n            \n  - name: System Extensions\n    query: |\n      SELECT * FROM foreach(\n            row=results.KnockKnockResults.`System Extensions`,\n            query={SELECT * FROM foreach(row=_value)} )\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Label.DomainController","op":"set","definition":"name: Exchange.Label.DomainController\nauthor: Eric Capuano - @eric_capuano\ndescription: |\n   This artifact watches for completion of the `watchArtifact`\n   and assigns the given `setLabel` if the `WHERE` condition is matched.\n   \n   Anytime the `Windows.System.Services` hunt is run across the environment,\n   results will be interpreted by this server-side artifact.\n   \n   In this configuration, it will match on all systems running \n   \"Active Directory Domain Services\" which likely indicates the system\n   is a Domain Controller and will label it as such.\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: setLabel\n    default: dc\n  - name: watchArtifact\n    default: Windows.System.Services\n\nsources:\n  - query: |\n  \n        LET completions = SELECT *\n            FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n            WHERE Flow.artifacts_with_results =~ watchArtifact\n\n        LET matches = SELECT *, \n            label(client_id=ClientId, labels=setLabel, op=\"set\")\n            FROM source(artifact=watchArtifact,\n                        client_id=ClientId, flow_id=FlowId)\n            WHERE Name = \"NTDS\" AND DisplayName = \"Active Directory Domain Services\"\n        \n\n        SELECT * FROM foreach(row=completions, query=matches)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Persistence.LdPreload","op":"set","definition":"name: Exchange.Linux.Persistence.LdPreload\nauthor: Matt Green - @mgreen27\ndescription: |\n  Parses the GNU glibc **LD_PRELOAD** mechanism. Any path listed in \n  `/etc/ld.so.preload` or assigned to `LD_PRELOAD` is force‑loaded into every \n  dynamically linked executable. A single \n  rogue entry therefore grants system‑wide code execution and persistence at\n  process start‑up.\n  \n  The artifact has two scopes:\n\n  • Parses `/etc/ld.so.preload`   \n  • Checks `/proc/\u003cpid\u003e/environ` for an `LD_PRELOAD=` entry.\n\nreferences:\n    - https://attack.mitre.org/techniques/T1574/006/\n\ntype: CLIENT\n\nparameters:\n  - name: TargetGlob\n    default: /etc/ld.so.preload\n  - name: ContentRegex\n    default: .\n    description: Regex to target suspicious content strings.\n    \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'linux' \n    query: |\n       SELECT OSPath,\n              Mtime,\n              Atime,\n              Ctime,\n              Btime,\n              Size,\n              read_file(filename=OSPath)[0:5000] AS Content\n       FROM glob(globs=TargetGlob)\n       WHERE Content =~ ContentRegex\n\n  - name: Environment Variable\n    query: |\n       LET target_proc = SELECT OSPath,\n                                parse_string_with_regex(\n                                  regex='''LD_PRELOAD=(?\u003cLD_PRELOAD\u003e[^\\x00]+)''',\n                                  string=read_file(filename=OSPath + '/environ')).LD_PRELOAD AS LD_PRELOAD\n         FROM glob(\n           globs='/proc/[0-9]*')\n         WHERE LD_PRELOAD\n       \n       LET parsed_proc = SELECT\n           *, int(int=OSPath[1]) AS Pid,\n           to_dict(item={\n                SELECT * FROM parse_csv(\n                   filename=OSPath + '/status', \n                   separator=':', \n                   columns=['_key','_value']) \n            }) AS Status\n       FROM target_proc\n       \n       SELECT\n           Pid,\n           Status.PPid AS PPid,\n           Status.Name AS Name,\n           stat(filename=OSPath + '/exe').Data.Link AS Exe,\n           read_file(filename=OSPath + '/cmdline') AS Cmdline,\n           LD_PRELOAD,\n           stat(filename=OSPath + '/cwd').Data.Link AS WorkingDir,\n           split(string=read_file(filename=OSPath + '/environ'), sep='''\\x00''') AS Environ\n       FROM parsed_proc\n       WHERE LD_PRELOAD =~ ContentRegex\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Applications.Docker.Ps","op":"set","definition":"name: Exchange.Linux.Applications.Docker.Ps\nauthor: Ján Trenčanský - j91321@infosec.exchange\ndescription: Get Docker containers by connecting to the docker.socket. Same as running `docker ps`\nreference:\n  - https://docs.docker.com/engine/api/v1.45/#tag/Container/operation/ContainerList\n\nparameters:\n  - name: dockerSocket\n    description: |\n      Docker server socket. You will normally need to be root to connect.\n    default: /var/run/docker.sock\n  - name: all\n    description: |\n        Show non-running containers. Equals to `docker ps -a`.\n    type: bool\n    default: N\nsources:\n  - precondition: |\n      SELECT OS From info() where OS = 'linux'\n    query: |\n        LET running_containers = SELECT parse_json_array(data=Content) as JSON FROM http_client(url=dockerSocket + \":unix/containers/json\")\n        LET all_containers = SELECT parse_json_array(data=Content) as JSON FROM http_client(url=dockerSocket + \":unix/containers/json\", params=dict(all=True))\n        SELECT * FROM foreach(\n            row={\n                SELECT * FROM if(\n                    condition=all,\n                    then=all_containers,\n                    else=running_containers\n                )\n            },\n            query={\n                SELECT * FROM JSON\n            }\n        )","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Applications.WgetHSTS","op":"set","definition":"name: Exchange.Linux.Applications.WgetHSTS\ndescription: |\n   Wget creates a HSTS log file in a user's home directory.  This can\n   contain forensically relevant information.\n\nreference:\n- https://firexfly.com/wget-hsts/\n\nparameters:\n   - name: HSTSGlob\n     default: \"/home/*/.wget-hsts\"\n\nsources:\n  - query: |\n        SELECT Parsed.g1 AS Domain ,\n               int(int=Parsed.g2) || 443 AS Port,\n               Parsed.g3 AS IncSubdomains,\n               timestamp(epoch=Parsed.g4) AS Created,\n               int(int=Parsed.g5) AS MaxAge\n        FROM foreach(row={\n          SELECT FullPath FROM glob(globs=\"/home/*/.wget-hsts\")\n        }, query={\n          SELECT Line, parse_string_with_regex(string=Line,\n            regex='''^([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)\\s([^\\s]+)'''\n          ) AS Parsed\n          FROM parse_lines(filename=FullPath)\n          WHERE NOT Line =~ \"^#\"\n        })\n\ncolumn_types:\n  - name: Created\n    type: timestamp\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Carving.SSHLogs","op":"set","definition":"name: Exchange.Linux.Carving.SSHLogs\ndescription: |\n  Linux systems typically store audit events in syslog. In particular successful \n  ssh logins are especially important for some investigations.\n  \n  Unfortunately they are sometimes deleted by attackers or rotated out. If you \n  are desperate it might be worth trying to carve for ssh login events.\n  \n  ### NOTES\n  \n  1. Syslog does not typically store the year in the date - since carving can \n     recover very old records it might be difficult to pinpoint the time.\n  2. This artifact will take a long time! You probably will have to increase \n     the timeout. \n  \nparameters:\n   - name: Device\n     default: /dev/root\n\nsources:\n  - query: |\n        LET GrokRule = '''%{SYSLOGTIMESTAMP:Timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{DATA:event} %{DATA:method} for (invalid user )?%{DATA:user} from %{IPORHOST:ip} port %{NUMBER:port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?'''\n        LET YaraRule = '''\n        rule X {\n            strings:\n              $a = /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9]{1,2} [0-9]{2}:[0-9]{2}[^\\n]+/s\n            condition:\n              any of them\n        }\n        '''\n        \n        LET Hits = SELECT str(str=String.Data) AS Hit, String.Offset AS Offset\n          FROM yara(\n             files=Device, accessor=\"raw_file\", end=1024*1024*1024*56,\n             rules=YaraRule, number=100000000000)\n          WHERE Hit =~ \"Accept|Failed\"\n        \n        SELECT * FROM foreach(row={\n            SELECT grok(data=Hit, grok=GrokRule) AS Event, Offset\n            FROM Hits\n            WHERE Event\n        }, query={\n          SELECT Offset, timestamp(string=Event.Timestamp) AS Time,\n                 Event.ip AS IP,\n                 Event.logsource AS logsource,\n                 Event.event AS Result,\n                 Event.method AS Method,\n                 Event.user AS AttemptedUser\n          FROM scope()\n        })\n\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.Autoruns","op":"set","definition":"name: Exchange.Linux.Collection.Autoruns\nauthor: alternate\ndescription: |\n  This artifact collects various autorun files for upload.\n  Based on TriagePersistence from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: AnacronFiles\n  default: |\n    [\"/etc/anacrontab,/etc/cron.daily/*\",\"/etc/cron.hourly/*\",\"/etc/cron.monthly/*\",\n     \"/etc/cron.weekly/*\",\"/var/spool/anacron/cron.daily\",\"/var/spool/anacron/cron.hourly\", \n     \"/var/spool/anacron/cron.monthly\",\"/var/spool/anacron/cron.weekly\"]\n\n- name: LinuxAtJobs\n  default: /var/spool/at/*\n\n- name: LinuxCronTabs\n  default: |\n    [\"/etc/crontab\",\"/etc/cron.d/*\",\"/var/spool/cron\"]\n\n- name: LinuxSystemdServices\n  default: |\n    [\"/etc/systemd/system.control/*.service\",\"/etc/systemd/systemd.attached/*.service\",\n     \"/etc/systemd/system/*.service\",\"/etc/systemd/user/*.service\",\n     \"/lib/systemd/system/*.service\",\"/lib/systemd/user/*.service\",\n     \"/run/systemd/generator.early/*.service\",\"/run/systemd/generator.late/*.service\",\n     \"/run/systemd/generator/*.service\",\"/run/systemd/system.control/*.service\",\n     \"/run/systemd/systemd.attached/*.service\",\"/run/systemd/system/*.service\",\n     \"/run/systemd/transient/*.service\",\"/run/systemd/user/*.service\",\n     \"/run/user/*/systemd/generator.early/*.service\",\"/run/user/*/systemd/generator.late/*.service\",\n     \"/run/user/*/systemd/generator/*.service\",\"/run/user/*/systemd/transient/*.service\",\n     \"/run/user/*/systemd/user.control/*.service\",\"/run/user/*/systemd/user/*.service\",\n     \"/usr/lib/systemd/system/*.service\",\"/usr/lib/systemd/user/*.service\",\n     \"/{root,home/*}/.config/systemd/user.control/*.service\",\"/{root,home/*}/.config/systemd/user/*.service\",\n     \"/{root,home/*}/.local/share/systemd/user/*.service\"]\n\n- name: LinuxSystemdTimers\n  default: |\n    [\"/etc/systemd/system.control/*.timer\",\"/etc/systemd/systemd.attached/*.timer\",\n     \"/etc/systemd/system/*.timer\",\"/etc/systemd/user/*.timer\",\"/lib/systemd/system/*.timer\",\n     \"/lib/systemd/user/*.timer\",\"/run/systemd/generator.early/*.timer\",\n     \"/run/systemd/generator.late/*.timer\",\"/run/systemd/generator/*.timer\",\n     \"/run/systemd/system.control/*.timer\",\"/run/systemd/systemd.attached/*.timer\",\n     \"/run/systemd/system/*.timer,/run/systemd/transient/*.timer\",\"/run/systemd/user/*.timer\",\n     \"/run/user/*/systemd/generator.early/*.timer\",\"/run/user/*/systemd/generator.late/*.timer\",\n     \"/run/user/*/systemd/generator/*.timer\",\"/run/user/*/systemd/transient/*.timer\",\n     \"/run/user/*/systemd/user.control/*.timer\",\"/run/user/*/systemd/user/*.timer\",\n     \"/usr/lib/systemd/system/*.timer\",\"/usr/lib/systemd/user/*.timer\",\n     \"/{root,home/*}/.config/systemd/user.control/*.timer\",\n     \"/{root,home/*}/.config/systemd/user/*.timer\",\n     \"/{root,home/*}/.local/share/systemd/user/*.timer\"]\n\n- name: LinuxSysVInit\n  default: |\n    [\"/etc/rc.local\",\"/etc/rc*.d\",\"/etc/rc*.d/*\",\"/etc/rc.d/rc*.d/*\",\"/etc/rc.d/init.d/*\"] \n\n- name: XDGAutostartEntries\n  default: |\n    [\"/etc/rc.local\",\"/etc/rc*.d\",\"/etc/rc*.d/*\",\"/etc/rc.d/rc*.d/*\",\"/etc/rc.d/init.d/*\"]\n\nsources:\n- name: uploadAnacronFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=AnacronFiles))\n\n- name: uploadLinuxAtJobs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxAtJobs)\n\n- name: uploadLinuxSystemdServices\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSystemdServices))\n\n- name: uploadLinuxSystemdTimers\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSystemdTimers))\n\n- name: uploadLinuxSysVInit\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSysVInit))\n\n- name: uploadXDGAutostartEntries\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=XDGAutostartEntries))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.BrowserExtensions","op":"set","definition":"name: Exchange.Linux.Collection.BrowserExtensions\nauthor: alternate\ndescription: |\n  Collect Browser Extensions and upload them.\n  Based on TriageWebBrowserExtensions from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: ChromiumBasedBrowsersExtensions\n  default: |\n    [\"/{root,home/*}/.config/google-chrome/*/Extensions/**10\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/Extensions/**10\",\n     \"/{root,home/*}/.config/chromium/*/Extensions/**10\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Extensions/**10\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/Extensions/**10\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Extensions/**10\",\n     \"/{root,home/*}/.config/opera/*/Extensions/**10\",\n     \"/{root,home/*}/.config/google-chrome-beta/*/Extensions/**10\",\n     \"/{root,home/*}/snap/chromium/common/chromium/*/Extensions/**10\"]\n\n- name: ChromiumBasedBrowsersExtensionActivitySQLiteDatabaseFile\n  default: |\n    [\"/{root,home/*}/.config/google-chrome-beta/*/Extension Activity\",\n     \"/{root,home/*}/.config/google-chrome/*/Extension Activity\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/Extension Activity\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/Extension Activity\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Extension Activity\",\n     \"/{root,home/*}/.config/opera/*/Extension Activity\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Extension Activity\",\n     \"/{root,home/*}/.config/chromium/*/Extension Activity\",\n     \"/{root,home/*}/snap/chromium/common/chromium/*/Extension Activity\"]\n\n- name: ChromePreferences\n  default: |\n    [\"/{root,home/*}/.config/chromium/*/Secure Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Secure Preferences\",\n     \"/{root,home/*}/.config/google-chrome/*/Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Secure Preferences\",\n     \"/{root,home/*}/.config/google-chrome/*/Secure Preferences\",\n     \"/{root,home/*}/.config/chromium/*/Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Preferences\"]\n\n- name: FirefoxAddOns\n  default: |\n    [\"/{root,home/*}/.mozilla/firefox/*/webapps/webapps.json\",\n     \"/{root,home/*}/.mozilla/firefox/*/addons.json\",\n     \"/{root,home/*}/.mozilla/firefox/*/extensions.json\"]\n\nsources:\n- name: uploadChromiumBasedBrowsersExtensions\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ChromiumBasedBrowsersExtensions))\n\n\n- name: uploadChromiumBasedBrowsersExtensionActivitySQLiteDatabaseFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ChromiumBasedBrowsersExtensionActivitySQLiteDatabaseFile))\n\n- name: uploadChromePreferences\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ChromePreferences))\n\n- name: uploadFirefoxAddOns\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=FirefoxAddOns))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.BrowserHistory","op":"set","definition":"name: Exchange.Linux.Collection.BrowserHistory\nauthor: alternate\ndescription: |\n  Collect Browser History and upload them.\n  Based on TriageWebBrowserHistory from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n  \nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: ChromiumBasedBrowsersHistory\n  default: |\n    [\"/{root,home/*}/.config/chromium/*/Archived History\", \n     \"/{root,home/*}/snap/chromium/common/chromium/*/History-journal\", \n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/History\",\n     \"/{root,home/*}/snap/chromium/common/chromium/*/Archived History\",\n     \"/{root,home/*}/.config/opera/*/Archived History\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/Archived History-journal\",\n     \"/{root,home/*}/.config/chromium/*/Archived History-journal\",\n     \"/{root,home/*}/snap/chromium/common/chromium/*/Archived History-journal\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Archived History\",\n     \"/{root,home/*}/.config/opera/*/Archived History-journal\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/Archived History\",\n     \"/{root,home/*}/snap/chromium/common/chromium/*/History\", \n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/History-journal\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/History\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/Archived History\",\n     \"/{root,home/*}/.config/opera/*/History\",\n     \"/{root,home/*}/.config/opera/*/History-journal\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Archived History-journal\",\n     \"/{root,home/*}/.config/google-chrome-beta/*/Archived History\",\n     \"/{root,home/*}/.config/google-chrome-beta/*/History\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Archived History\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/History\",\n     \"/{root,home/*}/.config/google-chrome/*/Archived History-journal\",\n     \"/{root,home/*}/.config/google-chrome/*/History\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/History-journal\",\n     \"/{root,home/*}/.config/google-chrome/*/History-journal\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/Archived History-journal\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Archived History-journal\",\n     \"/{root,home/*}/.config/google-chrome/*/Archived History\",\n     \"/{root,home/*}/.config/google-chrome-beta/*/History-journal\",\n     \"/{root,home/*}/.config/google-chrome-beta/*/Archived History-journal\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/History\",\n     \"/{root,home/*}/.config/chromium/*/History\",\n     \"/{root,home/*}/.config/yandex-browser-beta/*/History-journal\",\n     \"/{root,home/*}/.config/BraveSoftware/Brave-Browser/*/History-journal\",\n     \"/{root,home/*}/.config/chromium/*/History-journal\"]\n\n- name: FirefoxHistory\n  default: |\n    [\"/{root,home/*}/.mozilla/firefox/*/places.sqlite-wal\",\n     \"/{root,home/*}/.mozilla/firefox/*/places.sqlite\"]\n\n- name: OperaHistoryFile\n  default: |\n    [\"/{root,home/*}/.opera/global_history.dat\"]\n\nsources:\n- name: uploadChromiumBasedBrowsersHistory\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ChromiumBasedBrowsersHistory))\n\n- name: uploadFirefoxHistory\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=FirefoxHistory))\n\n- name: uploadOperaHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=OperaHistoryFile))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.CatScale","op":"set","definition":"name: Exchange.Linux.Collection.CatScale\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n    This is a simple artifact that leverages Cat-Scale to collect many\n    different artifacts from a Linux host, then uploads the results to\n    the Velociraptor server.\n\n    From the project's description:\n\n    \"Linux CatScale is a bash script that uses live of the land tools\n    to collect extensive data from Linux based hosts. The data aims to\n    help DFIR professionals triage and scope incidents. An Elk Stack\n    instance also is configured to consume the output and assist the\n    analysis process.\"\n\n    https://github.com/FSecureLABS/LinuxCatScale\n\n    https://labs.f-secure.com/tools/cat-scale-linux-incident-response-collection/\n\ntools:\n  - name: CatScale\n    url: https://raw.githubusercontent.com/FSecureLABS/LinuxCatScale/master/Cat-Scale.sh\n    serve_locally: true\nparameters:\n  - name: Outfile\n    default: collection\n    type: string\n    description: Name of resultant collection file (will have `.tar.gz` appended)\n  - name: OutfilePrefix\n    default: catscale_\n    type: string\n    description: Prefix of collection file (Ex. catscale_ -- useful for parsing the filename later or other identification purposes)\n  - name: OutDir\n    default: catscale_out\n    type: string\n    description: Staging directory (modification likely not needed in most cases)\nprecondition: SELECT OS From info() where OS = 'linux'\nsources:\n  - query: |\n        LET CS \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"CatScale\", IsExecutable=TRUE)\n        LET TmpDir \u003c= tempdir(remove_last=TRUE)\n        Let RunIt = SELECT *, TmpDir + '/' + OutfilePrefix + Outfile + '.tar.gz' AS TarFile\n                    FROM execve(argv=[\n                        CS.FullPath[0],\n                        \"-d\", OutDir,\n                        \"-o\", TmpDir,\n                        \"-f\", Outfile,\n                        \"-p\", OutfilePrefix\n                     ])\n        SELECT upload(accessor=\"file\", file=TarFile) AS Upload FROM RunIt\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.DBConfig","op":"set","definition":"name: Exchange.Linux.Collection.DBConfig\nauthor: alternate\ndescription: |\n  Collect database configurations and upload them.\n  Based on TriageDatabaseConfigsAndLogs from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = \"linux\"\n\nparameters:\n- name: MongoDBConfigurationFile\n  default: |\n    [\"/usr/local/etc/mongod.conf\", \"/opt/homebrew/etc/mongod.conf\", \"/etc/mongod.conf\"]\n\n- name: MongoDBLogFiles\n  default: /var/log/mongodb/mongod.log*\n\n- name: MySQLConfigurationFiles\n  default: |\n    [\"/etc/my.cnf\", \"/etc/mysql/mysql.conf.d/mysqld.cnf\"]\n\n- name: MySQLLogFiles\n  default: |\n    [\"/var/log/mysql.log*\", \"/var/log/mysql/error.log*\"]\n\n- name: OpenSearchLogFiles\n  default: |\n    [\"/var/log/opensearch/*.json\", \"/var/log/opensearch/*.log\"]\n\n- name: PostgreSQLConfigurationFiles\n  default: |\n    [\"/etc/postgresql/*/*/pg_ident.conf\", \"/var/lib/pgsql/pg_hba.conf\", \"/var/lib/pgsql/data/pg_ident.conf\", \n     \"/etc/postgresql/*/*/postgresql.conf\", \"/var/lib/pgsql/pg_ident.conf\", \"/var/lib/pgsql/data/postgresql.conf\", \n     \"/etc/postgresql/*/*/pg_hba.conf\", \"/var/lib/pgsql/data/pg_hba.conf\", \"/var/lib/pgsql/postgresql.conf\"]\n\n- name: PostgreSQLLogFiles\n  default: |\n    [\"/var/log/postgresql/postgresql-*.log*\", \"/var/lib/pgsql/data/log/postgresql.csv*\",\n     \"/var/log/postgresql/postgresql.csv*\", \"/var/log/postgresql/postgresql-*-*.csv*\",\n     \"/var/log/postgresql/postgresql-*-*.log*\", \"/var/lib/pgsql/data/log/postgresql-*-*.csv*\",\n     \"/var/log/postgresql/postgresql-*.csv*\", \"/var/lib/pgsql/data/log/postgresql-*-*.log*\",\n     \"/var/lib/pgsql/data/log/postgresql-*.csv*\", \"/var/log/postgresql/postgresql.log*\",\n     \"/var/lib/pgsql/data/log/postgresql.log*\", \"/var/lib/pgsql/data/log/postgresql-*.log*\"]\n\n- name: RedisConfigFile\n  default: |\n    [\"/etc/redis/redis.conf\", \"/private/etc/redis/redis.conf\"]\n\n- name: RedisConfigurationFile\n  default: |\n    [\"/etc/init.d/redis_*\", \"/etc/redis/*\"]\n\n- name: RedisLogFiles\n  default: |\n    [\"/var/log/redis/redis*.log*\", \"/var/log/redis*.log*\"]\n\nsources:\n- name: uploadMongoDBConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=MongoDBConfigurationFile))\n\n- name: uploadMongoDBLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=MongoDBLogFiles)\n\n- name: uploadMySQLConfigurationFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=MySQLConfigurationFiles))\n\n- name: uploadMySQLLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=MySQLLogFiles))\n\n- name: uploadOpenSearchLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=OpenSearchLogFiles))\n\n- name: uploadPostgreSQLConfigurationFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=PostgreSQLConfigurationFiles))\n\n- name: uploadPostgreSQLLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=PostgreSQLLogFiles))\n\n- name: uploadRedisConfigFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=RedisConfigFile))\n\n- name: uploadRedisConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=RedisConfigurationFile))\n\n- name: uploadRedisLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=RedisLogFiles))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.History","op":"set","definition":"name: Exchange.Linux.Collection.History\nauthor: alternate\ndescription: |\n  Collect history files from unix/linux utilities and upload them.\n  Based on TriageHistory from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: BashShellHistoryFile\n  default: |\n    [\"/{root,home/*}/.bash_logout\",\"/{root,home/*}/.bash_profile\",\n     \"/{root,home/*}/.bashrc\",\"/etc/bash.bashrc\",\"/etc/bashrc\"]\n\n- name: BourneShellHistoryFile\n  default: /{root,home/*}/.sh_history\n\n- name: FishShellHistoryFile\n  default: /{root,home/*}/.local/share/fish/fish_history\n\n- name: MySQLHistoryFile\n  default: /{root,home/*}/.mysql_history\n\n- name: PostgreSQLHistoryFile\n  default: |\n    [\"/var/lib/postgresql/.psql_history\",\"/var/lib/pgsql/.psql_history\",\"/{root,home/*}/.psql_history\"]\n\n- name: PythonHistoryFile\n  default: /{root,home/*}/.python_history\n\n- name: SQLiteHistoryFile \n  default: /{root,home/*}/.sqlite_history\n\n- name: ZShellHistoryFile\n  default: |\n    [\"/{root,home/*}/.zhistory\",\"/{root,home/*}/.zsh_history\"]\n\n- name: LessHistoryFile\n  default: /{root,home/*}/.lesshst\n\n- name: NanoHistoryFile\n  default: /{root,home/*}/.nano_history\n\nsources:\n- name: uploadBashShellHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=BashShellHistoryFile))\n\n- name: uploadBourneShellHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=BourneShellHistoryFile)\n\n- name: uploadFishShellHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=FishShellHistoryFile)\n\n- name: uploadMySQLHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=MySQLHistoryFile)\n\n- name: uploadPostgreSQLHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=PostgreSQLHistoryFile))\n\n- name: uploadPythonHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=PythonHistoryFile)\n\n- name: uploadSQLiteHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=SQLiteHistoryFile)\n\n- name: uploadZShellHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ZShellHistoryFile))\n\n- name: uploadLessHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LessHistoryFile)\n\n- name: uploadNanoHistoryFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=NanoHistoryFile)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.ExtractKthread","op":"set","definition":"name: Exchange.Linux.ExtractKthread\nauthor: Andy Swift\ndescription: |\n  This artifact parses `/proc/[0-9]*/status` files and extracts the `ProcessName` and `Kthread` values. Helpful for identifying imposter processes.\n\ntype: CLIENT\n\nprecondition: SELECT OS FROM info() WHERE OS = \"linux\"\n\nparameters:\n  - name: FileNameGlob\n    description: Glob pattern to search for process status files.\n    default: \"/proc/[0-9]*/status\"\n    type: str\n\nsources:\n- name: extractKthread\n  query: |\n    LET FileInfos \u003c= SELECT OSPath, read_file(filename=OSPath) AS content\n                     FROM glob(globs=FileNameGlob, accessor='file')\n                     WHERE content =~ 'Kthread:\\\\s*(\\\\d+)'\n\n    LET ParsedInfos \u003c= SELECT OSPath,\n                          parse_string_with_regex(\n                            string=content,\n                            regex=[\n                              '^Name:\\\\s*(?P\u003cName\u003e.+)',\n                              'Kthread:\\\\s*(?P\u003cKthreadValue\u003e\\\\d+)'\n                            ]\n                          ) AS ParsedContent\n                      FROM FileInfos\n\n    SELECT OSPath,\n           ParsedContent.Name AS ProcessName,\n           ParsedContent.KthreadValue AS Kthread\n    FROM ParsedInfos\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.NetworkConfig","op":"set","definition":"name: Exchange.Linux.Collection.NetworkConfig\nauthor: alternate\ndescription: |\n  Collect network config files and upload them.\n  Based on TriageNetwork from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: DNSResolvConfFile\n  default: /etc/resolv.conf\n\n- name: HostAccessPolicyConfiguration\n  default: |\n    [\"/etc/hosts.allow\",\"/etc/hosts.deny\"]\n\n- name: LinuxHostnameFile\n  default: /etc/hostname\n\n- name: LinuxIgnoreICMPBroadcasts\n  default: /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts\n\n- name: LinuxNetworkIpForwardingState\n  default: |\n    [\"/proc/sys/net/ipv*/conf/*/forwarding\",\"/proc/sys/net/ipv4/conf/*/mc_forwarding\",\n     \"/proc/sys/net/ipv4/ip_forward\"]\n\n- name: LinuxNetworkPathFilteringSettings\n  default: |\n    [\"/proc/sys/net/ipv*/conf/*/accept_source_route\",\"/proc/sys/net/ipv4/conf/*/rp_filter\",\n     \"/proc/sys/net/ipv4/conf/*/log_martians\"]\n\n- name: LinuxNetworkRedirectState \n  default: |\n    [\"/proc/sys/net/ipv*/conf/*/accept_redirects\",\"/proc/sys/net/ipv4/conf/*/secure_redirects\",\n     \"/proc/sys/net/ipv4/conf/*/send_redirects\"]\n\n- name: LinuxProcArp\n  default: /proc/net/arp\n\n- name: LinuxSyncookieState\n  default: /proc/sys/net/ipv4/tcp_syncookies\n\n- name: UFWConfigFiles\n  default: |\n    [\"/etc/default/ufw\",\"/etc/ufw/sysctl.conf\",\"/etc/ufw/*.rules\",\"/etc/ufw/applications.d/*\"]\n\n- name: IPTablesConfigFiles\n  default: |\n    [\"/etc/sysconfig/iptables*\",\"/etc/sysconfig/ip6tables*\"]\n\n- name: UnixHostsFile\n  default: /etc/hosts\n\nsources:\n- name: uploadDNSResolvConfFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=DNSResolvConfFile)\n\n- name: uploadHostAccessPolicyConfiguration\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=HostAccessPolicyConfiguration))\n\n- name: uploadLinuxHostnameFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxHostnameFile)\n \n- name: uploadLinuxIgnoreICMPBroadcasts\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxIgnoreICMPBroadcasts)\n\n- name: uploadLinuxNetworkIpForwardingState\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxNetworkIpForwardingState))\n\n- name: uploadLinuxNetworkPathFilteringSettings\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxNetworkPathFilteringSettings))\n\n- name: uploadLinuxNetworkRedirectState\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxNetworkRedirectState))\n\n- name: uploadLinuxProcArp\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxProcArp)\n\n- name: uploadLinuxSyncookieState\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxSyncookieState)\n\n- name: uploadUFWConfigFiles\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UFWConfigFiles))\n\n- name: uploadIPTablesConfigFiles\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=IPTablesConfigFiles))\n\n- name: uploadUnixHostsFile\n  query: | \n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=UnixHostsFile)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.SysConfig","op":"set","definition":"name: Exchange.Linux.Collection.SysConfig \nauthor: alternate\ndescription: |\n  Collect system configurations and upload them.\n  Based on TriageSystemConfiguration from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = \"linux\"\n\nparameters:\n- name: APTSources\n  default: |\n    [\"/etc/apt/sources.list\", \"/etc/apt/sources.list.d/*.list\"]\n\n- name: APTTrustKeys\n  default: |\n    [\"/etc/apt/trusted.gpg.d/*.gpg\", \"/etc/apt/trustdb.gpg\", \"/usr/share/keyrings/*.gpg\", \"/etc/apt/trusted.gpg\"]\n\n- name: CronAtAllowDenyFiles\n  default: |\n    [\"/etc/at.allow\", \"/etc/cron.allow\", \"/etc/cron.deny\", \"/etc/at.deny\"]\n\n- name: DebianPackagesStatus\n  default: /var/lib/dpkg/status\n\n- name: DebianVersion\n  default: /etc/debian_version\n\n- name: KernelModules\n  default: |\n    [\"/etc/modules.conf\", \"/etc/modprobe.d/*\"]\n\n- name: LinuxCACertificates\n  default: |\n    [\"/usr/local/share/ca-certificates/*\", \"/etc/ssl/certs/ca-certificates.crt\", \"/usr/share/ca-certificates/*\"]\n\n- name: LinuxASLREnabled\n  default: /proc/sys/kernel/randomize_va_space\n\n- name: LinuxDSDTTable\n  default: /sys/firmware/acpi/tables/DSDT\n\n- name: LinuxDHCPConfigurationFile\n  default: /etc/dhcp/dhcp.conf\n\n- name: LinuxFstab\n  default: /etc/fstab\n\n- name: LinuxGrubConfiguration\n  default: |\n    [\"/boot/grub/grub.cfg\", \"/boot/grub2/grub.cfg\"]\n\n- name: LinuxInitrdFiles\n  default: |\n    [\"/boot/initramfs*\", \"/boot/initrd*\"]\n\n- name: LinuxIssueFile\n  default: |\n    [\"/etc/issue.net\", \"/etc/issue\"]\n\n- name: LinuxKernelBootloader\n  default: |\n    [\"/proc/sys/kernel/bootloader_type\", \"/proc/sys/kernel/bootloader_version\"]\n\n- name: LinuxKernelModuleRestrictions\n  default: |\n    [\"/proc/sys/kernel/modules_disabled\", \"/proc/sys/kernel/kexec_load_disabled\"]\n\n- name: LinuxKernelModuleTaintStatus\n  default: /proc/sys/kernel/tainted\n\n- name: LinuxLoaderSystemPreloadFile\n  default: /etc/ld.so.preload\n\n- name: LinuxLocalTime\n  default: /etc/localtime\n\n- name: LinuxLSBInit\n  default: |\n    [\"/etc/init.d/*\", \"/etc/insserv.conf.d/**\", \"/etc/insserv.conf\"]\n\n- name: LinuxLSBRelease\n  default: /etc/lsb-release\n\n- name: LinuxNetworkManager\n  default: |\n    [\"/usr/lib/NetworkManager/conf.d/name.conf\", \"/run/NetworkManager/conf.d/name.conf\", \n     \"/var/lib/NetworkManager/*\", \"/var/lib/NetworkManager/NetworkManager-intern.conf\", \n     \"/etc/NetworkManager/conf.d/name.conf\", \"/etc/NetworkManager/NetworkManager.conf\"]\n\n- name: LinuxPamConfigs\n  default: |\n    [\"/etc/pam.d/common-password\", \"/etc/pam.conf\", \"/etc/pam.d/*\"]\n\n- name: LinuxPasswdFile\n  default: /etc/passwd\n\n- name: LinuxProcMounts\n  default: /proc/mounts\n\n- name: LinuxRelease\n  default: |\n    [\"/etc/enterprise-release\", \"/etc/system-release\", \"/etc/oracle-release\", \"/etc/lsb-release\", \"/etc/redhat-release\"]\n\n- name: LinuxRestrictedDmesgReadPrivileges\n  default: /proc/sys/kernel/dmesg_restrict\n\n- name: LinuxRestrictedKernelPointerReadPrivileges\n  default: /proc/sys/kernel/kptr_restrict\n\n- name: LinuxRsyslogConfigs\n  default: |\n    [\"/etc/rsyslog.d\", \"/etc/rsyslog.d/*\", \"/etc/rsyslog.conf\"]\n\n- name: LinuxSecureFsLinks\n  default: |\n    [\"/proc/sys/fs/protected_symlinks\", \"/proc/sys/fs/protected_hardlinks\"]\n\n- name: LinuxSecureSuidCoreDumps\n  default: /proc/sys/fs/suid_dumpable\n\n- name: LinuxSSDTTables\n  default: /sys/firmware/acpi/tables/SSDT*\n\n- name: LinuxSysctlConfigurationFiles\n  default: |\n    [\"/etc/sysctl.d/*.conf\", \"/etc/sysctl.con\", \"/usr/lib/sysctl.d/*.conf\", \n     \"/run/sysctl.d/*.conf\", \"/lib/sysctl.d/*.conf\", \"/usr/local/lib/sysctl.d/*.conf\"]\n\n- name: LinuxSyslogNgConfigs\n  default: |\n    [\"/etc/syslog-ng/conf-d/*.conf\", \"/etc/syslog-ng/syslog-ng.conf\"]\n\n- name: LinuxSystemdJournalConfig\n  default: /etc/systemd/journald.conf\n\n- name: LinuxSystemdOSRelease\n  default: |\n    [\"/usr/lib/os-release\", \"/etc/os-release\"]\n\n- name: LinuxTimezoneFile\n  default: /etc/timezone\n\n- name: LinuxXinetd\n  default: |\n    [\"/etc/xinetd.d/**\", \"/etc/xinetd.conf\"]\n\n- name: LocateDatabase\n  default: |\n    [\"/etc/updatedb.conf\", \"/var/lib/mlocate/mlocate.db\"]\n\n- name: LoginPolicyConfiguration\n  default: |\n    [\"/etc/passwd\", \"/etc/shadow\", \"/root/.k5login\", \"/etc/netgroup\", \"/etc/nsswitch.conf\", \"/etc/security/access.conf\"]\n\n- name: NetgroupConfiguration\n  default: /etc/netgroup\n\n- name: NfsExportsFile\n  default: |\n    [\"/private/etc/exports\", \"/etc/exports\"]\n\n- name: NtpConfFile\n  default: /etc/ntp.conf\n\n- name: PCIDevicesInfoFiles\n  default: |\n    [\"/sys/bus/pci/devices/*/config\", \"/sys/bus/pci/devices/*/vendor\", \n     \"/sys/bus/pci/devices/*/device\", \"/sys/bus/pci/devices/*/class\"]\n\n- name: SambaConfigFile\n  default: /etc/samba/smb.conf\n\n- name: SecretsServiceDatabaseFile\n  default: |\n    [\"/var/lib/sss/secrets/.secrets.mkey\", \"/var/lib/sss/secrets/secrets.ldb\"]\n\n- name: SshdConfigFile\n  default: |\n    [\"/etc/ssh/sshd_config\", \"/private/etc/ssh/sshd_config\"]\n\n- name: SSHHostPubKeys\n  default: /etc/ssh/ssh_host_*_key.pub\n\n- name: UnixGroupsFile\n  default: |\n    [\"/etc/group\", \"/private/etc/group\"]\n\n- name: UnixLocalTimeConfigurationFile\n  default: |\n    [\"/private/etc/localtime\", \"/etc/localtime\"]\n\n- name: UnixPasswdFile\n  default: |\n    [\"/private/etc/passwd\", \"/etc/passwd\"]\n\n- name: UnixShadowFile\n  default: |\n    [\"/private/etc/shadow\", \"/etc/shadow\"]\n\n- name: UnixSudoersConfigurationFile\n  default: |\n    [\"/etc/sudoers\", \"/private/etc/sudoers\"]\n\n- name: YumSources\n  default: |\n    [\"/etc/yum.conf\", \"/etc/yum.repos.d/*.repo\"]\n\nsources:\n- name: uploadAPTSources\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=APTSources))\n\n- name: uploadAPTTrustKeys\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=APTTrustKeys))\n\n- name: uploadCronAtAllowDenyFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=CronAtAllowDenyFiles))\n\n- name: uploadDebianPackagesStatus\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=DebianPackagesStatus)\n\n- name: uploadDebianVersion\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=DebianVersion)\n\n- name: uploadKernelModules\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=KernelModules))\n\n- name: uploadLinuxASLREnabled\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxASLREnabled)\n\n- name: uploadLinuxCACertificates\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxCACertificates))\n\n- name: uploadLinuxDHCPConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxDHCPConfigurationFile)\n\n- name: uploadLinuxDSDTTable\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxDSDTTable)\n\n- name: uploadLinuxFstab\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxFstab)\n\n- name: uploadLinuxGrubConfiguration\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxGrubConfiguration))\n\n- name: uploadLinuxInitrdFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxInitrdFiles))\n\n- name: uploadLinuxIssueFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxIssueFile))\n\n- name: uploadLinuxKernelBootloader\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxKernelBootloader))\n\n- name: uploadLinuxKernelModuleRestrictions\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxKernelModuleRestrictions))\n\n- name: uploadLinuxKernelModuleTaintStatus\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxKernelModuleTaintStatus)\n\n- name: uploadLinuxLoaderSystemPreloadFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxLoaderSystemPreloadFile)\n\n- name: uploadLinuxLocalTime\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxLocalTime)\n\n- name: uploadLinuxLSBInit\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxLSBInit))\n\n- name: uploadLinuxLSBRelease\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxLSBRelease)\n\n- name: uploadLinuxNetworkManager\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxNetworkManager))\n\n- name: uploadLinuxPamConfigs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxPamConfigs))\n\n- name: uploadLinuxPasswdFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxPasswdFile)\n\n- name: uploadLinuxProcMounts\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxProcMounts)\n\n- name: uploadLinuxRelease\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxRelease))\n\n- name: uploadLinuxRestrictedDmesgReadPrivileges\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxRestrictedDmesgReadPrivileges)\n\n- name: uploadLinuxRestrictedKernelPointerReadPrivileges\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxRestrictedKernelPointerReadPrivileges)\n\n- name: uploadLinuxRsyslogConfigs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxRsyslogConfigs))\n\n- name: uploadLinuxSecureFsLinks\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSecureFsLinks))\n\n- name: uploadLinuxSecureSuidCoreDumps\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxSecureSuidCoreDumps)\n\n- name: uploadLinuxSSDTTables\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxSSDTTables)\n\n- name: uploadLinuxSysctlConfigurationFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSysctlConfigurationFiles))\n\n- name: uploadLinuxSyslogNgConfigs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSyslogNgConfigs))\n\n- name: uploadLinuxSystemdJournalConfig\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxSystemdJournalConfig)\n\n- name: uploadLinuxSystemdOSRelease\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSystemdOSRelease))\n\n- name: uploadLinuxTimezoneFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxTimezoneFile)\n\n- name: uploadLinuxXinetd\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxXinetd))\n\n- name: uploadLocateDatabase\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LocateDatabase))\n\n- name: uploadLoginPolicyConfiguration\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LoginPolicyConfiguration))\n\n- name: uploadNetgroupConfiguration\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=NetgroupConfiguration)\n\n- name: uploadNfsExportsFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=NfsExportsFile))\n\n- name: uploadNtpConfFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=NtpConfFile)\n\n- name: uploadPCIDevicesInfoFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=PCIDevicesInfoFiles))\n\n- name: uploadSambaConfigFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=SambaConfigFile)\n\n- name: uploadSecretsServiceDatabaseFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=SecretsServiceDatabaseFile))\n\n- name: uploadSshdConfigFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=SshdConfigFile))\n\n- name: uploadSSHHostPubKeys\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=SSHHostPubKeys)\n\n- name: uploadUnixGroupsFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixGroupsFile))\n\n- name: uploadUnixLocalTimeConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixLocalTimeConfigurationFile))\n\n- name: uploadUnixPasswdFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixPasswdFile))\n\n- name: uploadUnixShadowFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixShadowFile))\n\n- name: uploadUnixSudoersConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixSudoersConfigurationFile))\n\n- name: uploadYumSources\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=YumSources))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.SysLogs","op":"set","definition":"name: Exchange.Linux.Collection.SysLogs\nauthor: alternate\ndescription: |\n  Collect system logs and upload them.\n  Based on TriageSystemLogs from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: DebianPackagesLogFiles\n  default: |\n    [\"/var/log/dpkg.log*\",\"/var/log/apt/history.log*\",\"/var/log/apt/term.log\"]\n\n- name: LinuxAuditLogs\n  default: /var/log/audit/*\n\n- name: LinuxAuthLogs\n  default: |\n    [\"/var/log/auth.log*\",\"/var/log/secure.log*\"]\n\n- name: LinuxCronLogs\n  default: /var/log/cron.log*\n\n- name: LinuxDaemonLogFiles\n  default: /var/log/daemon.log* \n\n- name: LinuxKernelLogFiles\n  default: /var/log/kern.log*\n\n- name: LinuxLatlogFiles\n  default: /var/log/lastlog\n\n- name: LinuxMessagesLogFiles\n  default: /var/log/messages*\n\n- name: LinuxSudoReplayLogs\n  default: /var/log/sudo-io/**\n\n- name: LinuxSysLogFiles\n  default: /var/log/syslog.log* \n\n- name: LinuxSystemdJournalLogs\n  default: |\n    [\"/var/log/journal/*/*.journal\",\"/var/log/journal/*/*.journal~\"]\n\n- name: LinuxUtmpFiles\n  default: |\n    [\"/var/log/btmp\",\"/var/log/wtmp\",\"/var/run/utmp\"]\n\n- name: LinuxWtmp\n  default: /var/log/wtmp\n\n- name: SambaLogFiles\n  default: /var/log/samba/*.log\n\n- name: UFWLogFile\n  default: /var/log/ufw.log\n\n- name: UnixUtmpFile\n  default: |\n    [\"/var/log/btmp\",\"/var/log/wtmp\",\"/var/run/utmp\"]\n\nsources:\n- name: uploadDebianPackagesLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=DebianPackagesLogFiles))\n\n- name: uploadLinuxAuditLogs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxAuditLogs)\n\n- name: uploadLinuxAuthLogs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxAuthLogs))\n\n- name: uploadLinuxCronLogs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxCronLogs)\n\n- name: uploadLinuxDaemonLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxDaemonLogFiles)\n\n- name: uploadLinuxKernelLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxKernelLogFiles)\n\n- name: uploadLinuxLatlogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxLatlogFiles)\n\n- name: uploadLinuxMessagesLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxMessagesLogFiles)\n\n- name: uploadLinuxSudoReplayLogs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxSudoReplayLogs)\n\n- name: uploadLinuxSysLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=LinuxSysLogFiles)\n\n- name: uploadLinuxSystemdJournalLogs\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxSystemdJournalLogs))\n\n- name: uploadLinuxUtmpFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=LinuxUtmpFiles))\n\n- name: uploadLinuxWtmp\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=LinuxWtmp)\n\n- name: uploadSambaLogFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=SambaLogFiles)\n\n- name: uploadUFWLogFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM stat(filename=UFWLogFile)\n\n- name: uploadUnixUtmpFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=UnixUtmpFile))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Collection.UserConfig","op":"set","definition":"name: Exchange.Linux.Collection.UserConfig\nauthor: alternate\ndescription: |\n  Collect user configurations and upload them.\n  Based on TriageUserConfiguration from forensicartifacts.com\n\nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/data/triage.yaml\n\nprecondition: SELECT OS FROM info() WHERE OS = 'linux'\n\nparameters:\n- name: BashShellConfigurationFile\n  default: |\n    [\"/{root,home/*}/.bash_logout\",\"/{root,home/*}/.bash_profile\",\"/{root,home/*}/.bashrc\",\n     \"/etc/bash.bashrc\",\"/etc/bashrc\"]\n\n- name: ChromePreferences\n  default: |\n    [\"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-config/google-chrome/*/Secure Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Preferences\",\n     \"/{root,home/*}/.config/chrome-remote-desktop/chrome-profile/*/Secure Preferences\",\n     \"/{root,home/*}/.config/chromium/*/Preferences\",\n     \"/{root,home/*}/.config/chromium/*/Secure Preferences\",\n     \"/{root,home/*}/.config/google-chrome/*/Preferences\",\n     \"/{root,home/*}/.config/google-chrome/*/Secure Preferences\"]\n\n- name: CShellConfigurationFile\n  default: |\n    [\"/{root,home/*}/.cshrc\",\"/etc/csh.cshrc\",\"/etc/csh.login\",\"/etc/csh.logout\"]\n\n- name: FishShellConfigurationFile\n  default: |\n    [\"/{root,home/*}/.local/share/fish/fish_history\",\n     \"/{root,home/*}/.config/fish/conf.d/config.fish\",\n     \"/{root,home/*}/.config/fish/config.fish\",\n     \"/etc/fish/config.fish,/etc/fish/conf.d/*.fish\"]\n\n- name: JupyterConfigFile\n  default: /{root,home/*}/.jupyter/jupyter_notebook_config.py\n\n- name: KornShellConfigurationFile\n  default: |\n    [\"/{root,home/*}/.ksh\",\"/etc/kshrc\"]\n\n- name: RHostsFile\n  default: /{root,home/*}/.rhosts\n\n- name: ShellLogoutFile\n  default: /{root,home/*}/.logout\n\n- name: ShellProfileFile\n  default: | \n    [\"/{root,home/*}/.profile\",\"/etc/profile\"]\n\n- name: SignalApplicationContent\n  default: |\n    [\"/{root,home/*}/.var/app/org.signal.Signal/*/attachments.noindex/*\",\n     \"/{root,home/*}/.var/app/org.signal.Signal/*/Cache/*\",\n     \"/{root,home/*}/.var/app/org.signal.Signal/*/logs/*\",\n     \"/{root,home/*}/.var/app/org.signal.Signal/config.json\"]\n\n- name: SSHAuthorizedKeysFiles\n  default: |\n    [\"/{root,home/*}/.ssh/authorized_keys\",\"/{root,home/*}/.ssh/authorized_keys2\"]\n\n- name: SSHKnownHostsFiles\n  default: | \n    [\"/{root,home/*}/.ssh/known_hosts\",\"/etc/ssh/known_hosts\"]\n\n- name: SSHUserConfigFile\n  default: /{root,home/*}/.ssh/config\n\n- name: TeeShellConfigurationFile\n  default: /{root,home/*}/.tcsh\n\n- name: ZShellConfigurationFile\n  default: |\n    [\"/{root,home/*}/.zlogin\",\"/{root,home/*}/.zlogout\",\"/{root,home/*}/.zprofile\",\n     \"/etc/zshenv,/etc/zshrc\",\"/etc/zsh/zlogin\",\"/etc/zsh/zlogout\",\"/etc/zsh/zprofile\",\n     \"/etc/zsh/zshenv\",\"/etc/zsh/zshrc\"]\n\nsources:\n- name: uploadBashShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=BashShellConfigurationFile))\n\n- name: uploadChromePreferences\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ChromePreferences))\n\n- name: uploadCShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=CShellConfigurationFile))\n\n- name: uploadFishShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=FishShellConfigurationFile))\n\n- name: uploadJupyterConfigFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=JupyterConfigFile)\n\n- name: uploadKornShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=KornShellConfigurationFile))\n\n- name: uploadRHostsFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=RHostsFile)\n\n- name: uploadShellLogoutFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=ShellLogoutFile)\n\n- name: uploadShellProfileFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ShellProfileFile))\n\n- name: uploadSignalApplicationContent\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=SignalApplicationContent))\n\n- name: uploadSSHAuthorizedKeysFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=SSHAuthorizedKeysFiles))\n\n- name: uploadSSHKnownHostsFiles\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=SSHKnownHostsFiles))\n\n- name: uploadSSHUserConfigFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=SSHUserConfigFile)\n\n- name: uploadTeeShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=TeeShellConfigurationFile)\n\n- name: uploadZShellConfigurationFile\n  query: |\n    SELECT OSPath,\n           Mtime,\n           upload(file=OSPath) AS Upload\n    FROM glob(globs=parse_json_array(data=ZShellConfigurationFile))\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.Base.CaptureTestSet","op":"set","definition":"name: Linux.Sigma.Base.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Linux.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: /var/log/\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - Critical\n      - Critical and High\n      - All\n\n  - name: DefaultYear\n    description: The Default year for parsing Syslog timestamps (default current year)\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    - \"*/linux/*\"\n    - \"*/linux/sshd\"\n    - \"*/linux/cron\"\n    - \"*/linux/auth\"\n    - \"*/linux/syslog\"\n    - \"*/linux/sudo\"\n    - \"*/linux/auditd\"\n    - \"network_connection/linux/*\"\n    - \"process_creation/linux/*\"\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Linux.Sigma.Base\nsources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n\n- query: |\n    SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.Base.ReplayTestSet","op":"set","definition":"name: Linux.Sigma.Base.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Linux.Sigma.Base\nsources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    SELECT  _Rule.Title AS Rule ,\n      Details,\n      dict(System=System,\n           EventData=X.EventData || X.UserData,\n           Message=X.Message) AS Event,\n      _Match AS Match\n\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Debian.GPGKeys","op":"set","definition":"name: Exchange.Linux.Debian.GPGKeys\ndescription: |\n  Extract keys, fingerprints and identities from GPG keys.\n\n  This artifact runs the tool \"gpg\" (must be installed on the system) on the\n  files found matching the globs in KeyringFiles. The files need not be keyrings.\n\n  Every entry consists of a public or secret key, optional subkeys and optional\n  identities. This artifact may be useful in other artifacts to inspect GPG\n  files or GPG data in order to correlate keys by their IDs, or look at connected\n  user IDs.\n\n  This artifact doesn't provide any information about whether a key is\n  \"trustworthy\".\n\n  Note that some keyring files contain a lot of subkeys and identities.\n\n  The following columns are returned by this artifact:\n\n    - OSPath: Path to the key file\n    - KeyInfo: dict with the following entries:\n      - Type: pub|sub\n      - ID\n      - Fingerprint\n      - Algorithm\n      - Validity\n      - Created\n      - Expiry\n    - SubKeys: array of dicts with the same structure as KeyInfo\n    - UserIDs: array of strings (name and e-mail)\n\nreference:\n  - https://manpages.debian.org/bookworm/apt/apt-key.8.en.html\n  - https://github.com/CSNW/gnupg/blob/master/doc/DETAILS\n  - https://www.mailpile.is/blog/2014-10-07_Some_Thoughts_on_GnuPG.html\n  - https://www.ietf.org/rfc/rfc4880.txt\n\nexport: |\n        /* Extract machine-\"readable\" data from the GPG keys found in the file.\n           The format is documented in the reference above. However, as the blog\n           post mentions, detailed knowledge about GPG is needed in order to\n           decipher the output. See ParseKeyInfo_(). */\n        LET InspectGPGFile(filename) = SELECT Stdout AS Info\n            FROM execve(argv=['gpg', '--with-colons', filename])\n\n        /* Pipe data to the same command as in InspectGPGFile(): */\n\n        LET InspectGPGData(data) = SELECT *\n            FROM InspectGPGFile(filename=tempfile(data=data))\n        /* Convert the validity code to a more human-readable string (see\n           reference for details): */\n        LET GPGValidityString(validity) = regex_transform(source=validity, map=dict(\n            `^o$`='Unknown',\n            `^i$`='Invalid',\n            `^d$`='Disabled',\n            `^r$`='Revoked',\n            `^e$`='Expired',\n            `^-$`='Unknown',\n            `^q$`='Unknown',\n            `^n$`='Invalid',\n            `^m$`='Marginally valid',\n            `^f$`='Fully valid',\n            `^u$`='Ultimately valid',\n            `^w$`='Well-known',\n            `^s$`='Special'\n        ))\n\n        /* Convert timestamp, but only if it is non-null: */\n        LET MaybeTimestamp(epoch) = if(\n            condition=epoch, then=timestamp(epoch=epoch), else=null)\n\n        LET ParseKeyInfo_(data) = SELECT * FROM foreach(\n            /* A file may contain several \"keys\" (i.e. sections of either a\n               public or private key, followed by a fingerprint, subkeys and\n               identities). In order to parse these sections, the contents of\n               the file are split (an arbitraray binary blob is used): */\n            row={SELECT split(sep_string='\\x01\\x02\\0x03',\n                string=regex_replace(source=data, re='(?m)^(pub|sec):',replace='\\x01\\x02\\x03$1')) AS KeyInfo\n                FROM scope()},\n            query={\n                /* There is only one key (public or private) followed by an\n                   optional fingerprint: */\n                SELECT parse_string_with_regex(string=KeyInfo, regex=(\n                    '''(?m)(?P\u003cType\u003epub|sec):(?P\u003cValidity\u003e[^:]*):(?P\u003cLength\u003e[^:]*):(?P\u003cAlgorithm\u003e[^:]*):(?P\u003cID\u003e[^:]*):(?P\u003cCreated\u003e[^:]*):(?P\u003cExpiry\u003e[^:]*):[^:]*:(?P\u003cTrust\u003e[^:]*)''',\n                    '''fpr:::::::::(?P\u003cFingerprint\u003e[^:]*)'''\n                )) AS KeyInfo,\n                /* There may be none or several subkeys (following the same\n                   format as public/private keys): */\n                {SELECT Type,\n                    ID,\n                    Fingerprint,\n                    atoi(string=Algorithm) AS Algorithm,\n                    GPGValidityString(validity=Validity) AS Validity,\n                    MaybeTimestamp(epoch=Created) AS Created,\n                    MaybeTimestamp(epoch=Expiry) AS Expiry\n                    FROM parse_records_with_regex(\n                        file=KeyInfo,\n                        accessor='data',\n                        regex=(\n                        '''(?m)(?P\u003cType\u003esub):(?P\u003cValidity\u003e[^:]*):(?P\u003cLength\u003e[^:]*):(?P\u003cAlgorithm\u003e[^:]*):(?P\u003cID\u003e[^:]*):(?P\u003cCreated\u003e[^:]*):(?P\u003cExpiry\u003e[^:]*):[^:]*:(?P\u003cTrust\u003e[^:]*)''',\n                            '''fpr:::::::::(?P\u003cFingerprint\u003e[^:]*)'''\n                        ))\n                } AS SubKeys,\n                /* There may be none or several identities: */\n                array(uids={SELECT UserID FROM parse_records_with_regex(\n                    file=KeyInfo,\n                    accessor='data',\n                    regex='''uid:::::::::(?P\u003cUserID\u003e[^:]*)''')}) AS UserIDs\n                FROM scope()\n                WHERE KeyInfo\n            })\n\n        LET ParseKeyInfo(data) = SELECT dict(\n                Type=KeyInfo.Type,\n                ID=KeyInfo.ID,\n                Fingerprint=get(item=KeyInfo, field='Fingerprint', default=''),\n                Algorithm=atoi(string=KeyInfo.Algorithm),\n                Validity=GPGValidityString(validity=KeyInfo.Validity),\n                Created=MaybeTimestamp(epoch=KeyInfo.Created),\n                Expiry=MaybeTimestamp(epoch=KeyInfo.Expiry)\n            ) AS KeyInfo,\n            SubKeys,\n            UserIDs\n        FROM ParseKeyInfo_(data=data)\n\n        LET ParseGPG(data) = SELECT *\n            FROM ParseKeyInfo(data=InspectGPGData(data=data))\n\n        LET ParseGPGFile(filename) = SELECT *\n            FROM ParseKeyInfo(data=InspectGPGFile(filename=filename))\n\nparameters:\n  - name: KeyringFiles\n    description: Globs to find GPG keyrings\n    type: csv\n    default: |\n        KeyringGlobs\n        /etc/apt/trusted.gpg\n        /etc/apt/trusted.gpg.d/*.gpg\n        /etc/apt/keyrings/*.gpg\n        /usr/share/keyrings/*.gpg\n\nprecondition:\n    SELECT OS From info() where OS = 'linux'\n\nsources:\n  - name: KeyringKeys\n    query: |\n        LET GPGKeys = SELECT * FROM foreach(\n            row={SELECT OSPath FROM glob(globs=KeyringFiles.KeyringGlobs)},\n            query={SELECT OSPath, * FROM ParseGPGFile(filename=OSPath)}\n        )\n\n        SELECT * FROM GPGKeys\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.Base","op":"set","definition":"name: Linux.Sigma.Base\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: /var/log/\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - Critical\n      - Critical and High\n      - All\n\n  - name: DefaultYear\n    description: The Default year for parsing Syslog timestamps (default current year)\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\nexport: |\n  LET X = scope()\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       Critical=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET ParseLogFile(Filter, ROOT) =\n      SELECT OSPath.Basename AS Channel, Line FROM foreach(row={\n         SELECT OSPath FROM glob(globs=\"*\", root=ROOT)\n         WHERE OSPath.Basename =~ Filter\n      }, query={\n         SELECT OSPath, Line\n         FROM parse_lines(filename=OSPath)\n      })\n\n  LET ParseAuditdLogFile(Filter, ROOT) =\n      SELECT OSPath.Basename AS Channel, * FROM foreach(row={\n         SELECT OSPath FROM glob(globs=\"*\", root=ROOT)\n         WHERE OSPath.Basename =~ Filter\n      }, query={\n         SELECT OSPath, *\n         FROM parse_auditd(filename=OSPath)\n      })\n\n  -- Used to parse syslog lines\n  LET DefaultYear \u003c= format(format=\" %v\", args=DefaultYear || timestamp(epoch=now()).Year)\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/3TS3WrrMAwH8FcJuuoBY9JvOJCr88EKY5SSXS1jiFSkpokdbBUSxvbsw94KdVtfBaQf/yBZ7wC/YSiqU57PaQABf0zXod4/Kk2XHbm1pibnJCtuCQT8JcdKIyujH4xjjd2lPxjHE18rBumlVL3IeOypqGBb7ioQGVusj2TfjG7Hotw9//sVp2766P8/KbHZGsu3qvdVAZsOm/sz0OAn2GjFCpn2kXkilntlqfb5WfGZVUCNJecqAAEl2ob4v2rpauBB+qLskQ8gAPO7/0XbuJf81YNpGkwDmKXBLIB5GswDWKTBIoBlGiwDWKXBKoB1Gqw9qE3X3SVhewL8Q6Qf6Ehj1C3xvL6b5V/l+o+/ttggH75FaAlwo6uxbeMDQkZ5bgi4Cjn1NTqaOLZKN8Ugy7Enf7Ynrfg2JlQ/vgIAAP//wZm7xWIDAAA=\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6pWclSyUqqwjSk1MDBOrdDzycxLVaoFBAAA//+eso6mFgAAAA==\")))\n\n  LET ParseTimestamp(Line) = grok(grok=\"%{SYSLOGTIMESTAMP:timestamp}\", data=Line)\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `*/linux/*`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|syslog|secure\")\n    },\n    `*/linux/sshd`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\n     WHERE Line =~ \"sshd\"\n    },\n    `*/linux/cron`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"syslog\")\n     WHERE Line =~ \"cron\"\n    },\n    `*/linux/auth`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\n    },\n    `*/linux/syslog`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"syslog\")\n    },\n    `*/linux/sudo`={\n     SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\n     WHERE Line =~ \"sudo:\"\n    },\n    `*/linux/auditd`={\n     SELECT * FROM AuditdEvents\n    },\n    `network_connection/linux/*`={\n     SELECT * FROM AuditdEvents\n     WHERE Summary.action = \"connected-to\"\n    },\n    `process_creation/linux/*`={\n     SELECT * FROM ParseAuditdLogFile(ROOT=ROOT + \"/audit/\", Filter=\"audit.log\")\n    },`velociraptor/info/*`={ SELECT * FROM info() })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/3TS3WrrMAwH8FcJuuoBY9JvOJCr88EKY5SSXS1jiFSkpokdbBUSxvbsw94KdVtfBaQf/yBZ7wC/YSiqU57PaQABf0zXod4/Kk2XHbm1pibnJCtuCQT8JcdKIyujH4xjjd2lPxjHE18rBumlVL3IeOypqGBb7ioQGVusj2TfjG7Hotw9//sVp2766P8/KbHZGsu3qvdVAZsOm/sz0OAn2GjFCpn2kXkilntlqfb5WfGZVUCNJecqAAEl2ob4v2rpauBB+qLskQ8gAPO7/0XbuJf81YNpGkwDmKXBLIB5GswDWKTBIoBlGiwDWKXBKoB1Gqw9qE3X3SVhewL8Q6Qf6Ehj1C3xvL6b5V/l+o+/ttggH75FaAlwo6uxbeMDQkZ5bgi4Cjn1NTqaOLZKN8Ugy7Enf7Ynrfg2JlQ/vgIAAP//wZm7xWIDAAA=\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6pWclSyUqqwjSk1MDBOrdDzycxLVaoFBAAA//+eso6mFgAAAA==\")))\n\n  LET DefaultDetailsLambda = '''x=\u003ex.Line'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  LET AuditdEvents = generate(name=\"Auditd Events\", query={\n    SELECT * FROM ParseAuditdLogFile(ROOT=ROOT + \"/audit/\", Filter=\"audit.log\")\n  })\nsources:\n- query: |\n    SELECT Timestamp,\n           Hostname AS Computer,\n           Channel,\n           _Rule.Level AS Level,\n           _Rule.Title AS Title,\n           Details,\n           *\n    FROM sigma(\n       rules=split(string= Rules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= LogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       rule_filter=RuleFilterLambda,\n       field_mapping= FieldMapping)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.EBPF.Monitoring","op":"set","definition":"name: Linux.EBPF.Monitoring\ndescription: |\n  This artifact packages the standard rules in the SigmaHQ\n  repository https://github.com/SigmaHQ/sigma together with\n  Velociraptor's eBPF Sigma model.\n\n  You can customize this artifact using instructions at\n  [Customizing Artifacts](https://sigma.velocidex.com/docs/sigma_in_velociraptor/customize/)\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\nimports:\n  - Linux.Sigma.EBPFBase\nexport: |\n     LET SigmaRules \u003c= gunzip(string=base64decode(string=\"\"))\nsources:\n- query: |\n    SELECT *\n    FROM Artifact.Linux.Sigma.EBPFBase(\n       RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, RuleExclusions=RuleExclusions,\n       SigmaRules=SigmaRules)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.EBPFBase.CaptureTestSet","op":"set","definition":"name: Linux.Sigma.EBPFBase.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Linux.EBPF.BaseEvent. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    - \"network_connection/linux/*\"\n    - \"file_event/linux/*\"\n    - \"process_creation/linux/*\"\n    - \"ebpf/linux/*\"\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Linux.Sigma.EBPFBase\nsources:\n- query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.EBPFBase.ReplayTestSet","op":"set","definition":"name: Linux.Sigma.EBPFBase.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: /path/to/file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Linux.Sigma.EBPFBase\nsources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT System.Timestamp AS Timestamp,\n       Hostname AS Computer,\n       \"EBPF\" AS Channel,\n       System.EventName AS EID,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.BruteForce","op":"set","definition":"name: Exchange.Linux.Detection.BruteForce\ndescription: | \n\n   Linux detection brute force module.\n   This code is based on https://github.com/RCarras/linforce/blob/main/linforce.sh\n      \n   This module uses btmp/wtmp files to search for possible brute force attacks comparing:\n   \n   * Wtmp (successful attempts) and btmp (failed attempts) Logs.\n   * Time interval between failed login attempts, and against successful logins.\n   \n   Type of attacks:\n   \n   * Basic Brute Force Attack: multiple consecutive attempts from an IP.\n   * Password Spraying: multiple consecutive attempts from different users with the same password.  \n   * Dynamic IP Attack: multiple consecutive attempts from different IPs.\n\n   Creators:\n  \n   * Rafael Carrasco: https://www.linkedin.com/in/rafael-carrasco-vilaplana-3199a492\n   * David Rosado: https://www.linkedin.com/in/david-rosado-soria-4416b8230\n\ntype: client\n\nparameters: \n   - name: \"brutevar\"\n     description: \"Number of attempts to consider as brute force\"\n     default: \"80\"\n   - name: \"intervalvar\"\n     description: \"Time interval between attempts to be considered as consecutive\"\n     default: \"45\"\n   - name: \"min_timestamp\"\n     description: \"Initial timestamp for the analysis in the format YYYYmmddHHMMSS\"\n     default: \"20220901000000\" \n   - name: \"max_timestamp\"\n     description: \"Maximum timestamp for the analysis in the format YYYYmmddHHMMSS\"\n     default: \"20301231000000\"\n     \n\n\ntools:\n   - name: linforce\n     url: https://raw.githubusercontent.com/RCarras/linforce/main/linforce.sh\n     expected_hash: 998f65cc9f9eef746c38a165e86317e502a0915161df824ad935613e0ad74b0d\n     \nsources:\n   - name: btmp.logs\n     query: |\n      -- Download tool\n      LET LinforceTool \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"linforce\", IsExecutable=TRUE)\n      \n      -- Delete output after the module end\n      LET outputPath \u003c= tempdir(remove_last=TRUE)\n      \n      -- Execute the script as root and capture the output\n      LET _ \u003c= SELECT * FROM execve(argv=[\"sudo\", \"/bin/bash\", LinforceTool.FullPath[0], \"-b\", brutevar, \"-t\", intervalvar, \"-i\", min_timestamp, \"-m\", max_timestamp, \"-o\", outputPath])\n\n      -- Parse output     \n      SELECT * \n      FROM split_records(filenames=outputPath+\"/btmp.logs\", first_row_is_headers=true)\n       \n   - name: wtmp.logs\n     query: |\n       SELECT *\n       FROM split_records(filenames=outputPath+\"/wtmp.logs\", first_row_is_headers=true)\n       \n   - name: hits_login\n     query: |\n       SELECT * \n       FROM parse_lines(filename=outputPath+\"/hits_login\")\n         \n   - name: brute_force_attempts.log\n     query: |\n       SELECT * \n       FROM parse_lines(filename=outputPath+\"/brute_force_attempts.log\")\n      \n   - name: red_zone_attempts.log\n     query: |\n       SELECT * \n       FROM parse_lines(filename=outputPath+\"/red_zone_attempts.log\")\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.CVE20214034","op":"set","definition":"name: Exchange.Linux.Detection.CVE20214034\ndescription: |\n   This artifact lists processes running as root that were spawns by processes that are not\n   running as root. This kind of behavior is normal for things like sudo or su but for other\n   processes (especially /bin/bash) it could represent a process launched via CVE-2021-4034.\n\n   The artifact looks for running processes with this property as well as search the auth\n   log files for evidence of past execution of this exploit.\n\ntype: CLIENT\n\nparameters:\n   - name: AcceptableParentExeRegex\n     description: A list of acceptable parent processes that are OK (unset to see all parents)\n     type: regex\n     default: ^(/usr/bin/sudo)\n   - name: AuthLogsGlob\n     default: /var/log/auth.log*\n\nprecondition:\n    SELECT OS From info() where OS = 'linux'\n\nsources:\n  - query: |\n        SELECT Pid, Ppid, Cmdline, Exe, Uids, Username, {\n            SELECT Pid, Cmdline, Exe, Uids, Username\n            FROM pslist(pid=Ppid)\n        } AS Parent\n        FROM pslist()\n        WHERE Ppid \n          AND Username =~ \"root\"\n          AND Parent.Username != Username\n          AND if(condition=AcceptableParentExeRegex,\n                 then=NOT Parent.Exe =~ AcceptableParentExeRegex,\n                 else=TRUE)\n  - name: AuthLogs\n    query: |\n       SELECT * FROM foreach(row={\n         SELECT * FROM glob(globs=AuthLogsGlob)\n       }, query={\n           SELECT * FROM parse_lines(filename=FullPath)\n           WHERE Line =~ \"pkexec.+The value for environment variable XAUTHORITY contains suscipious content\"\n       })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.EBPFBase","op":"set","definition":"name: Linux.Sigma.EBPFBase\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Linux.\n\n  This model uses Velociraptor's EBPF engine which is based on\n  tracee https://github.com/aquasecurity/tracee.\n\n  This model is compatible with the Sigma HQ rules and it is used by\n  the artifact `Linux.EBPF.Monitoring`.\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\nexport: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `network_connection/linux/*`={\n     SELECT * FROM EBFFEvent\n     WHERE System.EventName = \"security_socket_connect\"\n    },\n    `file_event/linux/*`={\n     SELECT * FROM EBFFEvent\n     WHERE System.EventName = \"security_file_open\"\n    },\n    `process_creation/linux/*`={\n     SELECT * FROM EBFFEvent\n     WHERE System.EventName = \"sched_process_exec\"\n    },\n    `ebpf/linux/*`={\n     SELECT * FROM EBFFEvent\n    },`velociraptor/info/*`={ SELECT * FROM info() WHERE FALSE })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/5xSUcvaQBD8K3JQksARP+hbIU9fvtKAFKH2rRCOyxoPe7thb9VI6X8vl2iNosV+T0kuM3O7M/NLvZL3BpuFQ1CfVF/82L28fIQ+f9sDSmnE5IbbvdLqdcccjxyDFeLjBB3ESLp2PwGNh2JN7OP38CiSecdk5x/2c3toEj0z3Iaiz78dg4DPl0wWQqjKLMuHyxYOt0qrEoI4NOIIv1CQqPtgOgZPArVpGs4bDHWEhmuFqnuCGxwOL9fUJbE8Se4iVKu/gPu0M+Lr7UYnQy4/taq8aR+tHY2rcE35Wz9A0YkzAs0/NWfFLAlgd+zkWAeyW5DaEiJYSZRWC2oJq6nESeB7AK5KpdXSxArcr0w3RlkLG7sFrluQ1DWTqAfuJfAx76nWWf927/cpj8asDLcgn0/dfGBmZ2SDo+cr52Od/bQycj5LoSO7KZAOaZYpraIv/zPnzYSRPlz7+08AAAD//zwetBuHAwAA\")) || \"{}\")\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6pWilCyUopQqgUEAAD//1vc8X8JAAAA\")) || \"{}\")\n\n  LET DefaultDetailsLambda = '''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  LET GetProcInfo(PID) = to_dict(item={\n    SELECT * FROM items(item=process_tracker_get(id=PID).Data)\n       WHERE _key =~ \"Name|CommandLine|CreateTime|Exe|Cwd|Username\"\n    })\n\n  // Get proc info from the process tracker but if that fails fill\n  // it from the event. The process tracker may fail to find the process\n  // if the EBPF process tracker is not enabled\n  LET GetProcInfoFallback(ProcInfo, EventData, System) = if(\n     condition=ProcInfo.Name,\n       then=ProcInfo,\n       else=dict(Name=System.ProcessName,\n                 CommandLine=join(array=EventData.argv, sep=\" \"),\n                 CreateTime=timestamp(epoch=EventData.ctime) || System.ThreadStartTime,\n                 Exe=EventData.pathname,\n                 Username=System.UserID))\n\n  LET EBFFEvent = generate(name=\"EBPF Event Generator\", query={\n    SELECT *, EventData + dict(\n         Test=process_tracker_get(id=System.ProcessID),\n         ProcInfo=GetProcInfoFallback(\n            ProcInfo=GetProcInfo(PID=System.ProcessID),\n            EventData=EventData,\n            System=System)\n      ) AS EventData\n    FROM delay(\n      query={\n        SELECT timestamp(epoch=now()) AS Timestamp,\n               System.EventName AS EventType,\n               System + dict(MainHostname=Hostname) AS System, EventData\n        FROM watch_ebpf(events=[\n            \"security_file_open\",\n            \"bpf_attach\", \"fchownat\", \"chown\", \"kill\",\n            \"module_free\", \"module_load\",\n            \"mount\", \"sched_process_exec\", \"net_packet_dns_response\",\n            \"security_socket_accept\", \"security_socket_bind\", \"security_socket_connect\",\n            \"unlink\", \"security_inode_unlink\"\n        ])\n    }, delay=5)\n  })\nsources:\n- query: |\n   LET Result = SELECT System.Timestamp AS Timestamp,\n         Hostname AS Computer,\n         \"EBPF\" AS Channel,\n         System.EventName AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details='''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData''',\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, Details, _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Linux.Sigma.Triage","op":"set","definition":"name: Linux.Sigma.Triage\ndescription: |\n  This artifact compiles the Linux rules from various sources into a\n  Velociraptor artifact using the Linux Sigma Base model.\n\n  The artifact is useful for triaging a Linux machine by parsing the\n  logs and flagging suspicious behaviors.\n\n  - SigmaHQ Linux Rules\n  - Built in Velociraptor rules.\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: /var/log/\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: DefaultYear\n    description: The Default year for parsing Syslog timestamps (default current year)\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n\nimports:\n  - Linux.Sigma.Base\nsources:\n- query: |\n    LET Rules \u003c= gunzip(string=base64decode(string=\"H4sIAAAAAAAA/9xbX1Mbu5J/51Oozj7cJBt7bAOBuOpWLQGyYS8kLiD3nHteXLLU9ijWSHMkjY2p8zn20+zb/WJbkuaPPDM2hDhwd19A062/P7Va3a22YYbDEJ1klEl0ilOTKdjjcqZlpggM9xBKlaQZMUPEmcju9hDSoBaMwBDhjDJD9ygYIIZJYWsTKShzH0gD93TXhld1EDKrFIbo/Lfz07+fOwLuDRFWQKSi/rs/RJ3FwpcHQ9SZUmz2tMEm00NkQJs9nJlYqiEa4SVwdIXvM7XHYQF8iLhc7u11Op29YHWGiRk6lWLKZpnCdiroNMZiBhpJgS7t2tAnqc1zLX50cvvJfQqcgGcg1EERGBK5vqM360TOJo7eJVJMm/V1Gr1pB+iKzWPMOLrEiom3SGpCu0QmSSaYWRWQxWwWr2H2gQmsVmiEKbXIdTxEO0LnVQnJGO6ALABhQdGrOayWUlE9NioTBBtAUgVUSl01IQ0qaVPGDajXr1/vIRRU9ID+5U/M+V8qcCkti2z617CF78bX7CC5zixm095pwS0JHR3ueb7AFrlv3ayLmVToIzP68Rs1+ngmpUInEyFVgjkaKUlAa3RxZuG7lGSOPjIO6IRYMtCXlvAFVpHKRBRjTlUmaDdltMm9YwIM7XJJ5k3mnMKibNqK4zWeWigY1kDmbDN46ZRa8G5PR2gkldHoGihTQHalB16RxEttIU1WUElCN+rBP0FQvWQmHiKWGjzhoCuNaEqFKLAJRLQQ3E7HyE7q1nEwaKHtfw9YCVCWJWtweTV5ilM8YZwZBhqdMU3kAtTqhW6NGRiC0woiVUIUPfm+cMflliWAToxRbJIZyC+LXevBQPsZmZHYlcplD6ywbNQfAT6DUgBMUcAkUUWZFgVLceMU9d3HEzVRi3xcQyIXgC6SJHOimyueEsSOv4qfTQWtnywihcFM6CEiMTYml5R+QO+wdiz+C8/lBP0KTNyDMfw7EDnlLJ1IrCg6lTyfIbLHG/1GOEvRrZT8ZWEZojs7k+IEBddY0E1FKo5XSSTFCtcovtr+EHXkk49hK3Zyii4SPAN0hg2uI/n/EsBc6R/8qQ1WprgbLAaR5xz+EMojqTWzZ/VUMoGumACFTkdf0UgxqZixJqDCyY6Q7dv9Iwl942/BHC3cX1tbp0PSrJPm4/uaOV548GDN/bzm/oM1D4ZtyLbVPMxrHj5Y811e892DNY/ymkfbarZu6kcuFcMCXUsTo1ef4c4oKdDNShtI9Otin4lihhHM14+UAu/7fJmiE4G+alDWLpSZ2JXB43a4sn7frNnCmNJxpkGNvas3dqcpOFcnZ2fjrzfn12uN9EoTzPmmNjf/uDk9ubx0FLiDwH6K7FCYbrAQr7BigM4zDupt2zlpUeZO5ZzKJFW7NKTXEVsDrB8u1BsCpdK5dzqibgK0Vp3ds8BCmofN9rc0M7jtiiTtcN6yJFPodyYEwybjfLOrWVdADtXzO+uC5Y650+q/zuDZnPGaPl/aoVsVUyq16UwZh78+Wt+2yNGXBail8iEJE+dWklv0GSzQ76Ck9dw+Z/xlLrRgtyltSEDoQkcUFpGw86wT70FVV5J2xuD3WlMNOWHa2ZRe0aGPTMESPx9EN+fXf784PR/f3H4ZObKdbIXGNJ9OEGII3TdLyKbLR0tNw1N1MmItcskpKDQClTCtmRQ6d01eWFQq4yVOZGDKxHIpfsiobliFCigIwzDX6EI4XPRPC081XPd1j7seC5opSMuPFGu99AHNbUDuKAz0VYO91D8xSkGgETaxRl+Uh+fnwCKkQXn4bQ+hMIImcAItkhF1CSZxbrXmBBeQDSnpCsQiJKhMmyyNjJScxLbDR8WbAh0WddsxPsMLRtGHTM3BmLfoPzSbCcwnfLOpnIPrRc5CcOZCRVKx3WFsdxoL6vvHapYlIIwTvfKjcN7X7uWoW1HDO6skD1orDxqViwlsvh/LzUnmlKkqEOpiCcXXgiVlWWAhA8aTXZUbAzMs5EzhNF7Z3QD0O0vRhZhKlXjTgQk0YsRkyt+qP2dX+v6fC8/gyocpLc9yrd1v6az6SIX9wJUrU5mqXW+hPYw9Ij/wDuLDd3+DFZezmTU+nM0xwkn359iyNes/xSYew6IS4YdfQlI7t0i7G79jV9rGLhRtUaEa0ZhVc8Cyi9vbf5Rl63WMLeHJF/SVpGzKCC6iFJx2teymCrjELxRzzx+O1ibSur7z7lUXnYgYZxq9korNmMCcr9BUyQSdGJkwgj7wDNBZMTH9Ft1KsUKXOJmAMq8ffU9dSuwelOQU/Q2UsLBKmnFAC4bRhdDWeHguiy7wHO3Eh4j58XNX0nmQKpowEc0t+cmicZkft/8jz496pbmctbwzqo0cz+iIWVXytXb4InmF9R+ZdegtlFgXjxFKClq8eT0XejVHmVTetZMWHTc1fETsRH/Ud25xJp3eWf0kr+ixsYnaJVV7uQosj7Nr5z21hy1qvRQuVYckTTcUKffWsDGWUevL+l6NLihwMLDBAj+5ePAh7DOYpVRzdOPRRDcEC+Ffy58U0EeIwpSJHPtCWwAyMWhAKrNmZ2xMqodRNGMmziZWQqLPIAf7dz2fNkCjCZeTCPrH/cHBPj4iR71jeE8Pj94fHh7Rd9PjHvSA7tP9g+P9yfF736jr+v63y/7xoHPZP97fjU5di8ZV+sIAF3l8xX2LBKfBFxiCQy4Jy+ucrkxBTLQXjjmshkj4HRkTKQQQMz5o39wTDt+woEqiL8pkQj7W9yw3XLDpdPdpEVutp22xQENSmiVBjI8UMfC1t62wu23xQqNjrObN3jY/kD09+jfKjTc0kpyRVfWe/JzYkhjP2p9YcwVv+c0Hng5nuhLIDl/rc2q9xMdeuVzOmOhSmOo2A3eT4WvBlaKD8wD+lhrbOwgiFY+3vTWQTDGzitLlHxnmzKwKuyC0+LVebs51GPoYCW0iexOA7AVuUzDxn/+dgEL/+c//EbgRQmqN6zecSqIARJH75l2iiySVyuzySfEV8126PCdfHi+ZoHI5VlIaJBXKqUKGDJfY5Dnb7ltXoaxZ62Obg+p9UtTirX5LYVb12NLdEHU8NTd2hshyC8Xz/WM9OSrQsoG/LXflRdSCXk6N3C3p+M3rxz4OO/m2TYR0+OVYBjDKzLSEBKqG7a0qtAdhH/v1Pp6Ma8qZQSc+8nwhjEQjBmTnwdYnuGnazuyJgdNHxJR8fM/JkeXGjL5USqwuhi82HZIJ0GLTKx1JKnesA76MDzbzdxN/O78zChPzLw2Xn2J1SvR0i35qBOuejFOmU0aYzDQ6HaATYtjCJcv9fFicEawznY6xH3VDCkHw+L3FywnXUQRAd26TNbJBNlhgRWDG7uvR0dFaWsgjmmT/rtfyQ9qb1Bz5ufPkq1SRRzXSGxLqHpe20bINI2WPXILO74BkLviGmAg3x78JPlv0o+7jBS8IgZeXpMErzgKraLlcBpRYJhC9idJswhkZxybhATPTKuKSYB7hFJMYBq086wrT2iC+fkDUatE2sm9bG9bWtYzaaNYbgkjMmLirt7BDcjaJ0pn+g0cUG9w602TVwi7aeuY6faGn62uzFveEifpyrStBNyS6PlneAsn6xLSRauVtgC8p+NDlzt9bgzTY2I/4QOZrXqt4CetOsI7HObGg3beQat+1z0aDKQtITw9ltmGch4yuXVTemv839hQ9t2310GO+9/6IqRI88qEbwbSyQv7OUNa3y3pSAsBbdBqDwrOYXTGO6cbL1gc+w0fAMIaw08zaxwdotjr7etJRwAFrWGcooDE27TymdQabIzgbXmgzO3z1lRoWfHIdZmrEUpu12iAWa+NtuzjLxIdWkVhM5F31Ub0L30GVGrtgyrDqlTheH3vb/TsPr3kXkXmy3eZFyaqhT1jRJVbQLlcv/UqjVzoiHGsd0YRFjEYTJvV4AUqH2cbNavlMx2v73KxGYqw1sx0KKqsHftucRJpo5v7U6IxCFNNelEgKvMZrzMxK9Jt26hbpf0IIqNhqVm1jLSU23/SbODNULkV0DRMpd62Iwxvulc6HIolT/K+YYD4wZAulHPjftG25A1mZf9Zx5bxogOdfa90VNX/p/VKU3tlSMJmiSkHaKxT6pIg0dFCMeVFM5RKUnG5wJx90xB/aEVrekUXS8q72IsUmroI59iz4aI4r9YMUplbD1ll1bJIHRosAac1UazJd54O2/KgqDapolWlQto2d6EZ14Emn1+cntxuSyB6XjPpVsDt0EwPntffpMKHhpRWew9TOsR4fV3LKOLQSu7T+E1prJTpTUZEmo06713F039q/42xo4AL57fQiQlcyiI67pNmPJde6UVKaqDHzijpuzNPzNpDv2/pprjV30RrjFvT7dnL7hMpGGzlbxx/XEKnz1sAtx9rQqNiN9lMDBhS6wmYuF3rO3j7wErweE/sq7lla5AmGpsNHJZPnyEx7UkraI9LOMruwHzWsviwFKHvlud+d/KyXvu+MGm42gIOfJXMcPPRZ9VzpoWVVimVYxsnOH0t/hYnTgu6HlgaKqFwVGXqJEFD++5y1V2QXh/S95z+AHy+XG7LfL/gKa/SFxHO5eIs+wCpDZyDYRsOh9YdNPiHjGqxNCfl1diGovb6kWkeFYAMzqZrZAn69NdB+OBn6DLRhwmmBi7SStv7gqNvr9rr9ktJz370m5O73jmEq0YQJd2Xt/OdhRUrVKjUSXTGXyzKS0lkGOUL6Z4C5Rd4C+D7lB7QCMZWSdxMm4C5RVlBKxlS1kim0kvWslUxwKznTnSVo08pzE9JZmkpl6jxbv0v2XZWQfpeoDmT9rsBCOqZUsxpzsJmZ6Q5gbbY0z+e7pQbWDG9hf0u3td0y8+7Arlnp+nK7MdYxYWbVaDAdtMHjaJCto2z7WOCMG2s4VCBLAUpKAlh0tVGAkxor5GzwJx93gBr5iadeUeUZwLcSXUqCuZGfwaDbTAjrl81Kp+ZCMMOwAdp++73EuWqzFrhfQzfM2CqIAky5U+VyhugXozL4pQQX7lJQLAFhMK8SsARVgDX6oDA2MQj0KhGQSMFIl8nvgPjzTMl5C7r/Opg2o2HGzbab6a6ws18T9pwH2WYeTrfwtrTTeDPv25Y+mQh4P3DhNDZzJI3/HRdfhU8OV5i7wNsp5nyCyby26T9xZ1uudBch8Lf5OMFM+EBBSHBnYaxcKnfLhf8nYVQ1b/1edFzRek3S0aDbf+eI/UFFfW+px578riK/e98dHB7UycNhP+oPqj6ncNwbDqN+r6KQnqUctVgcjdNcW9iozEeyHR0fV8O8f/++LA8GvV7wMaiWctALOAcHBwflx7uj46qD48P9yj467B32gq/+8aC3XcnEWGvg39YE8H8DAAD//1DBFArwTAAA\"))\n    SELECT *\n    FROM Artifact.Linux.Sigma.Base(\n       ROOT=ROOT, RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, RuleExclusions=RuleExclusions,\n       DefaultYear=DefaultYear)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.Honeyfiles","op":"set","definition":"name: Exchange.Linux.Detection.Honeyfiles\nauthor: Zane Gittins \u0026 Matt Green (@mgreen27).\ndescription: |\n    This artifact deploys honeyfiles according to the Honeyfiles CSV parameter. It then monitors access to these files using eBPF.  The process tracker must be enabled, we use this to enrich events. You also must be using Velociraptor \u003e= 0.74 to support eBPF. Honeyfiles created by this artifact are removed at exit.\n\n    * TargetPath - Location to create honeyfile.\n    * Enabled - Only generate the honeyfile if this is set to 'Y'\n    * MagicBytes - The starting magic bytes of the honeyfile.\n    * MinSize,MaxSize - The size of the honeyfile will be a random value between MinSize and MaxSize.\n\ntype: CLIENT_EVENT\n\nparameters:\n   - name: Honeyfiles\n     description: The honeyfiles to generate and monitor.\n     type: csv\n     default: |\n         TargetPath,Enabled,MagicBytes,MinSize,MaxSize\n         \"%USERPROFILE%/.ssh/my_id_rsa\",Y,2D2D2D2D2D424547494E205253412050524956415445204B45592D2D2D2D2D,10249,20899\n         \"%USERPROFILE%/.aws/credentials\",Y,5B64656661756C745D,512,2048\n         \"%USERPROFILE%/.gcloud/credentials.db\",Y,53514c69746520666f726d6174203300,512,2048\n         \"%USERPROFILE%/.azure/azureProfile.json\",Y,7B0D0A,512,2048\n   - name: ProcessExceptionsRegex\n     description: Except these processes from detections when they access honeyfiles.\n     type: string\n     default: \"/usr/bin/updatedb\"\n   - name: HoneyUserRegex\n     description: User name regex that will be used to host honeyfiles.\n     type: string\n     default: \".\"\nsources:\n  - precondition:\n        SELECT OS From info() where OS = 'linux' AND version(plugin=\"watch_ebpf\") \u003e= 0\n\n    query: |\n       LET RandomChars(size) = SELECT\n           format(format=\"%02x\", args=rand(range=256)) AS HexByte\n         FROM range(end=size)\n       \n       LET check_exist(path) = SELECT\n           OSPath,\n           Size,\n           IsDir,\n           if(condition=read_file(filename=OSPath)[-7:] =~ 'VRHoney',\n              then=True,\n              else=False) AS IsHoneyFile\n         FROM stat(filename=path)\n       \n       LET enumerate_path = SELECT regex_replace(source=TargetPath,\n                                                 re='''\\%USERPROFILE\\%''',\n                                                 replace=Homedir) AS TargetPath,\n                                   *,\n                                   check_exist(path=regex_replace(\n                                                 source=TargetPath,\n                                                 re='''\\%USERPROFILE\\%''',\n                                                 replace=Homedir))[0] AS Exists,\n                                   MaxSize - rand(range=(MaxSize - MinSize)) -\n                                     len(list=unhex(string=MagicBytes)) - 7 AS _PaddingSize\n         FROM Honeyfiles\n       \n       LET target_users = SELECT User,\n                                 Homedir,\n                                 Uid\n         FROM Artifact.Linux.Sys.Users()\n         WHERE int(int=Uid) \u003e= 1000\n          AND NOT Homedir = '/nonexistent'\n               AND User =~ HoneyUserRegex\n       \n       LET show_honeyfiles = SELECT TargetPath,\n                                    Enabled,\n                                    MagicBytes,\n                                    MinSize,\n                                    MaxSize,\n                                    _PaddingSize,\n                                    Exists.Size AS Size,\n                                    Exists.IsHoneyFile AS IsHoneyFile\n         FROM foreach(row=target_users, query=enumerate_path)\n       \n       LET copy_honeyfiles = SELECT\n           *, if(condition=Enabled =~ \"^(Y|YES)$\"\n                  AND (NOT Size OR IsHoneyFile),\n                 then=log(message=\"Creating file %v\", dedup=-1, args=TargetPath)\n                  AND copy(dest=TargetPath,\n                           create_directories='y',\n                           accessor='data',\n                           filename=unhex(\n                             string=MagicBytes + join(\n                               array=RandomChars(size=_PaddingSize).HexByte) +\n                               format(format='%x', args='VRHoney'))),\n                 else=\"File does not exist\") AS CreateHoneyFile\n         FROM show_honeyfiles\n       \n       LET remove_honeyfiles = SELECT\n           *, _PaddingSize,\n           if(condition=IsHoneyFile,\n              then=log(message=\"Removing %v\", args=TargetPath, dedup=-1)\n               AND rm(filename=TargetPath),\n              else=\"File does not exist\") AS RemoveHoneyFile\n         FROM show_honeyfiles\n       \n       LET add_honeyfiles = SELECT\n           TargetPath,\n           Enabled,\n           MagicBytes,\n           MinSize,\n           MaxSize,\n           check_exist(path=TargetPath)[0].Size AS Size,\n           check_exist(path=TargetPath)[0].IsHoneyFile AS IsHoneyFile\n         FROM copy_honeyfiles\n       \n       LET _ \u003c= atexit(query={ SELECT * FROM remove_honeyfiles })\n       \n       LET WatchFiles \u003c= to_dict(item={\n           SELECT TargetPath AS _key,\n                  IsHoneyFile AS _value\n           FROM add_honeyfiles\n           WHERE IsHoneyFile\n         })\n       \n       LET CurrentPid \u003c= getpid()\n       \n       LET TargetEvents = SELECT *\n         FROM watch_ebpf(events=[\"security_file_open\"])\n         WHERE System.EventName = \"security_file_open\"\n          AND System.ProcessID != CurrentPid\n       \n       LET AuditEvents = SELECT\n           *, timestamp(string=System.Timestamp) AS Timestamp,\n           get(item=WatchFiles, field=EventData.pathname) AS IsHoneyFile\n         FROM TargetEvents\n         WHERE IsHoneyFile != NULL\n       \n       LET Track = SELECT\n           Timestamp,\n           System.ProcessID AS Pid,\n           EventData.pathname AS FileName,\n           process_tracker_get(id=System.ProcessID).Data AS ProcInfo,\n           join(array=process_tracker_callchain(id=System.ProcessID).Data.Name,\n                sep=\"-\u003e\") AS CallChain,\n           (System.ProcessID+EventData.pathname) as DedupKey\n         FROM AuditEvents\n         WHERE NOT ProcInfo.Exe =~ ProcessExceptionsRegex\n       \n       SELECT \n         Timestamp,\n         Pid,\n         FileName,\n         ProcInfo,\n         CallChain \n       FROM dedup(query={\n          SELECT *,\n          FROM delay(query=Track, delay=5)\n       },key=\"DedupKey\",timeout=2)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.IncorrectPermissions","op":"set","definition":"name: Exchange.Linux.Detection.IncorrectPermissions\nauthor: Andreas Misje – @misje\ndescription: |\n    NOTE: Requires velociraptor 0.7.1 or higher. – Alternatively, import the\n    artifact dependency Linux.Sys.Groups manually into your installation.\n\n    This artifacts checks a number of files and directories to verify whether\n    they have the expected owner, group owner and mode. A file with an incorrect\n    owner may allow attackers to modify important system files. Similarly,\n    incorrect mode, like word-writable configuration or passwd/shadow files may\n    also be signs of serious misconfiguration or signs of malicious activity.\n\n    The parameter FilesToInspect contains lines of globs to search for. Each\n    line may specify expected user, expected group, expected file mode and\n    expected directory mode. It is very important that the order of the lines\n    is in order of increasing specificity. For example:\n\n    ```csv\n    /etc/*,root,root,644,755\n    /etc/?shadow*,,shadow,640,\n    ```\n\n    Here, every file in the directory /etc is expected to be owned by root:root\n    and have file permissions set to 644, and group permissions set to 755.\n    The files under /etc matching \"?shadow*\" are still expected to be owned by\n    root, since the override for user is empty, but the group is no longer\n    expected to be \"root\", but \"shadow\". File permissions should be \"640\"\n    instead of \"644\". Note that this is an example and will most likely return\n    hits, since a number of files in /etc have different owners and modes.\n\n    \"User\" may either be an integer (UID) or a string (username). \"Group\"\n    may be either an integer (GID) or a string (group name). The names for all\n    UIDs and GIDs are looked up and displayed along with their IDs in the result.\n\n    Modes may be specified in either octal numbers or strings.\n\n    Modes specified in octal numbers, e.g. 755, 640, 1777, are matched\n    using a regular expression, so that both \"0640\", \"640\" and \"100640\" matches\n    \"100640\". An implicit anchor, '$', is used to match against the end of the\n    octal mode string.\n\n    When using mode strings (NumericMode unchecked), modes take the format\n    \"-rwx-r-x-r-x\". Regex comparison is used, and an implicit '$' anchor\n    is inserted at the end of the string. String modes allows for verifying only\n    certain bits of permissions, like ensuring that only the owner has write \n    access, no one has permission to execute, but read access is not important:\n    \"r.-.--.--\". Or ensuring that SUID/GUID is not set. For finding files\n    specifically with SUID set, look at Linux.Sys.SUID.\n\n    Mixing both formats is not supported and will result in unexpected results.\n\n    This artifact can also be used to look for all files owned by root with\n    world-writable permissions, for instance. Uncheck NumericMode, add a glob,\n    select \"root\" as owner and enter any invalid permission string in UserMode.\n    This will return every file owned by root. In the notebook, add something\n    like \"WHERE Mode=~'w.$'\" to the query. The User field may also be empty,\n    essentially returning every file in the glob as long as the UserMode field\n    contains an invalid value. This turns this artifact into a file finder-like\n    tool with metadata like username and group names for further processing.\n\n    The following columns are returned:\n\n      - OSPath\n      - IsDir\n      - UID\n      - User\n      - EUser (expected user from FilesToInspect)\n      - GID\n      - Group\n      - EGroup (expected group from FilesToInspect)\n      - Mode (file/directory mode/permissions)\n      - EMode (expected file/directory mode from FilesToInspect)\n      - Mismatch (a comma-separated string of one or several of \"uid\", \"gid\" and \"mode\")\n      - Mtime\n      - Ctime\n      - Atime\n\n    Note that the artifacts used to look up usernames and group names use the\n    files /etc/passwd and /etc/group. You will have to modify this artifact to\n    use `getent passwd`/`getent group` to use NSS and get users and groups from\n    Active Directory etc.\n\n    The provided default values in FilesToInspect is an example only.\n\nparameters:\n  - name: FilesToInspect\n    type: csv\n    default: |\n        Globs,User,Group,FileMode,DirMode\n        /etc/passwd?,root,root,644,\n        /etc/?shadow?,root,shadow,640,\n        /etc/group?,root,root,,\n    description: The files to investigate. The default is just an example.\n  - name: NumericMode\n    type: bool\n    default: true\n    description: |\n        Whether modes should be interpreted, compared and presented as octal\n        numbers (e.g. 640) rather than strings (e.g. -rw-rw-r--)\n  - name: IncludeDirs\n    type: bool\n    description: Include directories\n  - name: FollowLinks\n    type: bool\n    description: Inlcude all symlinks, even though they may interfere with the results\n\nprecondition: |\n    SELECT OS From info() WHERE OS = 'linux'\n\nsources:\n    - name: Discrepancies\n      query: |\n        /* Passwd/group will be looked up a lot. Make it efficient: */\n        LET Users \u003c= memoize(query={\n            SELECT int(int=Uid) AS UID, User FROM Artifact.Linux.Sys.Users()\n        }, key='UID')\n        LET Groups \u003c= memoize(query={\n            SELECT GID, Group FROM Artifact.Linux.Sys.Groups()\n        }, key='GID')\n\n        LET FindUser(uid) = get(item=Users, field=uid).User\n        LET FindGroup(gid) = get(item=Groups, field=gid).Group\n        LET StrIf(str) = if(condition=str, then=str(str=str))\n\n        LET Files = SELECT OSPath, IsDir, ModeString,\n            /* If the globs are specified in the correct order, picking the\n               last item will get a correct override behaviour: */\n            /* Filter out all empty strings and keep integers: */\n            filter(list=enumerate(items=User), regex='.+')[-1] AS EUser,\n            filter(list=enumerate(items=Group), regex='.+')[-1] AS EGroup,\n            filter(list=enumerate(items=FileMode), regex='.+')[-1] AS FMode,\n            filter(list=enumerate(items=DirMode), regex='.+')[-1] AS DMode\n            /* globs() can of course take a list of globs, like FilesToInspect.Globs,\n               but by using that approach, we would no longer be able to tie\n               User, Group etc. to the individual globs: */\n            FROM foreach(row={\n                SELECT Globs AS _Globs, * FROM FilesToInspect\n            }, query={\n                SELECT OSPath, IsDir, User, Group, FileMode, DirMode,\n                    Mode.String AS ModeString\n                    FROM glob(globs=_Globs)\n                    WHERE (IncludeDirs OR NOT IsDir) AND (NOT IsLink OR FollowLinks)\n            })\n            GROUP BY OSPath\n\n        LET FilesInfo = SELECT * FROM foreach(row=Files, async=true, query={\n            SELECT OSPath, Sys.Uid AS UID, Sys.Gid AS GID, if(condition=NumericMode,\n                    then=format(format='%o', args=[Sys.Mode]), else=ModeString)\n                AS Mode, Mtime, Atime, Ctime, EUser, EGroup, log(message='%v, %v, %v', args=[Sys.Mode, ModeString, FMode]), StrIf(str=FMode) AS FMode,\n                StrIf(str=DMode) AS DMode, IsDir\n                FROM stat(filename=OSPath)\n            })\n            GROUP BY OSPath\n\n        LET _UIDFiltered = SELECT OSPath, IsDir,\n            UID,\n            EUser,\n            GID, FindGroup(gid=GID) AS Group,\n            null AS EGroup,\n            'uid' AS Mismatch,\n            Mode,\n            null AS EMode,\n            Mtime, Atime, Ctime,\n            get(item=Users, field=UID) AS _u\n            FROM FilesInfo\n            WHERE EUser AND _u.UID=UID AND\n                /* User can be either an ID or a string: */\n                if(condition=EUser=~'^\\\\d+$', then=EUser!=UID,\n                            else=EUser!=_u.User)\n\n        LET _GIDFiltered = SELECT OSPath, IsDir,\n            UID, FindUser(uid=UID) AS User,\n            EUser,\n            GID,\n            EGroup,\n            'gid' AS Mismatch,\n            Mode,\n            null AS EMode,\n            Mtime, Atime, Ctime,\n            get(item=Groups, field=GID) AS _g\n            FROM FilesInfo\n            WHERE EGroup AND _g.GID=GID AND\n                if(condition=EGroup=~'^\\\\d+$', then=EGroup!=GID,\n                            else=EGroup!=_g.Group)\n\n        LET _FileModeFiltered = SELECT OSPath, IsDir,\n            UID, FindUser(uid=UID) AS User,\n            EUser,\n            GID, FindGroup(gid=GID) AS Group,\n            EGroup,\n            'mode' AS Mismatch,\n            Mode,\n            FMode AS EMode,\n            Mtime, Atime, Ctime\n            FROM FilesInfo\n            WHERE NOT IsDir AND FMode AND NOT Mode=~FMode+'$'\n\n        LET _DirModeFiltered = SELECT OSPath, IsDir,\n            UID, FindUser(uid=UID) AS User,\n            EUser,\n            GID, FindGroup(gid=GID) AS Group,\n            EGroup,\n            'mode' AS Mismatch,\n            Mode,\n            DMode AS EMode,\n            Mtime, Atime, Ctime\n            FROM FilesInfo\n            WHERE IsDir AND DMode AND NOT Mode=~DMode+'$'\n\n        SELECT OSPath, IsDir, UID, User, EUser, GID, Group, EGroup, Mode, EMode,\n            join(array=enumerate(items=Mismatch), sep=',') AS Mismatch,\n            Mtime, Atime, Ctime\n        FROM chain(a={\n            SELECT OSPath, IsDir, UID, _u.User AS User, EUser,\n            GID, Group, EGroup, Mode, EMode,\n            join(array=enumerate(items=Mismatch), sep=',') AS Mismatch,\n            Mtime, Atime, Ctime\n            FROM _UIDFiltered\n            GROUP BY OSPath\n        }, b={\n            SELECT OSPath, IsDir, UID, User, EUser, GID, _g.Group AS Group,\n            EGroup, Mode, EMode,\n            join(array=enumerate(items=Mismatch), sep=',') AS Mismatch,\n            Mtime, Atime, Ctime\n            FROM _GIDFiltered\n            GROUP BY OSPath\n        }, c={\n            SELECT OSPath, IsDir, UID, User, EUser, GID, Group, EGroup, Mode, EMode,\n            join(array=enumerate(items=Mismatch), sep=',') AS Mismatch,\n            Mtime, Atime, Ctime\n            FROM _FileModeFiltered\n            GROUP BY OSPath\n        }, d={\n            SELECT OSPath, IsDir, UID, User, EUser, GID, Group, EGroup, Mode, EMode,\n            join(array=enumerate(items=Mismatch), sep=',') AS Mismatch,\n            Mtime, Atime, Ctime\n            FROM _DirModeFiltered\n            GROUP BY OSPath\n        })\n        GROUP BY OSPath\n        ORDER BY OSPath\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.MemFD","op":"set","definition":"name: Exchange.Linux.Detection.MemFD\nauthor: alternate\ndescription: |\n   This artifact will parse /proc/*/exe files and look for processes \n    that have been executed from memory via memfd_create()\n\nreference: \n  - https://github.com/4ltern4te/velociraptor-contrib/blob/main/Linux.Detection.MemFD/README.md\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = \"linux\"\n\nparameters:\n  - name: FileNameGlob\n    description: Glob pattern to search\n    default: \"/proc/*/exe\"\n    type: str\n\n  - name: SearchRegex\n    description: Pattern to match looking for memfd executions\n    default: ^\\/memfd:.*?\\(deleted\\)\n    type: regex\n\nsources:\n- name: findMemFD\n  query: |\n    SELECT * FROM glob(globs=FileNameGlob, accessor='file') WHERE Data.Link =~ SearchRegex\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.SSHKeyFileCmd","op":"set","definition":"name: Exchange.Linux.Detection.SSHKeyFileCmd\nauthor: alternate\ndescription: |\n   This artifact will parse ~/.ssh/authorized_keys and ~/.ssh/id_*.pub looking for the command option\n   to detect potential persistence\n\n\nreference: \n  - https://github.com/4ltern4te/velociraptor-contrib/blob/main/Linux.Detection.SSHKeyFileCmd/README.md\n  - https://blog.thc.org/infecting-ssh-public-keys-with-backdoors\n  - https://man.openbsd.org/OpenBSD-current/man8/sshd.8#AUTHORIZED_KEYS_FILE_FORMAT\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = \"linux\"\n\nparameters:\n  - name: SSHKeyFilesGlob\n    default: |\n      [\"/{root,home/*}/.ssh/authorized_keys\",\"/{root,home/*}/.ssh/authorized_keys2\",\"/{root,home/*}/.ssh/*.pub\"]\n\n  - name: CommandRegex\n    description: Command option regex\n    default: (?P\u003cCMD\u003ecommand=\".*?\")\n    type: regex\n\nsources:\n  - name: findSSHAuthKeyCmd\n    query: |\n      LET files = SELECT OSPath FROM glob(globs=parse_json_array(data=SSHKeyFilesGlob))\n      SELECT OSPath, CMD FROM foreach(\n          row=files,\n          query={\n            SELECT OSPath, CMD FROM parse_records_with_regex(file=OSPath, regex=CommandRegex)\n          }\n      )\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Detection.vRealizeLogInsightExploitation","op":"set","definition":"name: Exchange.Linux.Detection.vRealizeLogInsightExploitation\nauthor: ACEResponder.com\ndescription: |\n   Checks for exploitation of vRealize Log Insight VMSA-2023-0001 exploitation \n   artifacts. The presence of a path traversal in the FileName field\n   is evidence of compromise. There is still a path to exploitation without\n   leveraging the path traversal vuln. Any attempt to run\n   REMOTE_PAK_DOWNLOAD_COMMAND from a non-vRealize server is malicious.\n   #VMWare #vRealize #exploit\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS =~ 'linux'\n\n    query: |\n      -- Get runtime.log\n      Let lines = SELECT split(string=Data,sep='\\\\r?\\\\n|\\\\r') as List\n        FROM read_file(filenames=\"/var/log/loginsight/runtime.log\")\n      -- Get REMOTE_PAK_DOWNLOAD_COMMAND matches.\n\n      LET results = SELECT * FROM foreach(row=lines,\n                query={\n                    SELECT parse_string_with_regex(\n                        string=_value,\n                        regex=[\n                          \"^\\\\[(?P\u003cTime\u003e[^\\\\]]+)\\\\].*REMOTE_PAK_DOWNLOAD_COMMAND.*requestUrl:(?P\u003cRequestUrl\u003e[^,]+), fileName:(?P\u003cFileName\u003e[^\\)]+).*$\"\n                        ]) as Record\n                    FROM foreach(row=List)\n                    WHERE _value\n                    AND _value =~ \".*REMOTE_PAK_DOWNLOAD_COMMAND.*\"\n                })\n      -- output rows\n      SELECT \n        Record.Time AS Time,\n        Record.RequestUrl AS RequestUrl,\n        Record.FileName AS FileName\n      FROM results\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Event.Network.Nethogs","op":"set","definition":"name: Exchange.Linux.Event.Network.Nethogs\nauthor: 'Andreas Misje - @misje'\ntype: CLIENT_EVENT\ndescription: |\n  Monitor network use per process using the tool \"nethogs\". This artifact will\n  list all processes that produces (non-local) network traffic on the client.\n  The NetstatEnriched artifact is used to provide detailed information about the\n  process using netstat and the process tracker, along with the bytes received\n  and sent in bytes per second.\n\n  Note that the tool/package \"nethogs\" needs to be installed before calling this\n  artifact. Set the paramater InstallNethogs to true in order to automatically\n  install the package and its dependencies (Debian-based systems only).\n\n  Using techniques like stacking, rare occurances of processes contacting the\n  Internet can be spotted. Notebook suggestions give you total traffic overview,\n  as well as boilerplate code to plot the traffic for a selected process.\n\nparameters:\n  - name: InstallNethogs\n    description: Install nethogs using apt-get\n    type: bool\n    default: false\n\n  - name: NetstatCachePeriod\n    description: Number of seconds to cache netstat data\n    type: int\n    default: 10\n\n  - name: ProcessRegex\n    description: |\n      Only look for processes whose name / command line matches this regex\n    type: regex\n    default: .+\n\n  - name: PIDRegex\n    description: |\n      Only look for processes whose PID matches this regex\n    type: regex\n    default: .+\n\n  - name: UIDRegex\n    description: |\n      Only look for processes whose owner ID (UID) matches this regex\n    type: regex\n    default: .+\n\nprecondition:\n  SELECT * FROM info() where OS = 'linux'\n\nsources:\n    - query: |\n         LET Hoggers = SELECT Timestamp,\n                              Process,\n                              int(int=PID) AS PID,\n                              UID,\n                              parse_float(string=Sent) AS Sent,\n                              parse_float(string=Recv) AS Recv\n           FROM foreach(\n             row={\n               SELECT *\n               FROM execve(argv=['/usr/sbin/nethogs', '-t', '-C'],\n                           length=10000,\n                           sep='\\n\\nRefreshing:\\n')\n             },\n             query={\n               SELECT timestamp(epoch=now()) AS Timestamp,\n                      *\n               FROM parse_records_with_regex(\n                 accessor='data',\n                 file=Stdout,\n                 regex='''^\\s*(?P\u003cProcess\u003e[^\\t]+)/(?P\u003cPID\u003e\\d+)/(?P\u003cUID\u003e\\d+)\\t(?P\u003cSent\u003e[^\\t]+)\\t(?P\u003cRecv\u003e\\S+)''')\n               WHERE Process =~ ProcessRegex\n                AND PID =~ PIDRegex\n                     AND UID =~ UIDRegex\n             })\n\n         LET Netstat \u003c= memoize(\n             name='netstat',\n             key='Pid',\n             period=NetstatCachePeriod,\n             query={\n               SELECT *\n               FROM Artifact.Linux.Network.NetstatEnriched()\n             })\n\n         LET Result = SELECT *\n           FROM foreach(\n             row={\n               SELECT *\n               FROM Hoggers\n             },\n             query={\n               SELECT *\n               FROM foreach(\n                 row={\n                   SELECT \n                          dict(\n                            Timestamp=Timestamp,\n                            Process=Process,\n                            PID=PID,\n                            UID=UID,\n                            Sent=Sent,\n                            Recv=Recv,\n                            ProcInfo=dict(\n                              CommandLine=NULL,\n                              Username=NULL,\n                              StartTime=NULL)) + (get(\n                              item=Netstat,\n                              field=PID) || dict(\n                              Name=NULL,\n                              Laddr=NULL,\n                              Lport=NULL,\n                              Raddr=NULL,\n                              Rport=NULL,\n                              Status=NULL,\n                              ProcInfo=dict(),\n                              CallChain=NULL,\n                              ChildrenTree=NULL)) AS Contents\n                   FROM scope()\n                   WHERE Contents\n                 },\n                 column='Contents')\n             })\n\n         // Leverage the InstallDeb utility to do the actual package install:\n         LET InstallDeps = SELECT *\n           FROM if(\n             condition=InstallNethogs,\n             then={\n               SELECT *\n               FROM Artifact.Linux.Utils.InstallDeb(DebName='nethogs')\n             })\n\n         SELECT *\n         FROM chain(a_install=InstallDeps,\n                    b_result=Result)\n\n      notebook:\n        - type: vql\n          name: Traffic\n          template: |\n            // Modify these to adjust the time frame:\n            // LET StartTime \u003c= '2024-01-01T00:00:00Z'\n            // LET EndTimeTime \u003c= '2024-01-01T00:00:00Z'\n            /*\n            # Network traffic\n\n            {{ $TimeRange := Query \"SELECT StartTime, EndTime FROM scope()\" | Expand }}\n            Network traffic (in bytes per second) between {{ Get $TimeRange \"0.StartTime\" }}\n            and {{ Get $TimeRange \"0.EndTime\" }}\n            */\n            LET ColumnTypes = dict(\n                _ChildrenTree='tree')\n            \n            SELECT \n                   Timestamp,\n                   PID,\n                   ProcInfo.Name || Process AS Name,\n                   ProcInfo.CommandLine AS CmdLine,\n                   ProcInfo.Username AS Username,\n                   ProcInfo.StartTime AS StartTime,\n                   Laddr,\n                   Lport,\n                   Raddr,\n                   Rport,\n                   Status,\n                   humanize(\n                     bytes=Sent * 1024) AS Sent,\n                   humanize(\n                     bytes=Recv * 1024) AS Recv,\n                   ProcInfo AS _ProcInfo,\n                   CallChain AS _CalLChain,\n                   ChildrenTree AS _ChildrenTree\n            FROM source(start_time=StartTime,\n                        end_time=EndTime)\n            LIMIT 50\n\n        - type: vql_suggestion\n          name: Total traffic\n          template: |\n            // Modify these to adjust the time frame:\n            // LET StartTime \u003c= '2024-01-01T00:00:00Z'\n            // LET EndTimeTime \u003c= '2024-01-01T00:00:00Z'\n            /*\n            # Network traffic summary\n\n            {{ $TimeRange := Query \"SELECT StartTime, EndTime FROM scope()\" | Expand }}\n            This is a **rough estimate** of the total bytes sent and received between\n            {{ Get $TimeRange \"0.StartTime\" }} and {{ Get $TimeRange \"0.EndTime\" }}.\n            */\n            LET Summary = SELECT \n                     PID,\n                     ProcInfo.Name || Process AS Name,\n                     ProcInfo.CommandLine AS CommandLine,\n                     ProcInfo.Username AS Username,\n                     ProcInfo.StartTime AS StartTime,\n                     // nethogs -t outputs a data rate every second. Adding these\n                     // values give us a rough estimate of the data transferred\n                     sum(\n                       item=Sent * 1024) AS Sent,\n                     sum(\n                       item=Recv * 1024) AS Recv\n              FROM source(start_time=StartTime,\n                          end_time=EndTime)\n              GROUP BY PID, Name\n            \n            SELECT *,\n                   humanize(\n                     bytes=Sent) AS Sent,\n                   humanize(\n                     bytes=Recv) AS Recv,\n                   humanize(\n                     bytes=Recv + Sent) AS Total\n            FROM Summary\n            LIMIT 50\n\n        - type: vql_suggestion\n          name: Plot traffic for PID\n          template: |\n            // Modify these to adjust the time frame:\n            // LET StartTime \u003c= '2024-01-01T00:00:00Z'\n            // LET EndTimeTime \u003c= '2024-01-01T00:00:00Z'\n            // The process whose traffic to plot:\n            LET PIDTarget = 1234\n\n            /*\n            {{ $Vars := Query \"SELECT PIDTarget, StartTime, EndTime FROM scope()\" | Expand }}\n            # Network traffic for PID {{ Get $Vars \"0.PIDTarget\" }}\n\n            Network traffic (in bytes per second) between {{ Get $Vars \"0.StartTime\" }}\n            and {{ Get $Vars \"0.EndTime\" }}\n            */\n            LET SinglePSStats = SELECT \n                                       Timestamp.Unix AS Timestamp,\n                                       Sent * 1024 AS Sent,\n                                       Recv * 1024 AS Recv\n              FROM source(start_time=StartTime,\n                          end_time=EndTime)\n              WHERE PID = PIDTarget\n              LIMIT 50\n\n            /*\n            {{ Query \"SELECT * FROM SinglePSStats\" | TimeChart }}\n            */\n\n            // We do not really need this, but we need to execute some VQL\n            // in order for the plot to appear:\n            SELECT *\n            FROM SinglePSStats","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Forensics.EnvironmentVariables","op":"set","definition":"name: Exchange.Linux.Forensics.EnvironmentVariables\nauthor: Idan Beit-Yosef @ ibyf0r3ns1cs\ndescription: |\n  This artifact detects potential persistence mechanisms on Linux systems by analyzing environment variable files and login scripts.  \n  \n  **MITRE ATT\u0026CK**: [T1546.004](https://attack.mitre.org/techniques/T1546/004/)\n\nreference:\n  - https://unit42.paloaltonetworks.com/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/\n  - https://intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/\n  - https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect\n  - https://www.anomali.com/blog/pulling-linux-rabbit-rabbot-malware-out-of-a-hat\n  - https://blog.sucuri.net/2018/05/shell-logins-as-a-magento-reinfection-vector.html\n\nparameters:\n  - name: LinuxEnvGlobs\n    type: csv\n    default: |\n      Glob\n      /home/*/.bashrc\n      /home/*/.bash_profile\n      /home/*/.bash_login\n      /home/*/.profile\n      /home/*/.zshrc\n      /etc/profile\n      /etc/environment\n      /home/*/.bash_logout\n    \n  - name: LoginScriptGlobs\n    type: csv\n    default: |\n        Glob\n        /etc/profile.d/*.sh\n    \n  - name: LinuxEnvModifiers\n    default: ^(export|alias)\n    type: regex\n    \n  - name: LinuxEnvNetworkUtils\n    default: wget|curl|scp|ssh|nc\\s|/usr/bin/nc\\s|/bin/nc\\s|https?://[^\\s]*\n    type: regex\n    \n  - name: LinuxEnvScripting\n    default: python|perl|ruby|php|base64\n    type: regex\n    \nprecondition: SELECT OS From info() where OS = 'linux'\n\nsources:\n    - name: ModifierDetection\n      query: |\n        LET EnvFiles = SELECT OSPath FROM glob(globs=LinuxEnvGlobs.Glob)\n        SELECT * FROM foreach(row=EnvFiles,\n            query={\n                SELECT Line, OSPath FROM parse_lines(filename=OSPath)\n                WHERE\n                    Line =~ LinuxEnvModifiers\n            })\n\n    - name: NetworkUtilsDetection\n      query: |\n        LET EnvFiles = SELECT OSPath FROM glob(globs=LinuxEnvGlobs.Glob)\n        SELECT * FROM foreach(row=EnvFiles,\n            query={\n                SELECT Line, OSPath FROM parse_lines(filename=OSPath)\n                WHERE\n                    Line =~ LinuxEnvNetworkUtils\n            })\n    \n    - name: ScriptingDetection\n      query: |\n        LET EnvFiles = SELECT OSPath FROM glob(globs=LinuxEnvGlobs.Glob)\n        SELECT * FROM foreach(row=EnvFiles,\n            query={\n                SELECT Line, OSPath FROM parse_lines(filename=OSPath)\n                WHERE\n                    Line =~ LinuxEnvScripting\n            })\n            \n    - name: LoginScriptsDetection\n      query: |\n        SELECT OSPath,upload(file=OSPath) AS Upload FROM glob(globs=LoginScriptGlobs.Glob)\n\n        \ncolumn_types:\n- name: Upload\n  type: preview_upload\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Forensics.ProcFD","op":"set","definition":"name: Exchange.Linux.Forensics.ProcFD\nauthor: Chris DiSalle - @chrisdfir\ndescription: |\n  This artifact collects metadata about open file descriptors from active processes on a Linux system. \n  Outputs include regular files, sockets, device files, and deleted files used by each process.\n  \nreference:\n  - https://sandflysecurity.com/blog/investigating-linux-process-file-descriptors-for-incident-response-and-forensics/\n  - https://fareedfauzi.github.io/2024/03/29/Linux-Forensics-cheatsheet.html#review-processes\n  \ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'linux'\n\nsources:\n  - name: RegularFiles\n    query: |\n      LET open_fds \u003c= SELECT\n            OSPath,\n            OSPath[1] AS PID,\n            Data.Link AS FilePath,\n            Mtime,\n            Atime,\n            Ctime,\n            Btime,\n            read_file(filename=\"/proc/\" + OSPath[1] + \"/comm\") AS ParentCommand,\n            read_file(filename=\"/proc/\" + OSPath[1] + \"/cmdline\") AS ParentCmdLine,\n            read_file(filename=\"/proc/\" + OSPath[1] + \"/loginuid\") AS LoginUID,\n            format(format=\"%o\", args=[Mode]) AS OctalMode,\n            Mode.String AS StringMode\n        FROM glob(globs=\"/proc/*/fd/*\")\n        \n      SELECT\n            OSPath AS FDPath,\n            FilePath AS FDLink,\n            ParentCmdLine AS ProcessCmdLine,\n            ParentCommand AS Process,\n            LoginUID,\n            Mtime,\n            Atime,\n            Ctime,\n            Btime,\n            OctalMode,\n            StringMode\n      FROM open_fds\n      WHERE FilePath =~ \"^/\" AND NOT FilePath =~ \"^/dev/\"\n\n  - name: Sockets\n    query: |\n      SELECT\n            OSPath AS FDPath,\n            FilePath AS FDLink,\n            ParentCmdLine AS ProcessCmdLine,\n            ParentCommand AS Process,\n            LoginUID,\n            Mtime,\n            Atime,\n            Ctime,\n            Btime,\n            OctalMode,\n            StringMode\n      FROM open_fds\n      WHERE FilePath =~ \"socket:\"\n\n  - name: DeviceFiles\n    query: |\n      SELECT\n            OSPath AS FDPath,\n            FilePath AS FDLink,\n            ParentCmdLine AS ProcessCmdLine,\n            ParentCommand AS Process,\n            LoginUID,\n            Mtime,\n            Atime,\n            Ctime,\n            Btime,\n            OctalMode,\n            StringMode\n      FROM open_fds\n      WHERE FilePath =~ \"^/dev/\"\n\n  - name: DeletedFiles\n    query: |\n      SELECT\n            OSPath AS FDPath,\n            FilePath AS FDLink,\n            ParentCmdLine AS ProcessCmdLine,\n            ParentCommand AS Process,\n            LoginUID,\n            Mtime,\n            Atime,\n            Ctime,\n            Btime,\n            OctalMode,\n            StringMode\n      FROM open_fds\n      WHERE FilePath =~ \"deleted\"\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Forensics.RecentlyUsed","op":"set","definition":"name: Exchange.Linux.Forensics.RecentlyUsed\ndescription: |\n  Parses the 'recently-used.xbel' XML file for all standard Linux users.\n  \n  This file notably records a list of recent files accessed by applications and is also an alternative source for download history.\n\nauthor: Deepak Sharma - @rxurien\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'linux'\n\nparameters:\n  - name: RecentsFile\n    default: '.local/share/recently-used.xbel'\n    \nsources:\n  - name: Recent Entries\n    query: |\n        LET ParseBookmarks = SELECT * from foreach(\n          row={\n             SELECT Uid, User, Homedir from Artifact.Linux.Sys.Users()\n          },\n          query={\n             SELECT FullPath, Mtime, Ctime, User, Uid\n             FROM glob(\n               globs=RecentsFile,\n               root=Homedir)\n          })\n\n        SELECT * from foreach(\n          row=ParseBookmarks,\n          query={\n            SELECT \n                User,\n                Uid as UID,\n                _value.Attrhref as FilePath,\n                _value.Attradded as TimeAdded,\n                _value.Attrmodified as TimeModified,\n                _value.Attrvisited as TimeVisited,\n                _value.info.metadata.`mime-type`.Attrtype as MimeType,\n                _value.info.metadata.applications.application.Attrname as ApplicationName,\n                _value.info.metadata.applications.application.Attrexec as ApplicationExec,\n                _value.info.metadata.applications.application.Attrmodified as ApplicationModTime,\n                _value.info.metadata.applications.application.Attrcount as ApplicationCount,\n                FullPath as SourceFile\n            FROM items(item=parse_xml(file=FullPath).xbel.bookmark)\n          })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Forensics.Targets","op":"set","definition":"name: Exchange.Linux.Forensics.Targets\nauthor: Cedric MAURUGEON - @kidrek\ndescription: |\n  This artifact collects all necessary artifacts files and directories from Linux operating system. \n  \nreference:\n  - https://github.com/ForensicArtifacts/artifacts/blob/main/artifacts/data/linux.yaml\n\nparameters:\n  - name: BootTargets\n    type: csv\n    default: |\n      Glob\n      /boot/grub/grub.cfg\n      /boot/grub2/grub.cfg\n      /boot/initramfs*\n      /boot/initrd*\n      /etc/init.d/**\n      /etc/insserv.conf\n      /etc/insserv.conf.d/**\n\n  - name: CertificateTargets\n    type: csv\n    default: |\n      Glob\n      /etc/ca-certificates.conf\n      /etc/ssl/certs/ca-certificates.crt\n      /usr/share/ca-certificates/**\n      /usr/local/share/ca-certificates/**\n\n  - name: CronTargets\n    type: csv\n    default: |\n      Glob\n      /etc/anacrontab\n      /etc/at.allow\n      /etc/at.deny\n      /etc/cron.allow\n      /etc/cron.d/**\n      /etc/cron.daily/**\n      /etc/cron.deny\n      /etc/cron.hourly/**\n      /etc/cron.monthly/**\n      /etc/cron.weekly/**\n      /etc/crontab\n      /var/at/tabs/**\n      /var/spool/anacron/cron.*\n      /var/spool/at/**\n      /var/spool/cron/**\n\n  - name: LogTargets\n    type: csv\n    default: |\n      Glob\n      /etc/rsyslog.conf\n      /etc/rsyslog.d/**\n      /var/log/apache2/**\n      /var/log/apt/history.log*\n      /var/log/apt/term.log*\n      /var/log/auth*\n      /var/log/cron.log*\n      /var/log/daemon*\n      /var/log/journal/**\n      /var/log/kern*\n      /var/log/lastlog\n      /var/log/mail*\n      /var/log/messages*\n      /var/log/secure*\n      /var/log/syslog*\n      /var/log/nginx/**\n      /var/log/ufw.log*\n\n  - name: NetworkTargets\n    type: csv\n    default: |\n      Glob\n      /etc/netplan/*.yaml\n      /etc/network/if-up.d/**\n      /etc/network/if-down.d/**\n      /etc/network/interfaces\n      /etc/resolv.conf\n      /etc/default/ufw\n      /etc/ufw/sysctl.conf\n      /etc/ufw/*.rules\n      /etc/ufw/applications.d/**\n\n  - name: PackageTargets\n    type: csv\n    default: |\n      Glob\n      /etc/apt/sources.list\n      /etc/apt/sources.list.d/*\n      /etc/apt/trusted.gpg\n      /etc/apt/trusted.gpg.d/*\n      /etc/apt/trustdb.gpg\n      /etc/yum.conf\n      /etc/yum.repos.d/*.repo\n      /usr/share/keyrings/*\n      /var/lib/dpkg/status\n\n  - name: ServiceTargets\n    type: csv\n    default: |\n      Glob\n      /etc/systemd/system.control/*.timer\n      /etc/systemd/systemd.attached/*.timer\n      /etc/systemd/system/*.timer\n      /etc/systemd/user/*.timer\n      /lib/systemd/system/*.timer\n      /lib/systemd/user/*.timer\n      /run/systemd/generator.early/*.timer\n      /run/systemd/generator.late/*.timer\n      /run/systemd/generator/*.timer\n      /run/systemd/system.control/*.timer\n      /run/systemd/systemd.attached/*.timer\n      /run/systemd/system/*.timer\n      /run/systemd/transient/*.timer\n      /run/systemd/user/*.timer\n      /run/user/*/systemd/generator.early/*.timer\n      /run/user/*/systemd/generator.late/*.timer\n      /run/user/*/systemd/generator/*.timer\n      /run/user/*/systemd/transient/*.timer\n      /run/user/*/systemd/user.control/*.timer\n      /run/user/*/systemd/user/*.timer\n      /usr/lib/systemd/system/*.timer\n      /usr/lib/systemd/user/*.timer\n      /home/*/.config/systemd/user.control/*.timer\n      /home/*/.config/systemd/user/*.timer\n      /home/*/.local/share/systemd/user/*.timer\n      /root/.config/systemd/user.control/*.timer\n      /root/.config/systemd/user/*.timer\n      /root/.local/share/systemd/user/*.timer\n      /etc/systemd/system.control/*.service\n      /etc/systemd/systemd.attached/*.service\n      /etc/systemd/system/*.service\n      /etc/systemd/user/*.service\n      /lib/systemd/system/*.service\n      /lib/systemd/user/*.service\n      /run/systemd/generator.early/*.service\n      /run/systemd/generator.late/*.service\n      /run/systemd/generator/*.service\n      /run/systemd/system.control/*.service\n      /run/systemd/systemd.attached/*.service\n      /run/systemd/system/*.service\n      /run/systemd/transient/*.service\n      /run/systemd/user/*.service\n      /run/user/*/systemd/generator.early/*.service\n      /run/user/*/systemd/generator.late/*.service\n      /run/user/*/systemd/generator/*.service\n      /run/user/*/systemd/transient/*.service\n      /run/user/*/systemd/user.control/*.service\n      /run/user/*/systemd/user/*.service\n      /usr/lib/systemd/system/*.service\n      /usr/lib/systemd/user/*.service\n      /home/*/.config/systemd/user.control/*.service\n      /home/*/.config/systemd/user/*.service\n      /home/*/.local/share/systemd/user/*.service\n      /root/.config/systemd/user.control/*.service\n      /root/.config/systemd/user/*.service\n      /root/.local/share/systemd/user/*.service\n\n\n  - name: SystemTargets\n    type: csv\n    default: |\n      Glob\n      /dev/shm/**\n      /etc/fstab\n      /etc/hostname\n      /etc/issue\n      /etc/issue.net\n      /etc/ld.so.preload\n      /etc/localtime\n      /etc/ntp.conf\n      /etc/modprobe.d/*\n      /etc/modules.conf\n      /etc/ssh/**\n      /etc/timezone\n      /etc/udev/rules.d/*\n      /usr/lib/udev/rules.d/*\n\n  - name: SystemVersionTargets\n    type: csv\n    default: |\n      Glob\n      /etc/debian_version\n      /etc/centos-release\n      /etc/enterprise-release\n      /etc/oracle-release\n      /etc/redhat-release\n      /etc/rocky-release\n      /etc/SuSE-release\n      /etc/system-release\n      /etc/lsb-release\n      /etc/os-release\n      /usr/lib/os-release\n\n  - name: UserTargets\n    type: csv\n    default: |\n      Glob\n      /etc/passwd\n      /etc/shadow\n      /etc/sudoers\n      /etc/sudoers.d/**\n      /etc/group\n      /home/*/.config/mozilla/**\n      /home/*/snap/firefox/common/.mozilla/**\n      /home/*/.config/google-chrome/**\n      /home/*/snap/chromium/common/chromium/Default/**\n      /home/*/.aliases\n      /home/*/.profile\n      /home/*/.*_history\n      /home/*/.*rc\n      /home/*/.ssh/*\n      /home/*/.wget-hsts\n      /root/.config/mozilla/**\n      /root/snap/firefox/common/.mozilla/**\n      /root/.config/google-chrome/**\n      /root/snap/chromium/common/chromium/Default/**\n      /root/.aliases\n      /root/.profile\n      /root/.*_history\n      /root/.*rc\n      /root/.ssh/*\n      /root/.wget-hsts\n\nprecondition: SELECT OS From info() where OS = 'linux'\n\nsources:\n  - name: BootTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=BootTargets.Glob)\n\n  - name: CertificateTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=CertificateTargets.Glob)\n\n  - name: CronTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=CronTargets.Glob)\n\n  - name: LogTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=LogTargets.Glob)\n\n  - name: NetworkTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=NetworkTargets.Glob)\n\n  - name: PackageTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=PackageTargets.Glob)\n\n  - name: ServiceTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=ServiceTargets.Glob)\n\n  - name: SystemTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=SystemTargets.Glob)\n\n  - name: SystemVersionTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=SystemVersionTargets.Glob)\n\n  - name: UserTargets\n    query: |\n      SELECT OSPath, upload(file=OSPath) AS Upload\n      FROM glob(globs=UserTargets.Glob)\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.LogAnalysis.ChopChopGo","op":"set","definition":"name: Exchange.Linux.LogAnalysis.ChopChopGo\ndescription: |\n\n    This artifact leverages ChopChopGo to enable usage of Sigma rules to faciliate detection within Linux logs.\n    \n    From the project's description:\n    \n    `ChopChopGo inspired by Chainsaw utilizes Sigma rules for forensics artifact recovery, enabling rapid and comprehensive analysis of logs and other artifacts to identify potential security incidents and threats on Linux.`\n    \nreference:\n  - https://github.com/M00NLIG7/ChopChopGo\n\nauthor: Wes Lambert - @therealwlambert, @weslambert@infosec.exchange\ntools:\n  - name: ChopChopGo\n    url: https://github.com/M00NLIG7/ChopChopGo/releases/download/v1.0.0-beta-3/ChopChopGo_v1.0.0-beta-3.zip\n    \nprecondition: SELECT OS From info() where OS = 'linux'\n\nparameters:  \n  - name: ExecLength\n    description: Size (in bytes) of output that will be returned for a single row for execve().  This value may need to be adjusted depending on the size of your event logs.\n    type: int\n    default: \"100000000\"\n  \n  - name: Rules\n    description: Sigma rules to use for detection \n    type: string\n    default: /ChopChopGo/rules/linux/builtin/syslog/\n    \n  - name: Target \n    description: Refers to the type of data you woud like to analyze. For example, `journald` or `syslog`.\n    type: string\n    default: syslog\n    \nsources:\n  - query: |\n        LET Toolzip \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"ChopChopGo\", IsExecutable=FALSE)\n        LET TmpDir \u003c= tempdir()\n        LET TmpResults \u003c= tempfile()\n        LET UnzipIt \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n        LET SigmaRules \u003c= TmpDir + Rules\n        LET ExecCCG \u003c= SELECT * FROM execve(argv=[\n                        TmpDir + '/ChopChopGo/ChopChopGo',\n                        \"-rules\", SigmaRules,\n                        \"-target\", Target,\n                        \"-out\", \"json\"], length=ExecLength)\n        SELECT *\n        FROM foreach(\n            row=ExecCCG, \n             query={\n                SELECT \n                    Timestamp,\n                    Title,\n                    Message AS Message,\n                    Tags,\n                    Author,\n                    ID\n                FROM parse_json_array(data=Stdout)})\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Memory.AVML","op":"set","definition":"name: Exchange.Linux.Memory.AVML\nauthor: Zawadi Done - @zawadidone\ndescription: |\n  Acquires a full memory image in LiME output format. We download\n  avml and use it to acquire a full memory image.\n  NOTE: This artifact usually transfers a lot of data. You should\n  increase the default timeout to allow it to complete.\n\nrequired_permissions:\n  - EXECVE\n\ntools:\n  - name: avml\n    github_project: microsoft/avml\n    github_asset_regex: avml\n    serve_locally: true\n\nprecondition: SELECT OS From info() where OS = 'linux' AND Architecture = \"amd64\"\n\nsources:\n  - query: |\n      SELECT * FROM foreach(\n          row={\n            SELECT OSPath, tempfile(extension=\".lime\", remove_last=TRUE) AS Tempfile \n            FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"avml\")\n          },\n          query={\n            SELECT Stdout, Stderr,\n                   if(condition=Complete, then=upload(file=Tempfile, name=\"memory.lime\")) As Upload\n            FROM execve(argv=[OSPath, Tempfile], sep=\"\\r\\n\")\n        })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Network.NM.Connections","op":"set","definition":"name: Exchange.Linux.Network.NM.Connections\nauthor: 'Andreas Misje - @misje'\ndescription: |\n  NetworkManager is a popular high-level interface for configuring\n  networks in Linux systems, in particular Ubuntu and other Debian-based\n  flavours. This artifact lists the NetworkManager state, all configured\n  connections and their settings, as well as when the connections were\n  last activated. A list of BSSIDs per connection is also retrieved.\n\n  All the information is retrieved from NetworkManager configuration\n  files and other state files. Connection information is stored in\n  the /etc/NetworkManager/system-connections as long as the \"keyfile\"\n  plugin is selected in /etc/NetworkManager/NetworkManager.conf (this\n  is the default). Note that by default, NetworkManager doesn't manage\n  connections defined in /etc/network/interfaces.\n\n  Whether the connections are currently active is not stored in file\n  and must be queried using using nmcli or through dbus. This artifact\n  runs nmcli as an external program to retrieve this information.\n  Information such as IP addresses, routes, DNS servers, available Wi-Fi\n  networks and other settings will also be collected through nmcli.\n\n  This artifact also exports two functions, parse_ini(filename) and\n  parse_ini_as_dict(filename), which may be useful to parse INI files\n  in other artifacts.\n\nreference:\n  - https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html\n  - https://developer-old.gnome.org/NetworkManager/stable/settings-connection.html\n  - https://developer-old.gnome.org/NetworkManager/stable/settings-802-11-wireless.html\n\ntype: CLIENT\n\nrequired_permissions:\n    - EXECVE\n\nparameters:\n  - name: RedactSecrets\n    default: true\n    type: bool\n    description: |\n        Replace Wi-FI PSKs (wifi-security/psk) with \"\\\u003cREDACTED\\\u003e\".\n\nexport: |\n    /* Parse an INI config file and return Section (the part enclosed in '[]' on\n       lines of their own), Key and Value. */\n    LET parse_ini(filename) = SELECT * FROM foreach(row={\n        SELECT * FROM parse_records_with_regex(file=filename,\n            regex='''(?m)\\[\\s*(?P\u003cSection\u003e[^\\]]+)\\s*\\](?P\u003cContents\u003e[^\\[]*)''')\n        }, query={\n            SELECT Section, Key, Value\n                FROM parse_records_with_regex(file=Contents,\n                    accessor='data',\n                    regex='^[\\s\\n]*(?P\u003cKey\u003e[^=]+)=(?P\u003cValue\u003e.*)')\n        })\n\n    /* Parse an INI config file and return a single column, Contents, with\n       the contents. Section names are prepended to keys, separated by '/'. */\n    LET parse_ini_as_dict(filename) = SELECT to_dict(item={\n            SELECT lowcase(string=Section + '/' + Key) AS _key, Value AS _value\n            FROM parse_ini(filename=filename)\n        }) AS Contents\n        FROM scope()\n\ncolumn_types:\n  - name: LastActivated\n    type: timestamp\n    description: |\n        When the connection was last fully successfully activated. This\n        timestamp may be updated periodically while the connection is active.\n\nprecondition: |\n    SELECT OS FROM info() WHERE OS = 'linux'\n\nsources:\n  - name: State\n    description: |\n        NetworkManager have three states that may be toggled:\n        NetworkingEnabled, which disables all networking (managed by\n        NetworkManager); WirelessEnabled, which disables wireless networking;\n        and WWANEnabled, which disables mobile data connections.\n    query: |\n        LET State_ = SELECT parse_string_with_regex(string=Data,\n        regex=('''NetworkingEnabled=(?P\u003cNetworkingEnabled\u003e\\S+)''',\n            '''WirelessEnabled=(?P\u003cWirelessEnabled\u003e\\S+)''',\n            '''WWANEnabled=(?P\u003cWWANEnabled\u003e\\S+)''')) AS Fields\n        FROM read_file(filenames='/var/lib/NetworkManager/NetworkManager.state')\n\n        LET State = SELECT Fields.NetworkingEnabled AS NetworkingEnabled,\n            Fields.WirelessEnabled AS WirelessEnabled,\n            Fields.WWANEnabled AS WWANEnabled\n            FROM State_\n\n        SELECT * FROM State\n\n  - name: ConnectionConfigs\n    description: |\n        All connections configured in NetworkManager. Columns returned are\n        OSPath and a dict with the connection configuration.\n    query: |\n        LET ConfiguredConnections \u003c= SELECT * FROM foreach(row={\n            SELECT OSPath FROM glob(globs='/etc/NetworkManager/system-connections/*.nmconnection')\n            }, query=if(condition=RedactSecrets, then={\n                SELECT OSPath,\n                    Contents + dict(`wifi-security/psk`='\u003cREDACTED\u003e')\n                        AS Contents\n                    FROM parse_ini_as_dict(filename=OSPath)\n            }, else={\n                SELECT *, OSPath FROM parse_ini_as_dict(filename=OSPath)\n            })\n        )\n\n        SELECT OSPath, Contents FROM ConfiguredConnections\n\n  - name: Connections\n    description: |\n        Return a handful of useful properties from ConnectionConfigs in a\n        more readable table with individual column names: Name, UUID, Type,\n        Device and LastActivated. LastActivated are fetched from another\n        state file and combined with the results from ConnectionConfigs.\n    query: |\n        LET Timestamps = SELECT UUID, if(condition=parse_float(string=Timestamp),\n            then=timestamp(epoch=Timestamp), else=null) AS Timestamp\n            FROM parse_records_with_regex(file='/var/lib/NetworkManager/timestamps',\n                regex='''(?P\u003cUUID\u003e[-A-Fa-f0-9]+)+=(?P\u003cTimestamp\u003e\\S+)''')\n\n        LET Connections \u003c= SELECT Name, _UUID AS UUID, Type, Device, LastActivated\n            FROM foreach(row={\n                SELECT * FROM ConfiguredConnections\n                }, query={\n                    SELECT Contents.`connection/id` AS Name,\n                        Contents.`connection/uuid` AS _UUID,\n                        Contents.`connection/type` AS Type,\n                        Contents.`connection/interface-name` AS Device,\n                        Timestamp AS LastActivated\n                    FROM Timestamps\n                    WHERE _UUID=UUID\n            })\n\n        SELECT * FROM Connections\n\n  - name: ActiveConnections\n    description: |\n        Return connections from Connections that are currently active,\n        by asking the NetworkManager daemon through the utility \"nmcli\".\n    query: |\n        LET nmcli = SELECT Stdout\n            FROM execve(argv=['nmcli', '-t', '-f', 'uuid', 'connection', 'show', '--active'])\n\n        LET ActiveConnections = SELECT * FROM foreach(row={\n            SELECT * FROM parse_lines(accessor='data',\n                filename=nmcli.Stdout)\n            }, query={\n                SELECT * FROM Connections WHERE UUID=Line\n            })\n\n        SELECT * FROM ActiveConnections\n\n  - name: DeviceStatus\n    description: |\n        Ask NetworkManager through \"nmcli\" about the status of all network\n        interfaces, managed as well unmanaged, with detailed information such\n        as IP addresses, routes, MTU and DNS settings.\n    query: |\n        LET nmcli = SELECT Stdout\n            FROM execve(argv=['nmcli', '-t', 'device', 'show'])\n\n        LET DeviceStatus = SELECT * FROM foreach(row=split(sep='\\n\\n',\n            string=nmcli.Stdout), query={\n                SELECT parse_string_with_regex(string=_value,\n                    regex='''GENERAL.DEVICE:(?P\u003cDevice\u003e.+)''').Device AS Device,\n                    to_dict(item={\n                        SELECT Key AS _key, Value AS _value\n                            FROM parse_records_with_regex(file=_value, accessor='data',\n                                regex='^\\n?(?P\u003cKey\u003e[^:]+):(?P\u003cValue\u003e.*)')\n                    }) AS Status\n                    FROM scope()\n            })\n\n        /* We're pretty much done now, but the output could be a lot nicer to\n           work with. */\n\n        LET S = scope()\n        LET Status \u003c= SELECT * FROM foreach(row={SELECT * FROM DeviceStatus},\n            column='Status')\n\n        LET to_array(col, dev) = filter(list=array(a={\n            SELECT * FROM column_filter(include=col, query={\n                SELECT * FROM Status WHERE `GENERAL.DEVICE` = dev\n            })}), condition='x=\u003ex')\n\n        LET prettify_route(col, dev) = SELECT *\n            FROM foreach(row=to_array(dev=dev, col=col), query={\n                SELECT S.Dest AS Dest, S.NextHop AS NextHop, int(int=S.Metric) AS Metric\n                FROM foreach(row={\n                    SELECT parse_string_with_regex(string=S._value, regex=(\n                        '''dst\\s*=\\s*(?P\u003cDest\u003e[^,]+)''',\n                        '''nh\\s*=\\s*(?P\u003cNextHop\u003e[^,]+)''',\n                        '''mt\\s*=\\s*(?P\u003cMetric\u003e\\d+)''')) AS R\n                        FROM scope()\n                    }, column='R')\n                })\n                WHERE Dest\n\n        SELECT `GENERAL.DEVICE` AS Device,\n            S.`GENERAL.TYPE` AS Type,\n            S.`GENERAL.CONNECTION` AS Connection,\n            S.`GENERAL.STATE` AS State,\n            S.`GENERAL.HWADDR` AS Mac,\n            S.`GENERAL.MTU` AS MTU,\n            to_array(dev=`GENERAL.DEVICE`, col='IP4.ADDRESS') AS Addresses,\n            prettify_route(dev=`GENERAL.DEVICE`, col='IP4.ROUTE') AS Routes,\n            S.`IP4.GATEWAY` AS Gateway,\n            to_array(dev=`GENERAL.DEVICE`, col='IP4.DNS') AS DNSServers,\n            to_array(dev=`GENERAL.DEVICE`, col='IP4.DOMAIN') AS DNSDomains,\n            to_array(dev=`GENERAL.DEVICE`, col='IP4.SEARCHES') AS DNSSearches,\n            to_array(dev=`GENERAL.DEVICE`, col='IP6.ADDRESS') AS _IPv6Addresses,\n            prettify_route(dev=`GENERAL.DEVICE`, col='IP6.ROUTE') AS _IPv6Routes,\n            S.`IP6.GATEWAY` AS _IPv6Gateway,\n            to_array(dev=`GENERAL.DEVICE`, col='IP6.DNS') AS _IPv6DNSServers,\n            to_array(dev=`GENERAL.DEVICE`, col='IP6.DOMAIN') AS _IPv6DNSDomains,\n            to_array(dev=`GENERAL.DEVICE`, col='IP6.SEARCHES') AS _IPv6DNSSearches\n            FROM Status\n\n  - name: AvailableAccessPoints\n    description: |\n        Ask NetworkManager through \"nmcli\" about details about all available\n        Wi-Fi access points\n    query: |\n        LET nmcli = SELECT Stdout\n            FROM execve(argv=['nmcli', '-t', '-m', 'multiline', '-f',\n                'ssid,bssid,mode,chan,freq,rate,signal,security,wpa-flags,rsn-flags,device,active,in-use',\n                'device', 'wifi', 'list'])\n\n        LET AccessPoints = SELECT * FROM foreach(row=filter(list=split(sep='\\x01\\x02',\n                /* Separate sections of key–values by injecting a blob and then\n                   split on that string. nmcli also has a \"tabular\" output mode,\n                   but \":\", the separator, is also part of the output and is\n                   \"escaped\" by \"/\", making the parsing difficult. */\n                string=regex_replace(source=nmcli.Stdout, re='(?m)^IN-USE:.*$',\n                    replace='$0\\x01\\x02')), regex='.'), query={\n\n                SELECT to_dict(item={\n                    SELECT Key AS _key, Value as _value FROM parse_records_with_regex(\n                        file=_value, accessor='data', regex='^\\n?(?P\u003cKey\u003e[^:]+):(?P\u003cValue\u003e.*)')\n                }) AS Contents FROM scope() WHERE _value\n            })\n            WHERE Contents\n\n        SELECT DEVICE AS Device, SSID, BSSID, MODE AS Mode, CHAN AS Chan,\n            FREQ AS Freq, RATE AS Rate, SIGNAL AS Signal, SECURITY AS Security,\n            ACTIVE='yes' AS Active, `WPA-FLAGS` AS WPAFlags, `RSN-FLAGS` AS RSNFlags,\n            `IN-USE`='*' AS InUse\n            FROM foreach(row=AccessPoints, column='Contents')\n\n  - name: SeenBSSIDs\n    description: |\n        A list of BSSIDs (each BSSID formatted as a MAC address like\n        \"00:11:22:33:44:55\") that have been detected as part of the Wi-Fi\n        network. NetworkManager internally tracks previously seen BSSIDs.\n    query: |\n        LET SeenBSSIDs \u003c= SELECT UUID AS _UUID, filter(list=split(sep_string=',', string=BSSIDs),\n            regex='.+') AS BSSIDs\n            FROM parse_records_with_regex(file='/var/lib/NetworkManager/seen-bssids',\n                regex='''(?P\u003cUUID\u003e[-A-Fa-f0-9]+)+=(?P\u003cBSSIDs\u003e\\S+)''')\n\n        SELECT * FROM foreach(row=SeenBSSIDs, query={\n            SELECT Name, UUID, Device, BSSIDs FROM Connections\n            WHERE _UUID=UUID\n        })\n","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Network.Nethogs","op":"set","definition":"name: Exchange.Linux.Network.Nethogs\nauthor: 'Andreas Misje - @misje'\ndescription: |\n  Monitor network use per process using the tool \"nethogs\". This artifact will\n  list all processes that produces (non-local) network traffic on the client.\n  The NetstatEnriched artifact is used to provide detailed information about the\n  process using netstat and the process tracker, along with the bytes received\n  and sent in bytes per second.\n\n  Note that the tool/package \"nethogs\" needs to be installed before calling this\n  artifact. Set the parameter InstallNethogs to true in order to automatically\n  install the package and its dependencies (Debian-based systems only).\n\n  Using techniques like stacking, rare occurances of processes contacting the\n  Internet can be spotted. Notebook suggestions give you total traffic overview,\n  as well as boilerplate code to plot the traffic for a selected process.\n\n  Also see Linux.Event.Network.Nethogs for a nethogs event artifact.\n\nparameters:\n  - name: InstallNethogs\n    description: Install nethogs using apt-get\n    type: bool\n    default: false\n\n  - name: Duration\n    type: int\n    description: Number of seconds to monitor processes\n    default: 300\n\n  - name: NetstatCachePeriod\n    description: Number of seconds to cache netstat data\n    type: int\n    default: 10\n\n  - name: ProcessRegex\n    description: |\n      Only look for processes whose name / command line matches this regex\n    type: regex\n    default: .+\n\n  - name: PIDRegex\n    description: |\n      Only look for processes whose PID matches this regex\n    type: regex\n    default: .+\n\n  - name: UIDRegex\n    description: |\n      Only look for processes whose owner ID (UID) matches this regex\n    type: regex\n    default: .+\n\nprecondition:\n  SELECT * FROM info() where OS = 'linux'\n\nsources:\n    - query: |\n         LET Hoggers = SELECT Timestamp,\n                              Process,\n                              int(int=PID) AS PID,\n                              UID,\n                              parse_float(string=Sent) AS Sent,\n                              parse_float(string=Recv) AS Recv\n           FROM query(\n             timeout=Duration,\n             inherit=true,\n             query={\n               SELECT *\n               FROM foreach(\n                 row={\n                   SELECT *\n                   FROM execve(argv=['/usr/sbin/nethogs', '-t', '-C'],\n                               length=10000,\n                               sep='\\n\\nRefreshing:\\n')\n                 },\n                 query={\n                   SELECT timestamp(epoch=now()) AS Timestamp,\n                          *\n                   FROM parse_records_with_regex(\n                     accessor='data',\n                     file=Stdout,\n                     regex='''^\\s*(?P\u003cProcess\u003e[^\\t]+)/(?P\u003cPID\u003e\\d+)/(?P\u003cUID\u003e\\d+)\\t(?P\u003cSent\u003e[^\\t]+)\\t(?P\u003cRecv\u003e\\S+)''')\n                   WHERE Process =~ ProcessRegex\n                    AND PID =~ PIDRegex\n                         AND UID =~ UIDRegex\n                 })\n             })\n\n         LET Netstat \u003c= memoize(\n             name='netstat',\n             key='Pid',\n             period=NetstatCachePeriod,\n             query={\n               SELECT *\n               FROM Artifact.Linux.Network.NetstatEnriched()\n             })\n\n         LET Result = SELECT *\n           FROM foreach(\n             row={\n               SELECT *\n               FROM Hoggers\n             },\n             query={\n               SELECT *\n               FROM foreach(\n                 row={\n                   SELECT \n                          dict(\n                            Timestamp=Timestamp,\n                            Process=Process,\n                            PID=PID,\n                            UID=UID,\n                            Sent=Sent,\n                            Recv=Recv,\n                            ProcInfo=dict(\n                              CommandLine=NULL,\n                              Username=NULL,\n                              StartTime=NULL)) + (get(\n                              item=Netstat,\n                              field=PID) || dict(\n                              Name=NULL,\n                              Laddr=NULL,\n                              Lport=NULL,\n                              Raddr=NULL,\n                              Rport=NULL,\n                              Status=NULL,\n                              ProcInfo=dict(),\n                              CallChain=NULL,\n                              ChildrenTree=NULL)) AS Contents\n                   FROM scope()\n                   WHERE Contents\n                 },\n                 column='Contents')\n             })\n\n         // Leverage the InstallDeb utility to do the actual package install:\n         LET InstallDeps = SELECT *\n           FROM if(\n             condition=InstallNethogs,\n             then={\n               SELECT *\n               FROM Artifact.Linux.Utils.InstallDeb(DebName='nethogs')\n             })\n\n         SELECT *\n         FROM chain(a_install=InstallDeps,\n                    b_result=Result)\n\n      notebook:\n        - type: vql\n          name: Traffic\n          template: |\n            /*\n            # Network traffic\n\n            {{ $TimeRange := Query \"SELECT min(item=Timestamp) AS StartTime, max(item=Timestamp) AS EndTime FROM source() GROUP BY 1\" | Expand }}\n            Network traffic (in bytes per second) between {{ Get $TimeRange \"0.StartTime\" }}\n            and {{ Get $TimeRange \"0.EndTime\" }}\n            */\n            LET ColumnTypes = dict(\n                _ChildrenTree='tree')\n\n            SELECT \n                   Timestamp,\n                   PID,\n                   ProcInfo.Name || Process AS Name,\n                   ProcInfo.CommandLine AS CmdLine,\n                   ProcInfo.Username AS Username,\n                   ProcInfo.StartTime AS StartTime,\n                   Laddr,\n                   Lport,\n                   Raddr,\n                   Rport,\n                   Status,\n                   humanize(\n                     bytes=Sent * 1024) AS Sent,\n                   humanize(\n                     bytes=Recv * 1024) AS Recv,\n                   ProcInfo AS _ProcInfo,\n                   CallChain AS _CalLChain,\n                   ChildrenTree AS _ChildrenTree\n            FROM source()\n            LIMIT 50\n\n        - type: vql_suggestion\n          name: Total traffic\n          template: |\n            /*\n            # Network traffic summary\n\n            {{ $TimeRange := Query \"SELECT min(item=Timestamp) AS StartTime, max(item=Timestamp) AS EndTime FROM source() GROUP BY 1\" | Expand }}\n            This is a **rough estimate** of the total bytes sent and received between\n            {{ Get $TimeRange \"0.StartTime\" }} and {{ Get $TimeRange \"0.EndTime\" }}.\n            */\n            LET Summary = SELECT \n                     PID,\n                     ProcInfo.Name || Process AS Name,\n                     ProcInfo.CommandLine AS CommandLine,\n                     ProcInfo.Username AS Username,\n                     ProcInfo.StartTime AS StartTime,\n                     // nethogs -t outputs a data rate every second. Adding these\n                     // values give us a rough estimate of the data transferred\n                     sum(\n                       item=Sent * 1024) AS Sent,\n                     sum(\n                       item=Recv * 1024) AS Recv\n              FROM source()\n              GROUP BY PID, Name\n\n            SELECT *,\n                   humanize(\n                     bytes=Sent) AS Sent,\n                   humanize(\n                     bytes=Recv) AS Recv,\n                   humanize(\n                     bytes=Recv + Sent) AS Total\n            FROM Summary\n            LIMIT 50\n\n        - type: vql_suggestion\n          name: Plot traffic for PID\n          template: |\n            // The process whose traffic to plot:\n            LET PIDTarget = 1234\n\n            /*\n            {{ $Vars := Query \"SELECT PIDTarget, min(item=Timestamp) AS StartTime, max(item=Timestamp) AS EndTime FROM source() GROUP BY 1\" | Expand }}\n            # Network traffic for PID {{ Get $Vars \"0.PIDTarget\" }}\n\n            Network traffic (in bytes per second) between {{ Get $Vars \"0.StartTime\" }}\n            and {{ Get $Vars \"0.EndTime\" }}\n            */\n            LET SinglePSStats = SELECT \n                                       Timestamp.Unix AS Timestamp,\n                                       Sent * 1024 AS Sent,\n                                       Recv * 1024 AS Recv\n              FROM source()\n              WHERE PID = PIDTarget\n              LIMIT 50\n\n            /*\n            {{ Query \"SELECT * FROM SinglePSStats\" | TimeChart }}\n            */\n\n            // We do not really need this, but we need to execute some VQL\n            // in order for the plot to appear:\n            SELECT *\n            FROM SinglePSStats","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Network.Netstat.Watcher","op":"set","definition":"name: Exchange.Linux.Network.Netstat.Watcher\ntype: CLIENT\nauthor: Antonio Blescia (TheThMando)\ndescription: \u003e\n    Collects a one-time snapshot of current non-LISTEN remote connections and a continuous diff stream of added/removed/changed connections. Loopback destinations are excluded by default (127.0.0.1 and ::1) via a configurable regex. \n    The sampling interval (SampleIntervalSec) and the overall monitoring window (MonitorDurationSec) are fully parameterized. Each record includes process metadata via process_tracker_get\nimplied_permissions:\n  - IMPERSONATION\nparameters:\n  - name: SampleIntervalSec\n    description: Sampling interval in seconds used by diff() while monitoring connections.\n    type: int\n    default: 60\n  - name: MonitorDurationSec\n    type: int\n    description: Total monitoring window in seconds; the outer query stops after this duration.\n    default: 600\n  - name: ExcludeRemoteIPsRegex\n    type: regex\n    description: Regex of remote IPs to exclude (matched against Raddr.IP).\n    default: '127.0.0.1|::1'\n\nsources:\n  - name: RemoteConnectionsSnapshot\n    query: |\n       SELECT timestamp(epoch=now()) AS now_utc,\n              Pid,\n              Status,\n              FamilyString,\n              Laddr,\n              Raddr,\n              process_tracker_get(id=Pid) AS ProcInfo\n       FROM netstat()\n       WHERE Status != \"LISTEN\"\n        and NOT Raddr.IP =~ ExcludeRemoteIPsRegex\n\n\n  - name: RemoteConnectionsDiffMonitor\n    query: |\n       SELECT *\n       FROM query(query={\n           SELECT timestamp(epoch=now()) AS now_utc,\n                  Diff,\n                  Timestamp,\n                  Pid,\n                  Status,\n                  FamilyString,\n                  Laddr,\n                  Raddr,\n                  process_tracker_get(id=Pid) AS ProcInfo\n           FROM diff(query={\n           SELECT Timestamp,\n                  Pid,\n                  Status,\n                  FamilyString,\n                  Laddr,\n                  Raddr,\n                  format(format=\"%d|%s|%s|%s:%d|%s:%d\",\n                         args=[Pid, L3, L4, Laddr.IP, Laddr.Port,\n                           Raddr.IP, Raddr.Port]) AS DiffKey\n           FROM netstat()\n           WHERE Status != \"LISTEN\"\n            and NOT Raddr.IP =~ ExcludeRemoteIPsRegex\n         },\n                     key=\"DiffKey\",\n                     period=SampleIntervalSec)\n           WHERE Diff =~ \"added|removed|changed\"\n         },\n                  env=dict(SampleIntervalSec=SampleIntervalSec,\n                           ExcludeRemoteIPsRegex=ExcludeRemoteIPsRegex),\n                  timeout=MonitorDurationSec)","id":78560752944729352,"_ts":1757377134}
{"setter":"api","artifact":"Exchange.Linux.Remediation.Quarantine.IPTables","op":"set","definition":"name: Exchange.Linux.Remediation.Quarantine.IPTables\ndescription: |\n   Quarantine a Linux host using iptables rules.\n\n   NOTE: This is still a work in progress and may not work exactly as expected.  Only use this artifact in a TEST environment/lab. It has been tested against Ubuntu hosts with iptables enabled.\n\n   NOTE: There is now a built in Linux.Remediation.Quarantine which works a bit better\n\ntype: CLIENT\nauthor: Wes Lambert -- @therealwlambert\n\nparameters:\n  - name: RemovePolicy\n    type: bool\n    description: Tickbox to remove policy.\n  - name: NotificationMessage\n    description: |\n        Optional notification to send to logged in users.\n\nsources:\n  - query: |\n\n      // Get domain, port, and Frontends for VR, like we do in the Windows Quarantine artifact (H/T @mgreen27)\n      LET get_domain(URL) = parse_string_with_regex(string=URL, regex='^https?://(?P\u003cDomain\u003e[^:/]+)').Domain\n\n      LET get_port(URL) = if(condition= URL=~\"https://[^:]+/\", then=\"443\",else=if(condition= URL=~\"http://[^:]+/\", then=\"80\",else=parse_string_with_regex(string=URL,\n                  regex='^https?://[^:/]+(:(?P\u003cPort\u003e[0-9]*))?/').Port))\n\n      LET Frontends \u003c= SELECT VRAddr, VRPort FROM foreach(row=config.server_urls, query={\n                           SELECT\n                               get_domain(URL=_value) AS VRAddr,\n                               get_port(URL=_value) AS VRPort\n                           FROM scope()\n                       })\n\n      LET RemoveOldSavedRules = SELECT * FROM execve(argv=[\"bash\", \"-c\", \"rm\", \"-f\", \"/root/original-rules\"])\n\n      LET RestoreOldRules = SELECT * FROM chain(\n                                a={SELECT log(message=\"Removing quarantine policy...\") FROM scope()},\n                                b={SELECT * FROM execve(argv=[\"iptables-restore\", \"/root/original-rules\"])},\n                                c={SELECT * FROM execve(argv=[\"rm\", \"-f\", \"/root/original-rules\"])}\n                            )\n\n      LET IptablesExists \u003c= SELECT ReturnCode FROM execve(argv=[\"ls\",\"/usr/sbin/iptables\"]) WHERE ReturnCode = 0\n\n      LET RuleBackupDoesntExist = SELECT ReturnCode FROM execve(argv=[\"ls\",\"/root/original-rules\"]) WHERE ReturnCode = 2\n\n      LET SaveCurrentRules = SELECT * FROM execve(argv=[\"iptables-save\", \"-f\", \"/root/original-rules\"])\n\n      LET RuleBackup = if(condition=RuleBackupDoesntExist, then=SaveCurrentRules, else=log(message=\"Rule backup already exists!\"))\n\n      LET ZenityExists = SELECT ReturnCode FROM execve(argv=[\"ls\",\"/usr/bin/zenity\"]) WHERE ReturnCode = 0\n\n      LET ZenityCommand = SELECT * FROM execve(argv=[\"zenity\", \"--info\", \"--title\", \"ALERT\", \"--text\", NotificationMessage])\n\n      LET WallExists = SELECT ReturnCode FROM execve(argv=[\"ls\",\"/usr/bin/wall\"]) WHERE ReturnCode = 0\n\n      LET WallCommand = SELECT * FROM execve(argv=[\"wall\", \"-n\", NotificationMessage])\n\n      LET XMessageExists = SELECT ReturnCode FROM execve(argv=[\"ls\",\"/usr/bin/xmessage\"]) WHERE ReturnCode = 0\n\n      LET XMessageCommand = SELECT * FROM execve(argv=[\"xmessage\", NotificationMessage])\n\n      LET Display = SELECT ReturnCode FROM execve(argv=[\"xhost\"]) WHERE ReturnCode = 0\n\n      LET NotifyCommand = SELECT * FROM\n                            if(condition=Display,\n                                then={SELECT * FROM\n                                    if(condition=ZenityExists,\n                                        then=ZenityCommand,\n                                        else=if(condition=XMessageExists,\n                                            then=XMessageCommand\n                                        )\n                                    )\n                                },\n                                else={ SELECT * FROM\n                                    if(condition=WallExists,\n                                        then=WallCommand,\n                                        else={ SELECT log(message=\"Unable to perform notification, as not suitable applications were found.\") FROM scope() })\n                                    }\n                            )\n\n      LET NotifyUsers = SELECT * FROM if(condition=NotificationMessage,then=NotifyCommand)\n\n      LET RemoveQuarantine = SELECT *, timestamp(epoch=now()) as Time FROM RestoreOldRules\n\n      LET InputAllow = SELECT *  from foreach(row=Frontends, query={ SELECT * FROM execve(argv=['iptables', '-A', 'INPUT', '-s', VRAddr, '-j', 'ACCEPT'])})\n\n      LET ForwardAllow = SELECT * from foreach(row=Frontends, query={ SELECT * FROM execve(argv=['iptables', '-A', 'FORWARD', '-s', VRAddr, '-j', 'ACCEPT'])})\n\n      LET OutputAllow = SELECT * from foreach(row=Frontends, query={ SELECT * FROM execve(argv=['iptables', '-A', 'OUTPUT', '-p', 'tcp', '-d', VRAddr, '--dport', VRPort, '-j', 'ACCEPT'])})\n\n      LET InputDrop = SELECT * FROM execve(argv=['iptables', '-P', 'INPUT', 'DROP'])\n\n      LET DockerChainExists = SELECT ReturnCode FROM execve(argv=['iptables', '-nL', 'DOCKER-USER']) WHERE ReturnCode = 0\n\n      LET DockerDrop = SELECT if(condition=DockerChainExists, then={SELECT * FROM execve(argv=['iptables', '-I', 'DOCKER-USER', '-j', 'DROP'])}) FROM scope()\n\n      LET ForwardDrop = SELECT * FROM execve(argv=['iptables', '-P', 'FORWARD', 'DROP'])\n\n      LET OutputDrop = SELECT * FROM execve(argv=['iptables', '-P', 'OUTPUT', 'DROP'])\n\n      SELECT if(condition=IptablesExists,\n          then=if(condition=RemovePolicy,\n              then=RemoveQuarantine,\n              else={ SELECT * FROM chain(\n                          a=NotifyUsers,\n                          b=RuleBackup,\n                          c=InputAllow,\n                          d=ForwardAllow,\n                          e=OutputAllow,\n                          f=InputDrop,\n                          g=DockerDrop,\n                          h=ForwardDrop,\n                          i=OutputDrop\n                      )\n                  }\n          ),\n          else=log(message=\"Iptables not found. Only Iptables-based quarantine is supported for Linux hosts at this time.\")\n      ) AS Quarantine FROM scope()\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.Sys.APTHistory","op":"set","definition":"name: Exchange.Linux.Sys.APTHistory\ndescription: |\n   APT (Advanced Package Tool) maintains a log of software installation/removal/upgrades, as well as associated command-line invocations.\n   \n   This artifact parses the APT `history.log`, as well as archived history logs to provide this information.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: APTHistoryLogs\n     default: /var/log/apt/history.log*\n     description: APT history log(s)\n   \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'linux'\n\n    query: |\n      LET APTHistoryList = SELECT OSPath FROM glob(globs=split(string=APTHistoryLogs, sep=\",\"))\n      LET ParseRecords = SELECT OSPath, parse_string_with_regex(\n            string=Record,\n            regex=['Start-Date:\\\\s(?P\u003cStartDate\u003e.+)',\n                   'Commandline:\\\\s(?P\u003cCommandLine\u003e.+)',\n                   'Requested-By:\\\\s(?P\u003cRequestedBy\u003e.+)',\n                   'Install:\\\\s(?P\u003cInstall\u003e.+)',\n                   'Remove:\\\\s(?P\u003cRemove\u003e.+)',\n                   'Upgrade:\\\\s(?P\u003cUpgrade\u003e.+)',\n                   'End-Date:\\\\s(?P\u003cEndDate\u003e.+)']) as Event\n      FROM parse_records_with_regex(accessor=\"gzip\",file=OSPath, regex='''(?sm)^(?P\u003cRecord\u003eStart-Date:.+?)\\n\\n''')\n      SELECT * FROM foreach(row=APTHistoryList,query=ParseRecords)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.Sys.JournalCtl","op":"set","definition":"name: Exchange.Linux.Sys.JournalCtl\ndescription: |\n  Parse the output of the journalctl command. Journalctl is an interface to the systemd journal, which records information about system events.\n  \nreference:\n  - https://man7.org/linux/man-pages/man1/journalctl.1.html\nparameters:\n  - name: Length \n    default: 10000\n    type: int\n  - name: DateAfter\n    type: timestamp\n  - name: DateBefore\n    type: timestamp\n\nauthor: Wes Lambert -- @therealwlambert/@weslambert@infosec.exchange\nsources:\n  - query:\n      LET JournalFormat(ts) = format(format='%d-%02d-%02d %02d:%02d:%02d UTC',\n        args=[ts.Year, ts.Month, ts.Day, ts.Hour, ts.Minute, ts.Second])\n      LET DateAfterTime = JournalFormat(ts=if(condition=DateAfter,\n        then=DateAfter, else=timestamp(epoch='1600-01-01')))\n      LET DateBeforeTime = JournalFormat(ts=if(condition=DateBefore,\n        then=DateBefore, else=timestamp(epoch='2200-01-01')))\n      LET JCtlOut = SELECT * FROM execve(length=Length, argv=['/usr/bin/journalctl',\n        '-o', 'json', '-S', DateAfterTime, '-U', DateBeforeTime], sep=\"\\n\")\n      SELECT\n        timestamp(string=ParsedOutput.__REALTIME_TIMESTAMP) AS Timestamp,\n        ParsedOutput._HOSTNAME AS _Hostname,\n        ParsedOutput.MESSAGE AS Message,\n        ParsedOutput._MACHINE_ID AS _MachineID,\n        ParsedOutput._BOOT_ID AS BootID,\n        ParsedOutput.SYSLOG_IDENTIFIER AS _SyslogIdentifier,\n        ParsedOutput.PRIORITY AS _Priority,\n        ParsedOutput.SYSLOG_FACILITY AS _SyslogFacility,\n        ParsedOutput.__MONOTONIC_TIMESTAMP AS _MonotonicTS,\n        ParsedOutput._SOURCE_MONOTONIC_TIMESTAMP AS _SourceMonoTS,\n        ParsedOutput._TRANSPORT AS _Transport,\n        ParsedOutput.__CURSOR AS Cursor\n      FROM foreach(row={SELECT parse_json(data=Stdout) AS ParsedOutput FROM JCtlOut WHERE Stdout})\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.Sys.SystemdTimer","op":"set","definition":"name: Exchange.Linux.Sys.SystemdTimer\n\nauthor: Wes Lambert - @therealwlambert\n\ndescription: List and parse content of Systemd timers. \n\nreference:\n  - https://www.digitalforensics.ch/nikkel18.pdf\n  - https://lloydrochester.com/post/unix/systemd-timer-example/\n    \nparameters:\n  - name: TimerLocation\n    default: /lib/systemd/system/*.timer,/usr/lib/systemd/system/*.timer,/etc/systemd/system/*.timer,~/.config/systemd/user/*.timer\n    description: The location of Systemd timers\n    \nsources:\n  - precondition: |\n      SELECT OS From info() where OS = 'linux'\n    queries:\n      - |\n        SELECT *, read_file(filename=OSPath) FROM glob(globs=split(string=TimerLocation, sep=\",\"))\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.Sysinternals.Sysmon","op":"set","definition":"name: Exchange.Linux.Sysinternals.Sysmon\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n  Parses syslog for Sysmon events on Linux\n\n  **Reference**: https://github.com/Sysinternals/SysmonForLinux\n\n  This artifact can also be modified to forward events (as a client\n  event artifact), similar to Windows.Sysinternals.SysmonLogForward.\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'linux'\n\nparameters:\n  - name: syslogPath\n    default: /var/log/syslog\n\n  - name: sysmonGrok\n    description: A Grok expression for parsing Sysmon events from syslog on Linux machines\n    default: \u003e-\n      %{SYSLOGTIMESTAMP:Timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{GREEDYDATA:event}\n  - name: StartDate\n    type: timestamp\n    description: \"Parse events on or after this date (YYYY-MM-DDTmm:hh:ssZ)\"\n  - name: EndDate\n    type: timestamp\n    description: \"Parse events on or before this date (YYYY-MM-DDTmm:hh:ssZ)\"\n  - name: IDRegex\n    default: \".\"\n  - name: EventDataRegex\n    description: \"IOC Filter to reduce results\"\n    default: \".\"\n  - name: ParentUserRegex\n    description: \"User filter by parent user for process artefacts\"\n    default: \".\"\n    \n\nsources:\n  - queries:\n      # Basic syslog parsing via GROK expressions.\n      - LET UnparsedEvents = SELECT * FROM foreach(\n          row={\n              SELECT *  FROM glob(globs=syslogPath)\n          }, query={\n              SELECT grok(grok=sysmonGrok, data=Line) AS Event,\n              OSPath\n              FROM parse_lines(filename=OSPath)\n              WHERE Event.program = \"sysmon\" AND Event.event =~ \"\u003cEvent\u003e\"\n          })\n      - LET ParsedEvents = SELECT parse_xml(accessor='data', file=Event.event).Event AS Event FROM UnparsedEvents\n      - SELECT timestamp(string=Event.System.TimeCreated.AttrSystemTime) AS TimeCreated,\n           Event.System.EventID AS EventID,\n           Event.System.Channel AS _Channel,\n           Event.System.EventRecordID AS EventRecordID,\n           Event.System.EventID AS EventID,\n           Event.System.Computer AS Computer,\n           Event.System AS System,\n           to_dict(item={SELECT AttrName AS _key, `#text` AS _value FROM Event.EventData.Data}) AS EventData\n         FROM ParsedEvents\n         WHERE\n            if(condition=StartDate, then=TimeCreated \u003e= timestamp(string=StartDate), else=true)\n            AND if(condition=EndDate, then=TimeCreated \u003c= timestamp(string=EndDate), else=true)\n            AND str(str=EventID) =~ IDRegex\n            AND EventData =~ EventDataRegex\n            AND EventData.ParentUser =~ ParentUserRegex\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.Sysinternals.SysmonEvent","op":"set","definition":"name: Exchange.Linux.Sysinternals.SysmonEvent\ndescription: |\n  Parses syslog for Sysmon events on Linux using a unix domain socket.\n  \n  NOTE: This is an experimental patch for sysmon that gets it to write events \n  to a unix domain socket. \n  \n  Until it merges upstream you can get it from here:\n  \n  **Reference**: https://github.com/Velocidex/SysmonForLinux\n\ntype: CLIENT_EVENT\n\nprecondition: SELECT OS From info() where OS = 'linux'\n\nparameters:\n  - name: SysmonUnixDomainSocket\n    default: /var/run/sysmon.sock\n    \nsources:\n  - query: |\n      LET ParsedEvents = \n          SELECT parse_json(data=Data).Event AS Event \n          FROM netcat(type='unix', address=SysmonUnixDomainSocket, retry=10)\n          WHERE Data\n      \n      SELECT timestamp(string=Event.System.TimeCreated.SystemTime) AS TimeCreated,\n           Event.System.EventID AS EventID,\n           Event.System.Channel AS _Channel,\n           Event.System.EventRecordID AS EventRecordID,\n           Event.System.EventID AS EventID,\n           Event.System.Computer AS Computer,\n           Event.System AS System, \n           Event.EventData AS EventData\n         FROM ParsedEvents\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.System.BashLogout","op":"set","definition":"name: Exchange.Linux.System.BashLogout\ndescription: |\n   Capture Bash logout files for examination of abnormal activity. \n   \n   Bash logout files are used to run certain commands upon user logout, such as clearing the shell or terminal state. An adversary could leverage this capability to clear logs, cover tracks, delete files, etc.\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n- name: BashLogoutGlob\n  default: /home/*/.bash_logout\n- name: ContentFilter\n  default: .\n  description: Filter used for searching through file content\n- name: UploadFiles\n  default: False\n  description: \"Upload Bash logout files in scope\"\n  type: bool\nprecondition:\n      SELECT OS From info() where OS = 'linux'\n\nsources:\n  - query: |\n  \n      LET BashLogoutList = SELECT OSPath, Mtime\n       FROM glob(globs=split(string=BashLogoutGlob, sep=\",\"))\n       \n      SELECT OSPath, Mtime, parse_string_with_regex(regex=\"(?sm)(?P\u003cCommands\u003e^[a-z].*)\", string=read_file(filename=OSPath)).Commands AS Content, \n             if(condition=UploadFiles,then=upload(file=OSPath)) AS Upload\n      FROM foreach(row=BashLogoutList)\n      WHERE Content =~ ContentFilter\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Linux.System.PAM","op":"set","definition":"name: Exchange.Linux.System.PAM\n\ndescription: |\n   This artifact enumerates applicable lines from the files that reside in `/etc/PAM.d/`. This information can be useful for auditing and compliance purposes, or to identify suspicious activity on Linux systems.\n   \n   For example, we could use the `RecordFilter` parameter to check for the presence of `pam_exec.so`, which can be used within PAM configuration to invoke arbitrary scripts.  \n\n   \n   From MITRE ATT\u0026CK:\n   \n   Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is PAM_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow\n   \n   Adversaries may modify components of the PAM system to create backdoors. PAM components, such as PAM_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\n   \n   Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.\n   \nreference:\n  - https://linux.die.net/man/5/PAM.d\n  - https://attack.mitre.org/techniques/T1556/003/\n  - https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1556.003/T1556.003.md\n  - https://book.hacktricks.xyz/linux-hardening/linux-post-exploitation#sniffing-logon-passwords-with-PAM\n  \ntype: CLIENT\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n  - name: PAMGlob\n    default: /etc/pam.d/*\n  - name: RecordFilter\n    default: .\n    description: Filter used for targeting specific records by content\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n    \nprecondition:\n      SELECT OS From info() where OS = 'linux'\n      \nsources:\n  - query: |\n      LET DateAfterTime \u003c= if(condition=DateAfter,\n        then=timestamp(epoch=DateAfter), else=timestamp(epoch=\"1600-01-01\"))\n      LET DateBeforeTime \u003c= if(condition=DateBefore,\n        then=timestamp(epoch=DateBefore), else=timestamp(epoch=\"2200-01-01\"))        \n      LET PAMGlobList = SELECT Mtime, OSPath\n        FROM glob(globs=split(string=PAMGlob, sep=\",\"))\n      SELECT * FROM foreach(row=PAMGlobList, \n                    query={ SELECT Mtime, \n                                   OSPath, \n                                   Line AS Record\n                            FROM  parse_lines(filename=OSPath) \n                            WHERE Record =~ RecordFilter\n                            AND Mtime \u003c DateBeforeTime\n                            AND Mtime \u003e DateAfterTime\n                            AND NOT Record =~ '^#' \n                            AND NOT Record = ''})\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.Cache","op":"set","definition":"name: Exchange.MacOS.Applications.Cache\ndescription: |\n    Applications can use the NSURL cache to store specific data that is useful to the operation of the application in a `Cache.db` file on disk. The data contained within this file could potentially be useful to investigators or incident responders, such as URLs that were accessed, as well as data requested or returned.\n\nreference:\n  - https://developer.apple.com/documentation/foundation/nsurl\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\nparameters:\n- name: CacheGlob\n  default: /Users/*/Library/Caches/*/Cache.db\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET CacheList = SELECT FullPath\n       FROM glob(globs=split(string=CacheGlob, sep=\",\"))\n\n      LET CacheQuery = SELECT *\n       FROM sqlite(file=FullPath, query=\"SELECT cfurl_cache_response.entry_ID AS entry_ID, version, hash_value, storage_policy, request_key, time_stamp, partition, request_object, response_object FROM cfurl_cache_response INNER JOIN cfurl_cache_blob_data ON cfurl_cache_response.entry_ID = cfurl_cache_blob_data.entry_ID INNER JOIN cfurl_cache_receiver_data ON cfurl_cache_response.entry_ID = cfurl_cache_receiver_data.entry_ID\")\n      \n      SELECT * FROM foreach(\n          row=CacheList,\n          query={ \n              SELECT\n                  time_stamp AS Timestamp,\n                  basename(path=dirname(path=FullPath)) AS Application,\n                  entry_ID AS EntryID,\n                  version AS Version,\n                  hash_value AS Hash,\n                  storage_policy AS StoragePolicy,\n                  request_key AS URL,\n                  plist(file=request_object, accessor=\"data\") AS Request,\n                  plist(file=response_object, accessor=\"data\") AS Response,\n                  partition AS Partition,\n                  FullPath\n              FROM CacheQuery\n          }\n      )\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.Firefox.History","op":"set","definition":"name: Exchange.MacOS.Applications.Firefox.History\ndescription: |\n  Read all Users Firefox history.\n\nparameters:\n  - name: historyGlobs\n    default: /Users/*/Library/Application Support/Firefox/Profiles/*/places.sqlite\n  - name: urlSQLQuery\n    default: |\n        SELECT datetime(moz_historyvisits.visit_date/1000000,'unixepoch') AS visit_time, moz_places.url as visited_url,title, visit_count,\n             typed, frecency, last_visit_date, description, rev_host, preview_image_url FROM moz_places, moz_historyvisits WHERE moz_places.id = moz_historyvisits.place_id\n  - name: userRegex\n    default: .\n\nreference:\n  - https://www.foxtonforensics.com/browser-history-examiner/firefox-history-location\n  - https://en.wikiversity.org/wiki/Firefox/Browsing_history_database\n  \nauthor: https://github.com/x64-julian\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET history_files = SELECT\n         parse_string_with_regex(regex=\"/Users/(?P\u003cUser\u003e[^/]+)\", string=OSPath).User AS User,\n         OSPath\n      FROM glob(globs=historyGlobs)\n\n      SELECT * FROM foreach(row=history_files,\n        query={\n           SELECT User, OSPath,\n              visit_time, visited_url, title,description,  visit_count, typed, frecency,\n              last_visit_date, rev_host, preview_image_url\n          FROM sqlite(\n             file=OSPath,\n             query=urlSQLQuery)\n          })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.KnowledgeC","op":"set","definition":"name: Exchange.MacOS.Applications.KnowledgeC\ndescription: |\n   On macOS, the KnowledgeC DB can provide various details around application activities and usage, as well as device power status.\n   \n   More information about this database can be found here: \n   \n   https://www.mac4n6.com/blog/2018/8/5/knowledge-is-power-using-the-knowledgecdb-database-on-macos-and-ios-to-determine-precise-user-and-application-usage\n\nreference:\n  - https://www.mac4n6.com/blog/2018/8/5/knowledge-is-power-using-the-knowledgecdb-database-on-macos-and-ios-to-determine-precise-user-and-application-usage\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n- name: KCDBGlob\n  default: /private/var/db/CoreDuet/Knowledge/knowledgeC.db,/Library/Application Support/Knowledge/knowledgeC.db\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - name: Application Activities\n    query: |\n      LET KCDBList = SELECT OSPath\n       FROM glob(globs=split(string=KCDBGlob, sep=\",\"))\n\n      LET KCDBAppActivities = SELECT *\n       FROM sqlite(file=OSPath, query='''\n        SELECT\n            datetime(ZOBJECT.ZCREATIONDATE+978307200,'UNIXEPOCH', 'LOCALTIME') as \"ENTRY CREATION\", \n            ZOBJECT.ZSECONDSFROMGMT/3600 AS \"GMT OFFSET\",\n            CASE ZOBJECT.ZSTARTDAYOFWEEK \n                WHEN \"1\" THEN \"Sunday\"\n                WHEN \"2\" THEN \"Monday\"\n                WHEN \"3\" THEN \"Tuesday\"\n                WHEN \"4\" THEN \"Wednesday\"\n                WHEN \"5\" THEN \"Thursday\"\n                WHEN \"6\" THEN \"Friday\"\n                WHEN \"7\" THEN \"Saturday\"\n            END \"DAY OF WEEK\",\n            datetime(ZOBJECT.ZSTARTDATE+978307200,'UNIXEPOCH', 'LOCALTIME') as \"START\", \n            datetime(ZOBJECT.ZENDDATE+978307200,'UNIXEPOCH', 'LOCALTIME') as \"END\", \n            (ZOBJECT.ZENDDATE-ZOBJECT.ZSTARTDATE) as \"USAGE IN SECONDS\", \n            ZOBJECT.ZSTREAMNAME, \n            ZOBJECT.ZVALUESTRING,\n            ZSTRUCTUREDMETADATA.Z_DKAPPLICATIONACTIVITYMETADATAKEY__ACTIVITYTYPE AS \"ACTIVITY TYPE\",  \n            ZSTRUCTUREDMETADATA.Z_DKAPPLICATIONACTIVITYMETADATAKEY__TITLE as \"TITLE\", \n            ZSTRUCTUREDMETADATA.Z_DKAPPLICATIONACTIVITYMETADATAKEY__USERACTIVITYREQUIREDSTRING as \"ACTIVITY STRING\",\n            datetime(ZSTRUCTUREDMETADATA.Z_DKAPPLICATIONACTIVITYMETADATAKEY__EXPIRATIONDATE+978307200,'UNIXEPOCH', 'LOCALTIME') as \"EXPIRATION DATE\"\n        FROM ZOBJECT\n        left join ZSTRUCTUREDMETADATA on ZOBJECT.ZSTRUCTUREDMETADATA = ZSTRUCTUREDMETADATA.Z_PK\n        WHERE ZSTREAMNAME is \"/app/activity\" or ZSTREAMNAME is \"/app/inFocus\"''')\n  \n      SELECT timestamp(string=`ENTRY CREATION`) AS Timestamp,\t\n        `GMT OFFSET` AS OffsetGMT,\t\n        `DAY OF WEEK` AS DayOfWeek,\t\n        `START` AS Start,\n        `END` AS End,\n        `USAGE IN SECONDS` AS Usage,\t\n        ZSTREAMNAME AS StreamName,\n        ZVALUESTRING AS StreamValue,\t\n        `ACTIVITY TYPE` AS ActivityType, \t\n        TITLE AS Title,\n        `ACTIVITY STRING` AS Activity,\t\n        `EXPIRATION DATE` AS ExpirationDate\n      FROM foreach(row=KCDBList,query=KCDBAppActivities)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.NetworkUsage","op":"set","definition":"name: Exchange.MacOS.Applications.NetworkUsage\ndescription: |\n   On macOS, the NetUsage DB can provide various details around application network utilization. With this artifact, we can get an idea of what applications are utilizing the network for communications and to what degree. We can also identify if usage has occurred through a WIFI network or a wired network.\n   \n   More information about this database can be found here: \n   \n   http://www.mac4n6.com/blog/2019/1/6/network-and-application-usage-using-netusagesqlite-amp-datausagesqlite-ios-databases\nreference:\n  - http://www.mac4n6.com/blog/2019/1/6/network-and-application-usage-using-netusagesqlite-amp-datausagesqlite-ios-databases\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n- name: NetUsageGlob\n  default: /private/var/networkd/netusage.sqlite,/private/var/networkd/db/netusage.sqlite\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET NetUsageList = SELECT OSPath\n       FROM glob(globs=split(string=NetUsageGlob, sep=\",\"))\n\n      LET NetUsageDetails = SELECT *\n        FROM sqlite(file=OSPath, query='''\n          SELECT\n            DATETIME(ZPROCESS.ZTIMESTAMP + 978307200, 'unixepoch') AS \"PROCESS TIMESTAMP\",\n            DATETIME(ZPROCESS.ZFIRSTTIMESTAMP + 978307200, 'unixepoch') AS \"PROCESS FIRST TIMESTAMP\",\n            DATETIME(ZLIVEUSAGE.ZTIMESTAMP + 978307200, 'unixepoch') AS \"LIVE USAGE TIMESTAMP\",\n            ZBUNDLENAME AS \"BUNDLE ID\",\n            ZPROCNAME AS \"PROCESS NAME\",\n            ZWIFIIN AS \"WIFI IN\",\n            ZWIFIOUT AS \"WIFI OUT\",\n            ZWWANIN AS \"WWAN IN\",\n            ZWWANOUT AS \"WWAN OUT\",\n            ZWIREDIN AS \"WIRED IN\",\n            ZWIREDOUT AS \"WIRED OUT\",\n            ZXIN AS \"X IN\",\n            ZXOUT AS \"X OUT\",\n            ZLIVEUSAGE.Z_PK AS \"ZLIVEUSAGE TABLE ID\" \n          FROM ZLIVEUSAGE \n            LEFT JOIN ZPROCESS ON ZPROCESS.Z_PK = ZLIVEUSAGE.ZHASPROCESS''')\n  \n      SELECT timestamp(string=`PROCESS TIMESTAMP`) AS Timestamp,\t\n        `PROCESS FIRST TIMESTAMP` AS FirstTimestamp,\t\n        `LIVE USAGE TIMESTAMP` AS LiveUsageTimestamp,\n        `BUNDLE ID` AS BundleID,\n        `PROCESS NAME` AS ProcessName,\t\n        `WIFI IN` AS WifiIn,\n        `WIFI OUT` AS WifiOut,\t\n        `WIRED IN` AS WiredIn, \t\n        `WIRED OUT` AS WiredOut,\n        `X IN` AS _XIn,\t\n        `X OUT` AS _XOut,\n        `ZLIVEUSAGE TABLE ID` AS LiveUsageTableID\n      FROM foreach(row=NetUsageList,query=NetUsageDetails)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.Notes","op":"set","definition":"name: Exchange.MacOS.Applications.Notes\ndescription: |\n   This artifact provides details about notes taken using the default Notes application on macOS.  These notes can be useful during an investigation, especially if tied to interesting files.  \n  \n   Deleted notes and attachments can also be recovered in some instances.\n   \n   The SQL query within this artifact was primarily derived from Yogesh Khatri's referenced blog post.\n   \n   NOTE: This artifact may not cover all attachments at this time, and there are many more great pieces of data to discover! More information can be found in the `ZICCLOUDSYNCINGOBJECT` table.\n   \nreference:\n  - http://www.swiftforensics.com/2018/02/reading-notes-database-on-macos.html\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n- name: NotesGlob\n  default: /Users/*/Library/Containers/com.apple.Notes/Data/Library/Notes/NotesV*.storedata,/Users/*/Library/Group Containers/group.com.apple.notes/NoteStore.sqlite\n- name: UploadFiles\n  default: False\n  description: \"Upload attachments in scope\"\n  type: bool\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET NotesList = SELECT OSPath\n       FROM glob(globs=split(string=NotesGlob, sep=\",\"))\n\n      LET NotesDetails = SELECT Key AS _Key,\n                                split(sep='\\/', string=OSPath)[2] AS User,\n                                Note,\n                                Title,\n                                Snippet,\n                                NoteID AS _NoteID,\n                                timestamp(cocoatime=CreatedTS) AS CreatedTime,\n                                timestamp(cocoatime=LastOpenedDate) AS LastOpenedTime,\n                                timestamp(cocoatime=DirModificationDate) AS LastDirModifcation,\n                                Account AS _Account,\n                                Directory,\n                                DirectoryID,\n                                AttachmentName,\n                                AttachmentSize,\n                                AttachmentUUID,\n                                if(condition=AttachmentUUID,then='Users/' + split(sep='\\/', string=OSPath)[2] + '/Library/Group Containers/group.com.apple.notes/Accounts/LocalAccount/Media/' + AttachmentUUID + '/' + AttachmentName) AS AttachmentLocation,\n                                AccountName AS _AccountName,\n                                AccountID AS _AccountID,\n                                AccountType AS _AccountType,\n                                gunzip(string=Data) AS Data,\n                                OSPath\n        FROM sqlite(file=OSPath, \n                    query=if(condition=OSPath =~ \".sqlite\", \n                          then='''SELECT n.Z_PK AS Key, \n                                    n.ZNOTE as Note, \n                                    c1.ZTITLE1 as Title, \n                                    c1.ZSNIPPET as Snippet, \n                                    c1.ZIDENTIFIER as NoteID,\n                                    c1.ZCREATIONDATE3  as CreatedTS,\n                                    c1.ZFOLDERMODIFICATIONDATE AS DirModificationDate,\n                                    c1.ZLASTOPENEDDATE AS LastOpenedDate,\n                                    c2.ZACCOUNT3 as Account, \n                                    c2.ZTITLE2 as Directory, \n                                    c2.ZIDENTIFIER as DirectoryID,\n                                    c4.ZFILENAME as AttachmentName,\n                                    c3.ZFILESIZE as AttachmentSize, \n                                    c4.ZIDENTIFIER as AttachmentUUID,\n                                    c5.ZNAME as AccountName, \n                                    c5.ZIDENTIFIER as AccountID, \n                                    c5.ZACCOUNTTYPE as AccountType,\n                                    n.ZDATA as Data\n                                    FROM ZICNOTEDATA as n \n                                    LEFT JOIN ZICCLOUDSYNCINGOBJECT as c1 ON c1.ZNOTEDATA = n.Z_PK \n                                    LEFT JOIN ZICCLOUDSYNCINGOBJECT as c2 ON c2.Z_PK = c1.ZFOLDER \n                                    LEFT JOIN ZICCLOUDSYNCINGOBJECT as c3 ON c3.ZNOTE= n.ZNOTE \n                                    LEFT JOIN ZICCLOUDSYNCINGOBJECT as c4 ON c4.ZATTACHMENT1= c3.Z_PK \n                                    LEFT JOIN ZICCLOUDSYNCINGOBJECT as c5 ON c5.Z_PK = c1.ZACCOUNT2 \n                                  ORDER BY Key''', \n                          else='''SELECT n.Z_PK as Key, \n                                    datetime(n.ZDATECREATED + 978307200, 'unixepoch') as CreatedTS, \n                                    datetime(n.ZDATEEDITED + 978307200, 'unixepoch') as Modtime, \n                                    n.ZTITLE AS Title, \n                                    (SELECT ZNAME from ZFOLDER where n.ZFOLDER=ZFOLDER.Z_PK) as Directory,\n                                    (SELECT zf2.ZACCOUNT from ZFOLDER as zf1  \n                                    LEFT JOIN ZFOLDER as zf2 on (zf1.ZPARENT=zf2.Z_PK) where n.ZFOLDER=zf1.Z_PK) as DirectoryParent,\n                                    ac.ZEMAILADDRESS as Email, \n                                    ac.ZACCOUNTDESCRIPTION as AccountDescription, \n                                    b.ZHTMLSTRING as HTMLString, \n                                    att.ZCONTENTID as ContentID, \n                                    att.ZFILEURL as FileURL\n                                    FROM ZNOTE as n\n                                    LEFT JOIN ZNOTEBODY as b ON b.ZNOTE = n.Z_PK\n                                    LEFT JOIN ZATTACHMENT as att ON att.ZNOTE = n.Z_PK\n                                    LEFT JOIN ZACCOUNT as ac ON ac.Z_PK = DirectoryParent'''))\n  \n      SELECT *, \n             if(condition=UploadFiles,then=if(condition=AttachmentLocation, then=upload(file=AttachmentLocation))) AS Upload\n      FROM foreach(row=NotesList, query=NotesDetails)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.Safari.Downloads","op":"set","definition":"name: Exchange.MacOS.Applications.Safari.Downloads\ndescription: |\n  Parses Safari downloads for all standard macOS users\n  \n  **NOTE**: By default Safari download history is only retained for 24 hours\n\nauthor: Deepak Sharma - @rxurien\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nparameters:\n  - name: DownloadsPath\n    default: /Users/*/Library/Safari/Downloads.plist\n  - name: UserRegex\n    default: .\n  - name: UploadFile\n    description: Upload Downloads.plist File\n    type: bool\n\nsources:\n  - name: Downloads\n    query: |\n      LET DownloadsGlob = SELECT\n         parse_string_with_regex(regex=\"/Users/(?P\u003cUser\u003e[^/]+)\", string=FullPath).User AS User,\n         FullPath, Mtime, plist(file=FullPath) AS Content from glob(globs=DownloadsPath)\n    \n      SELECT * FROM foreach(row=DownloadsGlob, \n        query={\n          SELECT * FROM foreach(row=Content.DownloadHistory, query={SELECT DownloadEntryDateAddedKey AS StartTime, DownloadEntryDateFinishedKey AS EndTime, User, DownloadEntryPath AS DownloadPath, DownloadEntryURL AS URL, DownloadEntryProgressBytesSoFar AS BytesDownloaded, DownloadEntryProgressTotalToLoad AS BytesTotal, DownloadEntryRemoveWhenDoneKey AS IncognitoDownload, FullPath AS FilePath from scope()})\n          })\n            \n  - name: Upload\n    query: |\n      SELECT * FROM if(condition=UploadFile,\n        then={\n          SELECT User, FullPath AS FilePath,\n               upload(file=FullPath) AS FileDetails \n          FROM DownloadsGlob\n        })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.Safari.History","op":"set","definition":"name: Exchange.MacOS.Applications.Safari.History\ndescription: |\n  Parses Safari history database\n\nauthor: Deepak Sharma - @rxurien\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nparameters:\n  - name: HistoryPath\n    default: /Users/*/Library/Safari/History.db\n  - name: SQLQuery\n    default: |\n      SELECT * FROM history_visits INNER JOIN history_items ON history_items.id = history_visits.history_item;\n  - name: UserRegex\n    default: .\n  - name: UploadFile\n    description: Upload History.db File\n    type: bool\n\nsources:\n  - name: History\n    query: |\n      LET history_db = SELECT\n         parse_string_with_regex(regex=\"/Users/(?P\u003cUser\u003e[^/]+)\", string=FullPath).User AS User,\n         FullPath\n      FROM glob(globs=HistoryPath)\n\n      SELECT * FROM foreach(row=history_db,\n        query={\n          SELECT timestamp(cocoatime=visit_time) AS VisitTime, User, title AS PageTitle, url AS URL, domain_expansion AS Domain, visit_count AS VisitCount, load_successful AS IsLoadSuccessful, FullPath AS FilePath\n          FROM sqlite(\n             file=FullPath,\n             query=SQLQuery)\n          })\n          \n  - name: Upload\n    query: |\n        SELECT * FROM if(condition=UploadFile,\n            then={\n        SELECT User, FullPath AS FilePath,\n        upload(file=FullPath) AS FileDetails \n        FROM history_db\n            })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Applications.SavedState","op":"set","definition":"name: Exchange.MacOS.Applications.SavedState\ndescription: |\n   On macOS, certain application state is saved in `/Users/*/Library/Saved Application State/`. \n   \n   We can check these files to determine the last time an application was opened, the title of the application window, and when the application/window was later restored, such as after login or reboot.\n   \n   In general, the following has been observed:\n   \n   - The 'SavedState' files are created when the application is started.\n   - `SavedState` directory - `Btime` - Last time the application was opened by the user.\n   - `SavedState` directory - `ModTime` - When the application state was last restored (such as after login/reboot).\n   - `data.data` files - the actual data within the app, such as the scrollback for a `Terminal` window. The data within can be an (AES-128-CBC) encrypted blob. This data can be decrypted using the appropriate `NSDataKey` value found in `windows.plist`.\n   - `data.data` - `ModTime` - changes when new data is added to the state, for example, when interacting with the Terminal application.\n   - `windows.plist` -- contains the name of application windows (NSTitle, as well as other information such as:\n     - `NSDataKey` \n     - `NSDockMenu.name` -- names respective to the user's dock/etc.\n     - `NSWindowID` -- can be used to link the `NSDataKey` to the `PersistentUIRecord` value in the `data.data` file. \n   - `windows.plist` - `BTime` - last time application was restored\n   - `windows.plist` - `ModTime` - changes when new data is added to the state, for example, when interacting with the Terminal application.\nreference:\n  - https://www.sans.org/blog/osx-lion-user-interface-preservation-analysis/\n  - https://www.crowdstrike.com/blog/reconstructing-command-line-activity-on-macos/\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\nparameters:\n- name: SavedStateGlob\n  default: /Users/*/Library/Saved Application State/com.apple.**\n- name: NameFilter\n  default: .\n  description: Filter used for targeting results by application name\n- name: UserFilter\n  default: .\n  description: Filter used for targeting results by user name\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET SavedStateList = SELECT ModTime,\n                                  Btime,\n                                  OSPath,\n                                  regex_replace(source=OSPath[4], replace=\"\", re=\".savedState\") AS Name,\n                                  OSPath[1] AS _User\n                           FROM glob(globs=split(string=SavedStateGlob, sep=\",\"))\n      SELECT *,\n             if(condition = OSPath =~ \"windows.plist\", then=items(item=plist(file=OSPath))._value.NSDockMenu.name)[0][0] AS DockMenuName,\n             if(condition = OSPath =~ \"windows.plist\", then=items(item=plist(file=OSPath))._value.NSTitle)[0] AS WindowTitle,\n             if(condition = OSPath =~ \"windows.plist\", then=plist(file=OSPath)) AS _WindowDetails\n      FROM foreach(row=SavedStateList)\n      WHERE Name =~ NameFilter\n      AND _User =~ UserFilter\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Collection.Aftermath","op":"set","definition":"name: Exchange.MacOS.Collection.Aftermath\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n    This is a simple artifact that leverages Afermath to collect many different forensic artifacts from a macOS host, then uploads the results to the Velociraptor server.\n\n    From the project's description:\n\n    Aftermath is a Swift-based, open-source incident response framework.\n\n    Aftermath can be leveraged by defenders in order to collect and subsequently analyze the data from the compromised host. Aftermath can be deployed from an MDM (ideally), but it can also run independently from the infected user's command line.\n\n    https://github.com/jamf/aftermath\n    \ntools:\n  - name: Aftermath\n    url: https://github.com/Velocidex/Tools/raw/main/Aftermath/aftermath\n    serve_locally: true\nparameters:\n  - name: Analyze\n    description: Analyze the collected data using the native --analyze option. This produces a ZIP file with summary information based on the analysis. If not chosen, the raw data will be uploaded.\n    default: F\n    type: bool\n    \nprecondition: SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n        LET AM \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Aftermath\", IsExecutable=TRUE)\n        LET TmpDir \u003c= tempdir(remove_last=TRUE)\n        Let RunIt = SELECT *\n                    FROM execve(argv=[\n                        AM.FullPath[0],\n                        \"-o\", TmpDir, \n                        \"--deep\"\n                     ])\n        LET AnalyzeIt = SELECT *\n                    FROM execve(argv=[\n                        AM.FullPath[0], \"--analyze\", grok(data=RunIt.Stdout,grok=[\"Aftermath archive moved to %{DATA:File}.zip\"]).File + '.zip'\n                     ]) \n        SELECT upload(accessor=\"file\", file=grok(data=Stdout,grok=[\"Aftermath archive moved to %{DATA:File}.zip\"]).File + '.zip') AS Upload FROM if(condition=Analyze, then=AnalyzeIt, else=RunIt)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Files.FileMonitor","op":"set","definition":"name: Exchange.MacOS.Files.FileMonitor\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n   This artifact parses Objective-See's FileMonitor log.\n   \n   More information about Objective-See and FileMonitor can be found here:\n   \n   https://objective-see.org/products/utilities.html\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: JSONLGlob\n     default:\n   - name: FileRegex\n     description: \"Filter on file name\"\n     default: .\n     type: regex\n   - name: PathRegex\n     description: \"Filter on path name\"\n     default: .\n     type: regex\n   - name: ProcessRegex\n     description: \"Filter on process name\"\n     default: .\n     type: regex\n   - name: UserIdRegex\n     description: \"Filter on user ID\"\n     default: .\n     type: regex\n   \nsources:\n\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux' OR OS = 'darwin'\n\n    query: |\n      LET FileMonitorLogs \u003c= SELECT FullPath FROM glob(globs=JSONLGlob)\n      \n        \n      SELECT * FROM foreach(row={ \n        SELECT * FROM parse_jsonl(filename=FileMonitorLogs.FullPath)}, query={\n            SELECT \n                timestamp(string=timestamp) AS Time,\n                event AS Event,\n                file.destination AS File,\n                file.process.pid AS PID,\n                file.process.name AS Process,\n                file.process.path AS Path,\n                file.process.uid AS UID,\n                file.process.arguments AS Arguments,\n                file.process.ppid AS `Parent PID`,\n                file.process.ancestors AS Ancestors,\n                file.process.`signing info (reported)` AS `Signing Info (Reported)`,\n                file.process.`signing info (computed)` AS `Signing Info (Computed)`,\n                file AS _Content\n            FROM scope()\n            WHERE File =~ FileRegex\n            AND Path =~ PathRegex\n            AND Process =~ ProcessRegex\n            AND str(str=UID) =~ UserIdRegex\n        })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Forensics.ASL","op":"set","definition":"name: Exchange.MacOS.Forensics.ASL\n\nauthor: Yogesh Khatri (@swiftforensics), CyberCX\n\ndescription: | \n   This artifact parses the ASL (Apple System Log) v2 files located at \n   /private/var/log/asl/*.asl\n\nreference:\n- https://github.com/apple-oss-distributions/Libc/blob/Libc-825.25/gen/asl_file.h\n\ntype: CLIENT\n\nparameters:\n   - name: GlobTable\n     type: csv\n     default: |\n        Glob\n        /private/var/log/asl/*.asl\n   - name: PathRegex\n     description: Filter the path by this regexp\n     default: .\n   - name: SenderRegex\n     description: Filter the Sender by this regexp\n     default: .\n   - name: MessageRegex\n     description: Filter the Message by this regexp\n     default: .\n   - name: KeyValueRegex\n     description: Filter the Keys and Values by this regexp\n     default: .\n   - name: DateAfter\n     type: timestamp\n     description: \"fetch logs after this date. YYYY-MM-DDTmm:hh:ssZ\"\n   - name: DateBefore\n     type: timestamp\n     description: \"fetch logs before this date. YYYY-MM-DDTmm:hh:ssZ\"\n\nexport: |\n    LET AslProfile = '''[\n    [\"Header\", 0, [\n      [\"Cookie\", 0, \"String\", {\n         \"length\": 12\n      }],\n      [\"Version\", 12, \"uint32b\"],\n      [\"First\", 16, \"uint64b\"],\n      [\"Time\", 24, \"Timestamp\", {\n          type: \"uint64b\"\n      }],\n      [\"Last\", 37, \"uint64b\"],\n      [\"Items\", \"x=\u003ex.First\", \"Array\", {\n          count: 10000,\n          max_count: 10000,\n          type: Message,\n          sentinel: \"x=\u003ex.Last = x.StartOf\",\n      }],\n    ]],\n    [\"Message\", \"x=\u003ex.Next - x.StartOf\", [\n      [\"Zero\", 0, \"uint16b\"],\n      [\"Len\", 2, \"uint32b\"],\n      [\"Next\", 6, \"uint64b\"],\n      [\"ID\", 14, \"uint64b\"],\n      [\"Time\", 22, \"Timestamp\", {\n          type: \"uint64b\"\n      }],\n      [\"Nano\", 30, \"uint32b\"],\n      [\"Level\", 34, \"Enumeration\", {\n          \"type\": \"uint16b\",\n          \"map\": {\n              \"Emergency\" : 0x00000000,\n              \"Alert\"     : 0x00000001, \n              \"Critical\"  : 0x00000002, \n              \"Error\"     : 0x00000003, \n              \"Warning\"   : 0x00000004, \n              \"Notice\"    : 0x00000005, \n              \"Info\"      : 0x00000006, \n              \"Debug\"     : 0x00000007,\n          }\n      }],\n      [\"Flags\", 36, \"uint16b\"],\n      [\"PID\", 38, \"int32b\"],\n      [\"UID\", 42, \"int32b\"],\n      [\"GID\", 46, \"int32b\"],\n      [\"RUID\", 50, \"int32b\"],\n      [\"RGID\", 54, \"int32b\"],\n      [\"RefPID\", 58, \"uint32b\"],\n      [\"KVCount\", 62, \"uint32b\"],\n      [\"Host\", 66, \"AslString\"],\n      [\"Sender\", 74, \"AslString\"],\n      [\"Facility\", 82, \"AslString\"],\n      [\"Message\", 90, \"AslString\"],\n      [\"RefProc\", 98, \"AslString\"],\n      [\"Session\", 106, \"AslString\"],\n      [\"KeyValues\", 114, \"Array\", {\n          count: \"x=\u003ex.KVCount/2\",\n          max_count: 25,\n          type: KeyValuePair,\n      }],\n    ]],\n    [\"KeyValuePair\", 16, [\n      [\"Key\", 0, \"AslString\"],\n      [\"Val\", 8, \"AslString\"],\n      [\"Pair\", 0, \"Value\", { \n        \"value\": \"x=\u003eformat(format='{%s:%s}', args=[x.Key.Info.str, x.Val.Info.str])\",\n      }],\n    ]],\n    [\"AslString\", 8, [\n      [\"z\", 0, \"int64b\"],\n      [\"s\", 0, \"Value\", { \"value\": \"x=\u003eif(condition=(x.z \u003c 0), \n                                        then='INTERNAL', \n                                        else='EXTERNAL' )\"\n      }],\n      [\"Info\", 0, \"Union\", {\n         selector: \"x=\u003ex.s\",\n         choices: {\n             \"INTERNAL\": \"IntString\",\n             \"EXTERNAL\": \"ExtString\",\n         }\n      }],\n    ]],\n    [\"IntString\", 8, [\n      [\"z\", 0, \"uint8b\"],\n      [\"actuallen\", 0, \"Value\", { \"value\": \"x=\u003eif(condition=(x.z=0), \n                                                then=0, \n                                                else=x.z - 128)\"\n      }],\n      [\"str\", 1, \"String\", { encoding: \"utf8\", length: \"x=\u003ex.actuallen\" }],\n    ]],\n    [\"ExtString\", 8, [\n      [\"Offset\", 0, \"uint64b\"],\n      [\"Str\", 0, \"Profile\", {\n          type: \"ExtString2\",\n          offset: \"x=\u003ex.Offset\",\n      }],\n      [\"str\", 0, \"Value\", { \"value\": \"x=\u003ex.Str.str\" }],\n    ]],\n    [\"ExtString2\", \"x=\u003ex.len + 6\", [\n      [\"one\", 0, \"uint16b\"],\n      [\"len\", 2, \"uint32b\"],\n      [\"str\", 6, \"String\", { encoding: \"utf8\", length: \"x=\u003ex.len\" }],\n    ]],\n    ]'''\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET files = SELECT OSPath, Mtime, Btime\n        FROM glob(globs=GlobTable.Glob)\n        WHERE   log(message=OSPath)\n\n      SELECT * FROM foreach(row=files,\n        query={\n            SELECT ID, Time, Level, PID, UID, GID, RUID, RGID, RefPID, //KVCount, \n                    Host.Info.str as Host, \n                    Sender.Info.str as Sender,\n                    Facility.Info.str as Facility,\n                    Message.Info.str as Message,\n                    RefProc.Info.str as RefProc,\n                    Session.Info.str as Session,\n                    KeyValues.Pair as KeyValues,\n                    OSPath as SourcePath\n                    //OSPath.Basename as SourceFile\n            FROM \n                foreach(row=parse_binary(\n                    filename=read_file(filename=OSPath, length=1000000),\n                    accessor=\"data\",\n                    profile=AslProfile, struct=\"Header\").Items)\n            WHERE   if(condition=DateAfter, then= Time \u003e DateAfter, else= True )\n                AND if(condition=DateBefore, then= Time \u003c DateBefore, else= True )\n        })\n        WHERE EntryPath =~ PathRegex\n            AND Sender =~ SenderRegex\n            AND Message =~ MessageRegex\n            AND KeyValues =~ KeyValueRegex\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Logs.MacMonitor","op":"set","definition":"name: Exchange.MacOS.Logs.MacMonitor\ndescription: |\n   This artifact parses JSONL-formatted logs generated by MacMonitor.\nreference:\n   - https://github.com/redcanaryco/mac-monitor \nparameters:\n   - name: JSONLGlob\n     default:\n   - name: ProcessRegex\n     description: \"Filter on process name\"\n     default: .\n     type: regex\n   - name: InitiatingProcessRegex\n     description: \"Filter on initiating process name\"\n     default: .\n     type: regex\n\nsources:\n    - query: |\n        LET MacMonitorLogs \u003c= SELECT FullPath FROM glob(globs=JSONLGlob)\n        SELECT \n          activity_at_ts AS Timestamp,\n          substr(start=14, str=es_event_type) AS EventType,\n          target AS ProcessName,\n          initiating_process_path AS InitiatingProcessPath,\n          initiating_process_name AS InitiatingProcessName,\n          initiating_pid AS InitiatingPID,\n          initiating_process_signing_id AS InitiatingProcessSigningID,\n          initiating_ruid_human AS InitiatingUser,\n          initiating_euid_human AS InitiatingEffectiveUser,\n          initiating_ruid AS InitiatingUserId,\n          initiating_ruid AS InitiatingEffectiveUserId,\n          initiating_process_group_id AS InitiatingProcessGID,\n          initiating_process_file_quarantine_type AS InitiatingProcessQuarantineType,\n          initiating_process_cdhash AS InitiatingProcessCDHash,\n          audit_token AS AuditToken,\n          responsible_audit_token AS ResponseAuditToken,\n          parent_audit_token AS ParentAuditToken,\n          macOS AS OSVersion,\n          sensor_id AS SensorId,\n          path_is_truncated AS PathIsTruncated//,\n          //fork_event AS ForkEvent\n        FROM parse_jsonl(accessor=\"file\", filename=MacMonitorLogs.FullPath)\n        WHERE ProcessName =~ ProcessRegex AND \n        InitiatingProcessName =~ InitiatingProcessRegex\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Network.ApplicationLayerFirewall","op":"set","definition":"name: Exchange.MacOS.Network.ApplicationLayerFirewall\ndescription: |\n    This artifact provides information around the configuration of the application firewall for a macOS host. \n    \n    This can be useful for auditing to ensure compliance, overall safety, or to identify tampering with allowed application connections or firewall-related restrictions.\n    \ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\nprecondition: SELECT OS FROM info() WHERE OS =~ 'darwin'\n\nparameters:\n  - name: ALFGlob\n    default: /Library/Preferences/com.apple.alf.plist\n\nsources:\n  - query: |\n      SELECT \n        if(condition=globalstate, then=\"Enabled\", else=\"Disabled\") AS GlobalState,\n        if(condition=allowsignedenabled, then=\"Yes\", else=\"No\") AS AllowSigned,\n        if(condition=allowdownloadsignedenabled, then=\"Yes\", else=\"No\") AS AllowDLSigned,\n        if(condition=loggingenabled, then=\"Yes\", else=\"No\") AS LoggingEnabled,\n        if(condition=stealthenabled, then=\"Yes\", else=\"No\") AS StealthEnabled,\n        version AS Version,\n        explicitauths.id AS ExplicitAuths,\n        firewall AS Applications\n      FROM plist(file=ALFGlob)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Network.Bluetooth","op":"set","definition":"name: Exchange.MacOS.Network.Bluetooth\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\ndescription: |\n  Collect information about connected or paired Bluetooth-enabled devices.\n\nparameters:\n  - name: BluetoothGlob\n    default: /Library/Bluetooth/Library/Preferences/com.apple.MobileBluetooth.devices.plist\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET BluetoothLocation = SELECT OSPath from glob(globs=BluetoothGlob)\n      LET BluetoothDevices = SELECT plist(file=OSPath) AS BD FROM BluetoothLocation\n      SELECT * from foreach(\n            row=BluetoothDevices,\n            query={\n               SELECT _value.Name AS Name,\n                      timestamp(epoch=_value.LastSeenTime) AS LastSeen,\n                      _value.DefaultName AS Description,\n                      base64decode(string=_value.DeviceClass) AS _DeviceClass,\n                      _value.DeviceIdProduct AS DeviceIDProduct,\n                      _value.DeviceIdVendor AS DeviceIdVendor,\n                      _value.DeviceIdVendorSource AS DeviceIdVendorSource,\n                      _value.DeviceIdVersion AS DeviceIdVersion,\n                      _value.SerialPort AS SerialPort,\n                      _value.ServiceRemote AS SerialRemote,\n                      _value.initiateSDPMirroringState AS SDPMirroring,\n                      _key AS MACAddress,\n                      _value.DevicePrimaryHash AS DevicePrimaryHash,\n                      _value AS _Value\n               FROM items(item=BD)\n          }\n      )\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Network.DHCP","op":"set","definition":"name: Exchange.MacOS.Network.DHCP\ndescription: |\n    It can be useful to view DHCP lease information on an endpoint.  If the  `LeaseLength`, `RouterIPAddress`, `SSID`, or other values are not as expected,  it could potentially indicate a rogue DHCP server on the network, or just misconfiguration.\n    \n    Either way, the information provided by this artifact can be used to help defenders find unexpected DHCP lease configuration.\nreference:\n  - https://attack.mitre.org/techniques/T1557/003/\ntype: CLIENT\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\nparameters:\n- name: LeaseGlob\n  default: /private/var/db/dhcpclient/leases/*.plist\n- name: UploadFiles\n  default: \n  type: bool \nprecondition:\n      SELECT OS From info() where OS = 'darwin'\nsources:\n  - query: |\n      LET LeaseList = SELECT Mtime, OSPath\n       FROM glob(globs=split(string=LeaseGlob, sep=\",\"))\n       \n      SELECT * FROM foreach(row=LeaseList,\n                            query={\n                                SELECT Mtime,\n                                       OSPath,\n                                       regex_replace(re='''.plist''', replace='', source=basename(path=OSPath)) AS Interface,\n                                       RouterIPAddress,\n                                       SSID,\t\n                                       ClientIdentifier AS _ClientIdentifier,\t\n                                       IPAddress,\t\n                                       LeaseLength,\t\n                                       LeaseStartDate,\t\n                                       PacketData AS _PacketData,\t\n                                       RouterHardwareAddress AS _RouterHardwareAddress,\n                                       OSPath AS _FullPath\n                                FROM plist(file=OSPath)})\n  - name: Upload\n    query: |\n        -- if configured upload DHCP lease files\n        SELECT * FROM if(condition=UploadFiles,\n            then={\n                SELECT\n                    upload(file=OSPath) as DHCPLeaseFile\n                FROM LeaseList\n            })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Network.LittleSnitch","op":"set","definition":"name: Exchange.MacOS.Network.LittleSnitch\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n   This is artifact parses Little Snitch's network traffic log.\n   \n   More information about Little Snitch can be found here:\n   https://www.obdev.at/products/littlesnitch/index.html\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: CSVGlob\n     default:\n   - name: ExecutableRegex\n     description: \"Filter on executable name\"\n     default: .\n     type: regex\n   - name: IPRegex\n     description: \"Filter on IP address\"\n     default: .\n     type: regex\n   - name: ParentRegex\n     description: \"Filter on parent exectuable\"\n     default: .\n     type: regex\n   - name: RemoteHostnameRegex\n     description: \"Filter on IP remote hostname\"\n     default: .\n     type: regex\n     \nsources:\n\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux' OR OS = 'darwin'\n\n    query: |\n      LET LittleSnitchLogs \u003c= SELECT FullPath FROM glob(globs=CSVGlob)\n      LET ProtocolTable \u003c= SELECT * from parse_csv(accessor=\"data\", filename='''\n        Number,ProtocolName\n        1,ICMP\n        6,TCP\n        17,UDP\n        ''')\n      SELECT * FROM foreach(row={ \n        SELECT\n            timestamp(string=date) AS Time,\n            direction AS Direction,\n            uid AS UID,\n            ipAddress AS `IP Address`,\n            remoteHostname AS `Remote Hostname`,\n            if(condition=ProtocolTable.ProtocolName[0], then=ProtocolTable.ProtocolName[0], else=protocol) AS Protocol,\n            port AS Port,\n            connectCount AS `Connect Count`,\n            denyCount AS `Deny Count`,\n            byteCountIn AS `Bytes In`,\n            byteCountOut AS `Bytes Out`,\n            connectingExecutable AS `Executable`,\n            parentAppExecutable AS `Parent`\n        FROM parse_csv(filename=LittleSnitchLogs.FullPath)})\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Network.RecentWifiNetworks","op":"set","definition":"name: Exchange.MacOS.Network.RecentWifiNetworks\n\ndescription: \n    This artifact looks for recent Wifi networks to which a host has joined. This can be useful in determining where a machine has been, or if a user has joined an illegitimate or unauthorized wireless network.\n    \n    *Tested on macOS Monterey\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\nparameters:\n  - name: RecentWifiNetworksGlob\n    default: /Library/Logs/com.apple.wifi.recent-networks.json\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET RecentNetworksLocation = SELECT OSPath from glob(globs=RecentWifiNetworksGlob)\n      LET RecentNetworks = SELECT parse_json(data=read_file(filename=OSPath)) AS RN FROM RecentNetworksLocation\n      LET EachNetwork = SELECT * from foreach(\n            row=RecentNetworks,\n            query={\n               SELECT _key AS Network, _value AS Value\n               FROM items(item=RN)\n          }\n      )\n      SELECT Network AS Network,\n            base64decode(string=Value.SSID) AS SSID,\n             Value.AddReason AS AddReason,\n             Value.AddedAt AS AddedAt,\n             Value.UpdatedAt AS UpdatedAt,\n             Value.JoinedByUserAt AS JoinedByUserAt,\n             Value.JoinedBySystemAt AS JoinedBySystemAt,\n             Value.SupportedSecurityTypes AS SupportedSecurityTypes,\n             Value.Hidden AS Hidden,\n             Value.SystemMode AS SystemMode,\n             Value.CaptiveProfile.CaptiveNetwork AS CaptiveNetwork,\n             Value.__OSSpecific__.ChannelHistory AS ChannelHistory,\n             Value.__OSSpecific__.CollocatedGroup AS _CollocatedGroup,\n             Value.PasspointSPRoamingEnabled AS _PasspointSPRoamingEnabled,\n             Value AS _Data\n      FROM EachNetwork\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.ParallelsVM.SuspendedMemory","op":"set","definition":"name: Exchange.MacOS.ParallelsVM.SuspendedMemory\ndescription: |\n   Looks for suspended Parallels VM owned by any user on a MacOS system. Can automatically upload the virtual memory files if found.\n   \n   If a \"*.mem.sh\" file exists, that VM is running and not suspended.\n   \n   **NOTE:** Uploading the Parallels memory file can take a while due to the size.\n\ntype: CLIENT\n\nauthor: Brady Semm - @btsemm\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\nparameters:\n  - name: ParallelsMemoryPath\n    default: \"/Users/*/Parallels/*.pvm/{*.mem,*.mem.sh}\"\n  - name: UploadFiles\n    type: bool\n\nsources:\n  - name: ParallelsMemoryFiles\n    query: |\n      LET ParallelsMemoryFiles \u003c= SELECT parse_string_with_regex(regex=\"/Users/(?P\u003cUser\u003e[^/]+)\", string=FullPath).User AS User,\n          parse_string_with_regex(regex=\"/Users/[^/]+/Parallels/(?P\u003cVMName\u003e[^\\.]+).pvm\", string=FullPath).VMName AS VMName,\n          FullPath, File, Mtime, Size\n          FROM glob(globs=ParallelsMemoryPath)\n          \n      SELECT User, VMName, Mtime, Size, FullPath\n      FROM ParallelsMemoryFiles\n      \n  - name: Uploads\n    query: |\n      SELECT * FROM if(condition=UploadFiles,\n        then={\n            SELECT FullPath, User, VMName, Mtime,\n               upload(file=FullPath) as FileDetails\n            FROM ParallelsMemoryFiles\n            WHERE FullPath =~ \".*\\.mem$\"\n        })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Windows.Hayabusa.Monitoring","op":"set","definition":"name: Windows.Hayabusa.Monitoring\ndescription: |\n  This artifact compiles the Hayabusa rulese into a Velociraptor\n  artifact using the internal Velociraptor sigma engine.\n\n  To read more about this artifact see\n  https://sigma.velocidex.com/docs/artifacts/velociraptor_hayabusa_ruleset/\n\n  This artifact was built on 2025-08-19T21:35:39Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      Proc Exec,Fires on every Process Execution EID 1\n      File Created,Fires on every Sysmon EID 11\n      Reg Key Value Set,Fires on every Sysmon EID 13\n      DNS Query,Fires on every Sysmon EID 22\n      Proc Terminated$,Fires on every Sysmon EID 5\n      Proc Injection$,Fires on every Sysmon EID 8\n      Reg Key Create/Delete,Fires on every Sysmon EID 12\n      WMI Provider Started,Fires on every Microsoft-Windows-WMI-Activity/Operational EID 5857\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is 10 Min).\n    default: \"600\"\n\n  - name: EVTX_FREQUENCY\n    type: int\n    default: 60\n    description: |\n      How often in seconds to check for event log changes. Lower\n      number means more real time detection but potentially higher\n      CPU utilization.\nimports:\n  - Windows.Sigma.BaseEvents\nexport: |\n  LET Rules \u003c= gunzip(string=base64decode(string=\"\"))\nsources:\n- query: |\n    SELECT *\n    FROM Artifact.Windows.Sigma.BaseEvents(\n       ROOT=ROOT, RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, RuleExclusions=RuleExclusions,\n       SigmaRules=Rules, NTFS_CACHE_TIME=NTFS_CACHE_TIME)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Sys.Automator","op":"set","definition":"name: Exchange.MacOS.Sys.Automator\ndescription: |\n  This artifact collects information about Automator actions and workflows. \n  \n  It can be used to identify malicious actions inserted into common/default workflows, or non-standard workflows.\n  \nreference:\n  - https://support.apple.com/en-ae/guide/automator/welcome/mac\n  \ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\nprecondition: SELECT OS FROM info() WHERE OS =~ 'darwin'\n\nparameters:\n  - name: ActionGlob\n    default: /System/Library/Automator/*/Contents/Info.plist \n  - name: WorkflowGlob\n    default: /Library/Application Support/Apple/Automator/Workflows/*/Contents/*.wflow\n  - name: UploadActions\n    default: N\n    type: bool\n  - name: UploadWorkflows\n    default: N\n    type: bool\n    \nsources:\n  - name: Actions\n    query: \n      LET ActionLocation = SELECT * from glob(globs=ActionGlob)\n      LET Actions = SELECT OSPath, Mtime, Atime, Ctime, Btime, plist(file=OSPath) AS AMAction FROM ActionLocation\n      SELECT * from foreach(\n            row=Actions,\n            query={\n               SELECT Mtime AS Timestamp,\n                      get(field=\"AMName\") AS Name,\n                      get(field=\"AMApplication\") AS Application,\n                      get(field=\"AMIconName\") AS IconName,\n                      get(field=\"CFBundleExecutable\") AS ExecutableName,\n                      get(field=\"NSPrincipalClass\") AS PrincipalClass,\n                      get(field=\"CFBundleIdentifier\") AS BundleIdentifier,\n                      get(field=\"AMDefaultParameters\") AS DefaultParameters,\n                      get(field=\"NSHumanReadableCopyright\") AS Copyright,\n                      get(field=\"AMDescription\") AS Description,\n                      if(condition=UploadActions,\n                          then=upload(file=OSPath,\n                          mtime=Mtime,\n                          atime=Atime,\n                          ctime=Ctime,\n                          btime=Btime)) AS Upload,\n                      AMAction AS _Content\n               FROM AMAction\n          }\n      )\n     \n  - name: Workflows\n    query: |\n      LET WorkflowLocation = SELECT * from glob(globs=WorkflowGlob)\n      LET Workflows = SELECT OSPath, Mtime, Atime, Ctime, Btime, plist(file=OSPath) AS AMWorkflow FROM WorkflowLocation\n      SELECT * from foreach(\n            row=Workflows,\n            query={\n               SELECT\n                    Mtime AS Timestamp, \n                    OSPath AS Name,\n                    get(member=\"actions.action.ActionName\") AS Actions, \n                    get(field=\"state\") AS State,\n                    get(field=\"WorkflowIsShared\") AS Shared,\n                    get(field=\"workflowMetaData\") AS WorkflowMetadata,\n                    get(field=\"connectors\") AS Connectors,\n                    if(condition=UploadWorkflows,\n                          then=upload(file=OSPath,\n                          mtime=Mtime,\n                          atime=Atime,\n                          ctime=Ctime,\n                          btime=Btime)) AS Upload,\n                    AMWorkflow AS _Content\n               FROM AMWorkflow\n          }\n      )\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.Sys.BashHistory","op":"set","definition":"name: Exchange.MacOS.Sys.BashHistory\nauthor: Wes Lambert - @therealwlambert\ndescription: |\n  This artifact is a modified version of the Linux.Sys.BashHistory artifact that enables grep of Bash and alternate shell history and *session* files.\n\n  Session files can be helpful in determining an approximate timeframe in which certain commands were run (the session start/end time), as traditional history files do not provide this information. \n  \n  http://www.swiftforensics.com/2018/05/bash-sessions-in-macos.html\n\n  This artifact can also be used to target other files located in the user profile such as\n  *_profile and *rc files.\n  shell history: /{root,home/*}/.*_history\n  profile: /{root,home/*}/.*_profile\n  *rc file: /{root,home/*}/.*rc\n\n  tags: .bash_history .bash_profile .bashrc\n\nreference:\n  - http://www.swiftforensics.com/2018/05/bash-sessions-in-macos.html\n\nparameters:\n  - name: HistoryGlob\n    default: /Users/*/.*_history\n  - name: SessionsGlob\n    default: /Users/*/.{bash,zsh}_sessions/*.history\n  - name: SearchRegex\n    type: regex\n    description: \"Regex of strings to search in line.\"\n    default: '.'\n  - name: WhitelistRegex\n    type: regex\n    description: \"Regex of strings to leave out of output.\"\n    default:\n\nsources:\n  - name: History\n    query: |\n      SELECT * FROM Artifact.Linux.Sys.BashHistory(TargetGlob=HistoryGlob,SearchRegex=SearchRegex,WhitelistRegex=WhitelistRegex)\n          \n  - name: Sessions\n    query: |\n      LET files = SELECT FullPath, Btime FROM glob(globs=SessionsGlob)\n      SELECT * FROM foreach(row=files,\n        query={\n          SELECT Line,\n            {SELECT Btime FROM glob(globs=FullPath + 'new')} AS SessionStarted, \n            Btime AS SessionEnded,\n            timestamp(\n              string=grok(\n                data=read_file(\n                  filename=split(\n                    string=FullPath, \n                    sep='''\\.history''')[0] + '.session'), grok='''echo Restored session: \"\\$\\(/bin/date -r %{DATA:date}\\)\"''').date) AS SessionResumed,\n            FullPath \n          FROM parse_lines(filename=FullPath)\n          WHERE Line =~ SearchRegex \n          AND NOT if(condition= WhitelistRegex, then= Line =~ WhitelistRegex, else= FALSE)\n        })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.System.LocationServices","op":"set","definition":"name: Exchange.MacOS.System.LocationServices\ndescription: |\n   This artifact looks for applications that are registered and allowed for use of location services by checking the plist file in `/var/db/locationd/clients.plist`.  \n   This can be useful to help determine if these settings have been modified by an attacker to perform location tracking.\n   \n   For more information about how location services could be abused, see the following:\n   \n   https://medium.com/@slyd0g/where-in-the-world-is-carmen-sandiego-abusing-location-services-on-macos-10e9f4eefb71\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert\n\nparameters:\n  - name: LocationPath\n    default: /var/db/locationd/clients.plist\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET LocGlob \u003c= SELECT FullPath FROM glob(globs=LocationPath)\n      LET LocationPlist = SELECT * FROM plist(file=LocGlob.FullPath)\n      LET SepApps = SELECT * FROM foreach(row={SELECT _value AS Apps FROM items(item=LocationPlist)}, query={SELECT _value AS App FROM items(item=Apps)})\n      SELECT\n        App.BundleId AS BundleId,\n        App.BundlePath As BundlePath,\n        App.Whitelisted AS Whitelisted,\n        App.Authorized AS Authorized,\n        App.Hide AS Hide,\n        App.Registered As Registered,\n        App.Requirement AS Requirement,\n        App AS _Data\n      FROM SepApps\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.System.Man","op":"set","definition":"name: Exchange.MacOS.System.Man\n\ntype: CLIENT\n\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\n\ndescription: |\n    `man` is typically used to provide information about how to use various commands. It's configuration file is located at `/private/etc/man.conf` on most macOS systems.\n    \n    While root access is required to do so, this configuration could be modified by an adversary to stealthily achieve persistence in an environment. \n    \n    This artifact collects any entries in `man.conf` which appear to specify a non-default binary for use with `man` or `whatis`.\n\nreference:\n  - https://theevilbit.github.io/beyond/beyond_0030\n  - https://www.youtube.com/watch?v=teq6r7XbBug\n\nparameters:\n  - name: ManGlob\n    default: /private/etc/man.conf\n    description: Default file path for `man` configuration.\n\nprecondition:\n      SELECT OS From info() where OS = 'darwin'\n\nsources:\n  - query: |\n      LET ManList = SELECT OSPath, Mtime FROM glob(globs=split(string=ManGlob, sep=\",\"))\n      SELECT * FROM foreach(\n        row=ManList, \n        query={ \n            SELECT \n                OSPath, \n                Mtime, \n                Line \n            FROM parse_lines(filename=OSPath) \n      WHERE Line =~ '^(MAN|WHATIS||)PAGER' \n      AND NOT Line =~ \"/usr/bin/less|/usr/bin/more\" })\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.System.MountedDiskImages","op":"set","definition":"name: Exchange.MacOS.System.MountedDiskImages\ndescription: |\n    This artifact checks for mounted disk images using the `hdiutil` command.\nauthor: Wes Lambert -- @therealwlambert|@weslambert@infosec.exchange\nrequired_permissions:\n  - EXECVE\nsources:\n    - query: |\n        LET MountedDMGs \u003c= SELECT * FROM execve(argv=['/usr/bin/hdiutil', 'info', '-plist'])\n        SELECT _value.`image-path` AS Image,\n               _value.`system-entities`.`mount-point`[0] AS MountPoint,\n               _value AS ImageDetails\n        FROM items(item=plist(accessor=\"data\", file=MountedDMGs.Stdout).images)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.UnifiedLogHunter","op":"set","definition":"name: Exchange.MacOS.UnifiedLogHunter\ndescription: |\n        This artifact allows for live hunting through Apple's Unified Logs using the native `log` command.\n\n        The Unified Logs can be a great resource for learning about system events. There are many logging subsystems that can provide a wealth of data for investigators.\n\n        However, users should ensure their searches are scoped appropriately (date/time/event type/etc), as a lot of data can be returned, which could affect the ability to review the collected data or potentially impact client performance.\n\n        The `Predicate` parameter can be used to filter logs. Example filters are included as artifact parameters.\n\n        Users may need to adjust the `Length` parameter to accomodate a large number of events being returned.\n\n        If you would like to perform an offline collection, or only care about collecting the raw files associated with this data, consider using [Exchange.MacOS.UnifiedLogParser](https://docs.velociraptor.app/exchange/artifacts/pages/macos.unifiedlogparser/).\nreference:\n  - https://github.com/jamf/jamfprotect/tree/main/unified_log_filters\n  - https://www.mandiant.com/resources/blog/reviewing-macos-unified-logs\n  - https://skartek.dev/2022/05/04/unified-logging-for-macos-an-introduction/\n  - https://www.crowdstrike.com/blog/how-to-leverage-apple-unified-log-for-incident-response/\n  - https://devstreaming-cdn.apple.com/videos/wwdc/2016/721wh2etddp4ghxhpcg/721/721_unified_logging_and_activity_tracing.pdf\ntype: CLIENT\nauthor: Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\nparameters:\n  - name: StartDate\n    type: timestamp\n  - name: EndDate\n    default:\n    type: timestamp\n  - name: Predicate\n    description: Use a custom filter\n    default:\n    type: string\n  - name: RunAllQueries\n    description: Run all preconfigured filters.  You may need to increase the default timeout of 600s.\n    type: bool\n  - name: Configuration Profile - Manual Install\n    description: Look for manual install of a configuration profile\n    type: bool\n  - name: Configuration Profile - Manual Removal\n    description: Look for anual removal of a configuration profile\n    type: bool\n  - name: DNS configuration changes\n    description: Look for modifications made to host DNS settings\n    type: bool\n  - name: Failed Lock Screen Unlock\n    description: Look for failures to unlock the lock screen\n    type: bool\n  - name: Failed Local Password Login\n    description: Look for failures for local logins using a password\n    type: bool\n  - name: Successful Local Password Login\n    description: Look for successful logins using a password\n    type: bool\n  - name: Failed Local TouchID Login\n    description: Look for local TouchID logins\n    type: bool\n  - name: Failed sudo access\n    description: Look for failed usage of 'sudo'\n    type: bool\n  - name: Gatekeeper File Access Rejections and User Bypasses\n    description: Look for Gatekeeper file access rejections and user bypasses\n    type: bool\n  - name: Gatekeeper File Access Scan Activity\n    description: Look for Gatekeeper file access scan activity\n    type: bool\n  - name: Inbound screen sharing\n    description: Look for inbound screen sharing\n    type: bool\n  - name: Kernel Extension Additions\n    description: Look for changes made to kernel extensions\n    type: bool\n  - name: Keychain DB Unlock\n    description: Look for keychain database unlock attempts\n    type: bool\n  - name: Permissions and Access Violations\n    description: Looks for TCC permisssions and access violations\n    type: bool\n  - name: Session Creation and Destruction\n    description: Looks for session creation and Destruction\n    type: bool\n  - name: SSH Login Activity\n    description: Look for SSH login failures and successes\n    type: bool\n  - name: Successful Local TouchID Login\n    description: Look for successful TouchID logins\n    type: bool\n  - name: Sudo access\n    type: bool\n    description: Look for general 'sudo' usage\n  - name: MDM Profile - Manual Removal\n    type: bool\n    description: Look for the removal of MDM profiles\n  - name: Network server connection attempts inbound\n    type: bool\n    description: Look for inbound network connection attempts\n  - name: Root user enabled or password changed\n    type: bool\n    description: Look for changes to the root user configuration\n  - name: XProtect Remediator scanning activity\n    type: bool\n    description: Look for XProtect scanning activity\n  - name: Length\n    type: int\n    default: 10000000\nrequired_permissions:\n  - EXECVE\nprecondition: SELECT OS From info() where OS = 'darwin' AND StartDate AND EndDate\nsources:\n  - query: |\n      LET QueryTable = SELECT * FROM parse_csv(accessor=\"data\", filename='''\n            QueryName,Q\n            Airdrop Transfer Outbound,subsystem == \"com.apple.sharing\" AND process == \"AirDrop\" AND processImagePath BEGINSWITH \"/System/Library\" AND eventMessage BEGINSWITH \"Successfully issued sandbox extension for\"\n            Application Firewall Logging,subsystem == \"com.apple.alf\"\n            Configuration Profile - Manual Install,subsystem == \"com.apple.ManagedClient\" AND process == \"mdmclient\" AND category == \"MDMDaemon\" and eventMessage CONTAINS \"Installed configuration profile:\" AND eventMessage CONTAINS \"Source: Manual\"\n            Configuration Profile - Manual Removal,subsystem == \"com.apple.ManagedClient\" AND process == \"mdmclient\" AND category == \"MDMDaemon\" and eventMessage CONTAINS \"Removed configuration profile:\" AND eventMessage CONTAINS \"Source: Manual\"\n            DNS configuration changes,subsystem == \"com.apple.networkextension\" and process == \"nehelper\" and eventMessage CONTAINS \"DNS settings are enabled\" OR subsystem == \"com.apple.networkextension\" and process == \"nesessionmanager\" and eventMessage contains \"status changed to disconnected, last stop reason Configuration was disabled\"'\n            Gatekeeper File Access Rejections and User Bypasses,subsystem == \"com.apple.launchservices\" AND process == \"CoreServicesUIAgent\" AND category == \"uiagent\" AND (eventMessage BEGINSWITH \"Saving rejection record:\" OR eventMessage CONTAINS \"Gatekeeper rejection record\")\n            Gatekeeper File Access Scan Activity,subsystem == \"com.apple.syspolicy.exec\" AND process == \"syspolicyd\" AND category == \"default\"\n            Failed Lock Screen Unlock,processImagePath BEGINSWITH \"/System/Library/CoreServices\" AND process == \"loginwindow\" AND eventMessage CONTAINS[c] \"INCORRECT\"\n            Failed Local Password Login,processImagePath BEGINSWITH \"/System/\" AND process == \"SecurityAgent\" AND subsystem == \"com.apple.loginwindow\" AND eventMessage CONTAINS \"Authentication failure\"\n            Failed Local TouchID Login,process == \"loginwindow\" AND eventMessage CONTAINS[c] \"APEventTouchIDNoMatch\"\n            Failed Local User Password Change,subsystem == \"com.apple.opendirectoryd\" AND process == \"opendirectoryd\" AND category == \"auth\" AND eventMessage CONTAINS \"Failed to change password\"\n            Failed sudo access,process == \"sudo\" AND eventMessage CONTAINS[c] \"TTY\" AND eventMessage CONTAINS[c] \"3 incorrect password attempts\"\n            Inbound screen sharing,process == \"screensharingd\" AND eventMessage BEGINSWITH \"Authentication: \"\n            Kernel Extension Additions,process == \"kextd\" \u0026\u0026 sender == \"IOKit\"\n            Keychain DB Unlock,process == \"loginwindow\" \u0026\u0026 sender == \"Security\"\n            MDM Profile - Manual Removal,subsystem == \"com.apple.ManagedClient\" AND eventMessage CONTAINS \"Removed configuration profile: MDM Profile\" AND eventMessage CONTAINS \"Source: Manual\"\n            Network server connection attempts inbound,process == \"NetAuthSysAgent\" AND subsystem == \"com.apple.NetAuthAgent\" AND category == \"IPC\" AND eventMessage BEGINSWITH \"URL = \"\n            Permissions and Access Violations,process == \"tccd\"\n            Root user enabled or password changed,processImagePath == \"/usr/libexec/opendirectoryd\" AND process == \"opendirectoryd\" AND subsystem == \"com.apple.opendirectoryd\" AND eventMessage CONTAINS \"Password changed for root\"\n            Session Creation and Destruction,process == \"securityd\" \u0026\u0026 eventMessage CONTAINS \"Session\"  \u0026\u0026 subsystem == \"com.apple.securityd\"\n            SSH Login Activity,process == \"sshd\"\n            Successful Local Password Login,processImagePath BEGINSWITH \"/System/Library/CoreServices\" AND process == \"loginwindow\" AND subsystem == \"com.apple.loginwindow.logging\" AND eventMessage CONTAINS \"[Login1 doLogin] | shortUsername\"\n            Successful Local TouchID Login,process == \"loginwindow\" AND eventMessage CONTAINS[c] \"APEventTouchIDMatch\"\n            Successful Local User Password Change,subsystem == \"com.apple.opendirectoryd\" AND process == \"opendirectoryd\" AND category == \"auth\" AND eventMessage CONTAINS \"Password changed for\"\n            XProtect Remediator scanning activity,subsystem == \"com.apple.XProtectFramework.PluginAPI\" \u0026\u0026 category == \"XPEvent.structured\"''')\n\n      LET QueriesToRun \u003c= SELECT Q FROM QueryTable WHERE if(condition=RunAllQueries, then=QueryName, else=get(field=QueryName))\n\n      LET Raw \u003c= SELECT * FROM foreach(row={ SELECT * FROM chain( a=QueriesToRun, b=if(condition=Predicate, then={ SELECT Predicate AS Q FROM scope()}))},\n                                       query={ SELECT Stdout FROM execve(\n                   length=Length,\n                   argv=[\n                     \"log\",\n                     \"show\",\n                     \"--start\",\n                     grok(grok=\"%{TIMESTAMP_ISO8601:Date}\", data=StartDate).Date,\n                     \"--end\",\n                     grok(grok=\"%{TIMESTAMP_ISO8601:Date}\", data=EndDate).Date,\n                     \"--predicate\",\n                     Q,\n                     \"--style\",\n                     \"json\"])}, async=TRUE) WHERE NOT Stdout = \"[]\"\n      SELECT\n        timestamp(string=get(member=\"timestamp\")) AS EventTime,\n        get(member=\"machTimestamp\") AS _TimeSinceBoot,\n        get(member=\"traceID\") AS _TraceID,\n        get(member=\"eventMessage\") AS EventMessage,\n        get(member=\"eventType\") AS EventType,\n        get(member=\"messageType\") AS MessageType,\n        get(member=\"category\") AS Category,\n        get(member=\"subsystem\") AS Subsystem,\n        get(member=\"processID\") AS PID,\n        get(member=\"processImagePath\") AS ProcessImagePath,\n        get(member=\"processImageUUID\") AS ProcessImageUUID,\n        get(member=\"senderImagePath\") AS SenderImagePath,\n        get(member=\"senderImageUUID\") AS SenderImageUUID,\n        get(member=\"senderProgramCounter\") AS SenderProgramCounter,\n        get(member=\"source\") AS _Source,\n        get(member=\"formatString\") AS _FormatString,\n        get(member=\"activityIdentifier\") AS ActivityID,\n        get(member=\"parentActivityIdentifier\") AS ParentActivityID,\n        get(member=\"threadID\") AS _ThreadID,\n        get(member=\"backtrace\") AS _Backtrace,\n        get(member=\"bootUUID\") AS _BootUUID,\n        get(member=\"timezoneName\") AS _TimezoneName\n      FROM foreach(row=Raw.Stdout, query={SELECT * FROM parse_json_array(data=_value)})\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.MacOS.UnifiedLogParser","op":"set","definition":"name: Exchange.MacOS.UnifiedLogParser\ndescription: |\n\n  This is a simple, un-optimized artifact that leverages Mandiant's `macos-unifiedlogs`/`unifiedlog_parser` to obtain parsed log information from macOS's Unified Log.\n\n  From the project's description:\n  \n  A simple Rust library that can help parse the macOS Unified Log files.\n\n  Unified Logs were introduced in macOS version 10.12 (Sierra, 2016). Part of Apple's goal to create a unified log format for all Apple products. They exist on macOS, iOS, watchOS, tvOS. The Unified Logs replace many of the old log formats Apple used. This simple library can be used to parse files.\n\n  Additional information: https://github.com/mandiant/macos-UnifiedLogs\n\nauthor: Wes Lambert - @therealwlambert\n\nreference:\n - https://www.mandiant.com/resources/blog/reviewing-macos-unified-logs\n\nrequired_permissions:\n  - EXECVE\n\nprecondition: SELECT OS From info() where OS = 'darwin'\n\ntools:\n  - name: UnifiedLogParser\n    url: https://github.com/mandiant/macos-UnifiedLogs/releases/download/v1.0.0/unifiedlog_parser\n\nsources:\n  - query: |\n      LET ULP \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"UnifiedLogParser\")\n      LET RunULP \u003c= SELECT * FROM execve(argv=[\"./\" + basename(path=ULP.FullPath[0])], cwd=dirname(path=ULP.FullPath[0]))\n      SELECT * FROM parse_csv(accessor=\"file\", filename=dirname(path=ULP.FullPath[0]) + \"/output.csv\")\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Windows.Applications.OfficeMacros.MacroRaptor","op":"set","definition":"name: Exchange.Windows.Applications.OfficeMacros.MacroRaptor\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact implements OleTools MacroRaptor capability in VQL.\n  \n  Use as a Hunt or triage capability.\n\nreference:\n  - http://www.decalage.info/mraptor\n  - https://github.com/decalage2/oletools/wiki/mraptor\n  \nparameters:\n  - name: TargetGlob\n    default: \"C:\\\\Users\\\\**\\\\*.{doc,dot,docx,docm,dotx,dotm,docb,xls,xlt,xlm,xlsx,xlsm,xltx,xltm,xlsb,ppt,pptx,pptm,potx,potm}\"\n    description: The directory to search for office documents.\n  - name: ShowAllDetections\n    type: bool\n    description: If selected return both Suspicious and non-suspicious.\n  - name: UploadDocument\n    type: bool\n    description: \"Upload documents. WARNING: Advised to not use with ShowAllDetections True as this may upload multiple versions of the same document.\"\n  - name: AutoExecRegex\n    default: \"\\\\b(?:Auto(?:Exec|_?Open|_?Close|Exit|New)|Document(?:_?Open|_Close|_?BeforeClose|Change|_New)|NewDocument|Workbook(?:_Open|_Activate|_Close|_BeforeClose)|\\\\w+_(?:Painted|Painting|GotFocus|LostFocus|MouseHover|Layout|Click|Change|Resize|BeforeNavigate2|BeforeScriptExecute|DocumentComplete|DownloadBegin|DownloadComplete|FileDownload|NavigateComplete2|NavigateError|ProgressChange|PropertyChange|SetSecureLockIcon|StatusTextChange|TitleChange|MouseMove|MouseEnter|MouseLeave|OnConnecting))|Auto_Ope\\\\b\"\n  - name: WriteRegex\n    default: \"\\\\b(?:FileCopy|CopyFile|Kill|CreateTextFile|VirtualAlloc|RtlMoveMemory|URLDownloadToFileA?|AltStartupPath|WriteProcessMemory|ADODB\\\\.Stream|WriteText|SaveToFile|SaveAs|SaveAsRTF|FileSaveAs|MkDir|RmDir|SaveSetting|SetAttr)\\\\b|(?:\\\\bOpen\\\\b[^\\\\n]+\\\\b(?:Write|Append|Binary|Output|Random)\\\\b)\"\n  - name: ExecRegex\n    default: \"\\\\b(?:Shell|CreateObject|GetObject|SendKeys|RUN|CALL|MacScript|FollowHyperlink|CreateThread|ShellExecuteA?|ExecuteExcel4Macro|EXEC|REGISTER|SetTimer)\\\\b|(?:\\\\bDeclare\\\\b[^\\\\n]+\\\\bLib\\\\b)\"\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- firstly match regex for macro code of interest\n      LET macros = SELECT * FROM foreach(\n            row={\n                SELECT OSPath,Name,Size,Mtime,Atime,Ctime,Btime FROM glob(globs=TargetGlob)\n            },\n            query={\n                SELECT \n                    OSPath,Name,Size,\n                    dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as Timestamps,\n                    dict(\n                        AutoExec = if(condition= Code=~AutoExecRegex,\n                                then= True,\n                                else= False),\n                        Write = if(condition= Code=~WriteRegex,\n                                then= True,\n                                else= False),\n                        Execute = if(condition= Code=~ExecRegex,\n                                then= True,\n                                else= False)\n                            ) as MacroDetection,\n                    dict(Type=Type,StreamName=StreamName,ModuleName=ModuleName,Code=Code) as MacroCode\n                FROM olevba(file=OSPath)\n                WHERE Code =~ AutoExecRegex OR Code =~ WriteRegex OR Code=~ ExecRegex\n            })\n      \n      -- determine if suspicious\n      LET results = SELECT \n            OSPath,Name,Size,Timestamps,\n            if(condition= MacroDetection.AutoExec AND ( MacroDetection.Write OR MacroDetection.Execute ),\n                then = True,\n                else= False ) as Suspicious,\n            MacroDetection,\n            MacroCode\n        FROM macros\n        WHERE if(condition= ShowAllDetections,\n            then= True,\n            else= Suspicious)\n        \n      -- upload hits to server\n      LET upload_results = SELECT *, upload(file=OSPath) as Upload\n        FROM results\n\n      -- output rows\n      SELECT *,\n        hash(path=OSPath) as Hash\n      FROM if(condition= UploadDocument,\n            then= { SELECT * FROM upload_results},\n            else= { SELECT * FROM results})\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Windows.Detection.MagicWeb","op":"set","definition":"name: Exchange.Windows.Detection.MagicWeb\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will find evidence of NOBELIUM’s MagicWeb.\n   \n   The artifact consists of two checks:\n   \n   1. Search for non default PublicKeyToken references in the \n   Microsoft.IdentityServer.Servicehost.exe.config file (31bf3856ad364e35 default).  \n   2. Search for untrusted authenticode Microsoft.IdentityServer.*.dll files\n\nreference:\n   - https://www.microsoft.com/security/blog/2022/08/24/magicweb-nobeliums-post-compromise-trick-to-authenticate-as-anyone/\n\nparameters:\n   - name: ConfigFileGlob\n     default: C:\\Windows\\{AD FS,ADFS}\\Microsoft.IdentityServer.Servicehost.exe.config\n     description: File names to target\n   - name: ExcludeToken\n     default: ^31bf3856ad364e35$\n     type: regex\n     description: Legit tokens to exclude from results\n   - name: TargetDllGlob\n     default: 'C:\\Windows\\Microsoft.NET\\assembly\\**\\Microsoft.IdentityServer.*.dll'\n   - name: UploadHits\n     description: select to upload file hits\n     type: bool\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' \n    query: |\n      LET targets = SELECT OSPath,Size,Mtime,Atime,Ctime,Btime\n        FROM glob(globs=ConfigFileGlob)\n\n      LET hits = SELECT * FROM foreach(row=targets,\n        query={\n          SELECT \n            OSPath,Size,\n            dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as Timestamps,\n            PublicKeyToken,\n            read_file(filename=OSPath) as Data\n          FROM  parse_records_with_regex(file=OSPath,regex='PublicKeyToken=(?P\u003cPublicKeyToken\u003e[^,]+),')\n          WHERE NOT PublicKeyToken =~ ExcludeToken\n          GROUP BY OSPath, PublicKeyToken\n        })\n\n      LET upload_hits = SELECT *, upload(file=OSPath) as Upload FROM hits\n        \n      SELECT *\n      FROM if(condition=UploadHits,\n        then= upload_hits,\n        else= hits )\n\n  - name: BinaryPayload\n    description: Searches for untrusted Microsoft.IdentityServer dll files\n    query: |\n      LET binaries = SELECT \n            OSPath,Size,\n            authenticode(filename=OSPath).Trusted as Authenticode,\n            dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as Timestamps,\n            parse_pe(file=OSPath) as PE,\n            hash(path=OSPath) as Hash\n        FROM glob(globs=TargetDllGlob)\n        WHERE Authenticode =~ 'untrusted'\n\n      LET upload_binaries = SELECT *, upload(file=OSPath) as Upload FROM binaries\n        \n      SELECT *\n      FROM if(condition=UploadHits,\n        then= upload_binaries,\n        else= binaries )\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Generic.Detection.ManageEngineLog","op":"set","definition":"name: Exchange.Generic.Detection.ManageEngineLog\nauthor: Matt Green - @mgreen27, Jason Frost - @jaysonfrost2\ndescription: |\n   This artifact will enable discovery of logs associated with observed exploitation \n   of critical ManageEngine vulnerability: CVE-2022-47966.\n   \n   The artifact leverages Yara.Glob to scan ManageEngine logs and is cross \n   platform.\n\n\ntype: CLIENT\n\nparameters:\n   - name: TargetLogGlob\n     default: \"**/{ServiceDesk/logs,logs3PM}/serverout*.txt\"\n   - name: YaraRule\n     default: |\n        rule LOG_EXPL_ManageEngine_CVE_2022_47966_Jan23 {\n           meta:\n              description = \"Detects Exploitation of Critical ManageEngine Vulnerability: CVE-2022-47966\"\n              author = \"Matt Green - @mgreen27\"\n              reference = \"https://www.rapid7.com/blog/post/2023/01/19/etr-cve-2022-47966-rapid7-observed-exploitation-of-critical-manageengine-vulnerability/\"\n              date = \"2023-01-20\"\n           strings:\n             $s1 = \"com.adventnet.authentication.saml.SamlException: Signature validation failed. SAML Response rejected\" \n\n             $re1 = /invalid_response --\u003e .{20,}/s  //Logging typically contains this string followed by Base64 \u003csamlp:Response Version=\n             \n             $ip1 = \"111.68.7.122\"\n             $ip2 = \"149.28.193.216\"\n             $ip3 = \"172.93.193.64\"\n             \n            condition:\n              any of them\n        }\n   - name: Context\n     default: 200\n     description: Amount of ContextBytes to include on each hit.\n   - name: NumberOfHits\n     default: 9999\n     description: Maximum number of hits to return\n   - name: UploadHits\n     type: bool\n     description: Upload each file with a hit.\n        \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux' OR OS = 'darwin'\n\n    query: |\n      SELECT * FROM Artifact.Generic.Detection.Yara.Glob(\n                                        PathGlob=TargetLogGlob,\n                                        YaraRule=YaraRule,\n                                        ContextBytes=Context,\n                                        NumberOfHits=9999,\n                                        UploadHits=UploadHits)\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.MoveIt","op":"set","definition":"name:  Exchange.Windows.EventLogs.MoveIt\nauthor: Rapid7 team -  Ted Samuels, @mgreen27 \u0026 @scudette\ndescription: |\n  This Artifact enables scoping EventLogs from Progress Software's MoveIT File\n  Transfer. It is designed to assist in identifying exfiltration resulting from\n  the exploitation of CVE-2023-34362\n\n  This artifact parses EvtxHunter output and returns a set of fields in results.\n  An unparsed data field is availible in the hidden _RawData field.\n\n  There are several parameter's available for search leveraging regex.\n\n    - EvtxGlob glob of EventLogs to target. Default to MoveIt.evtx but can be targeted.\n    - dateAfter enables search for events after this date.\n    - dateBefore enables search for events before this date.\n    - IocRegex enables regex search over the message field.\n    - IgnoreRegex enables a regex whitelist for the Message field.\n    - IdRegex enables a regex query to select specific event Ids.\n    - VSSAnalysisAge enables searching over VSS.\n\n  NOTE: MoveIT event logging may not be turned on by default.\n\nreference:\n    - https://www.rapid7.com/blog/post/2023/06/01/rapid7-observed-exploitation-of-critical-moveit-transfer-vulnerability/\n    - https://www.huntress.com/blog/moveit-transfer-critical-vulnerability-rapid-respons\n    - https://www.mandiant.com/resources/blog/zero-day-moveit-data-theft\n    - https://nvd.nist.gov/vuln/detail/CVE-2023-34362\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: EvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\MOVEit.evtx'\n  - name: IocRegex\n    type: regex\n    description: \"IOC Regex\"\n    default:\n  - name: IgnoreRegex\n    description: \"Regex of string to witelist\"\n    type: regex\n  - name: IdRegex\n    default: .\n    type: regex\n  - name: VSSAnalysisAge\n    type: int\n    default: 0\n    description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n\nsources:\n  - query: |\n      LET Parse(X) = to_dict(\n        item={\n           SELECT split(sep=\":\", string=Column0)[0] AS _key,\n                  regex_replace(re=\"^\\\\s+|\\\\s+$\", replace=\"\", source=split(sep=\":\", string=Column0)[1]) AS _value\n           FROM split_records(accessor=\"data\", filenames=X, regex=\"\\r\\n\")\n           WHERE Column0 =~ \"^[a-zA-Z0-9]+:\"\n        }) +  parse_string_with_regex(regex=\"User '(?P\u003cUser\u003e[^']+)'\", string=X)\n\n      SELECT EventTime,Computer,Channel,Provider,EventID,EventRecordID,\n        Parse(X=split(string=EventData.Data[0],sep=\"\\r\\n\\r\\n\")[1]) as EventData,\n        split(string=EventData.Data[0],sep=\"\\r\\n\\r\\n\")[0] as Message,\n        FullPath,\n        EventData.Data[0] as _RawData\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n                        EvtxGlob=EvtxGlob,\n                        IocRegex=IocRegex,\n                        IdRegex=IdRegex,\n                        WhitelistRegex=IgnoreRegex,\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore,\n                        VSSAnalysisAge=VSSAnalysisAge )\n","id":78560752944729352,"_ts":1757377135}
{"setter":"api","artifact":"Exchange.Windows.Detection.MoveIt","op":"set","definition":"name: Exchange.Windows.Detection.MoveIt\nauthor: Matt Green - @mgreen27\ndescription: | \n   This is an artifact to detect exploitation of a MoveIt critical vulnerability \n   observed in the wild. CVE-2023-34362\n   \n   The artifact enables detection via:\n   \n   - Yara: webshell, assembly and IIS logs\n   - Evtx: IP ioc list and regex search\n   \n   Last updated: 2023-06-05T06:46Z\n   \nreference:\n  - https://www.rapid7.com/blog/post/2023/06/01/rapid7-observed-exploitation-of-critical-moveit-transfer-vulnerability/\n  - https://community.progress.com/s/article/MOVEit-Transfer-Critical-Vulnerability-31May2023\n  - https://github.com/Neo23x0/signature-base/blob/master/yara/vuln_moveit_0day_jun23.yar\n\ntype: CLIENT\nresources:\n  timeout: 1800\n\nparameters:\n  - name: EvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\MOVEit.evtx'\n  - name: IocRegex\n    type: regex\n    description: \"IOC Regex in evtxHunt\"\n    default: 'a@b\\.com'\n  - name: IgnoreRegex\n    description: \"Regex of string to ignore in Evtxhunt\"\n    type: regex\n  - name: IpEvtxIoc\n    default: |\n        104.194.222.107\n        146.0.77.141\n        146.0.77.155\n        146.0.77.183\n        162.244.34.26\n        162.244.35.6\n        179.60.150.143\n        185.104.194.156\n        185.104.194.24\n        185.104.194.40\n        185.117.88.17\n        185.162.128.75\n        185.174.100.215\n        185.174.100.250\n        185.181.229.240\n        185.181.229.73\n        185.183.32.122\n        185.185.50.172\n        188.241.58.244\n        193.169.245.79\n        194.33.40.103\n        194.33.40.104\n        194.33.40.164\n        206.221.182.106\n        209.127.116.122\n        209.127.4.22\n        45.227.253.133\n        45.227.253.147\n        45.227.253.50\n        45.227.253.6\n        45.227.253.82\n        45.56.165.248\n        5.149.248.68\n        5.149.250.74\n        5.149.250.92\n        5.188.86.114\n        5.188.86.250\n        5.188.87.194\n        5.188.87.226\n        5.188.87.27\n        5.34.180.205\n        62.112.11.57\n        62.182.82.19\n        62.182.85.234\n        66.85.26.215\n        66.85.26.234\n        66.85.26.248\n        79.141.160.78\n        79.141.160.83\n        84.234.96.31\n        89.39.104.118\n        89.39.105.108\n        91.202.4.76\n        91.222.174.95\n        91.229.76.187\n        93.190.142.131\n  - name: DateAfter\n    type: timestamp\n    default: 1685232000\n    description: \"Search for events or Modification time after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"Search for events or Modification time after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: AllDrives\n    type: bool\n    description: \"By default we target yara at all drives\"\n    default: Y\n  - name: DriveLetter\n    description: \"Target yara drive. Default is a C: if not AllDrives\"\n    default: \"C:\"\n  - name: AspxYara\n    default: |\n        rule WEBSHELL_ASPX_MOVEit_Jun23_1 {\n           meta:\n              description = \"Detects ASPX web shells as being used in MOVEit Transfer exploitation\"\n              author = \"Florian Roth\"\n              reference = \"https://www.rapid7.com/blog/post/2023/06/01/rapid7-observed-exploitation-of-critical-moveit-transfer-vulnerability/\"\n              date = \"2023-06-01\"\n              score = 85\n              hash1 = \"2413b5d0750c23b07999ec33a5b4930be224b661aaf290a0118db803f31acbc5\"\n              hash2 = \"48367d94ccb4411f15d7ef9c455c92125f3ad812f2363c4d2e949ce1b615429a\"\n              hash3 = \"e8012a15b6f6b404a33f293205b602ece486d01337b8b3ec331cd99ccadb562e\"\n           strings:\n              $s1 = \"X-siLock-Comment\" ascii fullword   \n              $s2 = \"]; string x = null;\" ascii\n              $s3 = \";  if (!String.Equals(pass, \" ascii\n           condition:\n              filesize \u003c 150KB and 2 of them\n        }\n  - name: DllYara\n    default: |\n        rule WEBSHELL_ASPX_DLL_MOVEit_Jun23_1 {\n           meta:\n              description = \"Detects compiled ASPX web shells found being used in MOVEit Transfer exploitation\"\n              author = \"Florian Roth\"\n              reference = \"https://www.trustedsec.com/blog/critical-vulnerability-in-progress-moveit-transfer-technical-analysis-and-recommendations/?utm_content=251159938\u0026utm_medium=social\u0026utm_source=twitter\u0026hss_channel=tw-403811306\"\n              date = \"2023-06-01\"\n              score = 85\n              hash1 = \"6cbf38f5f27e6a3eaf32e2ac73ed02898cbb5961566bb445e3c511906e2da1fa\"\n           strings:\n              $x1 = \"human2_aspx\" ascii fullword\n              $x2 = \"X-siLock-Comment\" wide\n              $x3 = \"x-siLock-Step1\" wide\n        \n              $a1 = \"MOVEit.DMZ.Core.Data\" ascii fullword\n           condition:\n              uint16(0) == 0x5a4d and\n              filesize \u003c 40KB and (\n                 1 of ($x*) and $a1\n              ) or all of them\n        }\n  - name: LogYara\n    default: |\n         rule LOG_EXPL_MOVEit_Exploitation_Indicator_Jun23_1 {\n            meta:\n               description = \"Detects a potential compromise indicator found in MOVEit Transfer logs\"\n               author = \"Florian Roth\"\n               reference = \"https://www.huntress.com/blog/moveit-transfer-critical-vulnerability-rapid-response\"\n               date = \"2023-06-01\"\n               score = 70\n            strings:\n               $x1 = \"POST /moveitisapi/moveitisapi.dll action=m2 \" ascii\n               $x2 = \" GET /human2.aspx - 443 \" ascii\n            condition:\n               1 of them\n         }\n\n         rule LOG_EXPL_MOVEit_Exploitation_Indicator_Jun23_2 {\n            meta:\n               description = \"Detects a potential compromise indicator found in MOVEit Transfer logs\"\n               author = \"Florian Roth\"\n               reference = \"https://www.huntress.com/blog/moveit-transfer-critical-vulnerability-rapid-response\"\n               date = \"2023-06-03\"\n               score = 70\n            strings:\n               $a1 = \"Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/105.0.5195.102+Safari/537.36\" ascii\n               \n               $s1 = \" POST /moveitisapi/moveitisapi.dll\" ascii\n               $s2 = \" POST /guestaccess.aspx\"\n               $s3 = \" POST /api/v1/folders/\"\n\n               $s4 = \"/files uploadType=resumable\u0026\"\n               $s5 = \" action=m2 \"\n            condition:\n               1 of ($a*) and 3 of ($s*)\n               or all of ($s*)\n         }\n  - name: NumberOfHits\n    description: THis artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int64\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int\n  - name: UploadYaraHits\n    type: bool\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n    \n    name: Yara\n    query: |\n      -- check which Yara to use\n      LET yara_rules \u003c= AspxYara + '\\n' + DllYara + '\\n' + LogYara\n\n      -- first find all matching files mft\n      LET files = SELECT OSPath, IsDir\n        FROM Artifact.Windows.NTFS.MFT(MFTDrive=DriveLetter, AllDrives=AllDrives,\n            FileRegex='\\.aspx$|^App_Web_[0-9a-z]{8}\\.dll$|^u_.+\\.log$',\n            PathRegex='MoveIt|Microsoft\\.net|temp|inetpub' )\n        WHERE NOT IsDir\n            AND NOT OSPath =~ '''.:\\\\\u003cErr\u003e\\\\'''\n            AND ((  FileName=~ '\\.aspx$' AND OSPath =~ 'MoveIt' )\n                OR (FileName=~ '^App_Web_[0-9a-z]{8}\\.dll$' AND OSPath =~ 'Microsoft\\.net|temp' )\n                OR (FileName=~ '^u_.+\\.log$' AND OSPath =~ 'inetpub' ))\n            AND if(condition=DateAfter,\n                then= LastRecordChange0x10 \u003e DateAfter,\n                else= True)\n            AND if(condition=DateBefore,\n                then= LastRecordChange0x10 \u003c DateBefore,\n                else= True)\n\n      -- scan files and only report a single hit.\n      LET hits = SELECT * FROM foreach(row=files,\n            query={\n                SELECT\n                    FileName, OSPath,\n                    File.Size AS Size,\n                    File.ModTime AS ModTime,\n                    Rule, Tags, Meta,\n                    String.Name as YaraString,\n                    String.Offset as HitOffset,\n                    upload( accessor='scope', \n                            file='String.Data', \n                            name=format(format=\"%v-%v-%v\", \n                            args=[\n                                OSPath,\n                                if(condition= String.Offset - ContextBytes \u003c 0,\n                                    then= 0,\n                                    else= String.Offset - ContextBytes),\n                                if(condition= String.Offset + ContextBytes \u003e File.Size,\n                                    then= File.Size,\n                                    else= String.Offset + ContextBytes) ]\n                            )) as HitContext\n                FROM yara(rules=yara_rules, files=OSPath, context=ContextBytes,number=NumberOfHits)\n            })\n\n      -- upload files that have hit\n      LET upload_hits=SELECT *,\n            upload(file=OSPath) AS Upload\n        FROM hits\n        GROUP BY OSPath\n\n      -- return rows\n      SELECT * FROM if(condition=UploadYaraHits,\n        then={ SELECT * FROM upload_hits},\n        else={ SELECT * FROM hits})\n\n  - name: Evtx\n    query: |\n      LET EvtxIPs \u003c= SELECT _value as IP FROM foreach(row=split(string=IpEvtxIoc,sep='\\\\s')) WHERE _value\n      LET EvtxHunterRegex = strip(string=join(array=EvtxIPs.IP + dict(Ioc=IocRegex).Ioc, sep='|'), suffix='|',prefix='|')\n      LET Parse(X) = to_dict(\n        item={\n           SELECT split(sep=\":\", string=Column0)[0] AS _key,\n                  regex_replace(re=\"^\\\\s+|\\\\s+$\", replace=\"\", source=split(sep=\":\", string=Column0)[1]) AS _value\n           FROM split_records(accessor=\"data\", filenames=X, regex=\"\\r\\n\")\n           WHERE Column0 =~ \"^[a-zA-Z0-9]+:\"\n        }) +  parse_string_with_regex(regex=\"User '(?P\u003cUser\u003e[^']+)'\", string=X)\n\n      SELECT EventTime,Computer,Channel,Provider,EventID,EventRecordID,\n        Parse(X=split(string=EventData.Data[0],sep=\"\\r\\n\\r\\n\")[1]) as EventData,\n        split(string=EventData.Data[0],sep=\"\\r\\n\\r\\n\")[0] as Message,\n        FullPath,\n        EventData.Data[0] as _RawData\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n                        IocRegex=EvtxHunterRegex,\n                        WhitelistRegex=IgnoreRegex,\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore )\n      WHERE EventData.IPAddress in EvtxIPs.IP OR _RawData =~ IocRegex\n\ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n  - name: ModTime\n    type: timestamp\n  - name: EventTime\n    type: timestamp\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.MsdtFollina","op":"set","definition":"name: Exchange.Windows.Detection.MsdtFollina\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will search Microsoft Support Diagnostic Tool logs for evidence \n   of ms-msdt Follina exploitation (CVE-2022-30190).\n   \n   The exploit appears to add a recursive path \"../../\" to a TargetPath field \n   inside the PCW.debugreport.xml.\n   \n   PCW.debugreport.xml can be found inside %localappdata%\\Diagnostics or \n   %localappdata%\\ElevatedDiagnostics for elevated instances.\n   \nreference:\n  - https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n  - https://twitter.com/nas_bench/status/1531718490494844928\n   \n\nparameters:\n   - name: TargetGlob\n     default: C:\\Users\\*\\AppData\\Local\\{Diagnostics,ElevatedDiagnostics}\\**\\PCW.debugreport.xml\n   - name: MsdtYara\n     default: |\n        rule msdt\n        {\n            meta:\n                description = \"Simple yara to detect folder traversal string used in MSDT follina exploitation\"\n                date = \"2022/06/01\"\n            strings:\n                $a = \"../../\"\n            condition:\n                $a\n        }\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT FullPath, Size,Mtime,Atime,Ctime,Btime,Rule,Meta,\n        read_file(filename=FullPath) as Content\n      FROM Artifact.Generic.Detection.Yara.Glob(PathGlob=TargetGlob,YaraRule=MsdtYara)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Notebooks.Admin.Flows","op":"set","definition":"name: Exchange.Notebooks.Admin.Flows\nauthor: Andreas Misje – @misje\ndescription: |\n  This notebooks lists all recent flows/collections across all orgs on the\n  platform. It may be used for auditing or as a means of finding a collection\n  previously scheduled.\n\n  By default it will only look for the last five flows per client, and return a\n  maximum of 50 flows altogether. Adjust the LIMITs as needed. Hunts are ignored\n  by default, but may be included by setting IgnoreHunts to True.\n\n  Links are created for clients and flows, but in order for these to work, you\n  need to set the [server metadata](/app/index.html?org_id=root#/host/server)\n  field \"VelociraptorServerURL\". If not set, https://127.0.0.1:8889 is used.\n\ntype: NOTEBOOK\n\nsources:\n  - notebook:\n    - type: markdown\n      template: |\n        # Recent flows (all orgs)\n\n    - type: vql\n      output: |\n        \u003c\u003c Latest flows: Click here to customise and calculate \u003e\u003e\n      template: |\n        LET ColumnTypes = dict(`Client`='url', `Flow`='url')\n\n        LET IgnoreHunts = True\n\n        -- In order to create links to clients and flows, the server URL is needed\n        -- (relative links do not work when specifying org ID). The server metadata\n        -- field \"VelociraptorServerURL\", used by some other artifacts, is used for\n        -- this:\n        LET ServerURL = get(\n            item=server_metadata(),\n            field='VelociraptorServerURL',\n            default='https://127.0.0.1:8889')\n\n        /*\n        Last refreshed at {{ Get ( Query \"SELECT timestamp(epoch=now()) AS Refreshed FROM scope()\" | Expand ) \"0.Refreshed\" }}\n        */\n\n        SELECT *\n        FROM foreach(\n          row={\n            SELECT Name,\n                   OrgId\n            FROM orgs()\n          },\n          query={\n            SELECT\n                   Name AS Org,\n                   *\n            FROM query(\n              org_id=OrgId,\n              -- Pass these variables to the scope:\n              env=dict(IgnoreHunts=IgnoreHunts, ServerURL=ServerURL),\n              query={\n                SELECT *\n                FROM foreach(\n                  row={\n                    SELECT client_id,\n                           os_info.hostname AS Hostname,\n                           timestamp(epoch=first_seen_at) AS FirstSeenAt\n                    FROM clients()\n                  },\n                  query={\n                    SELECT\n                           format(\n                             format='[%v](%v/app/index.html?org_id=\"%v\"#/host/%v)',\n                             args=[Hostname, ServerURL, org().id, client_id]) AS Client,\n                           -- It may be useful to know whether the collection was run\n                           -- because the client was new at the time:\n                           timestamp(\n                             epoch=start_time).Unix - FirstSeenAt.Unix \u003c 60 AS _NewClient,\n                           format(\n                             format='[%v](%v/app/index.html?org_id=\"%v\"#/collected/%v/%v)',\n                             -- Use the first artifact name (capped to 30 chars) as link name:\n                             args=[request.artifacts[0][:30] + '…', ServerURL, org().id, client_id, session_id]) AS Flow,\n                           session_id =~ '.H$' AS _IsHunt,\n                           timestamp(\n                             epoch=create_time) AS Created,\n                           timestamp(\n                             epoch=active_time) AS LastActive,\n                           request.creator AS Creator,\n                           state AS State,\n                           status AS Status,\n                           -- Create a more readable dict with artifact parameters arguments,\n                           -- using the artifact name as key, and as value, a dict with parameter\n                           -- name and values):\n                           to_dict(\n                             item={\n                               SELECT\n                                      artifact AS _key,\n                                      to_dict(\n                                        item={\n                                          SELECT\n                                                 key AS _key,\n                                                 value AS _value\n                                          FROM foreach(\n                                            row=parameters.env)\n                                        }) AS _value\n                               FROM foreach(\n                                 row=request.specs)\n                             }) AS _Requested,\n                           artifacts_with_results AS WithResults,\n                           format(\n                             format='%.1f',\n                             args=[execution_duration / 1000000000.0]) AS _Duration,\n                           total_collected_rows AS _Rows,\n                           total_uploaded_files AS _FilesUploaded\n                    FROM flows(client_id=client_id)\n                    WHERE NOT IgnoreHunts OR NOT session_id =~ '.H$'\n                    ORDER BY Created DESC\n                    LIMIT 5\n                  },\n                  -- This query is ideal for parallel execution (it is also necessary):\n                  workers=50)\n              })\n          })\n        ORDER BY Created DESC\n        LIMIT 50\n\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.Ntdsutil","op":"set","definition":"name: Exchange.Windows.Detection.Ntdsutil\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will extract evidence of Ntdsutil abuse from the application\n   eventlog. The artifact targets the string \"ntds.dit\" in event IDs: 216, 325,\n   326 and 327.\n\nreference:\n  - https://lolbas-project.github.io/lolbas/OtherMSBinaries/Ntdsutil/\n\nparameters:\n   - name: TargetGlob\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx'\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT EventTime,\n        Computer,Channel,EventID,EventRecordID,Message,EventData,FullPath\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n        EvtxGlob=TargetGlob,\n        IdRegex='^(216|325|326|327)$',\n        IocRegex='ntds\\.dit',\n        VSSAnalysisAge=VSSAnalysisAge)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Applications.OfficeServerCache","op":"set","definition":"name: Exchange.Windows.Applications.OfficeServerCache\n\ndescription: |\n  Return Office Internet Server Cache Registry keys and values in\n  order to identify possible C2 URLs from malicious opened Office\n  documents.\n\n  Such keys should be written by exploits such as CVE-2021-40444\n  (Microsoft MSHTML Remote Code Execution Vulnerability)\n\nauthor: Eduardo Mattos - @eduardfir\n\nreference:\n  - https://twitter.com/RonnyTNL/status/1435918945349931008/photo/1\n\ntype: CLIENT\n\nparameters:\n  - name: OfficeServerCacheKey\n    default: SOFTWARE\\Microsoft\\Office\\*\\Common\\Internet\\Server Cache\\**\n  - name: UserNameRegex\n    default: .\n    description: Filter by this UserName regex.\n  - name: TargetRegex\n    default: \"http|https|ftp|smb|webdav|\\\\\\\\|//|:\"\n    description: Target server regex filter. Default should return all protocols.\n  - name: TargetWhitelist\n    description: Target whitelist regex.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n    query: |\n        LET UserList \u003c= SELECT Name as UserName, User_sid as SID FROM users()\n                      WHERE Name =~ UserNameRegex\n\n        SELECT * FROM foreach(\n            row={\n                SELECT * FROM UserList\n            },\n            query={\n                SELECT\n                    ModTime as Modified,\n                    UserName,\n                    Name,\n                    FullPath\n                FROM glob(globs=\"HKEY_USERS\\\\\" + SID + \"\\\\\" + OfficeServerCacheKey, accessor=\"registry\")\n                WHERE Name =~ TargetRegex\n                    AND NOT if(condition=TargetWhitelist,\n                                then= Name=~TargetWhitelist,\n                                else= False)\n            })\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Server.Enrichment.AI.Ollama","op":"set","definition":"name: Exchange.Server.Enrichment.AI.Ollama\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact allows enrichment using Ollama AI. \n  \n  Paramaters:\n  \n  * `PrePrompt` - Is initial prompt default is: \"You are a Cyber Incident \n  Responder and need to analyze data. You have an eye for detail and like to use \n  short precise technical language. Analyze the following data and provide \n  summary analysis:\"  \n  * `Prompt` - Is secondary prompt, good practice is add some strings related to \n  the type of data for analysis or artifact name to provide context.\n  * `PromptData` - add object to be serialized and added to the prompt.\n  * `Model` - Model to use for your request.\n  * `TargetUri` - Ollama target URI\n  * `MaxPromptSize` - If set will cut the final prompt to this size in bytes to \n  assist maintaining context limits\n  \n  This artifact can be called from within another artifact (such as one looking \n  for files) to enrich the data made available by that artifact.\n\ntype: SERVER\n\nparameters:\n    - name: PrePrompt\n      type: string\n      description: A prefix to be used with the prompt. For example, when asking a question, then providing data separately\n      default: 'You are a Cyber Incident Responder and need to analyze data. You have an eye for detail and like to use short precise technical language. Analyze the following data and provide summary analysis:  '\n    - name: Prompt\n      type: string\n      description: A prompt - added to the middle of an AI request.\n      default: \"Add name of data here - e.g Windows.Forensics.Prefetch\"\n    - name: PromptData\n      type: string\n      description: The data sent to Ollama - this data is serialised and added to the prompt\n    - name: Model\n      type: string\n      description: The model used for processing the prompt\n      default: 'mistral'\n    - name: TargetUri\n      type: string\n      description: TargetUri to send request\n      default: \"http://127.0.0.1:11434/api/generate\"\n    - name: MaxPromptSize\n      type: int\n      description: Will limit your prompt to this size in bytes. Helps maintain context sizes.\n\n\nsources:\n  - query: |\n        LET FinalPrompt = if(condition= MaxPromptSize, \n            then = (PrePrompt + \" \" + Prompt + \" \" + serialize(item=PromptData))[:MaxPromptSize],\n            else= PrePrompt + \" \" + Prompt + \" \" + serialize(item=PromptData) )\n        \n        SELECT FinalPrompt AS Prompt, \n            parse_json(data=Content).response AS ResponseText,\n            parse_json(data=Content) AS ResponseDetails\n        FROM http_client(\n            url=TargetUri,\n            headers=dict(`Content-Type`=\"application/json\"),\n            method=\"POST\",\n            data=dict(model=Model, prompt=FinalPrompt, stream=false)\n        )\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.Onenote","op":"set","definition":"name: Exchange.Windows.Detection.Onenote\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact enables detection of malicious .one files and can also be used \n    as an embedded file and metadata parser.\n    \n    The artifact uses glob targeting and checks file headers to detect .one file \n    types in scope. Secondly the artifact looks for EmbeddedFile and Metadata headers.   \n    Finally the artifact will parse the .one file from discovered offsets and \n    enable filters to determine rows returned.  \n     \n    By default filters target suspicious file content and metadata title text \n    observed in the wild.\n    Modify ContentRegex to ```.``` to include all.  \n    \n    The artifact also allows upload of both embedded files and source .one files.\n    \nreference:\n  - https://github.com/volexity/threat-intel/tree/main/tools/one-extract\n  - https://blog.didierstevens.com/2023/01/22/analyzing-malicious-onenote-documents/\n  \ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     description: Glob to target .one files\n     default: C:\\Users\\**\n   - name: ContentRegex\n     description: Regex to filter for on embedded files or Title Metadata\n     default: ^MZ|^TV(oA|pB|pQ|qA|qQ|ro)|^PK|This program cannot be run in dos mode.|@echo|\u003cHTA:APPLICATION|/vbscript|WmiExec|Win32_Process|Powershell|comspec\n   - name: PreviewBytes\n     description: Number of bytes of embedded files to preview in hex\n     type: int64\n     default: 10000\n   - name: ContentExclude\n     description: Regex to filter out on embedded files or Title Metadata\n   - name: IncludeAllMetadata\n     type: bool\n     description: Select to include all Metadata entries\n   - name: UploadEmbedded\n     type: bool\n     description: Select to upload embedded files\n   - name: UploadOriginal\n     type: bool\n     description: Upload original OneNote file\n     \n     \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux' OR OS = 'darwin'\n\n    query: |\n      LET YaraRule = '''rule onenote_headers {\n                strings:\n                    $EmbeddedFile = { E7 16 E3 BD 65 26 11 45 A4 C4 8D 4D 0B 7A 9E AC }\n                    $Metadata = { F3 1C 00 1C 30 1C 00 1C FF 1D 00 14 82 1d 00 14 }\n    \n                condition:\n                    any of them\n            }'''\n    \n      LET PROFILE = '''[[Metadata, 0, [\n                            [\"__Adjust\", 2, \"uint16\"],\n                            [\"__SizeOffset\",0,\"Value\",{\"value\":\"x=\u003e4 + (4 * x.__Adjust)\"}],\n                            [\"Size\", \"x=\u003ex.__SizeOffset\", \"uint16\"],\n                            [\"__Title\",\"x=\u003ex.__SizeOffset + 4\",\"String\",{length: \"x=\u003ex.Size\",\"term\":\"$$$_NOTERM_$$$\"}],\n                            [\"Title\",0,\"Value\",{\"value\":\"x=\u003eregex_replace(source=x.__Title,re='\\\\x00',replace='')\"}],\n                            [\"CreateDate\", \"x=\u003ex.__SizeOffset + 4 + x.Size + 32\",\"WinFileTime\"],\n                            # TODO remove recursion lookup and find specific details... \n                            [\"__FindOffset1\", \"x=\u003ex.__SizeOffset + 4 + x.Size + 48\",\"String\",{length: 100, term_hex: \"010100000000\"}],\n                            [\"__FindOffset2\", \"x=\u003ex.__SizeOffset + 4 + x.Size + 48\",\"String\",{length: 100, term_hex: \"010000000000\"}],\n                            [\"__ModificationOffset\", 0,\"Value\",{\"value\":\"x=\u003eif(condition= len(list=x.__FindOffset1) \u003c 100 OR len(list=x.__FindOffset2) \u003c 100,\n                                    then= if(condition= len(list=x.__FindOffset1) \u003c len(list=x.__FindOffset2),\n                                            then= x.__SizeOffset + 4 + x.Size + 48 + len(list=x.__FindOffset1) - 7,\n                                            else= x.__SizeOffset + 4 + x.Size + 48 + len(list=x.__FindOffset2) - 7 ),\n                                    else= null )\"}],\n                            [\"__ModificationDate\", \"x=\u003ex.__ModificationOffset\",\"WinFileTime\"],\n                            [\"ModificationDate\", 0,\"Value\",{\"value\":\"x=\u003eif(condition= x.__ModificationOffset, \n                                                                            then= x.__ModificationDate,\n                                                                            else= null)\"}],\n                        ]],\n                        [EmbeddedFile, 0, [\n                            [\"Size\", 16, \"uint32\"],\n                            [\"Magic\",0,\"Value\",{\"value\":\"x=\u003emagic(accessor='data',path=read_file(filename=FileName,offset=String.Offset + 36,length=int(int=x.Size)))\"}],\n                            [\"Extension\",0,\"Value\",{\"value\":\"x=\u003emagic(type='extension',accessor='data',path=read_file(filename=FileName,offset=String.Offset + 36,length=int(int=x.Size)))\"}],\n                            [\"SHA256\",0,\"Value\",{\"value\":\"x=\u003ehash(hashselect='SHA256',accessor='data',path=read_file(filename=FileName,offset=String.Offset + 36,length=int(int=x.Size))).SHA256\"}],\n                        ]]]'''\n      \n      -- firstly we want to find all target files in scope by confirming header\n      LET target_files = SELECT OSPath,Name,Size,Mtime,Btime,Ctime,Atime\t,\n                                hash(path=OSPath) as OneFileHash,\n                                format(format='% x',args=[read_file(filename=OSPath,length=16),]) as _Header\n        FROM glob(globs=TargetGlob)\n        WHERE NOT IsDir\n            AND _Header = 'e4 52 5c 7b 8c d8 a7 4d ae b1 53 78 d0 29 96 d3'\n        \n      -- Hash source file here for performance\n      LET target_files_hash = SELECT *, hash(path=OSPath) as Hash FROM target_files\n    \n      -- finally find all headers and parse from offset\n      LET results = SELECT  *,\n                if(condition= Type='EmbeddedFile',\n                then= read_file(filename=OSPath,offset=Offset,length= int(int=Extracted.Size)),\n                else= null ) as _EmbeddedFile \n        FROM foreach(row=target_files_hash, query={\n                SELECT  OSPath,Name,Size,\n                    dict(Mtime=Mtime,Btime=Btime,Ctime=Ctime,Atime=Atime) as Timestamps,\n                    OneFileHash,\n                    if(condition= String.Name=~ 'metadata',\n                        then= String.Offset - 4,\n                        else= String.Offset + 36 ) as Offset,\n                    strip(string=String.Name,prefix='\\$') as Type,\n                    parse_binary(filename=FileName, profile=PROFILE,\n                        offset=if(condition= String.Name=~ 'metadata',\n                                    then= String.Offset - 4,\n                                    else= String.Offset), \n                        struct=if(condition= String.Name=~ 'metadata',\n                                    then= 'Metadata',\n                                    else= 'EmbeddedFile')) as Extracted\n                FROM yara(files=OSPath,rules=YaraRule,number=9999)\n                ORDER BY Offset\n            })\n        WHERE ( _EmbeddedFile =~ ContentRegex OR Extracted.Title =~ ContentRegex\n                    AND NOT if(condition= ContentExclude,\n                                then= _EmbeddedFile =~ ContentExclude,\n                                else = False ) )\n            OR if(condition= IncludeAllMetadata, then= Type='Metadata')\n\n      LET upload_embedded = SELECT OSPath,Name,Size,Timestamps,\n            OneFileHash,\n            Offset, Type, Extracted,\n            if(condition= Type='EmbeddedFile',\n                then= read_file(filename=_EmbeddedFile,accessor='data',length=PreviewBytes ),\n                else= null ) as EmbeddedPreview,\n            if(condition= Type='EmbeddedFile',\n                then= upload(accessor='scope',file=\"_EmbeddedFile\",\n                            name=format(format='%v_%v.extracted',args=[Name,Offset])),\n                else= null ) as EmbeddedUpload \n        FROM results\n        \n      LET no_embedded_upload = SELECT  OSPath,Name,Size,Timestamps,\n            OneFileHash, Offset, Type, Extracted,\n            if(condition= Type='EmbeddedFile',\n                then= read_file(filename=_EmbeddedFile,accessor='data',length=PreviewBytes ),\n                else= null ) as EmbeddedPreview\n        FROM results\n        \n      -- output rows, hidden fields dropped\n      LET final_results = SELECT * FROM if(condition=UploadEmbedded,\n                                                    then= upload_embedded,\n                                                    else= no_embedded_upload )\n                                                    \n      -- finally we may want upload original OneNote file but only once for optimisation..\n      LET lookup \u003c= dict()\n      LET upload_ospath = SELECT *,\n                if(condition=get(item=lookup, field=OSPath.String), \n                    else=if(condition=set(item=lookup, field=OSPath.String, value=TRUE),\n                            then=upload(file=OSPath))) AS OneFileUpload\n        FROM final_results\n      \n       SELECT * FROM if(condition=UploadOriginal,\n                        then= upload_ospath,\n                        else= final_results )\n                        \ncolumn_types:\n  - name: EmbeddedPreview\n    type: base64hex\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.PSList.VTLookup","op":"set","definition":"name: Exchange.PSList.VTLookup\ndescription: |\n   Combination of PSList with Virus Total reputation lookup using the Virus Total Server Enrichment Artifact by Wes Lambert.\n\ntype: CLIENT\n\nauthor: Chris Jones - CPIRT\n\nparameters:\n   - name: VTKey\n     default: VTKey\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' or 'linux'\n\n    query: |\n        LET Key \u003c= VTKey\n\n        LET Results = SELECT Name,Pid,Ppid,Username,{\n            Select Name FROM pslist(pid=Ppid)\n        } AS ParentName,hash(path=Exe).SHA1 AS SHA1,\n        CommandLine, Exe FROM pslist()\n\n        SELECT *, {SELECT VTRating FROM Artifact.Server.Enrichment.Virustotal(VirustotalKey=VTKey,Hash=SHA1)} AS VTResults\n        FROM foreach(row=Results)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.System.PowerEfficiencyDiagnostics","op":"set","definition":"name: Exchange.Windows.System.PowerEfficiencyDiagnostics\nauthor: \"Eduardo Mattos - @eduardfir\"\ndescription: |\n  This artifact parses the XML Energy Reports from the Power Efficiency \n  Diagnostics feature of Windows, returning the processes which had high \n  CPU usage, including which \n  \n  Some tools utilized by threat actors will generate high CPU usage and so \n  are recorded in these reports.\n\nreference:\n  - https://twitter.com/rj_chap/status/1502354627903123458\n  \nparameters:\n  - name: TargetGlob\n    default: C:\\ProgramData\\Microsoft\\Windows\\Power Efficiency Diagnostics\\*.xml\n\nsources:\n  - query: |\n        -- select XML reports\n        LET Targets \u003c= SELECT FullPath, Mtime as FileMtime FROM glob(globs=TargetGlob)\n\n        -- parse XML reports and return specific CPU Usage entries\n        LET SigProcUtil \u003c= SELECT \n                            parse_xml(file=FullPath).EnergyReport.Troubleshooter[5].AnalysisLog.LogEntry.Details.Detail as LogDetail,\n                            FullPath,\n                            FileMtime\n                           FROM Targets\n        \n        -- iterate through nested entries and return relevant fields\n        SELECT \n            { SELECT get(item=_value, field=\"Value\") as Value from foreach(row=LogDetailEntry) \n                WHERE _value.Name = \"Process Name\"\n            } as ProcessName, \n            { SELECT get(item=_value, field=\"Value\") as Value from foreach(row=LogDetailEntry) \n                WHERE _value.Name = \"PID\"\n            } as PID,\n            { SELECT get(item=_value, field=\"Value\") as Value from foreach(row=LogDetailEntry) \n                WHERE _value.Name = \"Average Utilization (%)\"\n            } as AvgUtilization,\n            { SELECT get(item=_value, field=\"Value\") as Value from foreach(row=LogDetailEntry) \n                WHERE _value.Name = \"Module\"\n            } as Modules,\n            FullPath,\n            FileMtime\n        FROM foreach(row=SigProcUtil, \n            query= {\n                SELECT _value as LogDetailEntry, FullPath, FileMtime FROM foreach(row=SigProcUtil[0].LogDetail) \n            })\n        WHERE ProcessName\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Alert.Windows.EVTX.PowerPickHostVersion","op":"set","definition":"name: Exchange.Alert.Windows.EVTX.PowerPickHostVersion\nauthor: sbattaglia-r7\ndescription: |\n   \n   This artifact by itself only indicates that the PowerPick tool may have\n   been invoked on the client. To capture additional context, ensure that\n   Powershell script block and module logging are enabled on the clients and\n   deploy the Windows.ETW.Powershell artifact from the Exchange.\n   \n   -----\n   \n   This artifact is based on on PowerPick research by Crowdstrike in \n   https://www.crowdstrike[.]com/blog/getting-the-bacon-from-cobalt-strike-beacon/\n   \n   As noted in the blog post, when PowerPick tool is run, the PowerShell logs\n   on the target system may contain an EID 400 event where the\n   HostVersion and EngineVersion fields in the message have different values.\n   \n   In recent puprle team exercises, we observed that the mismatched HostVersion\n   value was always \"1.0\", providing a simple way to monitor for this activity \n   as a backup to other PowerShell or CobaltStrike rules.\n   \n   If this artifact generates an event on a client, check the PowerShell Operational\n   logs for suspicious 410x events (especially 4104).  If the Windows.ETW.Powershell\n   artifact is also enabled on the client and did not fire an event, update that\n   artifact's IOC list with the new information and redeploy it.\n   \n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT_EVENT\n\nparameters:\n  - name: pseventLog\n    default: 'C:\\Windows\\System32\\winevt\\Logs\\Windows PowerShell.evtx'\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        SELECT\n            timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,\n            System.Computer as Computer,\n            System.Channel as Channel,\n            System.Provider.Name as Provider,\n            System.EventID.Value as EventID,\n            System.EventRecordID as EventRecordID,\n            get(field=\"Message\") as Message\n            FROM watch_evtx(filename=pseventLog)\n            WHERE EventID = 400 AND Message =~ 'HostVersion=1.0'\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.ETW.Powershell","op":"set","definition":"name: Exchange.Windows.ETW.Powershell\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact enables Powershell scriptblock and commandlet load monitoring.  \n    It uses the ETW provider: Microsoft-Windows-PowerShell  \n    \n    Detection logic is managed by several global ignore entries and an IOC csv.  \n\n    ##### Global Ignore  \n    IgnoreProcessExe - Process exe path to ignore  \n    IgnoreParentProcessExe - Parent exe path for child generated events to ignore  \n    IgnoreParentProcessName - Ignore events generated by a child process \n      \n    ##### IocCsv \n    Name - detection name  \n    Type - type of detection: ScriptBlock,Commandlet or ScriptBlock|Commandlet  \n    Regex - regex to search for  \n    Ignore - regex to ignore  \n    DateModified - date detection last modified  \n    \n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: IgnoreProcessExe\n    description: Regex of process exe path to ignore\n    default: \\\\Program Files\\\\(Microsoft Monitoring Agent\\\\Agent|Microsoft System Center\\\\Operations Manager\\\\Server)\\\\MonitoringHost\\.exe$\n  - name: IgnoreParentProcessExe\n    description: Regex of parent exe path for child generated events to ignore\n    default: ^(C:\\\\Program Files\\\\Windows Defender Advanced Threat Protection\\\\SenseIR\\.exe|C:\\\\Program Files\\\\Microsoft SQL Server\\\\MSSQL\\d{1,2}\\.MSSQLSERVER\\\\MSSQL\\\\Binn\\\\SQLAGENT\\.EXE)$\n  - name: IgnorePaths\n    description: \"List of path regex to ignore. This list will be joined and excluded.\"\n    default: |\n        \\\\SDIAG_.{8}-(.{4}-){3}.{12}\\\\\n        \\\\Windows Defender Advanced Threat Protection\\\\\n        \\\\Microsoft Azure Backup Server\\\\\n        \\\\Program Files\\\\Microsoft Dependency Agent\\\\\n        \\\\(Program Files|ProgramData)\\\\Amazon\\\\(WorkSpaces|EC2-Windows)\n        \\\\Program Files(|\\(x86\\))\\\\Symantec\\\\Symantec Endpoint\n        \\\\Program Files(|\\(x86\\))\\\\Automox\\\\execDir\n  - name: IocCsv\n    type: csv\n    description: \"Application name Regex to enable filtering on source.\"\n    default: |\n        Name,Type,Regex,Ignore,DateModified\n        T1059.001-Mimikatz Execution via PowerShell,ScriptBlock,TOKEN_PRIVILE|SE_PRIVILEGE_ENABLED|mimikatz|lsass.dmp,,12/8/2022\n        T1059.001-Cobalt Strike Powershell Loader,ScriptBlock,\\$Doit|-bxor 35,,12/8/2022\n        TT1562-Impair Defences,ScriptBlock,powershell -version 2|Set-PSReadlineOption|-HistorySaveStyle SaveNothing|remove-module +psreadline|[Amsi]::Bypass()|{2781761E-28E0-4109-99FE-B9D127C57AFE}|amsiInitFailed|System.Management.Automation.AmsiUtils|Remove-EtwTraceProvider|System.Management.Automation.Tracing.PSEtwLogProvider|HKLM.SYSTEM.CurrentControlSet.Control.WMI.Autologger.AUTOLOGGER_NAME,,23/8/2022\n        T1562.001-Win Defender Disable using Powershell,ScriptBlock,Set-MpPreference -DisableRealtimeMonitoring|Set-MpPreference DisableBehaviorMonitoring|Set-MpPreference -DisableScriptScanning|Set-MpPreference -DisableBlockAtFirstSeen|MpPreference -ExclusionPath,,12/8/2022\n        T1059.001-Malicious Powershell Commandlets,Commandlet,Add-ConstrainedDelegationBackdoor|Add-DomainObjectAcl|Add-Exfiltration|Add-ObjectAcl|Add-Persistance|Add-Persistence|Add-RegBackdoor|Add-RemoteConnection|Add-ScrnSaveBackdoor|Add-ServiceDacl|Add-SignedIntAsUnsigned|Bloodhound|Check-VM|Convert-ADName|Convert-DNSRecord|Convert-FileRight|Convert-LDAPProperty|Convert-NameToSid|Convert-SwitchtoBool|Convert-UIntToInt|ConvertFrom-LDAPLogonHours|ConvertFrom-SID|ConvertFrom-UACValue|ConvertTo-LittleEndian|ConvertTo-LogonHoursArray|ConvertTo-RC4ByteStream|ConvertTo-SID|Copy-ArrayOfMemAddresses|Copy-VSS|Create-MultipleSessions|Create-NamedPipe|Create-ProcessWithToken|Create-RemoteThread|Create-SuspendedWinLogon|Create-WinLogonProcess|DataToEncode|Decrypt-Bytes|DNS_TXT_Pwnage|Do-Exfiltration|Download_Execute|Download-Execute-PS|DumpCerts|DumpCreds|Emit-CallThreadStub|Enable-Duplication|Enable-Privilege|Enable-SeAssignPrimaryTokenPrivilege|Enable-SeDebugPrivilege|Enabled-DuplicateToken|Enum-AllTokens|Exclude-Hosts|Execute-Command-MSSQL|Execute-DNSTXT-Code|Execute-OnTime|ExetoText|exfill|ExfilOption|Expand-Archive|Exploit-Jboss|Export-PowerViewCSV|FakeDC|Find-4624Logon|Find-4648Logon|Find-AppLockerLog|Find-AVSignature|Find-DomainLocalGroupMember|Find-DomainObjectPropertyOutlier|Find-DomainProcess|Find-DomainShare|Find-DomainUserEvent|Find-DomainUserLocation|Find-ForeignGroup|Find-ForeignUser|Find-Fruit|Find-GPOComputerAdmin|Find-GPOLocation|Find-InterestingDomainAcl|Find-InterestingDomainShareFile|Find-InterestingFile|Find-LocalAdminAccess|Find-ManagedSecurityGroups|Find-PathDLLHijack|Find-ProcessDLLHijack|Find-PSScriptsInPSAppLog|Find-RDPClientConnection|Find-TrustedDocuments|FireBuster|FireListener|Free-AllTokens|Get-ADObject|Get-AllAttributesForClass|Get-ApplicationHost|Get-CachedGPPPassword|Get-CachedRDPConnection|Get-ChromeDump|Get-ClipboardContents|Get-ComputerDetail|Get-DecryptedCpassword|Get-DecryptedSitelistPassword|Get-DelegateType|Get-DFSshare|Get-DNSRecord|Get-DNSZone|Get-Domain|Get-DomainComputer|Get-DomainController|Get-DomainDFSShare|Get-DomainDFSShareV1|Get-DomainDFSShareV2|Get-DomainDNSRecord|Get-DomainDNSZone|Get-DomainFileServer|Get-DomainForeignGroupMember|Get-DomainForeignUser|Get-DomainGPO|Get-DomainGPOComputerLocalGroupMapping|Get-DomainGPOLocalGroup|Get-DomainGPOUserLocalGroupMapping|Get-DomainGroup|Get-DomainGroupMember|Get-DomainGroupMemberDeleted|Get-DomainGUIDMap|Get-DomainManagedSecurityGroup|Get-DomainObject|Get-DomainOU|Get-DomainPolicy|Get-DomainSearcher|Get-DomainSID|Get-DomainSite|Get-DomainSPNTicket|Get-DomainSubnet|Get-DomainTrust|Get-DomainTrustMapping|Get-DomainUser|Get-DomainUserEvent|Get-Forest|Get-ForestDomain|Get-ForestGlobalCatalog|Get-ForestSchemaClass|Get-ForestTrust|Get-FoxDump|Get-GPODelegation|Get-GPPInnerField|Get-GPPPassword|Get-GptTmpl|Get-GroupsXML|Get-Hex|Get-HttpStatus|Get-ImageNtHeaders|Get-IndexedItem|Get-Information|Get-IniContent|Get-IPAddress|Get-Keystrokes|Get-LastLoggedOn|Get-LoggedOnLocal|Get-LSASecret|Get-MemoryProcAddress|Get-MicrophoneAudio|Get-ModifiablePath|Get-ModifiableRegistryAutoRun|Get-ModifiableScheduledTaskFile|Get-ModifiableService|Get-ModifiableServiceFile|Get-NetComputer|Get-NetComputerSiteName|Get-NetDomain|Get-NetDomainController|Get-NetDomainTrust|Get-NetFileServer|Get-NetForest|Get-NetGPO|Get-NetGroup|Get-NetGroupMember|Get-NetLocalGroup|Get-NetLoggedon|Get-NetOU|Get-NetProcess|Get-NetRDPSession|Get-NetSession|Get-NetShare|Get-NetSite|Get-NetSubnet|Get-NetUser|Get-ObjectAcl|Get-PassHashes|Get-PassHints|Get-PathAcl|Get-PEArchitecture|Get-PEBasicInfo|Get-PEDetailedInfo|Get-PrimaryToken|Get-PrincipalContext|Get-ProcAddress|Get-ProcessTokenGroup|Get-ProcessTokenPrivilege|Get-ProcessTokenType|Get-Property|Get-Proxy|Get-RandomName|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-RegistryAlwaysInstallElevated|Get-RegistryAlwaysInstallElevated.|Get-RegistryAutoLogon|Get-RegistryMountedDrive|Get-RegLoggedOn|Get-RemoteProcAddress|Get-RemoteProcAddressFunction|Get-RickAstley|Get-Screenshot|Get-SecurityPackages|Get-ServiceDetail|Get-ServiceFilePermission|Get-ServicePermission|Get-ServiceUnquoted|Get-SitelistField|Get-SiteListPassword|Get-SiteName|Get-System|Get-SystemNamedPipe|Get-SystemToken|Get-ThreadToken|Get-TimedScreenshot|Get-TokenInformation|Get-TopPort|Get-UnattendedInstallFile|Get-Unconstrained|Get-UniqueTokens|Get-UnquotedService|Get-USBKeystrokes|Get-UserEvent|Get-VaultCredential|Get-VaultElementValue|Get-VirtualProtectValue|Get-VolumeShadowCopy|Get-VulnAutoRun|Get-VulnSchTask|Get-Web-Credentials|Get-WebConfig|Get-Win32Constants|Get-Win32Functions|Get-Win32Types|Get-WLAN-Keys|Get-WMIProcess|Get-WMIRegCachedRDPConnection|Get-WMIRegLastLoggedOn|Get-WMIRegMountedDrive|Get-WMIRegProxy|Gupt-Backdoor|HTTP-Backdoor|HTTP-Login|Import-DllImports|Import-DllInRemoteProcess|Inject-LocalShellcode|Inject-RemoteShellcode|Install-ServiceBinary|Install-SSP|InttoIP|Invoke-ACLScanner|Invoke-ADSBackdoor|Invoke-AllChecks|Invoke-AmsiBypass|Invoke-ARPScan|Invoke-AzureHound|Invoke-BackdoorLNK|Invoke-BadPotato|Invoke-BetterSafetyKatz|Invoke-BruteForce|Invoke-BypassUAC|Invoke-Carbuncle|Invoke-Certify|Invoke-CheckLocalAdminAccess|Invoke-CompareAttributesForClass|Invoke-CreateRemoteThread|Invoke-CredentialInjection|Invoke-CredentialsPhish|Invoke-DAFT|Invoke-DCSync|Invoke-Decode|Invoke-DinvokeKatz|Invoke-DllInjection|Invoke-DowngradeAccount|Invoke-EgressCheck|Invoke-Empire|Invoke-Encode|Invoke-EnumerateLocalAdmin|Invoke-EventHunter|Invoke-EventVwrBypass|Invoke-Eyewitness|Invoke-FakeLogonScreen|Invoke-Farmer|Invoke-FileFinder|Invoke-Get-RBCD-Threaded|Invoke-Gopher|Invoke-GPOLinks|Invoke-Grouper2|Invoke-HandleKatz|Invoke-ImpersonateUser|Invoke-Interceptor|Invoke-Internalmonologue|Invoke-Inveigh|Invoke-InveighRelay|Invoke-JSRatRegsvr|Invoke-JSRatRundll|Invoke-Kerberoast|Invoke-KrbRelayUp|Invoke-LdapSignCheck|Invoke-Lockless|Invoke-MapDomainTrust|Invoke-MemoryFreeLibrary|Invoke-MemoryLoadLibrary|Invoke-Method|Invoke-MITM6|Invoke-NanoDump|Invoke-NetRipper|Invoke-NetworkRelay|Invoke-NinjaCopy|Invoke-OxidResolver|Invoke-P0wnedshell|Invoke-Paranoia|Invoke-PatchDll|Invoke-PortScan|Invoke-PoshRatHttp|Invoke-PoshRatHttps|Invoke-PostExfil|Invoke-Potato|Invoke-PowerDump|Invoke-PPLDump|Invoke-Prasadhak|Invoke-PrintNightmare|Invoke-PrivescAudit|Invoke-ProcessHunter|Invoke-PsExec|Invoke-PSGcat|Invoke-PsGcatAgent|Invoke-PSInject|Invoke-PsUaCme|Invoke-ReflectivePEInjection|Invoke-ReverseDNSLookup|Invoke-ReverseDnsLookup|Invoke-RevertToSelf|Invoke-Rubeus|Invoke-RunAs|Invoke-SafetyKatz|Invoke-SauronEye|Invoke-SCShell|Invoke-Seatbelt|Invoke-ServiceAbuse|Invoke-SessionGopher|Invoke-ShareFinder|Invoke-SharpAllowedToAct|Invoke-SharpBlock|Invoke-SharpBypassUAC|Invoke-SharpChromium|Invoke-SharpClipboard|Invoke-SharpCloud|Invoke-SharpDPAPI|Invoke-SharpDump|Invoke-SharPersist|Invoke-SharpGPO-RemoteAccessPolicies|Invoke-SharpGPOAbuse|Invoke-SharpHandler|Invoke-SharpHide|Invoke-Sharphound|Invoke-SharpImpersonation|Invoke-SharpImpersonationNoSpace|Invoke-SharpKatz|Invoke-SharpLdapRelayScan|Invoke-Sharplocker|Invoke-SharpLoginPrompt|Invoke-SharpMove|Invoke-SharpPrinter|Invoke-SharpPrintNightmare|Invoke-SharpRDP|Invoke-SharpSecDump|Invoke-Sharpshares|Invoke-SharpSniper|Invoke-SharpSploit|Invoke-SharpSpray|Invoke-SharpSSDP|Invoke-SharpStay|Invoke-SharpUp|Invoke-Sharpview|Invoke-SharpWatson|Invoke-Sharpweb|Invoke-Shellcode|Invoke-ShellCommand|Invoke-SMBAutoBrute|Invoke-SMBScanner|Invoke-Snaffler|Invoke-Spoolsample|Invoke-SSHCommand|Invoke-SSIDExfil|Invoke-StandIn|Invoke-StickyNotesExtract|Invoke-Tater|Invoke-ThreadedFunction|Invoke-Thunderfox|Invoke-ThunderStruck|Invoke-TokenManipulation|Invoke-Tokenvator|Invoke-UrbanBishop|Invoke-UserHunter|Invoke-UserImpersonation|Invoke-VoiceTroll|Invoke-Whisker|Invoke-WinEnum|Invoke-winPEAS|Invoke-WireTap|Invoke-WmiCommand|Invoke-WScriptBypassUAC|Invoke-Zerologon|Jitter|Kerberoast|Kerbroast|Keylogger|LoggedKeys|MailRaider|Mimikat|Mimikittenz|Mount-VolumeShadowCopy|NetShareEnum|NetWkstaUserEnum|New-ADObjectAccessControlEntry|New-DomainGroup|New-DomainUser|New-DynamicParameter|New-HoneyHash|New-InMemoryModule|New-ScriptBlockCallback|New-ThreadedFunction|New-VolumeShadowCopy|Nishang|NotAllNameSpaces|Out-CHM|Out-CompressedDll|OUT-DNSTXT|Out-EncodedCommand|Out-EncryptedScript|Out-HTA|Out-Minidump|Out-RundllCommand|Out-SCF|Out-Shortcut|Out-WebQuery|Out-Word|Parse_Keys|Parse-Hosts|Parse-ILHosts|Parse-IPList|Parse-IpPorts|Parse-Pkt|Parse-Ports|ParseKeys|Password-List|Port-Scan|PortScan-Alive|Portscan-Port|PowerBreach|Powerpreter|PowerUp|PowerView|Remove-DomainGroupMember|Remove-DomainObjectAcl|Remove-Persistence|Remove-Ports|Remove-PoshRat|Remove-RemoteConnection|Remove-Update|Remove-VolumeShadowCopy|Request-SPNTicket|Resolve-IPAddress|Restore-ServiceBinary|Run-EXEonRemote|Set-ADObject|Set-DCShadowPermissions|Set-DesktopACLs|Set-DesktopACLToAllowEveryone|Set-DomainObject|Set-DomainObjectOwner|Set-DomainUserPassword|Set-FilelessBypassUac|Set-MacAttribute|Set-PowerStego|Set-Property|Set-RemotePSRemoting|Set-RemoteWMI|Set-ServiceBinaryPath|Set-Wallpaper|Sharphound|Shellcode|Shellcode32|Shellcode64|Show-TargetScreen|Split-Path|Start-CaptureServer|Start-Dnscat|Start-WebcamRecorder|StringtoBase64|Sub-SignedIntAsUnsigned|Test-AdminAccess|Test-IsAdmin|Test-MemoryRangeValid|Test-ServiceDaclPermission|TexttoExe|Update-ExeFunctions|Update-MemoryAddresses|Update-MemoryProtectionFlags|VolumeShadowCopyTools|Write-BytesToMemory|Write-HijackDll|Write-PortscanOut|Write-ServiceBinary|Write-UserAddMSI,,12/8/2022\n        T1059.01-Powershell Malicious Keywords,ScriptBlock|Commandlet,AdjustTokenPrivileges|IMAGE_NT_OPTIONAL_HDR64_MAGIC|Microsoft.Win32.UnsafeNativeMethods|ReadProcessMemory.Invoke|SE_PRIVILEGE_ENABLED|LSA_UNICODE_STRING|MiniDumpWriteDump|PAGE_EXECUTE_READ|SECURITY_DELEGATION|TOKEN_ADJUST_PRIVILEGES|TOKEN_ALL_ACCESS|TOKEN_ASSIGN_PRIMARY|TOKEN_DUPLICATE|TOKEN_ELEVATION|TOKEN_IMPERSONATE|TOKEN_INFORMATION_CLASS|TOKEN_PRIVILEGES|TOKEN_QUERY|System.Reflection.Assembly.Load|[System.Reflection.Assembly]::Load|[Reflection.Assembly]::Load|System.Reflection.AssemblyName|Reflection.Emit.AssemblyBuilderAccess|Runtime.InteropServices.DllImportAttribute|SuspendThread|Metasploit|Mimikatz|PS ATTACK,,12/8/2022\n        T1059.001-Loading Powershell in Memory,ScriptBlock|Commandlet,System.Reflection.AssemblyName|System.Reflection.Emit.AssemblyBuilderAccess|System.Runtime.InteropServices.MarshalAsAttribute|memorystream,,12/8/2022\n        \nsources:\n  - query: |\n      -- materialize ignore path regex where exist and not \\s\n      LET ScriptIgnore = SELECT _value as PathRegex \n        FROM foreach(row=split(string=IgnorePaths,sep='\\n')) \n        WHERE PathRegex AND NOT PathRegex =~ '^\\\\s+$'\n      LET ScriptIgnorePath \u003c= join(array=ScriptIgnore.PathRegex,sep='|')\n      \n      -- materialize scriptblock regex for initial pass\n      LET ScriptBlock = SELECT Regex,Type FROM IocCsv WHERE Type =~ 'ScriptBlock'\n      LET ScriptBlockRegex \u003c= join(array=ScriptBlock.Regex,sep='|')\n      \n      -- materialize Commandlet regex for initial pass\n      LET Commandlet = SELECT Regex,Type FROM IocCsv WHERE Type =~ 'Commandlet'\n      LET CommandletRegex \u003c= join(array=Commandlet.Regex,sep='|')\n      \n      -- watch ETW provider and first round data manipulation\n      LET hits = SELECT \n            timestamp(epoch=timestamp(string=System.TimeStamp).unix) as EventTime,\n            System.ID as EventID,\n            System.ProcessID as ProcessID,\n            get(member=\"EventData\") AS EventData\n      FROM watch_etw(guid=\"{a0c1853b-5c40-4b15-8766-3cf1c58f985a}\") \n      WHERE ( EventData.ScriptBlockText OR EventData.Payload =~ '^Command .+ is Started\\.\\r\\n$' )\n        AND ( EventData.ScriptBlockText =~ ScriptBlockRegex\n           OR EventData.Payload =~ CommandletRegex )\n      \n      -- print rows\n      SELECT * FROM foreach(row=hits,query={\n            SELECT\n                EventTime,\n                dict(\n                    Name=Name,\n                    Type=Type,\n                    Regex=Regex,\n                    Ignore=Ignore\n                ) as Detection,\n                EventID,\n                if(condition= EventID=4104,\n                    then= EventData.ScriptBlockText,\n                    else= regex_replace(\n                            source=EventData.Payload,\n                            re='^Command | is Started\\.\\r\\n$',\n                            replace=''\n                    )) as Payload,\n                if(condition= EventID=4104,\n                    then= EventData,\n                    else= dict(Payload=EventData.Payload,\n                        ContextInfo=parse_string_with_regex(string=EventData.ContextInfo,\n                        regex=[\n                            'Severity = (?P\u003cSeverity\u003e[^\\\\r]*)',\n                            'Host Name = (?P\u003cHostName\u003e[^\\\\r]*)',\n                            'Host Version = (?P\u003cHostVersion\u003e[^\\\\r]*)',\n                            'Host ID = (?P\u003cHostID\u003e[^\\\\r]*)',\n                            'Host Application = (?P\u003cHostApplication\u003e[^\\\\r]*)',\n                            'Engine Version = (?P\u003cEngineVersion\u003e[^\\\\r]*)',\n                            'Runspace ID = (?P\u003cRunspaceID\u003e[^\\\\r]*)',\n                            'Pipeline ID = (?P\u003cPipelineID\u003e[^\\\\r]*)',\n                            'Command Name= (?P\u003cCommandName\u003e[^\\\\r]*)',\n                            'CommandType = (?P\u003cCommandType\u003e[^\\\\r]*)',\n                            'Script Name = (?P\u003cScriptName\u003e[^\\\\r]*)',\n                            'Command Path = (?P\u003cCommandPath\u003e[^\\\\r]*)',\n                            'Sequence Number = (?P\u003cSequenceNumber\u003e[^\\\\r]*)',\n                            'User = (?P\u003cUser\u003e[^\\\\r]*)',\n                            'Connected User = (?P\u003cConnectedUser\u003e[^\\\\r]*)',\n                            'Shell ID = (?P\u003cShellID\u003e[^\\\\r]*)'\n                        ]),\n                        UserData=EventData.UserData)) as EventData,\n                process_tracker_callchain(id=ProcessID).Data[-1] as ProcessInfo,\n                process_tracker_callchain(id=ProcessID).Data as ProcessChain\n            FROM IocCsv\n            WHERE \n                if(condition= EventID=4104, then= Type=~'ScriptBlock',else= Type=~'Commandlet' )\n                AND NOT if(condition=IgnoreProcessExe, \n                    then= ProcessInfo.Exe =~ IgnoreProcessExe, else= False)\n                AND NOT if(condition=IgnoreParentProcessExe, \n                    then= ProcessChain.Exe[-2] =~ IgnoreParentProcessExe, else= False)\n                AND Payload =~ Regex \n                AND NOT if(condition=Ignore, then= Payload=~Ignore, else= False)\n                AND NOT if(condition=IgnorePaths,\n                    then= EventData.Path =~ ScriptIgnorePath \n                        OR EventData.ContextInfo.CommandPath =~ ScriptIgnorePath\n                        OR EventData.ContextInfo.ScriptName =~ ScriptIgnorePath,\n                            else= False)\n            LIMIT 1 -- limts to 1 row per IocCsv entry.\n        })\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.PrefetchHunter","op":"set","definition":"name: Exchange.Windows.Detection.PrefetchHunter\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact enables hunting prefetch entries for accessed files of interest. \n  \n  Returned results include relevant prefetch information like executable, accessed \n  file, and prefetch metadata.  \n  \n  For example hunting MSBuild template files generated by an attack framework:  \n    ExecutableRegex = msbuild.exe   \n    TargetRegex = \\\\Windows\\\\Temp\\\\\n  \nparameters:\n    - name: PrefetchGlobs\n      description: \"Target prefetch files\"\n      default: C:\\Windows\\Prefetch\\*.pf\n    - name: DateAfter\n      description: \"search for prefetch files with M or B time after this date. YYYY-MM-DDTmm:hh:ssZ\"\n      type: timestamp\n    - name: DateBefore\n      description: \"search for prefetch files with M or B before this date. YYYY-MM-DDTmm:hh:ssZ\"\n      type: timestamp\n    - name: ExecutableRegex\n      description: \"Regex of executable name. e.g msbuild.exe\"\n      default: .\n      type: regex\n    - name: TargetRegex\n      description: \"Regex of accessed files to hunt for. e.g \\\\.tmp$\"\n      default: .\n      type: regex\n    - name: TargetWhitelist\n      description: \"A regex to apply as a whitelist to exclude from accessed files.\"\n      type: regex\n      \nsources:\n  - query: |\n      -- Parse prefetch files and applying artifact level filters\n      LET prefetch = SELECT * \n            Executable,\n            FilesAccessed,\n            OSPath,\n            Hash,\n            Binary,\n            ModificationTime,CreationTime\n        FROM Artifact.Windows.Forensics.Prefetch(\n            prefetchGlobs=PrefetchGlobs,binaryRegex=ExecutableRegex,\n            dateAfter=DateAfter,dateBefore=DateBefore,\n            IncludeFilesAccessed='Y')\n                \n      -- flattern FilesAccessed and apply filter\n        SELECT Executable,\n            FilesAccessed as FileAccessed,\n            OSPath,\n            ModificationTime,CreationTime,\n            Hash,\n            Binary\n        FROM flatten(query=prefetch)\n        WHERE \n            FileAccessed =~ TargetRegex\n            AND NOT if(condition=TargetWhitelist,\n                        then= FileAccessed =~ TargetWhitelist,\n                        else= False)\n        GROUP BY Executable,FileAccessed,Binary\n \n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.PrintNightmare","op":"set","definition":"name: Exchange.Windows.Detection.PrintNightmare\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n  This artifact returns any binaries in the Windows/spool/drivers/**\n  folders with an untrusted Authenticode entry.\n\n  It can be used to hunt for dll files droped during exploitation of\n  CVE-2021-1675 - PrintNightmare.\n\n  To query all attached ntfs drives: check the AllDrives switch.\n\n  I have added several filters to uplift search capabilities from the\n  original MFT artifact. Due to the multi-drive features, the MFTPath\n  will output the MFT path of the entry.\n\n  Available filters include:\n  - FullPath regex\n  - FileName regex\n  - Time bounds to select files with a timestamp within time ranges\n  - FileSize bounds\n\n  ![Sample output](https://github.com/mgreen27/velociraptor-docs/raw/patch-5/content/exchange/artifacts/PrintNightmare.png)\n\nparameters:\n  - name: MFTFilename\n    default: \"C:/$MFT\"\n  - name: Accessor\n    default: ntfs\n    type: hidden\n  - name: PathRegex\n    description: \"Regex search over FullPath.\"\n    default: Windows/System32/spool/drivers\n  - name: FileRegex\n    description: \"Regex search over File Name\"\n    default: .\n  - name: AllAuthenticode\n    type: bool\n    description: \"Show all binaries despite Authenticode trusted status (default shows only untrusted).\"\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: SizeMax\n    type: int64\n    description: \"Entries in the MFT under this size in bytes.\"\n  - name: SizeMin\n    type: int64\n    description: \"Entries in the MFT over this size in bytes.\"\n  - name: AllDrives\n    type: bool\n    description: \"Select MFT search on all attached ntfs drives.\"\n\n\nsources:\n  - query: |\n      -- time testing\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n\n\n      -- find all ntfs drives\n      LET ntfs_drives = SELECT FullPath + '/$MFT'as Path\n        FROM glob(globs=\"/*\", accessor=\"ntfs\")\n\n\n      -- function returning MFT entries\n      LET mftsearch(MFTPath) = SELECT\n            split(sep='\\\\$',string=MFTPath)[0] + FullPath as FullPath,\n            InUse,FileName,FileSize,\n            dict(\n                Created0x10 = Created0x10,\n                LastModified0x10 = LastModified0x10,\n                LastRecordChange0x10 = LastRecordChange0x10,\n                LastAccess0x10 = LastAccess0x10\n                ) as SI,\n            dict(\n                Created0x30 = Created0x10,\n                LastModified0x30 = LastModified0x10,\n                LastRecordChange0x30 = LastRecordChange0x10,\n                LastAccess0x30 = LastAccess0x10\n                ) as FN\n        FROM parse_mft(filename=MFTPath, accessor=Accessor)\n        WHERE NOT IsDir\n            AND FullPath =~ PathRegex\n            AND FileName =~ FileRegex\n            AND if(condition=SizeMax,\n                then=FileSize \u003c atoi(string=SizeMax),\n                else=TRUE)\n            AND if(condition=SizeMin,\n                then=FileSize \u003e atoi(string=SizeMin),\n                else=TRUE)\n            AND\n             ( time_test(stamp=Created0x10)\n            OR time_test(stamp=Created0x30)\n            OR time_test(stamp=LastModified0x10)\n            OR time_test(stamp=LastModified0x30)\n            OR time_test(stamp=LastRecordChange0x10)\n            OR time_test(stamp=LastRecordChange0x30)\n            OR time_test(stamp=LastAccess0x10)\n            OR time_test(stamp=LastAccess0x30))\n\n\n      -- include all attached drives\n      LET all_drives = SELECT * FROM foreach(row=ntfs_drives,\n            query={\n                SELECT *\n                FROM mftsearch(MFTPath=Path)\n                WHERE log(message=\"Processing \" + Path)\n              })\n\n\n      -- return rows\n      SELECT *,\n            parse_pe(file=FullPath) as PE,\n            authenticode(filename=FullPath) as Authenticode,\n            hash(path=FullPath) as Hash\n      FROM if(condition=AllDrives,\n        then= all_drives,\n        else= {\n           SELECT * FROM mftsearch(MFTPath=MFTFilename)\n        })\n      WHERE PE\n        AND if(condition=AllAuthenticode,\n            then=TRUE,\n            else= NOT Authenticode.Trusted = 'trusted')\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Monitoring.PrintNightmare","op":"set","definition":"name: Exchange.Windows.Monitoring.PrintNightmare\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact returns ETW PrintService events for potential\n  PrintNightmare activity.  CVE-2021-1675 and CVE-2021-34527\n\n  It monitors for DRIVER_ADDED events and enriches with binary\n  information for payload DataFile. Hunt for unexpected drivers with\n  malicious DataFiles.\n\ntype: CLIENT_EVENT\nsources:\n  - query: |\n      -- Monitor ETW provider and extract enriched target events\n      LET hits = SELECT\n            System.TimeStamp AS EventTime,\n            \"Microsoft-Windows-PrintService\" as Provider,\n            System.ID as EventId,\n            'DRIVER_ADDED' as Action,\n            EventData,\n            {\n                SELECT\n                    split(string=Name, sep=',')[0] as Name,\n                    SupportedPlatform,\n                    Version,\n                    DriverPath,\n                    ConfigFile,\n                    DataFile\n                  FROM wmi(query='SELECT * FROM Win32_PrinterDriver',namespace='root/CIMV2')\n                  WHERE Name = EventData.param1\n            } as DriverInformation\n        FROM watch_etw(guid=\"{747EF6FD-E535-4D16-B510-42C90F6873A1}\",\n            name=format(format=\"Velociraptor-%v-PrintService\", args=now()))\n        WHERE EventId = 316\n\n      -- output rows and final binary enrichment\n      SELECT\n        EventTime,\n        Provider,\n        EventId,\n        Action,\n        EventData.param1 as Name,\n        EventData.param2 as Platform,\n        DriverInformation.Version as Version,\n        if(condition=DriverInformation,\n            then= dict(\n                DriverPath=DriverInformation.DriverPath,\n                ConfigFile=DriverInformation.ConfigFile,\n                DataFile=DriverInformation.DataFile),\n            else= EventData.param4) as Files,\n        hash(path=DriverInformation.DataFile) as DataFileHash,\n        parse_pe(file=DriverInformation.DataFile) as DataFilePE,\n        authenticode(filename=DriverInformation.DataFile) as DataFileAuthenticode\n      FROM hits\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Remediation.PrintSpooler","op":"set","definition":"name: Exchange.Windows.Remediation.PrintSpooler\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will enable mitigation of PrintSpooler exploitation\n   used by PrintNightmare - CVE-2021-34527 and CVE-2021-1675.\n\n   There are two selectable mitigations:\n\n     - disabling the print spooler service.\n     HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Spooler\\Start = 4 (service disabled).\n\n     - disable remote registration of the spool service.\n     HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RegisterSpoolerRemoteRpcEndPoint = 2 (RegisterSpoolerRemoteRpcEndPoint disables).\n\n   NOTE: ChangeServiceStartup will set to disable, not stop the\n   printspool service.  Its always reccomended to use group policy to\n   deploy these settings.\n\n\ntype: CLIENT\n\nparameters:\n - name: TargetGlobs\n   type: csv\n   default: |\n    Target,Description,Potential Values\n    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Spooler\\Start,Print spooler service startup,\"0 = Boot, 1 = System, 2 = Automatic, 3 = Manual, 4 = Disabled\"\n    HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RegisterSpoolerRemoteRpcEndPoint,Print spooler RemoteRpcEndPoint registration,\"Enabled = 1, Disabled = 2\"\n    HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Policies\\Microsoft\\Windows NT\\Printers\\RegisterSpoolerRemoteRpcEndPoint,Print spooler RemoteRpcEndPoint registration WOW6432Node,\"Enabled = 1, Disabled = 2\"\n - name: MitigateServiceStartup\n   type: bool\n - name: MitigateRegisterSpoolerRemoteRpcEndPoint\n   type: bool\n\nsources:\n  - query: |\n      -- remediation template\n      LET execute_reg(key,name,value) = SELECT * FROM execve(argv=['reg','add',key,'/v',name,'/t','REG_DWORD','/d',value,'/f'])\n      LET Arch = SELECT PROCESSOR_ARCHITECTURE FROM environ()\n\n      LET remediation \u003c= SELECT * FROM chain(\n            a=if(condition=MitigateServiceStartup,\n                then = execute_reg(key='HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Spooler',name='Start',value=4)),\n            b= if(condition=MitigateRegisterSpoolerRemoteRpcEndPoint,\n                then= execute_reg(key='HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows NT\\\\Printers',name='RegisterSpoolerRemoteRpcEndPoint',value=2)),\n            c= if(condition=MitigateRegisterSpoolerRemoteRpcEndPoint,\n                then= if(condition= Arch.PROCESSOR_ARCHITECTURE[0]='AMD64',\n                    then= execute_reg(key='HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\WOW6432Node\\\\Policies\\\\Microsoft\\\\Windows NT\\\\Printers',name='RegisterSpoolerRemoteRpcEndPoint',value=2)))\n            )\n\n      SELECT * FROM foreach(row=TargetGlobs,\n        query={\n            SELECT\n                Description,\n                `Potential Values`,\n                mtime as ModifiedTime,FullPath,\n                basename(path=FullPath) as KeyName,\n                Data.type as KeyType,\n                Data.value as KeyValue\n            FROM glob(globs=Target, accessor=\"reg\")\n        })\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.System.PrinterDriver","op":"set","definition":"name: Exchange.Windows.System.PrinterDriver\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will enumerate installed PrintDrivers using the\n   Win32_PrinterDriver wmi class and parse each DriverPath, ConfigFile\n   and DataFile.\n\n   Hunt by searching for untrusted binaries or suspicious removed\n   binararies for evidence of previous exploitation.\n\ntype: CLIENT\n\nsources:\n  - query: |\n      LET Win32_PrinterDrivers = SELECT\n            split(string=Name, sep=',')[0] as Name,\n            SupportedPlatform,\n            Version,\n            DriverPath,\n            ConfigFile,\n            DataFile\n          FROM wmi(query='SELECT * FROM Win32_PrinterDriver',namespace='root/CIMV2')\n\n      SELECT * FROM Win32_PrinterDrivers\n\n  - name: BinaryCheck\n    query: |\n      SELECT\n            lowcase(string=Binary) as Binary,\n            array(a1={\n                SELECT Name FROM Win32_PrinterDrivers\n                WHERE ( DriverPath = Binary OR ConfigFile = Binary OR DataFile = Binary )\n            }) as DriverNames,\n            hash(path=Binary) as Hash,\n            parse_pe(file=Binary) as PE,\n            authenticode(filename=Binary) as Authenticode\n      FROM chain(\n            a={\n                SELECT Name, DriverPath as Binary, 'DriverPath' as Type\n                FROM Win32_PrinterDrivers\n            },\n            b={\n                SELECT Name as DriverName, ConfigFile as Binary, 'ConfigFile' as Type\n                FROM Win32_PrinterDrivers\n            },\n            c={\n                SELECT Name as DriverName, DataFile as Binary, 'DataFile' as Type\n                FROM Win32_PrinterDrivers\n            })\n      GROUP BY lowcase(string=Binary)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Remediation.Process","op":"set","definition":"name: Exchange.Windows.Remediation.Process\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact enables killing a process by Name, Path or PID.\n  \n  WARNING: This is dangerous content as there are no guardrails. \n  Scope remediation first then ReallyDoIt to kill process.\n  \ntype: CLIENT\nparameters:\n  - name: ProcessNameRegex\n    default: ^malware.exe$\n    type: regex\n  - name: ProcessPathRegex\n    default: .\n    type: regex\n  - name: ProcessCliRegex\n    default: .\n    type: regex\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: ReallyDoIt\n    description: When selected will really remove!\n    type: bool  \n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- find velociraptor process\n      LET me = SELECT Pid FROM pslist(pid=getpid())\n\n      -- find all processes and add filters\n      LET targets = SELECT Name as ProcessName, Exe, CommandLine, Pid\n        FROM pslist()\n        WHERE TRUE\n            AND Name =~ ProcessNameRegex\n            AND Exe =~ ProcessPathRegex\n            AND CommandLine =~ ProcessCliRegex\n            AND format(format=\"%d\", args=Pid) =~ PidRegex\n            AND NOT Pid in me.Pid\n            AND NOT upcase(string=Exe) in whitelist.Path\n        \n      SELECT * , \n        if( condition = ReallyDoIt,\n            then = pskill(pid=Pid),\n            else = False \n                ) as Killed\n      FROM targets\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.ProxyHunter","op":"set","definition":"name: Exchange.Windows.Detection.ProxyHunter\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact detects evidence of several common proxy tools.\n\n   1. Hunt through Event Logs for potential evidence of proxy tool commandline.\n   2. Checks active connections for proxy tool commandline (for active threat)\n   3. Checks port proxy registry key for OS level forwarding\n\n   NOTE: this artifact is Windows only. Similar queries for 2. can be run on linux and macos\n\ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     description: Glob target for event log regex search\n     default: '%SystemRoot%\\\\System32\\\\Winevt\\\\Logs\\\\*{Powershell,Security,Sysmon}*.evtx'\n   - name: ProxyCliRegex\n     type: regex\n     description: Regex to detect proxy tool cli. Default example includes plink.\n     default: \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d{1,5}:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}:\\d{1,5}\\s+-p|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\:\\d{1,5} :\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\:\\d{1,5}:socks\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- firstly hunt through Event Logs for potential evidence of proxy tool commandline\n      SELECT EventTime, Computer, Channel, Provider,\n        EventID, EventData, UserData, Message, FullPath\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n            IocRegex=ProxyCliRegex,\n            EvtxGlob=TargetGlob,\n            VSSAnalysisAge=VSSAnalysisAge)\n\n  - name: ActiveConnections\n    query: |\n      -- Secondly check for proxy CLI with potential active network connections by CLI.\n      SELECT * FROM Artifact.Windows.Network.NetstatEnriched(CommandLineRegex=ProxyCliRegex,ProcessNameRegex='.')\n\n  - name: PortProxy\n    query: |\n      -- next we check for Windows inbuilt proxy config usually empty\n      SELECT * FROM Artifact.Windows.Registry.PortProxy()\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.PublicIP","op":"set","definition":"name: Exchange.Windows.Detection.PublicIP\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact queries for RDP and Authentication events with a Public IP\n    source. The artifact uses Windows.EventLogs.RDPAuth and has several built in\n    notebooks for analysis.\n\ntype: CLIENT\n\nparameters:\n   - name: IncludeLocalhost\n     description: include localhost and 127.0.0.1 events (may be noisy)\n     type: bool\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT * FROM Artifact.Windows.EventLogs.RDPAuth(\n                    SourceIPRegex='''\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|localhost''',\n                    VSSAnalysisAge=VSSAnalysisAge )\n      WHERE NOT SourceIP =~ '''^0\\.''' -- Current network\n        AND NOT SourceIP =~ '''^10\\.''' -- Private network\n        AND NOT SourceIP =~ '''^100\\.(6[4-9]|[7-9][0-9]|1([0-1][0-9]|2[0-7]))\\.''' -- Private network\n        AND NOT if(condition= IncludeLocalhost,\n            then= False,\n            else= SourceIP =~ '''^127\\.|localhost''' )-- Localhost\n        AND NOT SourceIP =~ '''^169.254\\.''' -- Link local\n        AND NOT SourceIP =~ '''^172.(1[6-9]|2[0-9]|3[0-1])\\.''' -- Private network\n        AND NOT SourceIP =~ '''^192\\.0\\.0''' -- Private network\n        AND NOT SourceIP =~ '''^192\\.0\\.2''' -- Documentation\n        AND NOT SourceIP =~ '''^192\\.88\\.99\\.''' -- Internet relay\n        AND NOT SourceIP =~ '''^192\\.168\\.''' -- Private network\n        AND NOT SourceIP =~ '''^198\\.1[8-9]\\.''' -- Private network\n        AND NOT SourceIP =~ '''^198\\.51\\.100\\.''' -- Documentation\n        AND NOT SourceIP =~ '''^203\\.0\\.113\\.''' -- Documentation\n        AND NOT SourceIP =~ '''^2(2[4-9]|3[0-9])\\.''' -- IP multicast\n        AND NOT SourceIP =~ '''^233\\.252\\.''' -- Documentation\n        AND NOT SourceIP =~ '''^2(4[0-9]|5[0-5])\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,2}[0-4]''' -- reserved\n        AND NOT SourceIP =~ '''^255\\.255\\.255\\.255$''' -- Broadcast\n\n    notebook:\n      - type: vql_suggestion\n        name: Public IP\n        template: |\n            /*\n            ### IPublic IP\n            Triage view with suggested WHERE Lines\n\n            */\n\n            SELECT EventTime,Computer,Channel,\n                EventID,LogonType,Description,\n                DomainName +'/' + UserName as User,\n                SourceIP,\n                Message\n            FROM source(artifact=\"Windows.Detection.PublicIP\")\n            WHERE True\n                --AND EventTime \u003e '2022-10'\n                --AND EventTime \u003c '2022-12'\n                --AND SourceIP =~ '^127\\\\.|localhost'\n                --AND NOT SourceIP =~ '^127\\\\.|localhost'\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Carving.Qakbot","op":"set","definition":"name: Exchange.Windows.Carving.Qakbot\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact enables Qakbot payload detection and configuration extraction \n    from a byte stream, process or file on disk. The artifact runs a yara scan \n    as a detection step, then attempts to process the payload to extract \n    configuration.\n    \n    QakBot or QBot, is a modular malware first observed in 2007 that has been \n    historically known as a banking Trojan. Qbot is used to steal credentials, \n    financial, or other data, and in recent years, regularly a loader for other \n    malware leading to hands on keyboard ransomware. \n    \n    Qakbot (Qbot) payloads have an RC4 encoded configuration, located inside two \n    PE resources. Encoded strings and xor key can also be found inside the .data \n    section starting at a specific offset. \n    \n    Some of the options available cover changes observed in the last year in the \n    decryption process to allow simplified decoding workflow:\n    \n    - StringOffset - the offset of the string xor key and encoded strings.\n    - PE resource type - the configuration is typically inside 2 resources.\n    - Unescaped key string - this field is typically reused over samples\n    - Type of encoding: single or double, double being the more recent.\n    - Worker threads for bulk analysis / research use cases.\n\n    The decryption used is fairly simple with the first pass RC4 found in \n    encoded strings embedded in the malware and is often reused from previous \n    samples. \n    \n    Each decoded output includes the first 20 bytes in hex as the SHA1 of the \n    data as verification. The second pass RC4 key is the next 20 bytes in hex, \n    Second pass RC4 decoding has the same verification of decrypted data.\n    \n    NOTE: Requires 0.6.8 for PE dump\n\nreference:\n  - https://malpedia.caad.fkie.fraunhofer.de/details/win.qakbot\n  - https://docs.velociraptor.app/blog/2023/2023-04-05-qakbot/\ntype: CLIENT\n\n\nparameters:\n  - name: TargetBytes\n    description: Parameter to enabling piping a byte stream of a payload dll\n    default:\n    type: hidden\n  - name: TargetGlob\n    description: Glob to target payloads on disk\n    default: \n  - name: PidRegex\n    description: Regex of target Process ID to scan\n    default: .\n    type: regex\n  - name: ProcessRegex\n    description: Regex of target Process Name to scan\n    type: regex\n  - name: StringOffset\n    description: Offset of beginning of encoded strings in .data section. \n    default: 0x50\n    type: int\n  - name: ResourceRegex\n    description: Regex to select targeted PE resource name.\n    default: 'BITMAP|RCDATA'\n  - name: Keys\n    description: Lookup table of recent Keys. Add additional keys to extend capability.\n    type: csv\n    default: |\n        Type,Key\n        double,Muhcu#YgcdXubYBu2@2ub4fbUhuiNhyVtcd\n        double,bUdiuy81gYguty@4frdRdpfko(eKmudeuMncueaN\n        single,\\System32\\WindowsPowerShel1\\v1.0\\powershel1.exe\n        single,\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  - name: Workers\n    description: Number of workers to run. For bulk usecase increase to improve performance.\n    default: 1\n    type: int\n  - name: YaraRule\n    description: Yara rule to detect Qakbot payload.\n    type: hidden\n    default: |\n        rule win_qakbot {\n            meta:\n                author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n                date = \"2023-01-25\"\n                description = \"Detects win.qakbot.\"\n            strings:\n                $sequence_0 = { 50 e8???????? 8b06 47 }\n                $sequence_1 = { e9???????? 33c0 7402 ebfa }\n                $sequence_2 = { 740d 8d45fc 6a00 50 }\n                $sequence_3 = { 8b06 47 59 59 }\n                $sequence_4 = { eb13 e8???????? 33c9 85c0 0f9fc1 41 }\n                $sequence_5 = { 7402 ebfa 33c0 7402 }\n                $sequence_6 = { 0fb64903 c1e008 0bc2 c1e008 0bc1 c3 55 }\n                $sequence_7 = { ebfa eb06 33c0 7402 }\n                $sequence_8 = { 8d45fc 6aff 50 e8???????? 59 59 }\n                $sequence_9 = { 59 59 6afb e9???????? }\n                $sequence_10 = { 48 50 8d8534f6ffff 6a00 50 }\n                $sequence_11 = { 5e c9 c3 55 8bec 81ecc4090000 }\n                $sequence_12 = { e8???????? 83c410 33c0 7402 }\n                $sequence_13 = { 7cef eb10 c644301c00 ff465c 8b465c 83f838 }\n                $sequence_14 = { eb0b c644301c00 ff465c 8b465c 83f840 7cf0 }\n                $sequence_15 = { c644061c00 ff465c 837e5c38 7cef eb10 c644301c00 }\n                $sequence_16 = { 7507 c7466401000000 83f840 7507 }\n                $sequence_17 = { 85c0 750a 33c0 7402 }\n                $sequence_18 = { 72b6 33c0 5f 5e 5b c9 c3 }\n                $sequence_19 = { 7402 ebfa e9???????? 6a00 }\n                $sequence_20 = { c7466001000000 33c0 40 5e }\n                $sequence_21 = { 6afe 8d45f4 50 e8???????? }\n                $sequence_22 = { 7402 ebfa eb0d 33c0 }\n                $sequence_23 = { 50 ff5508 8bf0 59 }\n                $sequence_24 = { 57 ff15???????? 33c0 85f6 0f94c0 }\n                $sequence_25 = { ff15???????? 85c0 750c 57 ff15???????? 6afe }\n                $sequence_26 = { c3 33c9 3d80000000 0f94c1 }\n                $sequence_27 = { 6a02 ff15???????? 8bf8 83c8ff }\n                $sequence_28 = { 6a00 58 0f95c0 40 50 }\n                $sequence_29 = { e8???????? 33c0 c3 55 8bec 51 51 }\n                $sequence_30 = { 7412 8d85d8feffff 50 57 ff15???????? }\n                $sequence_31 = { 00e9 8b55e4 880c1a 8a4df3 }\n                $sequence_32 = { 00ca 66897c2446 31f6 8974244c }\n                $sequence_33 = { 01c1 894c2430 e9???????? 55 }\n                $sequence_34 = { 01c1 81e1ffff0000 83c101 8b442474 }\n                $sequence_35 = { 00e9 884c0451 83c001 39d0 }\n                $sequence_36 = { 01c1 8b442448 01c8 8944243c }\n                $sequence_37 = { 01c1 894c2404 8b442404 8d65fc }\n                $sequence_38 = { 01c1 21d1 8a442465 f6642465 }\n            condition:\n                7 of them and filesize \u003c 1168384\n        }\n\n    \nsources:\n  - query: |\n      -- parses PE and extracts EncodedStrings from the.data section\n      LET encoded_strings(data) = SELECT \n            strip(suffix='\\x00\\x00', string=_value) as Sections\n        FROM foreach(row=split(sep='\\x00\\x00\\x00\\x00',string=data))\n        WHERE Sections\n      LET find_data(data) = SELECT\n            encoded_strings(data=read_file(filename=data,accessor='data',offset=FileOffset,length=Size)[StringOffset:]).Sections as EncodedStrings\n        FROM foreach(row=parse_pe(file=data,accessor='data').Sections,\n                query={ SELECT * FROM _value })\n        WHERE Name = '.data'\n        \n      -- decodes strings only show printable\n       LET decode_strings(data) = SELECT * FROM foreach(\n        row={ \n            SELECT count() - 1 as Index\n            FROM range(start=0, end=len(list=data))},\n        query={\n            SELECT \n                filter(\n                    list=split(sep='\\x00',string=xor(key=data[Index],string=_value)),\n                    regex=\"^[ -~]{2,}$\" ) as String\n            FROM foreach(row=data[Index:])\n            WHERE len(list=String) \u003e 2 \n                AND NOT String =~ '^\\\\s+$'\n        })\n            \n      -- parses PE and extracts resource sections        \n      LET find_resource(data) = SELECT Type, TypeId,\n            FileOffset,\n            DataSize,\n            read_file(filename=data,accessor='data',offset=FileOffset,length=DataSize) as Data\n        FROM foreach(row=parse_pe(file=data,accessor='data').Resources)\n        WHERE Type =~ ResourceRegex\n        ORDER BY DataSize\n      \n      -- first round of RC4 encoding. Verification hash is hex of first 20 bytes\n      LET rc4_wth_hashed_key(data,key) = \n            crypto_rc4(\n                key = unhex(string=hash(path=key,accessor='data',hashselect='SHA1').SHA1),\n                string = data )\n      -- second round of RC4 encoding accounting for verification.\n      LET advanced_method(data,key)= \n            crypto_rc4(\n                key = rc4_wth_hashed_key(data=data,key=key)[20:40],\n                string = rc4_wth_hashed_key(data=data,key=key)[40:] )\n      \n      -- this function finds key and verifies results.\n      LET decode(data) = SELECT Key,Type,\n            if(condition= Type='single',\n                then= rc4_wth_hashed_key(data=data,key=Key),\n                else= advanced_method(data=data,key=Key)) as Data\n        FROM Keys\n        WHERE format(format='%x',args=Data[:20]) = hash(path=Data[20:],accessor='data',hashselect='SHA1').SHA1\n        LIMIT 1\n        \n      -- find netaddress method with the most expected standard ports.\n      LET find_c2(methods) = SELECT _value as C2, \n            len(list=filter(list=_value,regex=':(443|80|([0-9])\\1{4,})$')) as Total \n        FROM foreach(row=methods) ORDER BY Total DESC\n        LIMIT 1\n        \n      -- bytestream: only works on a payload dll as bytestream\n      LET bytestream = SELECT Rule as Detection,\n            hash(path=TargetBytes, accessor='data') as DataBytes,\n            len(list=TargetBytes) as Size,\n            find_resource(data=TargetBytes,accessor='data') as Resources,\n            find_data(data=TargetBytes,accessor='data')[0].EncodedStrings as DecodedStrings\n        FROM yara(  files=TargetBytes,\n                    accessor='data',\n                    rules=YaraRule, key='X',\n                    number=1 )\n\n      -- find target files\n      LET target_files = SELECT OSPath, Size,\n                Mtime, Btime, Ctime, Atime \n        FROM glob(globs=TargetGlob)\n        WHERE NOT IsDir AND Size \u003e 0\n        \n      -- search for qakbot in scoped files\n      LET file_payloads = SELECT * FROM foreach(row= target_files,\n            query={\n                SELECT\n                    Rule as Detection,\n                    OSPath,Size,\n                    dict( \n                        Mtime = Mtime, \n                        Atime = Atime,\n                        Ctime = Ctime,\n                        Btime = Btime\n                            ) as Timestamps,\n                    find_resource(data=read_file(filename=OSPath),accessor='data') as Resources,\n                    find_data(data=read_file(filename=OSPath),accessor='data')[0].EncodedStrings as DecodedStrings\n                FROM yara(  files=OSPath,\n                            rules=YaraRule,\n                            end=Size,  key='X',\n                            number=1 )\n            })\n            WHERE log(message=\"Scanning file : %v\", args=OSPath)\n      \n      -- find processes in scope of query\n      LET processes = SELECT int(int=Pid) AS Pid,\n              Name, Exe, CommandLine, CreateTime,Username\n        FROM process_tracker_pslist()\n        WHERE Name =~ ProcessRegex\n            AND format(format=\"%d\", args=Pid) =~ PidRegex\n            AND log(message=\"Scanning pid %v : %v\", args=[Pid, Name])\n      \n      -- find unbacked sections with xrw permission\n      LET sections = SELECT * FROM foreach(\n          row=processes,\n          query={\n            SELECT CreateTime as ProcessCreateTime,Pid, \n                Name as ProcessName,\n                Exe,\n                CommandLine,\n                Username,\n                Address as Offset,\n                Size,\n                pathspec(\n                    DelegateAccessor=\"process\",\n                    DelegatePath=Pid,\n                    Path=Address) AS _PathSpec\n            FROM vad(pid=Pid)\n            WHERE MappingName=~'^$'\n                AND Protection='xrw'\n                AND NOT State =~ 'RESERVE'\n          })\n      \n      -- search for qakbot in suspicious sections\n      LET process_hits = SELECT *\n        FROM foreach(row= sections,\n            query={\n                SELECT\n                    Rule as Detection,\n                    dict( \n                        ProcessCreateTime = ProcessCreateTime,\n                        Pid = Pid,\n                        ProcessName = ProcessName,\n                        Exe = Exe,\n                        CommandLine = CommandLine,\n                        Username = Username,\n                        Offset = Offset,\n                        PayloadSize = Size\n                    ) as ProcessInfo,\n                    find_resource(data=pe_dump(in_memory=Size,pid=Pid,base_offset=Offset),accessor='data') as Resources,\n                    find_data(data=pe_dump(in_memory=Size,pid=Pid,base_offset=Offset),accessor='data')[0].EncodedStrings as DecodedStrings\n                FROM yara(  accessor='offset',\n                            files=_PathSpec,\n                            rules=YaraRule,\n                            end=Size,  key='X',\n                            number=1 )\n            })\n      \n      -- decode campaign from larger resrouce\n      LET decode_campaign = SELECT *,\n        decode(data=Resources[0].Data)[0] as Campaign,\n        decode_strings(data=DecodedStrings).String as DecodedStrings\n      FROM foreach(row={ SELECT * FROM switch(\n                                a = if(condition=TargetBytes, then=bytestream),\n                                b = if(condition=TargetGlob, then=file_payloads),\n                                c = process_hits )\n                        }, workers = Workers)\n        \n      -- decode raw C2 data from larger resource\n      LET decode_c2 = SELECT *\n            advanced_method(data=Resources[1].Data,key=Campaign.Key)[20:] as _C2Raw\n          FROM decode_campaign\n    \n      -- profile to parse Qakbot C2 data: LE netaddress with a seperator\n      LET PROFILE = '''\n           [\n             [\"Qakbot1\", 0, [\n               [\"Method1\", 0, \"Array\",\n                     {  \"type\": \"Entry\",\"count\": 200,\n                        \"sentinel\": \"x=\u003ex.C2 = '0.0.0.0:0'\"\n                     }],\n               ]],\n              [\"Entry\", 8, [\n               [\"__IP\", 1, \"uint32\"],\n               [\"__PORT\", 5, \"uint16b\"],\n               ['C2',0,'Value',{'value':\"x=\u003eformat(format='%s:%d', args=[ip(netaddr4_le=x.__IP),x.__PORT])\"}],\n             ]],\n             [\"Qakbot2\", 0, [\n               [\"Method2\", 0, \"Array\",\n                     {  \"type\": \"Entry2\", \"count\": 200,\n                        \"sentinel\": \"x=\u003ex.C2 = '0.0.0.0:0'\"\n                     }],\n               ]],\n              [\"Entry2\", 7, [\n               [\"__IP\", 1, \"uint32\"],\n               [\"__PORT\", 5, \"uint16b\"],\n               ['C2',0,'Value',{'value':\"x=\u003eformat(format='%s:%d', args=[ip(netaddr4_le=x.__IP),x.__PORT])\"}],\n             ]]\n           ]'''\n           \n      -- calculate C2 IPs using two observed methods\n      LET results = SELECT *,\n            Campaign.Key as Key,\n            parse_string_with_regex(string=Campaign.Data,\n                regex=[\n                        '''3=(?P\u003cTimestamp\u003e[ -~]*)\\r\\n''',\n                        '''10=(?P\u003cName\u003e[ -~]*)\\r\\n'''\n                    ]) as Campaign,\n            parse_binary(filename=_C2Raw,accessor='data', profile=PROFILE, struct=\"Qakbot1\").Method1['C2'] as _C2method1,\n            parse_binary(filename=_C2Raw,accessor='data', profile=PROFILE, struct=\"Qakbot2\").Method2['C2'] as _C2method2\n        FROM decode_c2\n      \n      -- finally determine C2 encoding and pretty timestamp then output rows and remove unwanted fields\n      SELECT * FROM column_filter(\n        query={\n            SELECT *,\n                Campaign + dict(Timestamp=timestamp(epoch=Campaign.Timestamp)) as Campaign,\n                --upload(accessor='scope',file='_C2Raw') as C2RawUpload, --uncomment to troubleshoot bad C2\n                find_c2(methods=[_C2method1,_C2method2])[0].C2 as C2\n            FROM results\n        }, exclude=[\"_C2method1\",\"_C2method2\",\"_C2Raw\",\"Resources\"])","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.RecordIDCheck","op":"set","definition":"name: Exchange.Windows.EventLogs.RecordIDCheck\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact will compare EventLog records and report on\n  abnormalities in RecordID sequence and optional time gap. The\n  artifact can be used for both hunting, remote or local analysis.\n\n  There are several parameter's available.\n    - EvtxGlob glob of EventLogs to target. Default to all but can be targeted.\n    - PathRegex enables filtering on evtx path for specific log targetting.\n    - DateAfter enables search for events after this date.\n    - DateBefore enables search for events before this date.\n    - MaxTimeDifference enables flaging temporal gaps between Events. Note also potential false positives on machines turned off.\n    - SearchVSS enables searching over VSS\n\n  Note: Please use with caution this artifact can potentially be heavy\n  on the endpoint.  Temporal analysis is turned off by default due to\n  potential for false positives during machine shutdown. Sequential\n  false positives may also occur very occasionally.\n\n  version: 0.6.1\n\nparameters:\n  - name: EvtxGlob\n    description: Target glob to process for abnormalities.\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\*.evtx'\n  - name: PathRegex\n    description: Event log Regex to enable filtering on path\n    default: .\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: MaxTimeDifference\n    description: Alert on events with a gap between previous event greater than this number in seconds.\n  - name: SearchVSS\n    description: \"Add VSS into query.\"\n    type: bool\n\nsources:\n  - query: |\n      -- time testing\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n\n      -- create dict for previous results.\n      LET EvtxPath\u003c=dict(FullPath='',RecordID='',EventTime='')\n\n      -- expand provided glob into a list of paths on the file system (fs)\n      LET fspaths \u003c= SELECT FullPath\n        FROM glob(globs=expand(path=EvtxGlob))\n        WHERE FullPath =~ PathRegex\n\n      -- function returning list of VSS paths corresponding to path\n      LET vsspaths(path) = SELECT FullPath\n        FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)\n        WHERE FullPath =~ PathRegex\n\n      -- function returning IOC hits\n      LET evtxsearch(PathList) = SELECT * FROM foreach(\n            row=PathList,\n            query={\n                SELECT\n                    FullPath,\n                    System.Computer as Computer,\n                    System.Channel as Channel,\n                    EvtxPath.OLDEventTime as FirstEventTime,\n                    set(item=EvtxPath,field='OLDFullPath',value=EvtxPath.FullPath) as _SetOLDFullPath,\n                    set(item=EvtxPath,field='FullPath',value=FullPath) as _SetFullPath,\n                    set(item=EvtxPath,field='OLDRecordID',value=EvtxPath.RecordID) as _SetOLDRecordID,\n                    set(item=EvtxPath,field='RecordID',value=System.EventRecordID) as _SetRecordID,\n                    set(item=EvtxPath,field='OLDEventTime',value=EvtxPath.EventTime) as _SetOLDEventTime,\n                    set(item=EvtxPath,field='EventTime',value=timestamp(epoch=int(int=System.TimeCreated.SystemTime))) as _SetEventTime,\n                    EvtxPath.OLDRecordID as FirstRecordID,\n                    timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS SecondEventTime,\n                    System.EventRecordID as SecondRecordID,\n                    System.EventRecordID - EvtxPath.OLDRecordID as _RecordIDSequence,\n                    EvtxPath.OLDFullPath as _OLDFullPath\n                FROM parse_evtx(filename=FullPath)\n                WHERE\n                    time_test(stamp=SecondEventTime)\n            }\n          )\n\n      -- include VSS\n      LET include_vss = SELECT * FROM foreach(row=fspaths,\n            query={\n                SELECT *\n                FROM evtxsearch(PathList={\n                        SELECT FullPath FROM vsspaths(path=FullPath)\n                    })\n                --GROUP BY EventRecordID,Channel\n              })\n\n      -- exclude VSS`\n      LET exclude_vss = SELECT *\n        FROM evtxsearch(PathList={SELECT FullPath FROM fspaths})\n      -- return rows\n      SELECT *,\n        SecondEventTime.Unix - FirstEventTime.Unix as SecondsGap,\n        if(condition= NOT _RecordIDSequence=1,\n                then= \"EventRecordID not sequential\",\n                else= \"Gap between EventRecordIDs exceeds maximum seconds.\") as Description\n      FROM if(condition=SearchVSS,\n        then=include_vss,\n        else=exclude_vss)\n      WHERE _RecordIDSequence\n        AND FullPath = _OLDFullPath\n        AND\n            ( if(condition=MaxTimeDifference,\n                then= SecondsGap \u003e int(int=MaxTimeDifference),\n                else= False)\n            OR NOT _RecordIDSequence=1 )\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Remediation.Registry","op":"set","definition":"name: Exchange.Windows.Remediation.Registry\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact uses glob to remove a registry key.\n    \n    TypeRegex allows targeting of key or value. For service remediation key, for \n    run key remediation SZ or .   \n    \n    WARNING: PLEASE SCOPE FIRST and use appropriate targeting.\n    \ntype: CLIENT\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: TargetRegistryGlob\n    default: HKEY_LOCAL_MACHINE\\SYSTEM\\{CurrentControlSet,ControlSet*}\\Services\\ServiceName\n    description: Use a glob to define the keys that will be targetted.\n  - name: TypeRegex\n    default: key\n    description: Regex for Registry type. Usually key or SZ or .\n  - name: ReallyDoIt\n    description: When selected will really remove!\n    type: bool\n\nsources:\n  - query: |\n        SELECT  OSPath, \n                Name,\n                Data.type as Type,\n                Data.value as Value,\n                Mtime as Modified,\n                if(condition=ReallyDoIt,\n                    then= if(condition= Data.type = 'key',\n                        then= reg_rm_key(path=OSPath),\n                        else= reg_rm_value(path=OSPath)),\n                    else= FALSE ) as Deleted\n        FROM glob(globs=TargetRegistryGlob, accessor='registry')\n        WHERE Type =~ TypeRegex\n        \ncolumn_types:\n  - name: Modified\n    type: timestamp\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Detection.RemoteIconForcedAuth","op":"set","definition":"name: Exchange.Windows.Detection.RemoteIconForcedAuth\nauthor: ACEResponder.com\ndescription: |\n   Attackers plant SCF, URL, and LNK files with malicious icon file paths\n   on file shares to escalate privileges or maintain persistence. This attack\n   only requires the user to browse to the location of the malicious file.\n   This artifact enumerates file shares and returns an event for each file with a\n   remote icon. It can also scan a target root directory since attackers commonly\n   use other locations like desktops.\nreference:\n   - https://www.cisa.gov/news-events/alerts/2017/10/20/advanced-persistent-threat-activity-targeting-energy-and-other\n   - https://attack.mitre.org/techniques/T1187/\n   - https://github.com/mdsecactivebreach/Farmer\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: AllShares\n     description: Scan all file shares on the host (excluding hidden shares). This option will ignore TargetFolder.\n     type: bool\n     default: Y\n   - name: AllowList\n     description: Each entry in the AllowList is checked against the TargetHost field. Matches are omitted.\n     type: csv\n     default: |\n        TargetHost\n   - name: TargetFolder\n     description: Root folder to search for SCF, URL, and LNK files. Uncheck AllShares to run. Backslashes should be escaped.\n     default: C:\\\\\n\n\nimports:\n  - Windows.Forensics.Lnk\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET script = '''\n        $out = @()\n        (Get-SmbShare | Where-Object {-not $_.Name.endswith('$')} | Select-Object -property Path) | %{\n            $out += New-Object PSObject -Property @{\n                Path = $_.Path + '\\**\\*.lnk'\n            }\n            $out += New-Object PSObject -Property @{\n                Path = $_.Path + '\\**\\*.url'\n            }\n            $out += New-Object PSObject -Property @{\n                Path = $_.Path + '\\**\\*.scf'\n            }\n        }\n        $out | ConvertTo-Json\n      '''\n\n      LET paths = SELECT * FROM if(\n        condition=AllShares,\n        then={SELECT * FROM foreach(row={SELECT Stdout FROM execve(argv=[\"Powershell\", \"-ExecutionPolicy\",\"unrestricted\", \"-c\", script], length=1000000)}, query = {SELECT * FROM parse_json_array(data=Stdout)})},\n        else={SELECT * FROM parse_json_array(data='[{\"Path\":\"'+TargetFolder+'\\**\\*\"}]')}\n\n        )\n\n\n      LET hits = SELECT *, {\n                    SELECT *\n                    FROM Artifact.Windows.Forensics.Lnk(TargetGlob=FullPath)\n                    WHERE FullPath =~ \"lnk$\"\n                  } as lnk_file,\n                  {\n                    SELECT Data,\n                           parse_string_with_regex(\n                               string=Data,\n                               regex=['IconFile=(?P\u003cIconLocation\u003e.*)']) AS parsed\n\n                    FROM read_file(filenames=[FullPath])\n                    WHERE FullPath =~ '(scf|url)'\n                  } AS url_file\n\n      FROM glob(globs=array(a={SELECT * FROM paths}))\n      WHERE FullPath =~ \"(scf|url|lnk)$\" AND (lnk_file.Icons=~'^\\\\\\\\' OR url_file.parsed.IconLocation=~'^\\\\\\\\')\n\n      LET final = SELECT *, parse_string_with_regex(string=IconLocation,regex=['^\\\\\\\\\\\\\\\\(?P\u003chost\u003e\\[^\\\\\\\\\\]+)']).host AS TargetHost FROM foreach(row={SELECT * FROM hits}, query={\n        SELECT * FROM if(\n            condition=lnk_file,\n            then={SELECT Name, ModTime, FullPath, OSPath, Mtime, Btime, Ctime, Atime, lnk_file.Icons AS IconLocation FROM hits WHERE lnk_file.Icons},\n            else={SELECT Name, ModTime, FullPath, OSPath, Mtime, Btime, Ctime, Atime, url_file.parsed.IconLocation AS IconLocation, url_file.Data AS Data FROM hits}\n            )\n      }) WHERE NOT TargetHost IN AllowList.TargetHost AND IconLocation\n\n      SELECT * FROM final\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Generic.Detection.Yara.SSH","op":"set","definition":"name: Exchange.Generic.Detection.Yara.SSH\nauthor: Matt Green - @mgreen27\ndescription: |\n  This is a server artifact that enables running Generic.Detection.Yara.Glob \n  over ssh.\n  \n  This artifact can be used to run against a single server or against a list of \n  servers via notebook foreach.\n  \n  Keys are passed as path on disk to preserve potential key leakage. You can also \n  modify the artifact to allow server_metadata to be passed.\n\n\ntype: SERVER\nparameters:\n  - name: TargetHost\n    description: Target SSH host in the format \u003chostname or IP\u003e:\u003cport\u003e\n  - name: TargetUsername\n    description: SSH Username to connect - e.g ubuntu\n  - name: TargetKey\n    description: SSH key path as Velociraptor server metadata or path on disk.\n  - name: PathGlob\n    description: Only file names that match this glob will be scanned.\n    default: /usr/bin/ls\n  - name: SizeMax\n    description: maximum size of target file.\n    type: int64\n  - name: SizeMin\n    description: minimum size of target file.\n    type: int64\n  - name: UploadHits\n    type: bool\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: YaraRule\n    type: yara\n    description: Final Yara option and the default if no other options provided.\n    default: |\n        rule IsELF:TestRule {\n           meta:\n              author = \"the internet\"\n              date = \"2021-05-03\"\n              description = \"A simple ELF rule to test yara features\"\n          condition:\n             uint32(0) == 0x464c457f\n        }\n  - name: NumberOfHits\n    description: This artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int\n\nsources:\n  - query: |\n      LET SSH_CONFIG \u003c= dict(\n            hostname= TargetHost,\n            username= TargetUsername,\n            private_key= read_file(filename=TargetKey)\n        )\n\n      LET _ \u003c= remap(config='''\n        remappings:\n          - type: mount\n            from:\n             accessor: ssh\n            on:\n             accessor: auto\n        ''')\n\n      SELECT * FROM Artifact.Generic.Detection.Yara.Glob(\n                PathGlob=PathGlob,\n                YaraRule=YaraRule,\n                NumberOfHits=NumberOfHits,\n                ContextBytes=ContextBytes,\n                SizeMax=SizeMax,\n                SizeMin=SizeMin,\n                UploadHits=UploadHits,\n                DateAfter=DateAfter,\n                DateBefore=DateBefore\n            )\n\ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Registry.ScheduledTasks","op":"set","definition":"name: Exchange.Windows.Registry.ScheduledTasks\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artefact will collect Scheduled task information from the registry without \n  relying on the existance of an XML file in C:\\\\Windows\\\\System32\\\\Tasks.\n  \n  The artifact will attempt to find relevant XML data if exists.\n  There is also an option to show only tasks  missing a Security Descriptor.\n  \n  TODO: cleanup, write test and add to main repo\n  \nreference:\n  - https://www.youtube.com/watch?v=ZQeWgTP4PaY\n  \ntype: CLIENT\n\nparameters:\n   - name: OnlyShowNullSD\n     type: bool\n     description: only show entries with null security descriptor\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: | \n      LET xml \u003c= SELECT *, \n            regex_replace(source=OSPath,re='''^C:\\\\Windows\\\\System32\\\\Tasks''',replace='') as Path \n        FROM Artifact.Windows.System.TaskScheduler()\n        \n      LET tree \u003c= SELECT Id,SD,Index\n        FROM read_reg_key(globs=\"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Schedule/TaskCache/Tree/**\", accessor=\"reg\")\n      \n      LET find_xml(path) = SELECT OSPath, Command, Arguments, ComHandler, UserId, _XML\n        FROM xml WHERE Path = path\n        \n      LET tree_sd(id) = SELECT Id,SD,Index\n        FROM tree WHERE Id = id\n      \n      LET tasks = SELECT \n            basename(path=Key.FileInfo.FullPath) as TaskID,\n            Key.FileInfo.ModTime as Mtime,\n            Path,\n            Hash,\n            Version,\n            SecurityDescriptor,\n            Source,\n            Author,\n            Description,\n            URI,\n            Triggers,\n            Actions,\n            DynamicInfo,\n            if(condition=Schema, \n                then=format(format='0x%x',args=Schema),\n                else='') as Schema,\n            Date,\n            Key.FileInfo.FullPath as OSPath,\n            find_xml(path=Path)[0] as XmlEntry\n        FROM read_reg_key(globs=\"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Schedule/TaskCache/Tasks/**\", accessor=\"reg\")\n     \n      SELECT \n        TaskID,Mtime,Path,Hash,Version,\n            SecurityDescriptor,\n            tree_sd(id=TaskID)[0].SD as TreeSD,\n            Source, Author, Description,URI,Triggers, Actions, DynamicInfo,\n            Schema,Date,\n            OSPath,\n            XmlEntry\n        FROM tasks\n        WHERE NOT if(condition= OnlyShowNullSD,\n            then= TreeSD,\n            else= False )\n      \ncolumn_types:\n  - name: Hash\n    type: hex\n  - name: Triggers\n    type: hex\n  - name: DynamicInfo\n    type: hex\n  - name: TreeSD\n    type: hex\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Windows.Triage.ScreenConnect","op":"set","definition":"\nname: Exchange.Windows.Triage.ScreenConnect\nauthor: Matt Green - @mgreen27 - Rapid7 Labs\ndescription: |\n   This artifact extracts useful data for triage of ConnectWise ScreenConnect\n   CVE-2024-1709 and CVE-2024-1708 impacting versions 23.9.7 and prior.\n\n   This artifact will:\n\n   1. Check for Webshells in ```/App_Extensions/**/*.{aspx,ashx}``` path.\n   Some observed legitimate webapp strings have been excluded.\n   NOTE: Use WebshellsUSN to find potential exploits that cleanup shells.\n\n   2. Parse ```C:\\Program Files\\ScreenConnect\\App_data\\User.Xml``` file.\n   Usually this file is set during first use and reset during exploit.\n   Check for timestamp discrepancies and obviously evil usernames/email\n   (@poc.com).\n\n   3. Parse ```security.db```.\n   Add time filter. Results are stacked, check for unusual access patterns\n   and malicious IPs.\n\n   4. List and upload (optionally) all ScreenConnect files.\n\n   Collect additional artifacts as desired for support.\n\nreference:\n    - https://www.rapid7.com/blog/post/2024/02/20/etr-high-risk-vulnerabilities-in-connectwise-screenconnect/\n\ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     default: \"C:/Program Files*/**/ScreenConnect/**\"\n     description: Glob for all files under ScreenConnect program files\n   - name: ExcludedWebshellStrings\n     description: Excluded webshell strings.\n     default: ScreenConnect\n   - name: DateAfter\n     description: Search for security events after this date\n     type: timestamp\n     default: \"2024-02-20\"\n   - name: DateBefore\n     description: Search for security events before this date\n     type: timestamp\n   - name: UploadFiles\n     description: If selected Upload all ScreenConnect files for review\n     type: bool\n\n\nprecondition: SELECT OS From info() where OS = 'windows'\nsources:\n  - name: Webshells\n    query: |\n      LET shells = SELECT OSPath, Mtime,Atime,Ctime,Btime\n        FROM glob(globs=TargetGlob + \"/App_Extensions/**/*.{aspx,ashx}\")\n        WHERE NOT IsDir\n\n      SELECT * FROM foreach(row=shells, query={\n        SELECT\n            OSPath,\n            dict(\n                Mtime=Mtime,\n                Atime=Atime,\n                Ctime=Ctime,\n                Btime=Btime ) as Timestamps,\n            read_file(filename=OSPath) as Contents\n        FROM scope()\n        WHERE NOT if(condition=ExcludedWebshellStrings,\n                        then= Contents=~ExcludedWebshellStrings,\n                        else= False )\n      })\n\n  - name: WebshellsUsn\n    query: |\n      SELECT Timestamp,OSPath,Reason,MFTId,Sequence,ParentMFTId,ParentSequence,Usn\n      FROM Artifact.Windows.Forensics.Usn(\n                        FileNameRegex='\\.(aspx|ashx)$',\n                        PathRegex='ScreenConnect.+App_Extensions',\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore )\n\n  - name: UserXml\n    query: |\n      SELECT\n        OSPath,\n        dict(\n            Mtime=Mtime,\n            Atime=Atime,\n            Ctime=Ctime,\n            Btime=Btime ) as FileTimestamps,\n        parse_xml(file=OSPath).Users.User as UserXml\n      FROM glob(globs=TargetGlob + '/user.xml')\n\n\n  - name: SecurityEvents\n    query: |\n      LET MaxDate \u003c= if(condition= DateBefore, then=DateBefore, else= '2030-01-01')\n\n      LET db = SELECT OSPath, Mtime,Atime,Ctime,Btime\n        FROM glob(globs=TargetGlob + '/security.db')\n\n      LET sqlquery = \"SELECT * FROM SecurityEvent\"\n\n      LET results = SELECT * FROM foreach(row=db,query= {\n            SELECT * FROM sqlite(file=OSPath,query=sqlquery)\n            WHERE Time \u003e DateAfter AND Time \u003c MaxDate\n        })\n\n      SELECT\n        EventType,\n        OperationResult,\n        ip(netaddr4_be=int(\n            int=format(format='0x%x',args=NetworkAddress))) AS NetworkAddress,\n        UserAgent,\n        UserSource,\n        UrlReferrer,\n        UserName,\n        min(item=Time) AS Earliest,\n        max(item=Time) AS Latest,\n        count() AS Total\n      FROM results\n      GROUP BY UserAgent, UserSoure, UrlReferrer, UserName\n\n  - name: Files\n    query: |\n        LET TargetGlobTable = '''\n        Glob\n        C:/Windows/Temp/ScreenConnect*/**\n        C:/Program Files/ScreenConnect*/**\n        C:/Program Files (x86)/ScreenConnect*/**\n        C:/ProgramData/ScreenConnect*/**\n        C:/Users/*/Documents/ConnectWiseControl/**\n        '''\n\n        SELECT *\n        FROM Artifact.Windows.Search.FileFinder(\n                            Upload_File=UploadFiles,\n                            SearchFilesGlobTable=TargetGlobTable )\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Server.Alerts.IRIS.Case.Create","op":"set","definition":"name: Exchange.Server.Alerts.IRIS.Case.Create\ndescription: |\n   Create an IRIS case when monitored artifacts complete with results.  Adds the ClientId, FlowId as tags to the case.  Adds the FQDN as an asset.\n  \n   Learn more about IRIS, here: https://dfir-iris.org/\n  \n   It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.\n\ntype: SERVER_EVENT\n\nauthor: Wes Lambert - @therealwlambert\n\nparameters:\n  - name: IrisURL\n    default:\n  - name: IrisKey\n    type: string\n    description: API key for DFIR-IRIS. Leave blank here if using server metadata store.\n    default:\n  - name: ArtifactsToAlertOn\n    default: .\n    type: regex\n  - name: DisableSSLVerify\n    type: bool\n    default: true\n  - name: Customer\n    default: 1\n  - name: SOCId\n    default: soc_id_demo\n    \nsources:\n  - query: |\n      LET URL \u003c= if(\n            condition=IrisURL,\n            then=IrisURL,\n            else=server_metadata().IrisURL)\n      LET Creds = if(\n           condition=IrisKey,\n           then=IrisKey,\n           else=server_metadata().IrisKey)\n      LET FlowInfo = SELECT timestamp(epoch=Timestamp) AS Timestamp,\n             client_info(client_id=ClientId).os_info.fqdn AS FQDN,\n             ClientId, FlowId, Flow.artifacts_with_results[0] AS FlowResults\n      FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n      WHERE Flow.artifacts_with_results =~ ArtifactsToAlertOn\n\n      LET Cases = SELECT * FROM foreach(row=FlowInfo,\n       query={\n          SELECT ClientId, FlowId, FQDN, parse_json(data=Content).data.case_id AS CaseID FROM http_client(\n          data=serialize(item=dict(\n                case_name=format(format=\"Hit on %v for %v\", args=[FlowResults, FQDN]), case_soc_id=\"soc_id_demo\", case_customer=1, case_description=format(format=\"ClientId: %v\\n\\nFlowID: %v\\n\\nURL: %v//app/index.html?#/collected/%v/%v\", args=[ClientId, FlowId, config.server_urls[0], ClientId, FlowId,])), format=\"json\"),\n          headers=dict(`Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\", args=[Creds])),\n          disable_ssl_security=DisableSSLVerify,\n          method=\"POST\",\n          url=format(format=\"%v/manage/cases/add\", args=[URL]))\n       })\n      \n      SELECT * from foreach(row=Cases,\n        query={\n          SELECT * FROM http_client(\n            data=serialize(\n                item=dict(\n                    asset_name=FQDN, \n                    asset_type_id=9, \n                    analysis_status_id=1, \n                    cid=CaseID, \n                    asset_tags=format(format=\"%v,%v\", args=[ClientId, FlowId])\n                )\n                ,format=\"json\"\n            ),\n            headers=dict(`Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\", args=[Creds])),\n            disable_ssl_security=DisableSSLVerify,\n            method=\"POST\",\n            url=format(format=\"%v/case/assets/add\", args=[URL]))\n          })\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Windows.Hayabusa.Rules","op":"set","definition":"name: Windows.Hayabusa.Rules\ndescription: |\n  This artifact compiles the Hayabusa ruleset into a Velociraptor\n  artifact using the internal Velociraptor sigma engine.\n\n  To read more about this artifact see\n  https://sigma.velocidex.com/docs/artifacts/velociraptor_hayabusa_ruleset/\n\n  This artifact was built on 2025-08-19T21:35:35Z\n\ntype: CLIENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      Proc Exec,Fires on every Process Execution EID 1\n      File Created,Fires on every Sysmon EID 11\n      Reg Key Value Set,Fires on every Sysmon EID 13\n      DNS Query,Fires on every Sysmon EID 22\n      Proc Terminated$,Fires on every Sysmon EID 5\n      Proc Injection$,Fires on every Sysmon EID 8\n      Reg Key Create/Delete,Fires on every Sysmon EID 12\n      WMI Provider Started,Fires on every Microsoft-Windows-WMI-Activity/Operational EID 5857\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\n\nimports:\n  - Windows.Sigma.Base\nsources:\n- query: |\n    LET Rules \u003c= gunzip(string=base64decode(string=\"\"))\n    SELECT *\n    FROM Artifact.Windows.Sigma.Base(\n       ROOT=ROOT, RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, RuleExclusions=RuleExclusions,\n       DateAfter=DateAfter, DateBefore=DateBefore,\n       SigmaRules=Rules, NTFS_CACHE_TIME=NTFS_CACHE_TIME)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Windows.ETW.Monitoring","op":"set","definition":"name: Windows.ETW.Monitoring\ndescription: |\n  This artifact contains\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      Proc Exec,Fires on every Process Execution EID 1\n      File Created,Fires on every Sysmon EID 11\n      Reg Key Value Set,Fires on every Sysmon EID 13\n      DNS Query,Fires on every Sysmon EID 22\n      Proc Terminated$,Fires on every Sysmon EID 5\n      Proc Injection$,Fires on every Sysmon EID 8\n      Reg Key Create/Delete,Fires on every Sysmon EID 12\n      WMI Provider Started,Fires on every Microsoft-Windows-WMI-Activity/Operational EID 5857\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\nimports:\n  - Windows.Sigma.ETWBase\nexport: |\n     LET SigmaRules \u003c= gunzip(string=base64decode(string=\"H4sIAAAAAAAA/9STz2rbQBDG7/sUc6igpdiF5KZbcJ0SUichCjWFpWG9O1YWj3bN7kiyoA9ftFJUuw0lh/bQm2d2/nzz/Sy2TJjDIqBBx1ZRBKU1xgjb4CvYKL2r9xEaq+C+dobo/EyQL6Ovg8ZcAGjFWPrQ5YDcCoB98KbWnENrnfFtFAARQ2M15rDD4JCEQUbN1rvU752xKYC3yO3jPvi0XjkD4+9HpypMCe2rSjlD1uG71DuF/SiAxZD4bB1+D2MOYAbX98WTb6+xW5VhSu6wq8owN0QC4Gj10LZs0PFDt8cc7oZ8wSrwcOGkaqgdC25UldZCGJ2a4wEFYYOUg8Gtqon745WlOE2F7Kg7A1K1009oIDu6JRNiNpuJ31iBsVH7BkOXAH3pFywqM6z97yB9IBtZBzQxXw+yjv+WL5bh5peSP2FcBFSMo9uv4nhq6N/meGkJnz829lBcrMAoVhsV/yG9iDQ8JFTOM+BBUx2tdz2sKTgxZHk4JfVtnkt5F3wZVJXOiFKePo4ApSy6yFidn0lJUcWYnOzl0k95kEZMps/fr69uPt6uCymLr8XDctU3L25vLq8+SVlcrN68zLWf8WpGywNmo/VoYNuDyJ5FZOJHAAAA///3F5UJFAUAAA==\"))\nsources:\n- query: |\n    SELECT *\n    FROM Artifact.Windows.Sigma.ETWBase(\n       RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, RuleExclusions=RuleExclusions,\n       SigmaRules=SigmaRules)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Server.Alerts.Mattermost","op":"set","definition":"name: Exchange.Server.Alerts.Mattermost\ndescription: |\n  Create a Slack/Mattermost notification when a client Flow (with artifacts of interest) has finished. Cancelled collections and collections with artifacts that don't satisfy preconditions do not create notifications when they are stopped.\n\ntype: SERVER_EVENT\n\nauthor: Andreas Misje – @misje\n\nparameters:\n  - name: WebhookURL\n    description: |\n        Webhook used to for posting the notification. If empty, the server metadata variable \"MattermostWebhookURL\" will be used.\n  - name: VelociraptorServerURL\n    description: |\n        The Velociraptor server URL, e.g. \"https://velociraptor.example.org\", used to build links to flows and clients in the notification payload. If empty, the server metadata variable \"VelociraptorServerURL\" is used. If that variable is also empty, no links will be created.\n  - name: Decorate\n    description: |\n        Whether the notification payload should be \"decorated\" using the legacy \"secondary attachments\" format, supported by both Slack and Mattermost. If false, a single string will be sent.\n    type: bool\n    default: Y\n  - name: ArtifactsToAlertOn\n    description: |\n        Notifications will only be created for finished flows with artifact names matching this regex.\n    default: .\n    type: regex\n  - name: ArtifactsToIgnore\n    description: |\n        Notifications will not be created for finished flows with artifact names matching this regex.\n    default: ^Generic.Client.Info\n  - name: NotifyHunts\n    description: |\n        Create notifications for finished flows that are part of a hunt. This may produce a lot of notifications, depending on the number of clients that will take part in the hunt.\n    type: bool\n  - name: DelayThreshold\n    description: |\n        Only create notifications if the flow has not finished within a certain number of seconds since it was created.\n    default: 10\n\nsources:\n  - query: |\n      LET NotifyUrl =       if(\n                                condition=WebhookURL,\n                                then=WebhookURL,\n                                else=server_metadata().MattermostWebhookURL\n                            )\n      Let ServerUrl =       if(\n                                condition=VelociraptorServerURL,\n                                then=VelociraptorServerURL,\n                                else=server_metadata().VelociraptorServerURL\n                            )\n                            \n      // Get basic information about completed flows:     \n      LET CompletedFlows =  SELECT      timestamp(epoch=Timestamp) AS FlowFinished,\n                                        ClientId,\n                                        FlowId\n                            FROM        watch_monitoring(artifact='System.Flow.Completion')\n                            WHERE       Flow.artifacts_with_results\n                            AND         ClientId != 'server'\n                            AND         NOT Flow.artifacts_with_results =~ ArtifactsToIgnore\n                            AND         Flow.artifacts_with_results =~ ArtifactsToAlertOn\n      \n      // Look up more details about the flows using flows(), since the data returned by watch_monitoring() may be incomplete (like the create_time field):\n      LET FlowInfo =        SELECT      ClientId,\n                                        client_info(client_id=ClientId).os_info.fqdn AS FQDN,\n                                        FlowId,\n                                        timestamp(epoch=create_time) AS FlowCreated,\n                                        timestamp(epoch=start_time) AS FlowStarted,\n                                        FlowFinished,\n                                        execution_duration/1000000000 AS Duration,\n                                        join(array=artifacts_with_results, sep=', ') AS FlowResults,\n                                        total_collected_rows AS CollectedRows,\n                                        total_uploaded_files AS UploadedFiles,\n                                        total_uploaded_bytes AS UploadedBytes,\n                                        state='FINISHED' AS Success,\n                                        status AS Error\n                            FROM        flows(client_id=ClientId, flow_id=FlowId)\n                            // Filter out flows part of hunts (if enabled) by the trailing \".H\" in the ID:\n                            WHERE       if(condition=NotifyHunts, then=true, else=not FlowId=~'\\.H$')\n                            // Notifications aren't necessarily useful if collections complete close to immediately:\n                            AND         FlowFinished.Unix - timestamp(epoch=create_time).Unix \u003e= atoi(string=DelayThreshold)\n      \n      LET Results =         SELECT      *\n                            FROM        foreach(row=CompletedFlows, query=FlowInfo)\n                            \n      // If ServerUrl is provided, create Markdown links to the client, flows and hunt:\n      LET ClientLink =      if(condition=ServerUrl,\n                                then=format(format='[%v](%v/app/index.html#/host/%v)', args=[\n                                    FQDN, ServerUrl, ClientId\n                                ]),\n                                else=FQDN\n                            )\n      LET FlowUrl =         format(format='%v/app/index.html#/collected/%v/%v/notebook', args=[\n                                ServerUrl, ClientId, FlowId\n                            ])\n      LET FlowLink =        if(condition=ServerUrl,\n                                then=format(format='[%v](%v)', args=[\n                                    FlowId, FlowUrl\n                                ]),\n                                else=str(str=FlowId)\n                            )\n      // The HuntId has to be fetched by looking for the FlowId in all hunts:\n      LET AllHunts =        SELECT      hunt_id AS HuntId,\n                                        hunt_description AS HuntDesc\n                            FROM        hunts()\n      LET OurHunt(Fid)  =   SELECT      *\n                            FROM        foreach(\n                                            row=AllHunts,\n                                            query={SELECT HuntId, HuntDesc FROM hunt_flows(hunt_id=HuntId) WHERE FlowId=Fid}\n                                        )\n      LET HuntLink_ =       SELECT      HuntDesc, HuntId\n                            FROM        OurHunt(Fid=FlowId)\n      LET HuntLink =        if(\n                                condition=ServerUrl AND HuntLink_.HuntId,\n                                then=format(format='[%v](%v/app/index.html#/hunts/%v)', args=[\n                                    // There should only ever be one hunt for this flow:\n                                    HuntLink_[0].HuntDesc, HuntLink_[0].ServerUrl, HuntLink_[0].HuntId \n                                ]),\n                                else=if(condition=HuntLink_.HuntId, then=str(str=HuntLink_[0].HuntId), else='–')\n                            )\n      LET StateString =     if(condition=Success, then='finished collecting', else='FAILED to collect')\n      LET Message =         format(format='Client %v has %v the artifact(s) %v, started at %v, in flow %v', args=[\n                                ClientLink, StateString, FlowResults, FlowStarted.String, FlowLink\n                            ])\n                            // Create a more readable notification by using the formatting option called \"secondary attachments\". It's deemed a legacy format by Slack, but it works in Mattermost (whereas newer formatting options in Slack does not):\n      LET Decorated =       dict(\n                                attachments=[dict(\n                                    mrkdwn_in=['text'],\n                                    // Use a green colour if the collection succeeded, and red if it failed. The third state \"RUNNING\" should never be present in flows in this query:\n                                    color=if(condition=Success, then='#36a64f', else='#e40303'),\n                                    pretext=Message,\n                                    title=format(format='Client collection %v', args=[if(condition=Success, then='FINISHED', else='FAILED')]),\n                                    title_link=if(condition=ServerUrl, then=FlowUrl, else=null),\n                                    fields=[\n                                        dict(\n                                            title='Collection created',\n                                            value=FlowCreated.String,\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Collection started',\n                                            value=FlowStarted.String,\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Error',\n                                            value=if(condition=Error, then=Error, else='–'),\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Hunt',\n                                            value=if(condition=HuntLink, then=HuntLink, else='–'),\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Duration',\n                                            value=format(format='%.1f s', args=[Duration]),\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Collected rows',\n                                            value=CollectedRows,\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Uploaded files',\n                                            value=UploadedFiles,\n                                            short=true\n                                        ),\n                                        dict(\n                                            title='Uploaded bytes',\n                                            value=UploadedBytes,\n                                            short=true\n                                        ),\n                                    ]\n                                ),]\n                            )\n      LET Payload =         if(condition=Decorate, then=Decorated, else=Message)\n      \n      LET Notify =          SELECT      Response, Content\n                            FROM        http_client(\n                                            data=serialize(item=Payload, format='json'),\n                                            headers=dict(`Content-Type`='application/json'),\n                                            method='POST',\n                                            url=NotifyUrl\n                                        )\n                            WHERE       NotifyUrl\n                            AND         if(condition=Response=200,\n                                            then=log(level='INFO', message='Notification sent'),\n                                            else=log(level='WARN', message=format(format='Failed to send notification: Reponse: %v', args=[Response]))\n                                        )\n\n      SELECT * FROM foreach(row=Results, query=Notify)","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Windows.Sigma.Base.CaptureTestSet","op":"set","definition":"name: Windows.Sigma.Base.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    - \"*/windows/application\"\n    - \"*/windows/applocker\"\n    - \"*/windows/appmodel-runtime\"\n    - \"*/windows/appxdeployment-server\"\n    - \"*/windows/appxpackaging-om\"\n    - \"*/windows/bits-client\"\n    - \"*/windows/capi2\"\n    - \"*/windows/certificateservicesclient-lifecycle-system\"\n    - \"*/windows/codeintegrity-operational\"\n    - \"*/windows/diagnosis-scripted\"\n    - \"*/windows/dns-client\"\n    - \"*/windows/dns-server\"\n    - \"*/windows/dns-server-analytic\"\n    - \"*/windows/driver-framework\"\n    - \"*/windows/firewall-as\"\n    - \"*/windows/ldap_debug\"\n    - \"*/windows/lsa-server\"\n    - \"*/windows/microsoft-servicebus-client\"\n    - \"*/windows/msexchange-management\"\n    - \"*/windows/ntlm\"\n    - \"*/windows/openssh\"\n    - \"*/windows/powershell\"\n    - \"*/windows/powershell-classic\"\n    - \"*/windows/security\"\n    - \"*/windows/security-mitigations\"\n    - \"*/windows/shell-core\"\n    - \"*/windows/smbclient-security\"\n    - \"*/windows/sysmon\"\n    - \"*/windows/system\"\n    - \"*/windows/taskscheduler\"\n    - \"*/windows/terminalservices-localsessionmanager\"\n    - \"*/windows/vhdmp\"\n    - \"*/windows/windefend\"\n    - \"*/windows/wmi\"\n    - \"process_creation/windows/*\"\n    - \"ps_classic_provider_start/windows/*\"\n    - \"ps_classic_start/windows/*\"\n    - \"ps_module/windows/*\"\n    - \"ps_script/windows/*\"\n    - \"registry_add/windows/*\"\n    - \"registry_event/windows/*\"\n    - \"registry_set/windows/*\"\n    - \"antivirus/windows/windefend\"\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Windows.Sigma.Base\nsources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n\n- query: |\n    SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    })\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Windows.Sigma.Base.ReplayTestSet","op":"set","definition":"name: Windows.Sigma.Base.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.Base\nsources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    SELECT  _Rule.Title AS Rule ,\n      Details,\n      dict(System=System,\n           EventData=X.EventData || X.UserData,\n           Message=X.Message) AS Event,\n      _Match AS Match\n\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n","id":78560752944729352,"_ts":1757377136}
{"setter":"api","artifact":"Exchange.Server.Alerts.Monitor.IRIS","op":"set","definition":"name: Exchange.Server.Alerts.Monitor.IRIS\ndescription: |\n   Create an IRIS alert when monitored artifacts complete with results. Alerts are available starting in version 2.1.0 of IRIS.\n   https://github.com/dfir-iris/iris-web/releases/tag/v2.1.0\n  \n   Learn more about IRIS, here: https://dfir-iris.org/\n  \n   It is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.\n\ntype: SERVER_EVENT\n\nauthor: Wes Lambert - @therealwlambert\n\nparameters:\n  - name: IrisURL\n    default: \n  - name: IrisKey\n    type: string\n    description: API key for DFIR-IRIS. Leave blank here if using server metadata store.\n    default:\n  - name: VeloServerURL\n    default: \n  - name: ArtifactsToAlertOn\n    default: .\n    type: regex\n  - name: DisableSSLVerify\n    type: bool\n    default: true\n  - name: Customer\n    default: 1\n  - name: Severity \n    default: 1\n  - name: Status \n    default: 1\n    \nsources:\n  - query: |\n      LET URL \u003c= if(\n            condition=IrisURL,\n            then=IrisURL,\n            else=server_metadata().IrisURL)\n      LET Creds = if(\n           condition=IrisKey,\n           then=IrisKey,\n           else=server_metadata().IrisKey)\n      LET FlowInfo = SELECT timestamp(epoch=Timestamp) AS Timestamp,\n             client_info(client_id=ClientId).os_info.fqdn AS FQDN,\n             ClientId, FlowId, Flow.artifacts_with_results[0] AS FlowResults\n      FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n      WHERE Flow.artifacts_with_results =~ ArtifactsToAlertOn\n      \n      SELECT * from foreach(row=FlowInfo,\n        query={\n             SELECT ClientId, FlowId, FQDN, parse_json(data=Content).data.alert_title AS Alert, parse_json(data=Content).data.alert_id AS AlertID  \n             FROM http_client(\n                data=serialize(item=dict(\n                    alert_title=format(format=\"Hit on %v for %v\", args=[FlowResults, FQDN]), \n                    alert_description=format(format=\"ClientId: %v\\n\\nFlowID: %v\\n\\nURL: %v//app/index.html?#/collected/%v/%v\", args=[ClientId, FlowId, config.server_urls[0], ClientId, FlowId,]),\n                    alert_severity_id=Severity,\n                    alert_status_id=Status,\n                    alert_customer_id=Customer)),\n                headers=dict(`Content-Type`=\"application/json\", `Authorization`=format(format=\"Bearer %v\", args=[Creds])),\n                disable_ssl_security=DisableSSLVerify,\n                method=\"POST\",\n                url=format(format=\"%v/alerts/add\", args=[URL]))})\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Alerts.TrackNetworkConnections","op":"set","definition":"name: Exchange.Server.Alerts.TrackNetworkConnections\nauthor: Herbert Bärschneider @SEC Consult\ndescription: |\n   This artifact alerts on network connections tracked by Velociraptor on clients.\n   Requires the client_event artifact 'Generic.Events.TrackNetworkConnections' to be enabled.\n   \n   You can filter alerts based on FQDN of the client, process name, remote ip and remote port.\n   Only created network connections are alerted on (meaning you don't get an alert when the system removes the connection).\n   You should use those filters, else there be spam to be had :D\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: WebHook\n    description: The token URL obtained from Slack/Teams/Discord (or basicly any communication-service that supports webhooks). Leave blank to use server metadata. e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ\n  - name: ClientRegex\n    type: regex\n    description: Regex for filtering on the client fqdn name\n  - name: ProcessNameRegex\n    type: regex\n    description: Regex for filtering on the process name - does not cover full path of the process image\n  - name: RemoteIpRegex\n    type: regex\n    description: Regex for filtering on the remote ip connected to\n  - name: RemotePortRegex\n    type: regex\n    description: Regex for filtering on the remote port connected to\n\nsources:\n    - query: |\n        SELECT * FROM foreach(\n          row={\n            SELECT *, client_info(client_id=ClientId).os_info.fqdn AS Fqdn from watch_monitoring(artifact='Exchange.Generic.Events.TrackNetworkConnections')\n            WHERE Fqdn =~ ClientRegex AND ProcInfo.Data.Name =~ ProcessNameRegex AND Raddr.IP =~ RemoteIpRegex AND format(format=\"%v\", args=Raddr.Port) =~ RemotePortRegex\n              AND Diff =~ \"added\"\n          },\n          query={\n            SELECT * FROM http_client(\n            data=serialize(item=dict(\n                text=format(format=\"client %v has process %v communicate to remote ip %v on remote port %v\",\n                            args=[Fqdn, ProcInfo.Data.Name, Raddr.IP, Raddr.Port])),\n                format=\"json\"),\n            headers=dict(`Content-Type`=\"application/json\"),\n            method=\"POST\",\n            url=WebHook)\n        })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.EchoTrail","op":"set","definition":"name: Exchange.Server.Enrichment.EchoTrail\nauthor: Eric Capuano - @eric_capuano\ndescription: |\n  \n  This is a process execution enrichment artifact that can be called from within another artifact (such as one looking at running processes) to enrich the \n  data made available by that artifact. We are calling the EchoTrail v2 API which is still in beta. \n  \n  NOTE: The EchoTrail free API is limited to 25 queries per day which is very low for most use cases. This artifact may send more than 25 queries at the API!\n\n  Ex.\n\n    `SELECT * from Artifact.Server.Enrichment.EchoTrail(lookup_image='C:\\Windows\\system32\\svchost.exe', lookup_parent_image='C:\\Windows\\explorer.exe')`\n\n  Additional lookup parameters that can be passed:\n\n    - `lookup_hostname`: The hostname which the execution occurred on (for host-specific prevelance metrics)\n    - `lookup_image_hash`: The SHA256 hash of the process image \n    - `lookup_parent_image_hash`: The SHA256 hash of the process parent image\n    - `lookup_commandline`: Command line arguments of the process\n\ntype: SERVER\n\nparameters:\n    - name: EchoTrailKey\n      type: string\n      description: API key for EchoTrail. Leave blank here if using server metadata store.\n      default:\n    - name: lookup_hostname\n      type: string\n      description: The hostname which the execution occurred on\n      default:\n    - name: lookup_image\n      type: string\n      description: The full path to the process image \n      default:\n    - name: lookup_image_hash\n      type: string\n      description: The SHA256 hash of the process image \n      default:\n    - name: lookup_parent_image\n      type: string\n      description: The full path to the process parent image\n      default:\n    - name: lookup_parent_image_hash\n      type: string\n      description: The SHA256 hash of the process parent image \n      default:\n    - name: lookup_commandline\n      type: string\n      description: Command line arguments of the process\n      default:\n    - name: lookup_include_scores\n      type: bool\n      description: \n      default: true\n    - name: lookup_include_description\n      type: bool\n      description: \n      default: true\n    - name: lookup_include_detections\n      type: bool\n      description: \n      default: true\n    - name: record_this_execution\n      type: bool\n      description: Record this as an actual execution in the EchoTrail database to contribute statistics\n      default: false\n\nsources:\n  - query: |\n\n        LET Creds = if(\n           condition=EchoTrailKey,\n           then=EchoTrailKey,\n           else=server_metadata().EchoTrailKey)\n\n        LET URL \u003c= 'https://api.echotrail.io/v2/process_execution'\n\n        LET Data = SELECT parse_json(data=Content) AS EchoTrailLookup\n        FROM http_client(url=URL,\n                         headers=dict(\n                          `Accept`=\"application/json\",\n                          `x-api-key`=Creds,\n                          `Content-Type`=\"application/json\"),\n                          method='POST',\n                          data=serialize(item=dict(\n                            hostname=lookup_hostname,\n                            image=lookup_image, \n                            hash=lookup_image_hash,\n                            parent_image=lookup_parent_image, \n                            parent_hash=lookup_parent_image_hash,\n                            commandline=lookup_commandline, \n                            include_scores=lookup_include_scores,\n                            include_description=lookup_include_description,\n                            include_detections=lookup_include_detections,\n                            record_execution=record_this_execution\n                            )\n                          )\n                        )\n\n        SELECT\n            EchoTrailLookup.description AS Description,\n            EchoTrailLookup.echotrail_score AS EchoTrailScore,\n            EchoTrailLookup.global.rank AS GlobalRank,\n            EchoTrailLookup.global.host_prev AS HostPrevalence,\n            EchoTrailLookup.global.path_score AS PathScore,\n            EchoTrailLookup.global.parent_score AS ParentScore,\n            EchoTrailLookup.global.overall_score AS OverallScore,\n            EchoTrailLookup AS EchoTrailLookup\n        FROM Data\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.IRIS.IOCLookup","op":"set","definition":"name: Exchange.Server.Enrichment.IRIS.IOCLookup\ndescription: |\n     Query an IRIS instance for an indicator.\n\n     To learn more about IRIS, see: https://dfir-iris.org/\n\n     This artifact can be called from within another artifact to enrich the data made available by that artifact.\n     \n     NOTE: This artifact queries for all IOCs, and does not associate IOCs to first-order cases. This will be improved in the future.\n\n     Ex.\n\n       `SELECT * from Artifact.Server.IRIS.IOCLookup(IOC=$YOURIOC)`\n\ntype: SERVER\n\nparameters:\n   - name: IOC\n     default:\n   - name: IrisURL\n     default: https://myiris\n   - name: IrisKey\n     type: string\n     description: API key for DFIR-IRIS. Leave blank here if using server metadata store.\n     default:\nsources:\n    - query: |\n       LET URL = if(\n           condition=IrisURL,\n           then=IrisURL,\n           else=server_metadata().IrisURL)\n       \n       LET Creds = if(\n           condition=IrisKey,\n           then=IrisKey,\n           else=server_metadata().IrisKey)\n       \n       LET Data = SELECT parse_json(data=Content).data.ioc AS IOCs FROM http_client(\n         method=\"GET\", \n         url=URL + '''/case/ioc/list''',\n         headers=dict(`Content-Type`=\"application/json\", `Authorization`='''Bearer ''' + Creds),\n         disable_ssl_security=true\n       )\n       \n       LET EachIOC = SELECT * from foreach(\n         row=Data,\n         query={\n            SELECT _value.ioc_value AS IOCValue,\n              _value.ioc_description AS Description,\n              _value.tlp_name AS TLP,\n              _value.link AS `Linked Cases`,\n              _value AS _Content\n            FROM items(item=IOCs)\n       })\n       \n       SELECT * FROM EachIOC WHERE IOCValue =~ IOC\n\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.MalwareBazaar","op":"set","definition":"name: Exchange.Server.Enrichment.MalwareBazaar\ndescription: |\n   Query MalwareBazaar for a hash.\n   \n   To learn more about MalwareBazaar, see: https://bazaar.abuse.ch/\n   \n   This artifact can be called from within another artifact to enrich the data made available by that artifact.\n\n     Ex.\n\n       `SELECT * from Artifact.Server.Enrichment.MalwareBazaar(Hash=$YourMD5OrSHA1OrSHA256)`\n\n     If querying for an alternate hash, specify the hash type, like so:\n  \n       `SELECT * from Artifact.Server.Enrichment.MalwareBazaar(Hash=$YOURHASH, HashType=$YourGimphashOrImphash)`\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: SERVER\n\nparameters:\n   - name: Hash\n     default:\n   - name: HashType\n     default:\n     type: choices\n     choices:\n      - \n      - MD5\n      - SHA1\n      - SHA256\n      - Gimphash\n      - Imphash\n\nsources:\n    - query: |\n       LET QueryTable \u003c= SELECT * FROM parse_csv(accessor=\"data\", filename='''\n        Type,Query,SearchValue\n        Gimphash,get_gimphash,gimphash\n        Imphash,get_imphash,imphash\n        MD5,get_info,hash\n        SHA1,get_info,hash\n        SHA256,get_info,hash\n        Telfhash,get_telfhash,telfhash\n        TLSH,get_tlsh,tlsh\n       '''\n       )\n     \n       LET MBURL \u003c= \"https://mb-api.abuse.ch/api/v1/\"\n       LET QueryName = SELECT Query FROM QueryTable WHERE HashType=Type\n       LET SearchName = SELECT SearchValue FROM QueryTable WHERE HashType=Type\n       LET Boundary \u003c= \"-----------------------------9051914041544843365972754266\"\n       LET Data(Name, Value) = format(\n        format='--%s\\nContent-Disposition: form-data; name=\"%v\"\\n\\n%s\\n',\n        args=[Boundary, Name, Value])\n       LET END = format(format=\"--%s--\\n\", args=Boundary)\n \n       LET MBSubmission = SELECT \n        parse_json(data=Content).data.file_name[0] as `Filename`,\n        parse_json(data=Content).data.first_seen[0] as `First Seen`,\n        parse_json(data=Content).data.last_seen[0] as `Last Seen`,\n        parse_json(data=Content).data.reporter[0] as Reporter,\n        parse_json(data=Content).data.tags[0] as Tags,\n        parse_json(data=Content).data.intelligence[0] as Intelligence,\n        parse_json(data=Content) AS _Content\n       FROM http_client(\n         method=\"POST\",\n         url=MBURL,\n         headers=dict(`Content-Type`=\"multipart/form-data; boundary=\" + Boundary),\n         data=Data(Name=\"query\", Value=if(condition=QueryName.Query[0], then=QueryName.Query[0], else=\"get_info\")) + Data(Name=if(condition=SearchName.SearchValue[0], then=SearchName.SearchValue[0], else=\"hash\"), Value=Hash) + END)\n       SELECT * FROM MBSubmission\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.AI.OpenAI","op":"set","definition":"name: Exchange.Server.Enrichment.AI.OpenAI\nauthor: Matt Green - @mgreen27 refactored orginal from Wes Lambert - @therealwlambert|@weslambert@infosec.exchange\ndescription: |\n  Query OpenAI for analysis of data.\n  \n  Paramaters:\n  \n  * `PrePrompt` - Is System prompt default is: \"You are a Cyber Incident \n  Responder and need to analyze data. You have an eye for detail and like to use \n  short precise technical language. Analyze the following data and provide \n  summary analysis:\"  \n  * `Prompt` - Is User prompt as string. When pushing a dict object via PromtData \n  good practice is add some strings related to the type of data for analysis or \n  artifact name to provide context.\n  * `PromptData` - add optional object to be serialized and added to the User prompt.\n  * `Model` - Model to use for your request.\n  * `MaxPromptSize` - If set will cut the final prompt to this size in bytes to \n  assist maintaining context limits\n  \n  This artifact can be called from within another artifact (such as one looking \n  for files) to enrich the data made available by that artifact.\n  \ntype: SERVER\n\nparameters:\n    - name: PrePrompt\n      type: string\n      description: |\n        A prefix to be used with the prompt. For example, when asking \n        a question, then providing data separately\n      default: |\n        You are a Cyber Incident responder and need to analyse forensic \n        collections. You have an eye for detail and like to use short precise \n        technical language. Your PRIMARY goal is to analyse the following data \n        and provide summary analysis -\n    - name: Prompt\n      type: string\n      description: The data sent to OpenAI\n      default: \"what is prefetch?\"\n    - name: PromptData\n      type: string\n      description: The data sent to OpenAI - this data is serialised and added to the prompt\n    - name: Model\n      type: string\n      description: The model used for processing the prompt\n      default: gpt-4o\n    - name: OpenAIToken\n      type: string\n      description: Token for OpenAI. Leave blank here if using server metadata store.\n    - name: MaxPromptSize\n      type: int\n      description: Will limit your prompt to this size in bytes. Helps maintain context sizes.\n\nsources:\n  - query: |\n        LET Creds \u003c= if(\n            condition=OpenAIToken,\n            then=OpenAIToken,\n            else=server_metadata().OpenAIToken)\n            \n        LET UserPrompt = if(condition= MaxPromptSize, \n                                then = (Prompt + \" \" + serialize(item=PromptData))[:MaxPromptSize],\n                                else = Prompt + \" \" + serialize(item=PromptData) )\n        LET messages = (dict(role=\"system\",content=PrePrompt), dict(role='user',content=UserPrompt))\n        LET headers = dict(`Authorization`='Bearer ' + Creds, `Content-Type`=\"application/json\")\n\n        SELECT \n            PrePrompt as SystemPrompt,\n            UserPrompt,\n            parse_json(data=Content).choices[0].message.content AS ResponseText,\n            parse_json(data=Content) AS ResponseDetails\n        FROM http_client(\n            url='https://api.openai.com/v1/chat/completions',\n            headers=dict(`Authorization`='Bearer ' + Creds, `Content-Type`=\"application/json\"),\n            method=\"POST\",\n            data=dict(model=Model, messages=messages)\n        )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.Base","op":"set","definition":"name: Windows.Sigma.Base\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Sigma on Windows.\n\n  NOTE: This artifact does not include any rules. You can launch it\n  with rules provided to the SigmaRules parameter or call it from\n  another artifact with a set of rules passed to the SigmaRules\n  parameter.\n\n  This artifact was built on 2025-08-19T21:35:33Z\n\ntype: CLIENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\nexport: |\n  LET X = scope()\n\n  LET DateAfterTime \u003c= X.DateAfter || timestamp(epoch=\"1600-01-01\")\n  LET DateBeforeTime \u003c= X.DateBefore || timestamp(epoch=\"2200-01-01\")\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=X.RuleStatus || \"All Rules\")\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=X.RuleLevel || \"All\")\n\n  LET MandatoryLabelLookup \u003c= dict(\n      `S-1-16-0`= 'UNTRUSTED',\n      `S-1-16-4096`= 'LOW_INTEGRITY',\n      `S-1-16-8192`= 'MEDIUM_INTEGRITY',\n      `S-1-16-8448`= 'MEDIUM_HIGH_INTEGRITY',\n      `S-1-16-12288`= 'HIGH_INTEGRITY',\n      `S-1-16-16384`= 'SYSTEM_INTEGRITY',\n      `S-1-16-20480`= 'PROTECTED_PROCESS')\n\n  LET TokenElevationTypeLookup \u003c= dict(\n      `%%1936`= 'FULL_TOKEN',\n      `%%1937`= 'ELEVATED_TOKEN',\n      `%%1938`= 'LIMITED_TOKEN')\n\n  // Helpers for VQL rules\n  LET FetchKeyValues(OSPath) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n  })\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `*/windows/application`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Application.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/applocker`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n       ROOT + \"/Microsoft-Windows-AppLocker%4MSI and Script.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4EXE and DLL.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx\",\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/appmodel-runtime`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppModel-Runtime%4Admin.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/appxdeployment-server`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/appxpackaging-om`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/bits-client`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Bits-Client%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/capi2`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CAPI2/Operational\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/certificateservicesclient-lifecycle-system`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/codeintegrity-operational`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CodeIntegrity%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/diagnosis-scripted`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Diagnosis-Scripted%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/dns-client`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DNS Client Events%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/dns-server`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/DNS Server.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/dns-server-analytic`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DNS-Server%4Analytical.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/driver-framework`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/firewall-as`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/ldap_debug`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-LDAP-Client%4Debug.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/lsa-server`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-LSA%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/microsoft-servicebus-client`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-ServiceBus-Client.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/msexchange-management`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/MSExchange Management.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/ntlm`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-NTLM%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/openssh`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/OpenSSH%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/powershell`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\",\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/powershell-classic`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *, EventData + dict(\n        Data=EventData.Data[2],\n        HostApplication=parse_string_with_regex(\n          regex=\"HostApplication=([^\\\\r\\\\n]+)\",\n          string=EventData.Data[2]).g1) AS EventData\n     FROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/security`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Security.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/security-mitigations`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Security-Mitigations.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/shell-core`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Shell-Core%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/smbclient-security`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-SmbClient%4Security.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/sysmon`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/system`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/System.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/taskscheduler`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-TaskScheduler%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/terminalservices-localsessionmanager`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/vhdmp`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-VHDMP%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/windefend`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `*/windows/wmi`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-WMI-Activity%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },\n    `process_creation/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n       AND System.EventID.Value = 1 OR System.EventID.Value = 4688\n    },\n    `ps_classic_provider_start/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 600\n    },\n    `ps_classic_start/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 400\n    },\n    `ps_module/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 4103\n    },\n    `ps_script/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 4104\n    },\n    `registry_add/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 12 OR System.EventID.Value = 4657\n    },\n    `registry_event/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n       AND System.EventID.Value IN (12, 13, 14) OR System.EventID.Value = 4657\n    },\n    `registry_set/windows/*`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n       AND System.EventID.Value = 13 OR System.EventID.Value = 4657\n    },\n    `antivirus/windows/windefend`={\n     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\n     FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n     WHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n    },`velociraptor/info/*`={ SELECT * FROM info() })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6ScW3PcNpbHv4oKL45ruSqvnezDVvlBVsuRNrp01K1kquKMBJFQNyI2yYBgSz3j+e5TuBIAeQ7pzEus5vn9DwkQl4MDMP8k5P/I68cv3bt3H1jLBKcl/wf7jku2+/h6fLZnlVxQSd+SjJzkOWvbS97KQBIwxwHg6CvaPqO0Bhx9y2hbVyhvEadgLUqz1pB1V8lFvaMccR4wXnP22nCB3SOEvOqa7hgu0YTn76cF914hOVJD2ugo1KsHMnJSFFz9pOVF9VRDihjSKsFasGqsNSMnZVm/sGJdL1jJNlSyNXiLETIjJ01zsYAU2qYZpLDqP7+9+91wvzDRIjXYA5oueU6xCg+IiF9SuZ3WaCojJ1IK/thJdrk4WS5425T0gL07CA88/ULLblJvoIycdAWXy7rk+eF0S6sN3N6HoFWv6k7kDHvohFI6uWWV9FWRP9MN7gHiM/KJV1QcAKE1ZuRTXcuruoBu4M0ZOaVluRY0h9DeblgmlqJW4w3y/EPOae/tRWwYGCONnlebeTdPQKVukLbtrIqTbFOLw0UBoh7oaeRpHhxzpKAHJWJCrrfd7rERvIKmlwTKiGqEFSsjfHVoJdsdO1NGTkuKV423K5azSuIjW8w4DTJyBoCj0cfxgKPtW4OrP6Gc7n5OQe6DktS7Ha2KS16BD9cTR1+/Hr2GF4yDhlZQP3RWy0n+WLKLAny6iDGaTjIx+rKdrccGNTyGVk980wlsgI8ZrWm7XfIUEW7MmpSsknDxrNmSr2gLCgjFd5W8eToVrFDjIS3bWyY7UTGwfcCCjJwKpgt3J/M1h1tlQmXktBNCWblguazBwXeAZURdnx1zLlibC46NUyGh+Yn+GxKGX9YCGnK82ZC8whpLSET89AMlYKQ+r1tZIdHNCBnpL5pp5UWTaNqLZv+/M3SGi7QT1RlSSicpL+GqMVbNMR2zmhgC5iMq0N21YK998NCRoh60bM+Ru2ijo6YmmJRyujlNO+WcFpwLvNmTVStplbMkhlYF1QJtL0sLL44HKudosoSucLqrI4XydsVOBbtxfGuWZwi+6h7/YLkMuIwsBN+jT+/tlhXQm4ErbSBzrpai3vMiaXoTfrwmI4u9+Lx7eX7/7t0H/0qKcV93V4vPagAwzk6E4HtafmIbXh0HUu/y29zdsj871srY01m14RXDF1Qxk5EzIWpxCgfhvT0j/uo464ikZduJ3pqO3SJH/1ZvuW3guD6BrMoMJmCXixmrWR8a9CbanpGz15zpBoNVScQoDcs7PYTaiG+8/I467rGMfKa87ARD7hYSnkfzMjGTkc+Myk4wbDXzYBkf/3/mJbuiG55/Okhw+ZlARoXcxZt78lP39ATOAwlkVMhK3psNiXeEkDA8Mqd7sybTqDfipHvSsaA3Ja9DnzeCb8B8WIRk5EdBq2JJVSg3vUoA4MjLxY5uZugNZpSSFSaph8h6RmnqDksL9XbLrjjUxb05I+e0Kkp4MPBmRbZQy9EmQ4Ct3Rozco5PX+f97HVe79hUQB4zRoO0cW9WZCunU2IpZXTY8zuzIfFeFBIZAfOCeqzDmphrV/rfy5oW4OIpJCyPFKa3Wxap2t6u2IaJtjah8SXbJ0mNUDQAtXqLNzbdkC4qLjmVcFG9XbE6MllJKrt2XvASS6wLJPKcG7AAkUr43BEt2UZweUBrMYYyctHga7TerlhkhWONGfn/+nHNZQk1FDu6/8QOl6zagG2kt2v2pRZJwsTO9t6WkXlJ5GHu+JIemLhdg32qt2dkWLf2OVx9XtY5LW2VgSNcAlnVxRLDL5aOwwrn7ZZFXlhvD1j0iQ1gaL0Grp5qscPGxDFS6Tdqnj8tGRWsGMtl+q4So0FyMzbY1Y+SDWoH8pVqtM+6+rEDJ8PebtnzuhNwjXnA0nAD01bvFezuCTed/B5gVonE6L3dsvd2Hw7jPeM0M29wtfgBoJQlI1c03/IKm3ZCQvFVQdX0fkkfoxa1YdIk2WLisq6fuyY72rHdIxMfY8chePT169EX8t9fyNsvlb5PK5n4icEbAyGRkSvtHytGDzgajsl6u2LbFpzslb0u+NOBV5vp+GUUDTwgeaSY0ZoOnACs0VFIG/B2x2I12AOORiKQAHD06vzkf1BaAwH9/gcoTRghGUGe2j7vNXtZsCfalXIpeAWveoac1mI3sFbNTW2nREiowG8QDzDX7GVNxYaND8aRMOGMlu2akkpmtwkC8VGqTkgjhzP5zqq5O5pjO8UhofkJOCDvMfThmr0caUCt/W/0BKTzowAfEo5fXKPw4tqTSO0HgKNXTOzBlhchToGM8gHgaF3syUfqqYzclMWsbjHktHZWMxxyWjvRPkJC8xOwJxuG7rr19oA9a9uVpEKywifo4CDHq+572XGsG3W9rNuWP5bslHbtt7iOdeOuzfjAgXzruFuvgVwiyWXIo8stjzj8uWNJ4gD3ZvhRV4N5Evdkp0xvwzpVxGQEzWP5DJb5g5YTOcMBFiuRnN2IcgnGuuEEY4+yfO7K4ZrGV1oKeRkyvYeE4gXdQXO7NVrqPUa9d9QHjPpgqFn5wrFU4XSWME4Q2l9zFv+jqPMAx2G93bE3T3OfMiad3jYCZKk15BItGMSkVKJDesCQc1okNgyAgIZjwwhxCiS0DgBFt+1LLYpL2soVg5ZkKaV0SFexfeRQ1hSuU2PNyJI32CDizRmZMaGkc8dSsJNObpERMCQ0v+d11847yQHRvZ8ZYq/gOyoOOjsOt8QY0ioVnegHAHORCeRVC1YyvffFqoJXG1ydwt4L9u4CQvN7XrINQ049x4zS6K4zY9wbgl6NDQrxcDC6CTicaRYBO+H5IvCL1lQ0RPS/0E22Iee1WP8MCM0XXQ6/D2PV3BO+hRcSnoeWId6syYYJyTHWAZqWdV6DE5IzaxKJ6ILgzf1pj4bhr2lA9nronJyzHyf8cFcXEPx8fXJ1BjySsWUECTddZKn/RUrX2y17y9quBBO4EWIVI3scicBvadwyWtxUJbS35s2WnFjmxIzWwLvsfnv9luX1nokDlneLmV6DLm4TSKlKKvmemZUh8hJGQKXe1ZJN7QGklNOBuwDe7Eib+wQHwJRyOrQ8HnA0soMQACGNl9htIphfqtlPFMAiSqGP4qi1aslzuCnGlNLJTmDnTAIgI7d4nvG2zzKuTq6mP3tZ0V385QsSS9ooEo0ffeSYOJ5793zLdhTfao4ZpRG8kZ/KOn9es1eoMaSU0yFzUABkZMWoyLcjhz7sMBvZFZ53ahEz0oC8wBDHvgGZ/o3vd8aM00Bjf2A1KHx20lk9h++rJJBXTaziU8rrpjUxr6LBnDdmNxGrrCHrfegUBxLNDzCvnBZ5XkpebVC+Jzyv83ErKeBAegRU6j1TTQocsR4ccXSxeAgE2IkwL3FHwlZbKpjZcEX6TgxZFfaWvT0jK16c8xY5KxMAmkYWAc6quE2lD7eBpLMHLBqDpJTRgUsna8zIyFHpJFhz3xEZcmJIiBinmV7lDDmnnTjYnkBOhWVbQsLz0PF3b/Ykdug9QpwCa2jht272B5MvtXieU80J6jxM55uGnNfCEUwAeNouMu/ATj7kUi28hB1yiRaMbFPK6eB94t7uWCTPFAAhPfmeg20TcwE9/WqQfqSzCvPOJ77aAmDv5ddaPKtxAglshmBG9OwzcecQsYrPXYWd9Y8Zq0G3xUPC8tisFs6ZkkqEk46Bh1k/unaPOOjtms3tx4xYe0+oSAe39YjRmuTjBlA3+AjCXsNP1iSQV011gcERouAK0jFjKCOrQ7urq4moPGIyYpack1UywJxyYlMngZwKG4FDwvPwt30B4Gj8JcWM00yWPSq12WRGeYt4RScf664qJpoCADsv8/Yuxlnvw1zBx6pRNPGAzG1DLtXCfX1SO1XuQYmBxVcqjFZh9tLEU5p+1+/8o7CdFWedJxgcJugvTD1TPx6safs8PAATK3oi4q/Zy7REQUa1gKeO4S3QYltzRuATPJFgcHpnvRWMYt35wRA+eljz/JnJsyoXh2Zi53wUdR5u9CWwQ0WM0uxYK+kuDq77qxlZ18+sOivZfmw/359EHFLIacQh3J9IVHdESm5KeiegHHwnSmWH+4Bt/eofm41Q70yASf0R0KhtHh6ROcLw6vLYYOdT5Vr8t6vL4P+54myDbN/IIQx7AsNfoOWxzQH2XkY+eh87zrFaydrBn7jeczs+vble3V2d3Qb+zlarv+RK6XovamFox8q/UMRQ3fsc/z5w7vOFHw4OPM45q6RGg1pQcUAOLTnZyHGOYYvwxzoi1fs5qvep6sMc1YdQ9U1nqcYqNN0Z955H9zznvfhwPzTxN300a+wFhWe0Aofju2uzn7GXD70O8mHf5tVmypxo1pmvsYK7LTqHr1QtDM73DxtKz/Va+LSYlwUDMDI7BiGH+lM3SiYZ+H1CAllVmMnFhBFntGpZ3ZplNXbPCMsIdnDSnZocWxjZfF6/HvplW6jVCuTKWjWHTJfOmpFfeVXUL+2CPbGqmPO/OXqwiI9PgpICkpCIeOQ2KZURPuNzvz/qRzD6NjbN3LxUYBzgzZrEPvHy5ozsivBUWUNFy+5bnU6/f+Fyey/Yhr1+Z65EEc85bbcqxnnzJjvS0Mc3V4sfPn7329+z3//r7Zu3xxs1ujfY0b7GzQENdrSvcWN+gx3ta9wYr//4HqO+dxR0ns4aFYUdumr8oatmZLLvuX4ybyZPkzTRaZI/BwNgT7oxrp25qdVuKfQe/GeY7ZbGG5v/WXswW6Fpk2i7qbPvq4D4178DAAD//+VG3gAGUgAA\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/+w723LjOK6/4kpV3iaV2Ilz8ZvH7nR7Ti6eyD39cGoeGAlR2JFJL0k549ra39kP2S/bIniTbFlRfElP1faTSIAEQRAAQZD658Ft9Omv+JmwFFqDaZKBuuGpPD4/6B0MiSK91qH+HB78cnBLY8Elf1JH3yhL+Ks8+pUqeTTIKDB1fHrQO/iNP06oyqDXOvxui4et//y79Rt/HA0NcJQ4yP0rA2GAWET4WPC41zqcCR6DlGOing0Yu48NdJRUczO8i44iEHMQ+KExHLe7J3oeNzeaJhFk2m7c9eJCd9UchL6alUjEAz6dOWBnDUFB5yCuBZnCKxcv8uirBHHLEzjunJxoUQ1Bj6KlOxfX09cXDR4xqQiLYe0E1xNtn5xUEN2KYGcDgnfqSR5fXeqemrTuqL93ZGoUIdDDAsIrCY35K4joGbLs+KyNAhuTRcZJotXAlJp0PDvoHUSxoDP1a8bjl17rsFCbwF9qDRFBmXKKcIqiRRCIgQCiALkoARrRaaNEM1CQ2N44m/VqudS/E/hAMpSzMbCEsjTws4RoQrd7FugGhnC50HDGRs814JMQ3Lc5bUD8sqPX7j5LhvBE8kyFYVZgOMAdvK60XIEZO1RE5VKvKBYQdsuTHL2PKTTh7+wyTF6rY5CkV9romQiwOF9uRPtql7QjiHNB1eKonydUUZYet42RaqPttQ5veHpNMxhkQAQkUf74HWKlce8heXbePkemYT6hlmOYU55LXXVLZFG2hFDLxPKwBZ9uvXcAL/l0DbtBmCVyw1PO1nmaKtY7WpEnixkYaXCmy0h3kirL4ISIFMr8BY/+TTtBRbT9FLGjca91OJr1k0SAlAVGDbH389n9MD77uXoev2j/oEvAFI2x25jELySFujVqPB00obc4r9GPas7XaM0kVdE8DDNiT7w5p93zYC5VnNw/fjfE7xFnIgKHsVZqUMUudiUNwi9lP9Z8PwCRnGnxF6rvtYovCPtCWJLBTgzlvL2FHKqnu1ZAH2b9553dL+7MTXYGAu3Gz3f3a3L6cbr5I3XvolPyFlVT3XIAjBarZ7i/QTHSnMeri1AzpPEJt0S+eAehKztg51K7ZH2ao0wv/4BPp4QlN5SV1v8OXqtVICDsku9NbldvGG1UpK4xETUcDfmUUBZwpu773RKpQPwfLEY6Vi/UEPsAMZ+DWBgj6rUOy4BSG0ejVMcW14RmuQDv4kv1d4jgwquOjRzDapjTpwXr6K6JWkXzuB/HKnTsxzHPmXJI6xMs0juFaB5HighVRnvQLhZba6V1VRMiXzzHA84UMGXBtrZnxbtaw8u+RrxoX9WrOjYd84zGiwGmYyRGbctAIzCiIOXCaGaomHXMH2ML+ZzTxIxWhCy3Gi212YWbv+icvBUU6kiuEEVrw25OXWtSJGJD4Bamj8EzTFL1Wcyqx9xuTqedHzLq5YYu8r3Sb+BWJ6nyLUzHpQYRmTpWydT6nZD9oXKWkYW1ukLNGF5/0Gsd6t62n/YDgmcmlMkSg9cFEv9BstyfRg1CF4oI7QI//TWjwtiRIWkBpkGW8VdIJnwIGaREwYTrhqtQEwfxKQypnpgtQay4WHicddWuaNZdL/UXngvpDnpYQVxr/HpDpIpAYTpFylcuEguxezSdErH4LGY2KrNVns+sgY4Fnd9QqQx2TjNIQdfdFv9EM8dWoWaWCbNgbnvxFYOjyRcq9eQ0zle8c8Tcj7RLhRVQYGf1dXznEIKymM5IVnF81fjCEVbuwEjO0DRxdLtxlRiQb+6ZP43opxH9rxvReXfDnaaQ3+G5iGE5vWM7Iu5HGlbtYkc0sThb2oVE306NVQb+1SmxqpT3WEA/V882aC/U3sHk1T6ZbMzGxXmDNOJqAnTLQW0gaQddcbZOnSzC1EuzN9efJQl4Ng1uKQ40SjR8B49Xf38eL9vmmiesn66sLuEdvIYmutLY9veQJNjOX2znGa7O9pP4qPIR6+1mqzlc4j1GjfqtUdj1WrmZ8l3hNS/WIxHbwMhUccfxA3+aA9NNcBRTwQZvJ7k2XY2PSn5fnXSbiWCTOX7QJLoneNItv7ho2rd9+sbVztrZ3T9+H975tO3wzoS1SombYX/sJKmUoI+5Ag1bDrlrLgm2Ekf77KTk9ytnVXl97DEuNtXlGx6TLMSnNbeaG/P7Vi63nlnPYDXHW/LW3Z8sLeYBMqLoHMxO0uj+eNPZdM/DFUd/NsvspW5pPGP4S3v+mAvlcbri9kHsMgRZcseTVNkOGuObjwVXPOaZsX4suua3JH6mDHByDzDlCjykvLcbpJa/xZS9SWPn3213L37KwsriFCNF09tsrmXvXK//k1T5OChk5gUk8gFULhi+ehronfz+SYOBKUoyj8TmpjLgCeC8XGW9ypcPiGXv3HDa5x0MPjfaN87P8LmLeY02BKkP8f51mq17bTJQ5NQW7abH4xF74hi5GOXTVTENeqijL6LoYwajoTT3ca6ebJ6aeocPWcgpZ8ftJpeCoylJS7GC/lg/J4CpQMDWl8gUYzjL5+evAeYvIKrCh7FtaaGhLY5ke5hyuZ+Bud7FFp5GYTWNEZfWdix4kscm0MdSWDe2cCvGbKaKyGfMh5lCvcjtHm6Fa+NNL2LtVQzGPmfxmKqUytq8iYlZ8AK51zr8LAhTkJi693aFFMyKV3CSK6E1zDNZOJCVe2uk7V1CY+9ayRSM1vS8phmwpcg5CKSpvtSOqSMUDPxtyObLbi73j989PyYi3CM3pxtwg7qrCM3kHhk7+7sy1t2PzjirtjZdz4PeMAacPdEU/YIu5Cbur++HcQo1aTo6W3l6t2NJXX7oaDruuJ8Vz0Am20OmIGck9jrkAR7dax163n7PAfPl/9DflS2ojoHO+/RieWfDR9z64GbetbrqVxX7963FZ7CFV7GVTY3sXDD3TlnixXmFLK0peitcFp4J33RwSlno1ViA7epRB5zJfIo0XBHh1zQzj7NNoZ62Xh23tvj1TD+AzDPlwKa2R//ROd1OT3bCw1k4r9RoZEZtTGkCeXznujMWulUsLCvYXibf1UNjF2se68OyWjrnP34htS6NGFXU/hDiy+FguHwqLJ9HR7P6o2gk4i9cBoSusIK5+3OqNXhLr3xStbji+dYSLWBLlFdktQ9LxOeSiiiwmWob9CLyDxP2urL0p/n4GabEYl1ZvqUqlbq+iykUVBAJ33CS2MWPMDaIaMqIygU4mDlCm4KDhXy9a11I3L/npKHDC+Sjgp+V+e/uMLRmWmsmtGFAZh8b3AuaOjvXO5WgKWUk86ZfJ57Lzc9hGxyd8nDJvcHR6S3Nu6pS6aVf67ZX82+3o6N+rOicqsVx97LrHky6gM4HCp+kxFeikHj0SkinvcmQKPK7D+1MWqOCyJKTrmhhWQ/XE3OamDvHyraINU25lPQxgwHJ5ZoplJqsEYz5tobwBCwBcdw+waOcDQ31RyoynTULwFaptfGIMXnWoaWmh4WQDoI5CKrwXYkthhjQbOHuQejyrc8QFMQYrYaUjnnZ4lPZRqssT46lN/8KcnO4pgJeSZa1vlH13Oonc8JiSFou7+b+fbUPacKTGlnkPgKlKEt9HIKvkQIcq5ESlKXFud3yhD4tKEtDPmQ2K8KLueFtJ6F3r4c8c7cFrlgYtjCaF26RlXWc1c5ozSPxNSlovKToJ4mwicnMprOttM0dhgkUfFnaqHzKFdiuoRL6GpjtHCr2SVhstxVTQGFLin8OZxlay6kNge0mo/3C/7f/NIttFFVDOg7CEu6BXQP0uyYCz/5cHaR90ake5eCXg/CP8IALqP3BeLVpo1+K7Rq17Ou71i1hJAVxfHFy2vav/Qs/lQ8Ekc+YWw//lZdkibBuPWlzx1X3IwHuFl4f7U8CK9fzxZ8A/Ov/g3/9NwAA//+Gqjk4KkAAAA==\")))\n\n  LET DefaultDetailsLambda = '''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  -- The Keywords field is actually not very useful but it trips\n  -- Elastic so we remove it.\n  -- https://github.com/Velocidex/velociraptor/issues/3856\n  LET SystemMask \u003c= dict(Keywords=TRUE)\nsources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System - SystemMask,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         _Match, *\n   FROM sigma(\n     rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=RuleFilterLambda,\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details, _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.SecureAnnex","op":"set","definition":"name: Exchange.Server.Enrichment.SecureAnnex\nauthor: Whitney Champion -- bsky.app/profile/whit.zip\ndescription: |\n  Submit an extension to the Secure Annex API.\n\n  https://app.secureannex.com/settings/api\n\n  This artifact can be called from within another artifact, like one looking for installed Chrome extensions, to enrich the data coming back with vulnerability information from Secure Annex.\n  \n  Ex.\n\n    `SELECT * from Artifact.Server.Enrichment.SecureAnnex(ExtensionId=$EXTENSION_ID,ExtensionVersion=$EXTENSION_VERSION,ApiKey=$API_KEY)`\n\n\ntype: SERVER\n\nparameters:\n    - name: ExtensionId\n      type: string\n      description: The extension ID to submit to SecureAnnex\n    - name: ExtensionVersion\n      type: string\n      description: The extension version to submit to SecureAnnex\n    - name: ApiKey\n      type: string\n      description: The API key to submit to SecureAnnex\n      default: \n    - name: ApiURL\n      type: string\n      description: The SecureAnnex API URL\n      default: https://api.secureannex.com/api/v0/vulnerabilities\n\nsources:\n  - query: |\n        // Get the JSON response from the API call\n        LET Response = SELECT parse_json(data=Content).result AS Vulnerabilities\n            FROM http_client(url=ApiURL, \n            headers=dict(`x-api-key`=ApiKey), \n            params=dict(`extension_id`=ExtensionId,`version`=ExtensionVersion,`page`=1,`page_size`=100),\n            method='GET')\n\n        SELECT * FROM foreach(\n             row=Response,\n             query={\n              SELECT\n              name as Name,\n              version as Version,\n              vulnerability.severity AS VulnerabilitySeverity,\n              component AS Component,\n              detection AS Detection,\n              extension_id AS ExtensionID,\n              file_path AS FilePath,\n              npmname AS NPMName,\n              vuln_version AS VulnVersion,\n              vulnerability.atOrAbove AS VulnerabilityAtOrAbove,\n              vulnerability.below AS VulnerabilityBelow,\n              vulnerability.identifiers AS VulnerabilityIdentifiers,\n              vulnerability.info AS VulnerabilityInfo\n               FROM foreach(row=Vulnerabilities)\n             })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.Strelka.FileScan","op":"set","definition":"name: Exchange.Server.Enrichment.Strelka.FileScan\nauthor: Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange\ndescription: | \n  Submit a file to Strelka for analysis using `strelka-oneshot`.\n  \n  For more information about Strelka and `strelka-oneshot`, see:\n  \n  https://target.github.io/strelka/#/?id=strelka-oneshot\n  \n  This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n  \n  Ex.\n  \n    `SELECT * from Artifact.Server.Enrichment.Strelka.FileScan(FileToScan=$YOURFILE)`\n  \n  NOTE: The default time to wait for scan results is set to 60 seconds. This timeout can be changed by altering the value for the `StrelkaTimeout` variable.\n  \ntype: SERVER\n\ntools:\n  - name: StrelkaOneshot\n    url: https://github.com/target/strelka/releases/download/0.21.5.17/strelka-oneshot-linux\n\nparameters:\n    - name: FileToScan\n      type: string\n      description: The file to submit to Strelka\n      default: \n    - name: StrelkaURL\n      type: string\n      description: String comprised of `host + ':' + port` of Strelka frontend\n      default: StrelkaFrontend:57314\n    - name: StrelkaCerticatePath\n      description: Path of certificate to use for authentication\n      default:\n    - name: StrelkaTimeout\n      description: Timeout for file scanning\n      type: int \n      default: 60\n\nsources:\n  - query:\n        LET StrelkaFrontend = if(\n           condition=StrelkaURL,\n           then=StrelkaURL,\n           else=server_metadata().StrelkaURL)\n        \n        LET CertPath = if(\n           condition=StrelkaCerticatePath, \n           then=StrelkaCerticatePath, \n           else=if(condition=server_metadata().StrelkaCertificatePath, then=server_metadata().StrelkaCertificatePath, else=\"\"))\n        \n        LET StrelkaOneshot \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"StrelkaOneshot\", IsExecutable=TRUE)\n     \n        LET ScanResults = SELECT *, parse_json(data=Stdout) AS Content \n                          FROM execve(argv=[    \n                            StrelkaOneshot.FullPath[0], \n                            \"-f\", FileToScan, \n                            \"-s\", StrelkaFrontend,\n                            \"-c\", CertPath,\n                            \"-l\", \"-\",\n                            \"-t\", StrelkaTimeout])\n        \n        SELECT \n            { SELECT Mtime FROM stat(filename=FileToScan)} AS Mtime,\n            FileToScan AS File,\n            Content.file as FileDetails, \n            Content.request as RequestDetails, \n            Content.scan as ScanResults \n        FROM ScanResults\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.BaseEvents.CaptureTestSet","op":"set","definition":"name: Windows.Sigma.BaseEvents.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    - \"*/windows/application\"\n    - \"*/windows/applocker\"\n    - \"*/windows/appmodel-runtime\"\n    - \"*/windows/appxdeployment-server\"\n    - \"*/windows/appxpackaging-om\"\n    - \"*/windows/bits-client\"\n    - \"*/windows/capi2\"\n    - \"*/windows/certificateservicesclient-lifecycle-system\"\n    - \"*/windows/codeintegrity-operational\"\n    - \"*/windows/diagnosis-scripted\"\n    - \"*/windows/dns-client\"\n    - \"*/windows/dns-server\"\n    - \"*/windows/dns-server-analytic\"\n    - \"*/windows/driver-framework\"\n    - \"*/windows/firewall-as\"\n    - \"*/windows/ldap_debug\"\n    - \"*/windows/lsa-server\"\n    - \"*/windows/microsoft-servicebus-client\"\n    - \"*/windows/msexchange-management\"\n    - \"*/windows/ntlm\"\n    - \"*/windows/openssh\"\n    - \"*/windows/powershell\"\n    - \"*/windows/powershell-classic\"\n    - \"*/windows/security\"\n    - \"*/windows/security-mitigations\"\n    - \"*/windows/shell-core\"\n    - \"*/windows/smbclient-security\"\n    - \"*/windows/sysmon\"\n    - \"*/windows/system\"\n    - \"*/windows/taskscheduler\"\n    - \"*/windows/terminalservices-localsessionmanager\"\n    - \"*/windows/vhdmp\"\n    - \"*/windows/windefend\"\n    - \"*/windows/wmi\"\n    - \"process_creation/windows/*\"\n    - \"ps_classic_provider_start/windows/*\"\n    - \"ps_classic_start/windows/*\"\n    - \"ps_module/windows/*\"\n    - \"ps_script/windows/*\"\n    - \"registry_add/windows/*\"\n    - \"registry_event/windows/*\"\n    - \"registry_set/windows/*\"\n    - \"antivirus/windows/windefend\"\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\nimports:\n  - Windows.Sigma.BaseEvents\nsources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources,\n             then=SourceName in SelectedLogSources, else=TRUE)\n\n- name: Data\n  query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM query(query=Query, inherit=TRUE)\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.Sublime.EmailAnalysis","op":"set","definition":"name: Exchange.Server.Enrichment.Sublime.EmailAnalysis\nauthor: Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange\ndescription: |\n  Submit an email to Sublime for analysis.\n  \n  https://sublime.security/\n  \n  By default, this artifact returns matches for active detection rules.\n\n  This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n\n  Ex.\n\n    `SELECT * from Artifact.Server.Enrichment.Sublime(Message=$YourBase64EncodedMessage)`\n\ntype: SERVER\n\nparameters:\n    - name: Message\n      type: string\n      description: The message to submit to Sublime.\n      default:\n\n    - name: SublimeKey\n      type: string\n      description: API key for Sublime. Leave blank here if using server metadata store.\n      default:\n      \nsources:\n  - query: |\n        LET Creds = if(\n           condition=SublimeKey,\n           then=SublimeKey,\n           else=server_metadata().SublimeKey)\n\n        LET URL \u003c= 'https://api.platform.sublimesecurity.com/v0/messages/analyze'\n        \n        LET Response = SELECT parse_json(data=Content) AS Content\n            FROM http_client(\n                    url=URL,\n                    headers=dict(`Authorization`=format(format=\"Bearer %v\", args=[Creds]), `Content-Type`=\"application/json\"),\n                    data=serialize(item=dict(`raw_message`=Message, `run_active_detection_rules`=true)),\n                    method='POST')\n\n        LET ResultsQuery = SELECT * FROM foreach(\n            row=Response, \n            query={\n                SELECT \n                    rule.name AS Name, \n                    rule.source AS Source, \n                    rule.id AS ID, success AS Success, \n                    error AS Error, \n                    execution_time AS ExecutionTime\n                FROM Content.rule_results WHERE matched = true\n            }\n        )\n        \n        SELECT * FROM foreach(\n            row=if(condition=Response.Content.rule_results, \n                   then=ResultsQuery, \n                   else=Response.Content))\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.ThreatFox","op":"set","definition":"name: Exchange.Server.Enrichment.ThreatFox\ndescription: |\n     Query ThreatFox for an indicator.\n\n     To learn more about ThreatFox, see: https://threatfox.abuse.ch\n\n     This artifact can be called from within another artifact to enrich the data made available by that artifact.\n\n     Ex.\n\n       `SELECT * from Artifact.Server.Enrichment.ThreatFox(AuthKey=$YOURKEY,IOC=$YOURIOC)`\n\n     If querying for an MD5 or SHA256 hash, specify the IOC type, like so:\n  \n       `SELECT * from Artifact.Server.Enrichment.ThreatFox(AuthKey=$YOURKEY,IOCType=Hash)`\n\ntype: SERVER\n\nparameters:\n   - name: AuthKey\n     default:\n   - name: IOC\n     default:\n   - name: IOCType\n     default:\n     type: choices\n     choices:\n      - \n      - IOC\n      - Hash\n\nsources:\n    - query: |\n       LET TFURL \u003c= \"https://threatfox-api.abuse.ch/api/v1/\"\n       LET TFIOC = \n         SELECT *\n           FROM http_client(\n             method=\"POST\",\n             url=TFURL,\n             headers=dict(`Auth-Key`=AuthKey),\n             data=serialize(item=dict(`query`=\"search_ioc\",`search_term`=IOC))\n       )\n       \n       LET TFHash = \n         SELECT *\n           FROM http_client(\n             method=\"POST\",\n             url=TFURL,\n             headers=dict(`Auth-Key`=AuthKey),\n             data=serialize(item=dict(`query`=\"search_hash\", `hash`=IOC))\n       )\n       \n       SELECT \n              parse_json(data=Content).data[0].ioc AS `IOC`,\n              parse_json(data=Content).data[0].malware AS `Malware`,\n              parse_json(data=Content).data[0].confidence_level AS `Confidence Level`,\n              parse_json(data=Content).data[0].threat_type AS `Threat Type`,\n              parse_json(data=Content).data[0].first_seen AS `First Seen`,\n              parse_json(data=Content).data[0].last_seen AS `Last Seen`,\n              parse_json(data=Content).data[0].reporter AS `Reporter`,\n              parse_json(data=Content).data[0].tags AS `Tags`,\n              parse_json(data=Content).data[0] As _Content \n       FROM if(condition= IOCType=~\"Hash\",then=TFHash,else=TFIOC)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.Events.ReplayTestSet","op":"set","definition":"name: Windows.Sigma.Events.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.BaseEvents\nsources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT timestamp(\n           epoch=System.TimeCreated.SystemTime) AS Timestamp,\n       System.Computer AS Computer,\n       System.Channel AS Channel,\n       System.EventID.Value AS EID,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       System.EventRecordID AS RecordID,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Enrichment.Virustotal.FileScan","op":"set","definition":"name: Exchange.Server.Enrichment.Virustotal.FileScan\nauthor: Wes Lambert -- @therealwlambert\ndescription: | \n  Submit a file to Virustotal for analysis.  \n  \n  This artifact is based on the multipart/form-data example here:\n  \n  https://docs.velociraptor.app/knowledge_base/tips/multiparts_uploads/\n  \n  This artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n  \n  Ex.\n  \n    `SELECT * from Artifact.Server.Enrichment.Virustotal.FileScan(FileToScan=$YOURFILE)`\n  \n  NOTE: The default time to wait for scan results is set to 60 seconds. In the future, this artifact will be optimized to poll for result status instead of using a static wait interval.\n  \ntype: SERVER\n\nparameters:\n    - name: FileToScan\n      type: string\n      description: The file to submit to Virustotal (this refers to the file's actual path on disk).\n      default: \n    - name: TimeToWait\n      type: int\n      description: Time to wait before attempting to pull results for the file submission.\n      default: 60\n    - name: VirustotalKey\n      type: string\n      description: API key for Virustotal. Leave blank here if using server metadata store.\n      default:\n\nsources:\n  - queries:\n    - |\n        LET Creds = if(\n           condition=VirustotalKey,\n           then=VirustotalKey,\n           else=server_metadata().VirustotalKey)\n    - |\n        LET Url \u003c= 'https://www.virustotal.com/api/v3/'\n        \n    - |\n        LET Boundary \u003c= \"-----------------------------9051914041544843365972754266\"\n        \n    - | \n        LET File(Filename, ParameterName, Data) = format(\n            format='--%s\\nContent-Disposition: form-data; name=\"%s\"; filename=\"%v\"\\nContent-Type: text/plain\\n\\n%s\\n',\n            args=[Boundary, ParameterName, Filename, Data])\n\n    - |\n        LET END = format(format=\"--%s--\\n\", args=Boundary)\n\n    - | \n        LET Submission = SELECT * FROM chain(\n            a={SELECT parse_json(data=Content).data.id AS SubmissionId FROM http_client(\n                method=\"POST\",\n                url=Url + 'files',\n                headers=dict(`x-apikey`=Creds, `Content-Type`=\"multipart/form-data; boundary=\" + Boundary),\n                data=File(Filename=path_split(path=FileToScan)[1], ParameterName=\"file\", Data=read_file(filename=FileToScan)) + END)},\n            b={SELECT sleep(time=TimeToWait) FROM scope()}\n        )\n\n    - | \n        LET Analysis = SELECT parse_json(data=Content) AS Content FROM  http_client(\n            method=\"GET\",\n            url=Url + 'analyses/' + Submission.SubmissionId[0],\n            headers=dict(`x-apikey`=Creds))\n\n    - |\n        SELECT path_split(path=FileToScan)[1] AS Filename, \n            Content.data.attributes.stats AS Stats, \n            Content.data.attributes.results AS Results, \n            Content.meta.file_info AS _FileInfo, \n            Content AS _Data \n        FROM Analysis\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Hunt.Comparison","op":"set","definition":"name: Exchange.Server.Hunt.Comparison\nauthor: Denis Kiffer\n\ndescription: |\n   This artifact is used to compare other artifacts from two different hunts. The basic idea is that a baseline (Hunt 1) is created from selected artifacts before an attack. A second hunt (Hunt 2) can then be carried out after the attack using the same artifacts. Now, using this script, artifacts from both hunts can be compared. This allows legitimate activities to be filtered out and makes it easier to identify malicious activities in Hunt2.\n   \n   Furthermore, when comparing artifacts, it is necessary to select columns (here the identifying_column) that should be used for the comparison in both artifacts, since a comparison of complete data sets leads to errors. Because many artifacts contain timestamps that update. The use of values such as hashes therefore makes sense.\n   \n   For example, the following artifacts and their identifying columns can be used to compare to a baseline:\n   \n   - Windows.System.Pslist - Hash\n   - Windows.Forensics.Prefetch - Hash\n   - Windows.Sysinternals.Autoruns - SHA-256\n   - Windows.Sys.AllUsers - Name\n   \nreference:\n  - https://www.sans.org/white-papers/37192/\n\ntype: SERVER\n\nparameters:\n  - name: Baseline_Hunt_1_id\n    description: id of the hunt that was executed before an attack\n  - name: Hunt_2_id\n    description: id of hunt that was executed during or after an attack and is supposed to be compared to the Baseline_Hunt_1\n  - name: Artifact_name\n    description: This is the artefact that should be compared and which was executed in the Baseline_Hunt_1 and Hunt_2\n  - name: Identifying_column\n    description: column of the selected artefact that should be compared\n\nsources:\n  - query: |\n     --Select baseline hunt\n     Let Baseline = SELECT *,\"Baseline\" AS Sourcehunt FROM hunt_results(\n       artifact=Artifact_name,\n       hunt_id=Baseline_Hunt_1_id) \n\n     --Select second hunt to compare    \n     Let Hunt2 = SELECT *, \"Hunt2\" AS Sourcehunt FROM hunt_results(\n       artifact=Artifact_name,\n       hunt_id=Hunt_2_id)\n\n     --Get List of systems to compare to each other    \n     Let Systems = SELECT Fqdn FROM Baseline GROUP BY Fqdn\n\n     --Fuse both hunts \n     Let Hunts_fused = SELECT * FROM chain(\n       a={SELECT * FROM Hunt2},\n       b={SELECT * FROM Baseline},async=TRUE)\n\n     --Loop through each system and count how many appearances of the value from the selected identifying_column there are           \n     Let CountallRows = SELECT * FROM foreach(\n       row=Systems.Fqdn,\n       query={SELECT *, count() AS TotalCount FROM Hunts_fused WHERE Fqdn=_value GROUP BY get(member=Identifying_column)})\n\n     --Show all lines where the value in the identifying_column only appears once\n     SELECT * FROM CountallRows WHERE TotalCount=1\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Import.WatchLocalDirectory","op":"set","definition":"name: Exchange.Server.Import.WatchLocalDirectory\ndescription: |\n   This is an artifact that will monitor a local path for collections, \n   which it will then ingest. \n\ntype: SERVER_EVENT\n\nparameters:\n   - name: WatchDir\n     default: \"/tmp/watch/*.zip\"\n\nsources:\n  - query: |\n        SELECT * FROM foreach(\n            row={\n                SELECT * FROM diff(\n                    query={\n                        SELECT OSPath FROM glob(globs=WatchDir)\n                    }, period=3, key=\"OSPath\"\n                )\n                WHERE Diff =~ \"added\"\n            }, query={\n                SELECT *, import_collection(filename=OSPath), OSPath \n                FROM scope()\n            }\n        )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Import.WatchS3Directory","op":"set","definition":"name: Exchange.Server.Import.WatchS3Directory\ndescription: |\n   This is an artifact that will monitor an S3 path for collections, \n   which it will then ingest. \n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: SERVER_EVENT\n\nparameters:\n   - name: WatchDir\n     default: \"/velociraptor/*.zip\"\n\n   - name: Endpoint\n     default: 'http://127.0.0.1:9000/'\n     \n   - name: Key\n     default: 'admin'\n     \n   - name: Secret\n     default: 'password'\n     \n   - name: Region\n     default: 'us-east-1'\n\nsources:\n  - query: |\n        LET S3_CREDENTIALS \u003c= dict(\n            endpoint=Endpoint, \n            credentials_key=Key, \n            credentials_secret=Secret,\n            region=Region,\n            no_verify_cert=1)\n        SELECT * FROM foreach(\n            row={\n                SELECT * FROM diff(\n                    query={\n                        SELECT OSPath FROM glob(globs=WatchDir, accessor=\"s3\")\n                    }, period=3, key=\"OSPath\"\n                )\n                WHERE Diff =~ \"added\"\n            }, query={\n                SELECT *, import_collection(\n                    filename=OSPath,\n                    accessor=\"s3\"\n                ),  OSPath \n                FROM scope()\n            }\n        )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Monitor.Autolabeling.Clients","op":"set","definition":"name: Exchange.Server.Monitor.Autolabeling.Clients\nauthor: Stephan Mikiss @StephMikiss\ndescription: |\n    This server side event monitoring artifact watches for new client enrollments and automatically labels them according to their domain roles.\n    \n    * Standalone \u0026 Member Workstations will get the label `Workstation` assigned.\n    * Standalone \u0026 Member Servers will get the label `Server` assigned.\n    * Primary \u0026 Backup Domain Controller will get the label `Domain Controller` assigned.\n    * Linux Systems will get the label `Linux` assigned.\n    \n    Relabeling of all clients even after they were enrolled can be achieved by starting a hunt for `Generic.Client.Info`. The labels are either Set or Cleared so it is fine to re-apply the label many times. See https://docs.velociraptor.app/knowledge_base/tips/automating_labels/\n    \ntype: SERVER_EVENT\nsources:\n- query: |\n    \n    LET interrogations = SELECT *\n        FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n        WHERE Flow.artifacts_with_results =~ \"Generic.Client.Info/WindowsInfo|Generic.Client.Info/BasicInformation\"\n    \n    LET matches = SELECT * FROM switch(\n        z={SELECT *,label(client_id=ClientId, labels=\"Linux\", op=\"set\") FROM source(\n            artifact=\"Generic.Client.Info/BasicInformation\") WHERE OS =~ \"linux\"},\n        a={SELECT *,label(client_id=ClientId, labels=\"Workstation\", op=\"set\") FROM source(\n            artifact=\"Generic.Client.Info/WindowsInfo\") WHERE `Computer Info`.DomainRole =~\"Workstation\"},\n        b={SELECT *,label(client_id=ClientId, labels=\"Server\", op=\"set\") FROM source(\n            artifact=\"Generic.Client.Info/WindowsInfo\") WHERE `Computer Info`.DomainRole =~\"Server\"},\n        c={SELECT *,label(client_id=ClientId, labels=\"Domain Controller\", op=\"set\") FROM source(\n            artifact=\"Generic.Client.Info/WindowsInfo\") WHERE `Computer Info`.DomainRole =~\"Domain Controller\"}\n    )\n       \n    SELECT * FROM foreach(row=interrogations, query=matches)\n    \n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Notification.Mastodon","op":"set","definition":"name: Exchange.Server.Notification.Mastodon\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n  Create a post on a Mastodon server. This could be used for automated alerting purposes, sharing IOCs, etc.\n\n  This artifact can be called from within another artifact to include data from the artifact results in the message/status.\n  \n  This could also be turned into a server event artifact to send a notification or post to Mastodon when a particular event occurs.\n\n  Ex.\n\n    `SELECT * from Artifact.Server.Notification.Mastodon(Status=YourMessage/Status)`\n\ntype: SERVER\n\nparameters:\n    - name: Status\n      type: string\n      description: The message/status to be posted to Mastodon.\n      default:\n    \n    - name: MastodonServer\n      type: string\n      description: Mastodon server. Leave blank here if using server metadata store.\n      default:\n\n    - name: MastodonToken\n      type: string\n      description: Token for Mastodon. Leave blank here if using server metadata store.\n      default:\n\nsources:\n  - query: |\n        LET Creds \u003c= if(\n            condition=MastodonToken,\n            then=MastodonToken,\n            else=server_metadata().MastodonToken)\n        \n        LET Server \u003c= if(\n            condition=MastodonServer,\n            then=MastodonServer,\n            else=server_metadata().MastodonServer)\n\n        SELECT * FROM http_client(\n            url='https://'+ Server +'/api/v1/statuses',\n            headers=dict(`Authorization`='Bearer ' + Creds, `Content-Type`=\"application/json\"),\n            method=\"POST\",\n            data=dict(`status`=Status)\n        )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Notification.Mattermost","op":"set","definition":"name: Exchange.Server.Notification.Mattermost\nauthor: Hilko Bengen \u003cbengen@hilluzination.de\u003e\ndescription: |\n    Send notification via Mattermost webhook as described in \u003chttps://developers.mattermost.com/integrate/webhooks/incoming/\u003e\n\ntype: SERVER\nparameters:\n    - name: url\n      description: Webhook URL\n        \n    - name: text\n      description: Markdown-formatted message to display in the post.\n            \n    - name: channel\n      description: Overrides the channel the message posts in.\n\n    - name: username\n      description: Overrides the username the message posts as.\n\n    - name: icon_url\n      description: Overrides the profile picture the message posts with.\n  \n    - name: icon_emoji\n      description: Overrides the profile picture and icon_url parameter.\n\nsources:\n    - query: |\n          LET url \u003c= if(\n              condition=url,\n              then=url,\n              else=server_metadata().MattermostWebhookURL)\n          LET post_body \u003c= dict(\n              text=text,\n              format=\"json\")\n          LET _ \u003c= if(\n              condition=channel,\n              then=set(item=post_body, field=\"channel\", value=channel))\n          LET _ \u003c= if(\n              condition=username,\n              then=set(item=post_body, field=\"username\", value=username))\n          LET _ \u003c= if(\n              condition=icon_url,\n              then=set(item=post_body, field=\"icon_url\", value=icon_url))\n          LET _ \u003c= if(\n              condition=icon_emoji,\n              then=set(item=post_body, field=\"icon_emoji\", value=icon_emoji))\n          SELECT * from http_client(\n              data=serialize(item=post_body),\n              headers=dict(`Content-Type`=\"application/json\"),\n              method=\"POST\",\n              url=url)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Slack.Clients.Enrolled","op":"set","definition":"name: Exchange.Server.Slack.Clients.Enrolled\ndescription: |\n   Send a message to slack when clients become enrolled.\n\n   This artifact triggers when a client is interrogated within 60\n   seconds of it being seen for the first time.\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: FirstSeenDelay\n    default: \"60\"\n    type: int\n    description: |\n        The time between first_seen_time and Generic.Client.Info collection.\n  - name: SlackToken\n    description: |\n        The token URL obtained from Slack. Leave blank to use server metadata.\n        e.g. https://hooks.slack.com/services/XXXX/YYYY/ZZZZ\n\nsources:\n  - query: |\n        LET token_url = if(\n                   condition=SlackToken,\n                   then=SlackToken,\n                   else=server_metadata().SlackToken)\n\n        -- Returns an event for each interrogation that occurs within 60 seconds\n        -- of first seen timestamp.\n        LET completions = SELECT *,\n                client_info(client_id=ClientId) AS ClientInfo ,\n                now() AS Now\n          FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n          WHERE Flow.artifacts_with_results =~ \"Generic.Client.Info/BasicInformation\"\n            AND Now - ClientInfo.first_seen_at \u003c FirstSeenDelay\n\n        -- Sends the message to a slack channel.\n        LET SendToSlack(Message) = SELECT *\n            FROM http_client(\n              method=\"POST\",\n              headers=dict(`Content-Type`=\"application/json\"),\n              data=serialize(format=\"json\", item=dict(text=Message)),\n              url=token_url)\n\n        SELECT * FROM foreach(row=completions, query={\n          SELECT * FROM foreach(row={\n            SELECT * FROM source(\n               artifact=\"Generic.Client.Info/BasicInformation\",\n               client_id=ClientId, flow_id=FlowId)\n          }, query={\n            SELECT * FROM SendToSlack(\n               Message=format(format=\"Enrollment FROM %v with ClientID %v!\",\n                  args=[Fqdn, ClientId]))\n          })\n        })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Telegram.Clients.Enrolled","op":"set","definition":"name: Exchange.Server.Telegram.Clients.Enrolled\nauthor: \"td - @tuedenn\"\ndescription: |\n   Send a message to telegram when clients become enrolled.\n\n   This artifact triggers when a client is interrogated within 60\n   seconds of it being seen for the first time. You can manually\n   configure information such as FirstSeenDelay, timestamp, etc.\n\n   Inspired by `Server.Slack.Clients.Enrolled`.\ntype: SERVER_EVENT\n\nparameters:\n  - name: FirstSeenDelay\n    default: \"60\"\n    type: int\n    description: |\n        The time between first_seen_time and Generic.Client.Info collection.\n  - name: TeleChatID\n    description: |\n        The chat_id of the group chat you want to send messages to.\n        e.g: -872161xxx\n  - name: TeleURL\n    description: |\n        The url of your bot API be used to send message.\n        e.g: https://api.telegram.org/bot66666xxxxx:AAGukJg5LXgPkxxxtVU2Smbtrf0tnVuNxxx/sendMessage\n\nsources:\n  - query: |\n        LET chatID = if(\n                   condition=TeleChatID,\n                   then=TeleChatID,\n                   else=server_metadata().TeleID)\n\n        LET urlTele = if(\n                   condition=TeleURL,\n                   then=TeleURL,\n                   else=server_metadata().TeleURL)\n\n        -- Returns an event for each interrogation that occurs within 60 seconds\n        -- of first seen timestamp.\n\n        LET completions = SELECT client_id AS ClientId,\n                         os_info.hostname AS Hostname,\n                         os_info.fqdn AS Fqdn,\n                         last_ip AS LastIP,\n                         os_info.system AS OS,\n                         os_info.release AS OSrelease,\n                         timestamp(epoch=first_seen_at) AS FirstSeen,\n                         timestamp(epoch=last_seen_at) AS LastSeen,\n                         timestamp(epoch=now()) AS Now\n        FROM clients()\n        WHERE last_interrogate_artifact_name = \"Generic.Client.Info/BasicInformation\"\n        AND first_seen_at \u003e now() - FirstSeenDelay\n\n        -- Sends the message to a telegram group.\n        LET SendToTele(Message) = SELECT *\n            FROM http_client(\n              method=\"POST\",\n              headers=dict(`Content-Type`=\"application/json\"),\n              data=serialize(\n              format=\"json\", item=dict(chat_id=chatID, text=Message)),\n              url=urlTele)\n\n        LET send_message = SELECT *\n        FROM foreach(\n          row=completions,\n          query={\n            SELECT Content, Response, Headers.Date\n            FROM SendToTele(\n              Message=format(\n                format=\"[Info] New client has been enrolled!\\nTime: %v!\\nHostname: %s\\nIP: %s\\nOS: %v\",\n                args=[FirstSeen, Hostname, LastIP, OSrelease]))\n        })\n\n        -- Check every minute using clock() plugin\n        SELECT * FROM foreach(\n        row={\n          SELECT * FROM clock(period=FirstSeenDelay\n          )},\n        query=send_message)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Utils.BackupAzure","op":"set","definition":"name: Exchange.Server.Utils.BackupAzure\ndescription: |\n   This server monitoring artifact will automatically zip and backup\n   any collected artifacts to Azure blob storage.\n\n   You will need to provide a SasURL to upload to the container. The\n   credentials can be given as parameters or they will be taken from\n   the server metadata.\n   \n   Based on Server.Utils.BackupS3.\n\n   Thanks to @shortxstack and @Recon_InfoSec\n\ntype: SERVER_EVENT\n\nparameters:\n   - name: ArtifactNameRegex\n     default: \".\"\n     description: A regular expression to select which artifacts to upload\n     type: regex\n\n   - name: SasURL\n     description: A SAS URL to use for upload to the container.\n\n   - name: RemoveDownloads\n     type: bool\n     description: If set, remove the flow export files after upload\n     \n   - name: UploadSubdirectory\n     default: FALSE\n     type: bool\n     description: If set, upload exports to subirectory per flow\n\nsources:\n  - query: |\n      -- Allow these settings to be set by the artifact parameter or the server metadata.\n      LET sas_url \u003c= if(condition=SasURL, then=SasURL,\n           else=server_metadata().DefaultSasURL)\n\n      LET completions = SELECT *,\n         client_info(client_id=ClientId).os_info.fqdn AS Fqdn,\n         create_flow_download(client_id=ClientId,\n             flow_id=FlowId, wait=TRUE) AS FlowDownload\n      FROM watch_monitoring(artifact=\"System.Flow.Completion\")\n      WHERE Flow.artifacts_with_results =~ ArtifactNameRegex\n    \n      SELECT upload_azure(\n      file=FlowDownload,\n      accessor=\"fs\",\n      sas_url=sas_url,\n      name=if(condition=UploadSubdirectory, \n                then=format(format=\"%v/Host %v %v %v.zip\",args=[FlowId, Fqdn, FlowId, timestamp(epoch=now())]),\n                else=format(format=\"Host %v %v %v.zip\",args=[Fqdn, FlowId, timestamp(epoch=now())]))\n      ) AS Upload\n\n      FROM completions\n      WHERE Upload OR\n        if(condition=RemoveDownloads,\n           then=rm(filename=file_store(path=FlowDownload)))\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Utils.OrphanedFlows","op":"set","definition":"name: Exchange.Server.Utils.OrphanedFlows\ndescription: |\n  Sometimes flows are deleted but there is still outstanding data for\n  them in flight. The server will continue to save this data after the\n  flow is deleted.\n\n  This happens when a hunt is deleted (thereby deleting all its flows)\n  but there are in flight collections still outstanding.\n\ntype: SERVER\n\nsources:\n- query: |\n     -- Calculate the space taken by each file (Does not count directories)\n     LET _Du(OSPath, Accessor) =\n       SELECT sum(item=Size) AS Sum\n       FROM glob(globs=\"/**\", root=OSPath, accessor=Accessor)\n       GROUP BY 1\n     LET Du(OSPath, Accessor) = _Du(OSPath=OSPath, Accessor=Accessor)[0].Sum\n\n     -- Get all collection directories (that contain uploads, monitoring etc).\n     LET FlowDirs =\n         SELECT OSPath,\n            OSPath[-1] AS FlowID, OSPath[-3] AS ClientId\n         FROM glob(globs=\"/clients/*/collections/*\", accessor=\"fs\")\n         WHERE NOT FlowID =~ \".db\"\n\n     -- An OrphanedFlows is a flow that does not have a metadata record\n     -- but still has some data.\n     LET OrphanedFlows = SELECT file_store(path=OSPath.String) AS Path,\n         ClientId, FlowID, {\n            SELECT * FROM flows(client_id=ClientId, flow_id=FlowID)\n         } AS Details, Du(OSPath=OSPath, Accessor=\"fs\") AS Size\n         FROM FlowDirs\n         WHERE NOT Details AND Size \u003e 0\n         ORDER BY Size DESC\n\n     SELECT Path, ClientId, FlowID, Size, humanize(bytes=Size) AS HumanSize\n     FROM OrphanedFlows\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Utils.QuerySummary","op":"set","definition":"name: Exchange.Server.Utils.QuerySummary\nauthor: Clay Norris, Mike Cohen\ndescription: Takes a query and outputs number of unique items per column, as well as the top 10 most frequently occuring items\n\n\nparameters:\n    - name: Query\n    \nsources:\n    - query: |\n        LET summary \u003c= dict()\n        \n        LET IncrementValue(Value, Dict) = set(item=Dict, field=Value, value=get(item=Dict, field=Value, default=0) + 1)\n        LET Increment(Column, Value) = set(item=summary, field=Column,\n           value=IncrementValue(Value=Value, Dict=get(item=summary, field=Column, default=dict())))\n        \n        LET _ \u003c= SELECT *, { \n          SELECT Increment(Column=_key, Value=str(str=_value))\n          FROM items(item=_value)\n        }\n        FROM items(item=Query)\n        \n        SELECT _key as Column, to_dict(item={\n                                              SELECT _key,_value FROM items(item=_value) ORDER BY _value Desc LIMIT 10\n                                             }) as Top10, \n                                             len(list=_value) as TotalCount \n                                             FROM items(item=summary) ORDER BY TotalCount DESC\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Server.Utils.ScheduledDeletion","op":"set","definition":"name: Exchange.Server.Utils.ScheduledDeletion\nauthor: Zane Gittins\ndescription: |\n    Schedules Server.Utils.DeleteMonitoringData to cleanup server monitoring data.\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: ScheduleDayRegex\n    default: .\n  - name: ScheduleTimeRegex\n    default: \"00:00:\"\n  - name: ArtifactRegex\n    default: \"EVTX|ETW\"\n  - name: DaysOld\n    default: 7\n    type: int\n\nsources:\n  - query: |\n      LET schedule = SELECT UTC.String AS Now,\n      Weekday.String AS Today\n      FROM clock(period=60)\n      WHERE Now =~ ScheduleTimeRegex AND Today =~ ScheduleDayRegex AND\n          log(message=\"Launching at time \" + Now)\n          \n      SELECT * FROM foreach(row=schedule, query={\n          SELECT * FROM Artifact.Server.Utils.DeleteMonitoringData(ArtifactRegex=ArtifactRegex, DateBefore=(now() - 60*60*24*DaysOld), ReallyDoIt=true)\n      })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.BaseEvents","op":"set","definition":"name: Windows.Sigma.BaseEvents\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Windows.\n\n  This artifact was built on 2025-08-19T21:35:37Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is 10 Min).\n    default: \"600\"\n\n  - name: EVTX_FREQUENCY\n    type: int\n    default: 60\n    description: |\n      How often in seconds to check for event log changes. Lower\n      number means more real time detection but potentially higher\n      CPU utilization.\nexport: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET MandatoryLabelLookup \u003c= dict(\n      `S-1-16-0`= 'UNTRUSTED',\n      `S-1-16-4096`= 'LOW_INTEGRITY',\n      `S-1-16-8192`= 'MEDIUM_INTEGRITY',\n      `S-1-16-8448`= 'MEDIUM_HIGH_INTEGRITY',\n      `S-1-16-12288`= 'HIGH_INTEGRITY',\n      `S-1-16-16384`= 'SYSTEM_INTEGRITY',\n      `S-1-16-20480`= 'PROTECTED_PROCESS')\n\n  LET TokenElevationTypeLookup \u003c= dict(\n      `%%1936`= 'FULL_TOKEN',\n      `%%1937`= 'ELEVATED_TOKEN',\n      `%%1938`= 'LIMITED_TOKEN')\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET WindowsKernelFile_EIDLookup \u003c= dict(\n       `10`=\"NameCreate\", `11`=\"NameDelete\", `12`=\"FileOpen\",\n       `19`=\"Rename\", `27`=\"RenamePath\",`30`=\"CreateNewFile\")\n\n  LET WindowsKernelFile_Keyword \u003c= 0x1490\n\n  LET WindowsKernelProcess_EIDLookup \u003c= dict(\n    `1`=\"ProcessStart\", `2`=\"ProcessStop\",\n    `5`=\"ImageLoad\", `6`=\"ImageUnload\")\n\n  LET WindowsKernelProcess_Keyword \u003c= 0x50\n\n  LET WindowsKernelRegistry_EIDLookup \u003c= dict(\n    `2`=\"OpenKey\", `1`=\"CreateKey\", `5`=\"SetValueKey\",\n    `6`=\"DeleteValueKey\", `3`=\"DeleteKey\")\n\n  -- SetValueKey | DeleteValueKey | CreateKey | OpenKey | DeleteKey = 0x100 | 0x200 | 0x1000 | 0x2000 | 0x4000\n  LET WindowsKernelRegistry_Keyword \u003c= 0x7300\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `*/windows/application`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Application.evtx\")\n    },\n    `*/windows/applocker`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n       ROOT + \"/Microsoft-Windows-AppLocker%4MSI and Script.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4EXE and DLL.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx\",\n       ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx\",\n     ])\n    },\n    `*/windows/appmodel-runtime`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppModel-Runtime%4Admin.evtx\")\n    },\n    `*/windows/appxdeployment-server`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n    },\n    `*/windows/appxpackaging-om`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n    },\n    `*/windows/bits-client`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Bits-Client%4Operational.evtx\")\n    },\n    `*/windows/capi2`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-CAPI2/Operational\")\n    },\n    `*/windows/certificateservicesclient-lifecycle-system`={\n     SELECT * FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\")\n    },\n    `*/windows/codeintegrity-operational`={\n     SELECT * FROM watch_evtx(accessor=\"file\",\n        filename=ROOT + \"/Microsoft-Windows-CodeIntegrity%4Operational.evtx\")\n    },\n    `*/windows/diagnosis-scripted`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Diagnosis-Scripted%4Operational.evtx\")\n    },\n    `*/windows/dns-client`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DNS Client Events%4Operational.evtx\")\n    },\n    `*/windows/dns-server`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/DNS Server.evtx\")\n    },\n    `*/windows/dns-server-analytic`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DNS-Server%4Analytical.evtx\")\n    },\n    `*/windows/driver-framework`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx\")\n    },\n    `*/windows/firewall-as`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx\")\n    },\n    `*/windows/ldap_debug`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-LDAP-Client%4Debug.evtx\")\n    },\n    `*/windows/lsa-server`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-LSA%4Operational.evtx\")\n    },\n    `*/windows/microsoft-servicebus-client`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-ServiceBus-Client.evtx\")\n    },\n    `*/windows/msexchange-management`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/MSExchange Management.evtx\")\n    },\n    `*/windows/ntlm`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-NTLM%4Operational.evtx\")\n    },\n    `*/windows/openssh`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/OpenSSH%4Operational.evtx\")\n    },\n    `*/windows/powershell`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\",\n     ])\n    },\n    `*/windows/powershell-classic`={\n     SELECT *, EventData + dict(\n        Data=EventData.Data[2],\n        HostApplication=parse_string_with_regex(\n          regex=\"HostApplication=([^\\\\r\\\\n]+)\",\n          string=EventData.Data[2]).g1) AS EventData\n     FROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\n    },\n    `*/windows/security`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Security.evtx\")\n    },\n    `*/windows/security-mitigations`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Security-Mitigations.evtx\")\n    },\n    `*/windows/shell-core`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Shell-Core%4Operational.evtx\")\n    },\n    `*/windows/smbclient-security`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-SmbClient%4Security.evtx\")\n    },\n    `*/windows/sysmon`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\")\n    },\n    `*/windows/system`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/System.evtx\")\n    },\n    `*/windows/taskscheduler`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-TaskScheduler%4Operational.evtx\")\n    },\n    `*/windows/terminalservices-localsessionmanager`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx\")\n    },\n    `*/windows/vhdmp`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-VHDMP%4Operational.evtx\")\n    },\n    `*/windows/windefend`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n    },\n    `*/windows/wmi`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-WMI-Activity%4Operational.evtx\")\n    },\n    `process_creation/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/System.evtx\"\n     ])\n     WHERE System.EventID.Value = 1 OR System.EventID.Value = 4688\n    },\n    `ps_classic_provider_start/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\n     WHERE System.EventID.Value = 600\n    },\n    `ps_classic_start/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\n     WHERE System.EventID.Value = 400\n    },\n    `ps_module/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\"\n     ])\n     WHERE System.EventID.Value = 4103\n    },\n    `ps_script/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n        ROOT + \"/PowerShellCore%4Operational.evtx\"\n     ])\n     WHERE System.EventID.Value = 4104\n    },\n    `registry_add/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE System.EventID.Value = 12 OR System.EventID.Value = 4657\n    },\n    `registry_event/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE System.EventID.Value IN (12, 13, 14) OR System.EventID.Value = 4657\n    },\n    `registry_set/windows/*`={\n     SELECT * FROM watch_evtx(accessor='file', filename=[\n        ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n        ROOT + \"/Security.evtx\"\n     ])\n     WHERE System.EventID.Value = 13 OR System.EventID.Value = 4657\n    },\n    `antivirus/windows/windefend`={\n     SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n    },`velociraptor/info/*`={ SELECT * FROM info() })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6yc3XLcNrLHX0WFG8d1eFQ+dpyLU+ULWSNF2ugrmlGyVXFWgkhoBhGHZEBwpNn1vvsWPgmA7Cad2pt4xP79myQINoBGM/8i5P/J66cv3bt3H1jLBKcl/yf7jku2/fR6eLJjlVxQSd+SjBzlOWvbC97KQBIwhwHg6EvaPqO0Bhx9y2hbVyhvEadgLUqz1pB1V8lFvaUccR4wXnPy2nCBnSOEvOqKbhku0YTn76cF914hOdJC2ugo1KsHMnJUFFz9Scvz6qmGFDGkVYK1YNNYa0aOyrJ+YcWqXrCSralkK/AUI2RGjprmfAEptE0zyM2q//z27nfD/cJEi7RgD2i65DnFGjwgIv6Gys20RlMZOZJS8MdOsovF0c2Ct01J99izg/DA0y+07Cb1BsrIUVdweVOXPN8fb2i1hvv7ELTqZd2JnGEXnVBKJzeskr4p8me6xj1AfEY+84qKPSC0xox8rmt5WRfQCbw5I8e0LFeC5hDa2w3LxI2oVbxBrn/IOe29PYiFgTHS6Hm1nnfyBFTqBunbzqo4yda12J8XIOqBnkau5sExBwp6UCIm5GrTbR8bwStoeEmgjKhOWLEywpf7VrLtoTNl5LikeNN4u2I5qyQe2WLGaZDIGQCORi/HA462Tw1u/oRyuvs5N3If3Em93dKquOAVeHE9cfD168FreMA4aGgFvYfOajnJH0t2XoBXFzFG00kmRh+2s/XYoIXH0OqJrzuBBfiY0Zq22yZXEeHGrEnJKgnfnjVb8hXtQQGh+K6S10/HghUqHtKyvWWyExUD+wcsyMixYPrm7mS+4nCvTKiMHHdCKCsXLJc1GHwHWEbU8dlzzgVrc8GxOBUSmp94f0PC8De1gEKONxuSV1hnCYmIn76gBIzUZ3UrK2R2M0JG+vNmWnneJJr2vNn9MENnuEg70ZwhpXSS8hJuGmPVHNNzVjOHgPmICnR3LfjWPnjoQFEPWrbjyFm00VFTA0xKOd2crp1yTguOBd7syaqVtMpZModWN6oF2l6WFl4cDlTO0eQdupvTrzpyU96u2KnJbjy/NcszBF92j3+wXAZcRhaC79Cr93bLCujJwI02kDlXN6Le8SLpehN+vCYji5043b48v3/37oN/JMW4r7vLxakKAMbZkRB8R8vPbM2rw0DqXX6bu1v2Z8daGXs6Wf16ykusab05IyfVmlcMX33FTEZOhKjFMTxj7+0Z0UeTTm7HfGs6dOsd/be6rLaBp/gJZFUmroBvX8xYzWrfjE5FemNGTl5zpjsOdrcRozQs73QotTO/8Zt31GGPZeSU8rITDDlbSHgezc/ETEZOGZWdYNiq5sEyfh2gOswlXfP8816Cy9AEMqp5vdD9/Nw9PYHjQQIZFbKi92ZD4n08JAyPjO3erMl09htx0l3p2OQ3Ja9Cn9eCr8G8WIRk5EdBq+KGqind+ZauobMMMKOUrDBpOUTWM0pTd1hip7dbdsmhN9ObM3JGq6KE32FvVmQLPXNtMgTYT60xI2f4AHTWjz9n9ZZNTaljxmiQ3unNimzldFIrpYwOu35nNiTe/0MiI2BmT0cprIu5fqX/vahpAS5/QsLyyM30dssiTdvbFdsw0dZmcnvBdklaIhQNQK3e4J1Nd6TziktOJXyr3q5YPbdYSiq7dt70I5ZYF8jcce6UA5hrhNcd0ZKtBZd7tBVjKCPnDb7K6u2KRdYo1piRv9WPKy5LqKPYuPwT21+wag32kd6u2ZdaJCkPO057W0bmpYGH2d8LumfidgW+U709I8O2tdfh2vOizmlpmwyMcAlkVdhFe7tlVVuj3g1gaL3irJ5qscXi1xip9Gs1mh6XjApWjGUOfbeO0SCVGBvsWkPJBncM+Uo12mdd/diBA1dvt+xZ3Qm4xTxgabgzaKv3Cr6aCTedah5gVjmYBicSOxPWv+/trhfGe8ZpZp7gkuYbXmFDQEgoviqoGmov6GPUY9ZMmpRVTFzU9XPXZAdbtn1k4lPsOAQPvn49+EL+9wt5+6XS52klEz8xOM0eEhm51P6x2+gBR8Pzo96u2LYFB15lrwv+tOfVenouMYoGHpCsTMxoTQcGY2vMCNIetiWu2MuCPdGulDeCV/CceshpLXYCa9XcVNI+QkIFfoL4xbpiLysq1mw8CEXChDNatm1KKplNRgfig1SdkEYO54udVXN3NMf2I0NC8xNwQN5j6MMVeznQgFpZXuvAq7NwAB8Sjl9cofDiypNI6weAo5dM7MCeFyFOgUS3AHC0vu3JS+qpjFyXxazXYshp7axuOOS0dqJ/hITmJ2BPNgzd2+ntAXvStktJhWSFz/3Ag7tX3feyw1g36vqmblv+WLJj2rXf4jrWjbs28YEDWb1xt14DuURSmJBHl8Eccfhzx5LFLe7N8KOuBuMH7skOJd6GvVQRkxE0S+LzI+YHLScyUgMsViIZoRHlDTjHu9FTfVsqcdqVw5m5b64U8jJk+RsSihd0+38gqo2Weo9R7x31AaM+GIpVcnrXesg5LZZgiNNX9q85S9NR1Hm4fpp75ph0evuuIguGIZdowSlJSiU6pD8POadFJngBoOi2VevfC9rKJYMm/imldEj3tP1yX9YUvmdjzcgNb7BX1pszMiN8p5H6RrCjTm6QeBMSmt/xumvn7c5DdO9nhtgr+JaKvc6Xwj0lhrRKzQX0BYDZqQTyqgUrmd7HYFXBqzWuTmHvBXt2AaH5HS/ZmiGVrDGjNLprz4g1A9AUysTEefVUJ7UzVnjyinnWOoV4HgsEcQgY3SQa0GbEmAoUYYiYDg49AbaFfzQeRXdohpzXYgEhIDRfdDncAYxVc0/4/k9IeB5aZXizJhsmJMdYB2ha1nkNjjrOrElkwhbMzdxPW1+EP8MB2euhYitnP0z44ZYgIPj56ujyBLgkY8sIMpt0E0f9L3J3vd2yt6ztSjAvGSFWMZJmTwQ+q37LaHFdldD2jjdbcmIVEzNaA2/R+r3ZW5bXOyb2WLopZnoNunZNIKUqqeQ7ZhZ+yEMYAZV6W0s2lYZOKaeziTww5qWU06FX6QFHYynskHC86p4Tl2QRpdB1F2rJWPIc7jIxpXSyE1gxQQBk5LZDVyvenJHl0eX0Nw5Luo0/c0gOzFXlG7al+G5izCiN4I38XNb584q9QsE9pZwOifEBkJEloyLfjOzI2zAW2RWed2olMPLgvcAQh/7Bm/cH39KKGaeBYmtgNShc4OasnsPT8QnkVROL4JTyumlNzKvpXc4bs7GENdaQ9T50hgCZng8wr5wWeV5KXq1Rvic8r9NZSyngmfEIqNQ7proUGGkeHHFwvngIBFi5jpe4ep3lhgpm9umQdyeGrAp7yt6ekSUvzniLlEMEgKaRWb2zKm5d6cojkHT2gEXH+JQyOnAtZI0ZGalnTSZD7mMPQ06EhIhxmully5Bz2onq4wRyKiy9ERKeh2qUvdmTWGVyhDgF1tHCD5LsH0y+1OJ5TjMnqPMwneAZcl4L1yUEgKftCu8OfMmHXKqF149DLtGCM8eUcjp4+7G3OxZJHAVASE8+52DXwRxASxMN0kc6qzDPfOLTGgD2Xn6txbOKE8jEZghmRI8+E2cOEas47SqsIDtmrAbdbQ0Jy2OjWjhmSioRTjoGDrM+unaPOOjtms3tF2dYf0+oSAf39YjRmqQCHdQNKtXtMbwgI4G8auoVGFSeBEeQFzOGMrLct9u6mpiVR0xGzJJuskkGmFNO7IkkkFNhETgkPA9/gBUAjsYfUsw4zeS9R3dt9mhR3iJe0cnHuquKia4AwM7LvM2Ccdb7MEfwWDWKJh6QsW3IpVr4XZ/UTt334I6BxVcqjFZh9tDEVZr3rt84R2E7Ks7ajh/sxfcHpq6pjwcr2j4P60diRU9E/BV7mZYoyKgW8NAxPAV629acEbgAJhIMil9WG8Eo9jo/GMLPHlY8f2bypMrFvpnYeB5FnYdrfQh8oSJGabaslXTbjC0vlNFuxdhDdgdoVT+z6qRku7Etcl/0NqSQwrch3Be/qTMirWHu/k5Aee9OlMoOvxf2jVD/2AyFeo4CTKSPgEZtc9+IzBGGV4fHAqBPT2vx3y8vgv9ZhrMNMncjdQ22qMEfoOWhzef1Xka+Vh6rkFguZe3gz1xvrB0eX18t7y5PbgN/J8vlX3KldL0XtVi08fMv3GKo7n2Of8019/rCz7wGHueU/6gIUQsq9kgdkJON1EkMe4Svl4hU7+eo3qeqD3NUH0LVN5UnjTVouv3tPY9uQs578OEGZeJvutpp7AGFZU+Bw/EdrdnX2MuHXgc5sm/zarNnTjSrjGrsxt22mMOXqhUGpeLDjtJzvRYuwPKyIAAjI2YwDVE/dadkkoGl7glkVWF2FxNGnNGqpXZrltrYOSMsI1gtoitEHFss2UG4XyP9sinUCgZyZa2aQ4ZLZ83Ir7wq6pd2wZ5YVcz5/9M8WMTPWYI7BSQhEfHIaVIqI3zGV15/1I/gjNzYNHP9UoHzAG/WJPZljzdnZFt8DKCGipbdtzrFfv/C5eZesDV7/c4ciWY8Z7TdqDnOmzfZgYY+vblcfPz03W//yH7/n7dv3h6uVXRvsJq5xo0BDVYz17iY32A1c42L8frH9xj1vaM+YtRHTWGVVY2vrGpGBvue6wfzZrKCo4kqOP4cBMCedDGunbnR1W4o9Bz813fthr7/+MN/rT8sz47ef/wh7RJtN1VOvgyIf/8nAAD//6/m3Vy/TwAA\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/+w723LjOK6/4kpV3iaV2Ilz8ZvH7nR7Ti6eyD39cGoeGAlR2JFJL0k549ra39kP2S/bIniTbFlRfElP1faTSIAEQRAAQZD658Ft9Omv+JmwFFqDaZKBuuGpPD4/6B0MiSK91qH+HB78cnBLY8Elf1JH3yhL+Ks8+pUqeTTIKDB1fHrQO/iNP06oyqDXOvxui4et//y79Rt/HA0NcJQ4yP0rA2GAWET4WPC41zqcCR6DlGOing0Yu48NdJRUczO8i44iEHMQ+KExHLe7J3oeNzeaJhFk2m7c9eJCd9UchL6alUjEAz6dOWBnDUFB5yCuBZnCKxcv8uirBHHLEzjunJxoUQ1Bj6KlOxfX09cXDR4xqQiLYe0E1xNtn5xUEN2KYGcDgnfqSR5fXeqemrTuqL93ZGoUIdDDAsIrCY35K4joGbLs+KyNAhuTRcZJotXAlJp0PDvoHUSxoDP1a8bjl17rsFCbwF9qDRFBmXKKcIqiRRCIgQCiALkoARrRaaNEM1CQ2N44m/VqudS/E/hAMpSzMbCEsjTws4RoQrd7FugGhnC50HDGRs814JMQ3Lc5bUD8sqPX7j5LhvBE8kyFYVZgOMAdvK60XIEZO1RE5VKvKBYQdsuTHL2PKTTh7+wyTF6rY5CkV9romQiwOF9uRPtql7QjiHNB1eKonydUUZYet42RaqPttQ5veHpNMxhkQAQkUf74HWKlce8heXbePkemYT6hlmOYU55LXXVLZFG2hFDLxPKwBZ9uvXcAL/l0DbtBmCVyw1PO1nmaKtY7WpEnixkYaXCmy0h3kirL4ISIFMr8BY/+TTtBRbT9FLGjca91OJr1k0SAlAVGDbH389n9MD77uXoev2j/oEvAFI2x25jELySFujVqPB00obc4r9GPas7XaM0kVdE8DDNiT7w5p93zYC5VnNw/fjfE7xFnIgKHsVZqUMUudiUNwi9lP9Z8PwCRnGnxF6rvtYovCPtCWJLBTgzlvL2FHKqnu1ZAH2b9553dL+7MTXYGAu3Gz3f3a3L6cbr5I3XvolPyFlVT3XIAjBarZ7i/QTHSnMeri1AzpPEJt0S+eAehKztg51K7ZH2ao0wv/4BPp4QlN5SV1v8OXqtVICDsku9NbldvGG1UpK4xETUcDfmUUBZwpu773RKpQPwfLEY6Vi/UEPsAMZ+DWBgj6rUOy4BSG0ejVMcW14RmuQDv4kv1d4jgwquOjRzDapjTpwXr6K6JWkXzuB/HKnTsxzHPmXJI6xMs0juFaB5HighVRnvQLhZba6V1VRMiXzzHA84UMGXBtrZnxbtaw8u+RrxoX9WrOjYd84zGiwGmYyRGbctAIzCiIOXCaGaomHXMH2ML+ZzTxIxWhCy3Gi212YWbv+icvBUU6kiuEEVrw25OXWtSJGJD4Bamj8EzTFL1Wcyqx9xuTqedHzLq5YYu8r3Sb+BWJ6nyLUzHpQYRmTpWydT6nZD9oXKWkYW1ukLNGF5/0Gsd6t62n/YDgmcmlMkSg9cFEv9BstyfRg1CF4oI7QI//TWjwtiRIWkBpkGW8VdIJnwIGaREwYTrhqtQEwfxKQypnpgtQay4WHicddWuaNZdL/UXngvpDnpYQVxr/HpDpIpAYTpFylcuEguxezSdErH4LGY2KrNVns+sgY4Fnd9QqQx2TjNIQdfdFv9EM8dWoWaWCbNgbnvxFYOjyRcq9eQ0zle8c8Tcj7RLhRVQYGf1dXznEIKymM5IVnF81fjCEVbuwEjO0DRxdLtxlRiQb+6ZP43opxH9rxvReXfDnaaQ3+G5iGE5vWM7Iu5HGlbtYkc0sThb2oVE306NVQb+1SmxqpT3WEA/V882aC/U3sHk1T6ZbMzGxXmDNOJqAnTLQW0gaQddcbZOnSzC1EuzN9efJQl4Ng1uKQ40SjR8B49Xf38eL9vmmiesn66sLuEdvIYmutLY9veQJNjOX2znGa7O9pP4qPIR6+1mqzlc4j1GjfqtUdj1WrmZ8l3hNS/WIxHbwMhUccfxA3+aA9NNcBRTwQZvJ7k2XY2PSn5fnXSbiWCTOX7QJLoneNItv7ho2rd9+sbVztrZ3T9+H975tO3wzoS1SombYX/sJKmUoI+5Ag1bDrlrLgm2Ekf77KTk9ytnVXl97DEuNtXlGx6TLMSnNbeaG/P7Vi63nlnPYDXHW/LW3Z8sLeYBMqLoHMxO0uj+eNPZdM/DFUd/NsvspW5pPGP4S3v+mAvlcbri9kHsMgRZcseTVNkOGuObjwVXPOaZsX4suua3JH6mDHByDzDlCjykvLcbpJa/xZS9SWPn3213L37KwsriFCNF09tsrmXvXK//k1T5OChk5gUk8gFULhi+ehronfz+SYOBKUoyj8TmpjLgCeC8XGW9ypcPiGXv3HDa5x0MPjfaN87P8LmLeY02BKkP8f51mq17bTJQ5NQW7abH4xF74hi5GOXTVTENeqijL6LoYwajoTT3ca6ebJ6aeocPWcgpZ8ftJpeCoylJS7GC/lg/J4CpQMDWl8gUYzjL5+evAeYvIKrCh7FtaaGhLY5ke5hyuZ+Bud7FFp5GYTWNEZfWdix4kscm0MdSWDe2cCvGbKaKyGfMh5lCvcjtHm6Fa+NNL2LtVQzGPmfxmKqUytq8iYlZ8AK51zr8LAhTkJi693aFFMyKV3CSK6E1zDNZOJCVe2uk7V1CY+9ayRSM1vS8phmwpcg5CKSpvtSOqSMUDPxtyObLbi73j989PyYi3CM3pxtwg7qrCM3kHhk7+7sy1t2PzjirtjZdz4PeMAacPdEU/YIu5Cbur++HcQo1aTo6W3l6t2NJXX7oaDruuJ8Vz0Am20OmIGck9jrkAR7dax163n7PAfPl/9DflS2ojoHO+/RieWfDR9z64GbetbrqVxX7963FZ7CFV7GVTY3sXDD3TlnixXmFLK0peitcFp4J33RwSlno1ViA7epRB5zJfIo0XBHh1zQzj7NNoZ62Xh23tvj1TD+AzDPlwKa2R//ROd1OT3bCw1k4r9RoZEZtTGkCeXznujMWulUsLCvYXibf1UNjF2se68OyWjrnP34htS6NGFXU/hDiy+FguHwqLJ9HR7P6o2gk4i9cBoSusIK5+3OqNXhLr3xStbji+dYSLWBLlFdktQ9LxOeSiiiwmWob9CLyDxP2urL0p/n4GabEYl1ZvqUqlbq+iykUVBAJ33CS2MWPMDaIaMqIygU4mDlCm4KDhXy9a11I3L/npKHDC+Sjgp+V+e/uMLRmWmsmtGFAZh8b3AuaOjvXO5WgKWUk86ZfJ57Lzc9hGxyd8nDJvcHR6S3Nu6pS6aVf67ZX82+3o6N+rOicqsVx97LrHky6gM4HCp+kxFeikHj0SkinvcmQKPK7D+1MWqOCyJKTrmhhWQ/XE3OamDvHyraINU25lPQxgwHJ5ZoplJqsEYz5tobwBCwBcdw+waOcDQ31RyoynTULwFaptfGIMXnWoaWmh4WQDoI5CKrwXYkthhjQbOHuQejyrc8QFMQYrYaUjnnZ4lPZRqssT46lN/8KcnO4pgJeSZa1vlH13Oonc8JiSFou7+b+fbUPacKTGlnkPgKlKEt9HIKvkQIcq5ESlKXFud3yhD4tKEtDPmQ2K8KLueFtJ6F3r4c8c7cFrlgYtjCaF26RlXWc1c5ozSPxNSlovKToJ4mwicnMprOttM0dhgkUfFnaqHzKFdiuoRL6GpjtHCr2SVhstxVTQGFLin8OZxlay6kNge0mo/3C/7f/NIttFFVDOg7CEu6BXQP0uyYCz/5cHaR90ake5eCXg/CP8IALqP3BeLVpo1+K7Rq17Ou71i1hJAVxfHFy2vav/Qs/lQ8Ekc+YWw//lZdkibBuPWlzx1X3IwHuFl4f7U8CK9fzxZ8A/Ov/g3/9NwAA//+Gqjk4KkAAAA==\")))\n\n  LET DefaultDetailsLambda = '''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\nsources:\n- query: |\n   LET Result = SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= Rules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details='''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData''',\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details, _Event\n     FROM Result\n   })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.SmoothOperator","op":"set","definition":"name: Exchange.Windows.Detection.SmoothOperator\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n   This artifact searches for evidence of trojanised 3CXDesktopApp.\n   \n   Currently Windows specific, Yara glob can be repurposed for MacOS. \n   Targeting /Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib  \n   \n   There are three methods of detection:\n   \n   1. Yara glob - searches known install paths and applies yara looking for binary attributes.\n   2. Process Memory - Searches for compromised 3CXDesktopApp running using Windows.System.VAD.\n   3. AMCache - Searches for compromised 3CXDesktopApp.exe versions in AMCache.\n   \n   Impacted 3CXDesktopApp:\n   \n   - Windows: 18.12.407 \u0026 18.12.416\n   - MacOS: 18.11.1213, 18.12.402, 18.12.407 \u0026 18.12.416\n   \n   NOTE: artifact tested on 0.6.8 - should also work on on 0.6.7.  \n   Be aware that the YARA rules are intentionally written in a way that is less strict \u0026 may\n\n    1. detect other malicious samples created in the time frame in which the known malicious samples were created\n    2. lead to some FPs\n    \n   Thank you to @cyb3rops for sharing rules.\n\nreference:\n  - https://raw.githubusercontent.com/Neo23x0/signature-base/master/yara/gen_mal_3cx_compromise_mar23.yar\n  - https://twitter.com/cyb3rops/status/1641130326830333984\n  - https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/\n  - https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\ntype: CLIENT\n\n\nparameters:\n   - name: TargetGlob\n     default: C:\\Users\\*\\AppData\\*\\Programs\\3CXDesktopApp\\**.{dll,exe}\n   - name: UploadHits\n     description: Select to upload hits to server.\n     type: bool\n   - name: TargetYara\n     default: |\n         import \"pe\"\n         \n         rule APT_MAL_NK_3CX_Malicious_Samples_Mar23_1 {\n            meta:\n               description = \"Detects malicious DLLs related to 3CX compromise\"\n               author = \"X__Junior, Florian Roth (Nextron Systems)\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               date = \"2023-03-29\"\n               score = 85\n               hash1 = \"7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896\"\n               hash2 = \"c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02\"\n             strings:\n               $op1 = { 4C 89 F1 4C 89 EA 41 B8 40 00 00 00 FF 15 ?? ?? ?? ?? 85 C0 74 ?? 4C 89 F0 FF 15 ?? ?? ?? ?? 4C 8D 4C 24 ?? 45 8B 01 4C 89 F1 4C 89 EA FF 15 } /* VirtualProtect and execute payload*/\n               $op2 = { 48 C7 44 24 ?? 00 00 00 00 4C 8D 7C 24 ?? 48 89 F9 48 89 C2 41 89 E8 4D 89 F9 FF 15 ?? ?? ?? ?? 41 83 3F 00 0F 84 ?? ?? ?? ?? 0F B7 03 3D 4D 5A 00 00} /* ReadFile and MZ compare*/\n               $op3 = { 41 80 7C 00 ?? FE 75 ?? 41 80 7C 00 ?? ED 75 ?? 41 80 7C 00 ?? FA 75 ?? 41 80 3C 00 CE} /* marker */\n               $op4 = { 44 0F B6 CD 46 8A 8C 0C ?? ?? ?? ?? 45 30 0C 0E 48 FF C1} /* xor part in RC4 decryption*/\n             condition:\n               uint16(0) == 0x5a4d\n               and filesize \u003c 3MB \n               and pe.characteristics \u0026 pe.DLL\n               and 2 of them\n         }\n\n         rule APT_MAL_NK_3CX_Malicious_Samples_Mar23_2 {\n            meta:\n               description = \"Detects malicious DLLs related to 3CX compromise (decrypted payload)\"\n               author = \"Florian Roth (Nextron Systems)\"\n               reference = \"https://twitter.com/dan__mayer/status/1641170769194672128?s=20\"\n               date = \"2023-03-29\"\n               score = 80\n               hash1 = \"aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973\"\n            strings:\n               $s1 = \"raw.githubusercontent.com/IconStorages/images/main/icon%d.ico\" wide fullword\n               $s2 = \"https://raw.githubusercontent.com/IconStorages\" wide fullword\n               $s3 = \"icon%d.ico\" wide fullword\n               $s4 = \"__tutmc\" ascii fullword\n\n               $op1 = { 2d ee a1 00 00 c5 fa e6 f5 e9 40 fe ff ff 0f 1f 44 00 00 75 2e c5 fb 10 0d 46 a0 00 00 44 8b 05 7f a2 00 00 e8 0a 0e 00 00 }\n               $op4 = { 4c 8d 5c 24 71 0f 57 c0 48 89 44 24 60 89 44 24 68 41 b9 15 cd 5b 07 0f 11 44 24 70 b8 b1 68 de 3a 41 ba a4 7b 93 02 }\n               $op5 = { f7 f3 03 d5 69 ca e8 03 00 00 ff 15 c9 0a 02 00 48 8d 44 24 30 45 33 c0 4c 8d 4c 24 38 48 89 44 24 20 }\n            condition:\n               uint16(0) == 0x5a4d and\n               filesize \u003c 900KB and 3 of them\n               or 5 of them\n         }\n\n         rule APT_MAL_NK_3CX_Malicious_Samples_Mar23_3 {\n            meta:\n               description = \"Detects malicious DLLs related to 3CX compromise (decrypted payload)\"\n               author = \"Florian Roth , X__Junior\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               date = \"2023-03-29\"\n               score = 80\n               hash1 = \"aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973\"\n             strings:\n               $opa1 = { 41 81 C0 ?? ?? ?? ?? 02 C8 49 C1 E9 ?? 41 88 4B ?? 4D 03 D1 8B C8 45 8B CA C1 E1 ?? 33 C1 41 69 D0 ?? ?? ?? ?? 8B C8 C1 E9 ?? 33 C1 8B C8 C1 E1 ?? 81 C2 ?? ?? ?? ?? 33 C1 43 8D 0C 02 02 C8 49 C1 EA ?? 41 88 0B 8B C8 C1 E1 ?? 33 C1 44 69 C2 ?? ?? ?? ?? 8B C8 C1 E9 ?? 33 C1 8B C8 C1 E1 ?? 41 81 C0 } /*lcg chunk */\n               $opa2 = { 8B C8 41 69 D1 ?? ?? ?? ?? C1 E1 ?? 33 C1 45 8B CA 8B C8 C1 E9 ?? 33 C1 81 C2 ?? ?? ?? ?? 8B C8 C1 E1 ?? 33 C1 41 8B C8 4C 0F AF CF 44 69 C2 ?? ?? ?? ?? 4C 03 C9 45 8B D1 4C 0F AF D7} /*lcg chunk */\n\n               $opb1 = { 45 33 C9 48 89 6C 24 ?? 48 8D 44 24 ?? 48 89 6C 24 ?? 8B D3 48 89 B4 24 ?? ?? ?? ?? 48 89 44 24 ?? 45 8D 41 ?? FF 15 } /* base64 decode */\n               $opb2 = { 44 8B 0F 45 8B C6 48 8B 4D ?? 49 8B D7 44 89 64 24 ?? 48 89 7C 24 ?? 44 89 4C 24 ?? 4C 8D 4D ?? 48 89 44 24 ?? 44 89 64 24 ?? 4C 89 64 24 ?? FF 15} /* AES decryption */\n               $opb3 = { 48 FF C2 66 44 39 2C 56 75 ?? 4C 8D 4C 24 ?? 45 33 C0 48 8B CE FF 15 ?? ?? ?? ?? 85 C0 0F 84 ?? ?? ?? ?? 44 0F B7 44 24 ?? 33 F6 48 8B 54 24 ?? 45 33 C9 48 8B 0B 48 89 74 24 ?? 89 74 24 ?? C7 44 24 ?? ?? ?? ?? ?? 48 89 74 24 ?? FF 15 } /* internet connection */\n               $opb4 = { 33 C0 48 8D 6B ?? 4C 8D 4C 24 ?? 89 44 24 ?? BA ?? ?? ?? ?? 48 89 44 24 ?? 48 8B CD 89 44 24 ?? 44 8D 40 ?? 8B F8 FF 15} /* VirtualProtect */\n             condition:\n               ( all of ($opa*) )\n               or\n               ( 1 of ($opa*) and 1 of ($opb*) )\n               or\n               ( 3 of ($opb*) )\n         }\n\n         rule SUSP_APT_MAL_NK_3CX_Malicious_Samples_Mar23_1 {\n            meta:\n               description = \"Detects marker found in malicious DLLs related to 3CX compromise\"\n               author = \"X__Junior, Florian Roth (Nextron Systems)\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               date = \"2023-03-29\"\n               score = 75\n               hash1 = \"7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896\"\n               hash2 = \"c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02\"\n            strings:\n               $opx1 = { 41 80 7C 00 FD FE 75 ?? 41 80 7C 00 FE ED 75 ?? 41 80 7C 00 FF FA 75 ?? 41 80 3C 00 CE } \n            condition:\n               $opx1\n         }\n\n         rule APT_SUSP_NK_3CX_RC4_Key_Mar23_1 {\n            meta:\n               description = \"Detects RC4 key used in 3CX binaries known to be malicious\"\n               author = \"Florian Roth (Nextron Systems)\"\n               date = \"2023-03-29\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               score = 70\n               hash1 = \"7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896\"\n               hash2 = \"59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983\"\n               hash3 = \"aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868\"\n               hash4 = \"c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02\"\n            strings:\n               $x1 = \"3jB(2bsG#@c7\"\n            condition:\n               ( uint16(0) == 0xcfd0 or uint16(0) == 0x5a4d )\n               and $x1\n         }\n\n         rule SUSP_3CX_App_Signed_Binary_Mar23_1 {\n            meta:\n               description = \"Detects 3CX application binaries signed with a certificate and created in a time frame in which other known malicious binaries have been created\"\n               author = \"Florian Roth (Nextron Systems)\"\n               date = \"2023-03-29\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               score = 65\n               hash1 = \"fad482ded2e25ce9e1dd3d3ecc3227af714bdfbbde04347dbc1b21d6a3670405\"\n               hash2 = \"dde03348075512796241389dfea5560c20a3d2a2eac95c894e7bbed5e85a0acc\"\n            strings:\n               $sa1 = \"3CX Ltd1\"\n               $sa2 = \"3CX Desktop App\" wide\n               $sc1 = { 1B 66 11 DF 9C 9A 4D 6E CC 8E D5 0C 9B 91 78 73 } // Known compromised cert\n            condition:\n               uint16(0) == 0x5a4d\n               and pe.timestamp \u003e 1669680000 // 29.11.2022 earliest known malicious sample \n               and pe.timestamp \u003c 1680108505 // 29.03.2023 date of the report\n               and all of ($sa*)\n               and $sc1 // serial number of known compromised certificate\n         }\n\n         rule SUSP_3CX_MSI_Signed_Binary_Mar23_1 {\n            meta:\n               description = \"Detects 3CX MSI installers signed with a known compromised certificate and signed in a time frame in which other known malicious binaries have been signed\"\n               author = \"Florian Roth (Nextron Systems)\"\n               date = \"2023-03-29\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               score = 60\n               hash1 = \"aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868\"\n               hash2 = \"59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983\"\n            strings:\n               $a1 = { 84 10 0C 00 00 00 00 00 C0 00 00 00 00 00 00 46 } // MSI marker\n\n               $sc1 = { 1B 66 11 DF 9C 9A 4D 6E CC 8E D5 0C 9B 91 78 73 } // Known compromised cert\n\n               $s1 = \"3CX Ltd1\"\n               $s2 = \"202303\" // in \n            condition:\n               uint16(0) == 0xcfd0\n               and $a1 \n               and $sc1 \n               and (\n                  $s1 in (filesize-20000..filesize)\n                  and $s2 in (filesize-20000..filesize)\n               )\n         }\n\n         rule APT_MAL_macOS_NK_3CX_Malicious_Samples_Mar23_1 {\n            meta:\n               description = \"Detects malicious macOS application related to 3CX compromise (decrypted payload)\"\n               author = \"Florian Roth (Nextron Systems)\"\n               reference = \"https://www.reddit.com/r/crowdstrike/comments/125r3uu/20230329_situational_awareness_crowdstrike/\"\n               date = \"2023-03-30\"\n               score = 80\n               hash1 = \"b86c695822013483fa4e2dfdf712c5ee777d7b99cbad8c2fa2274b133481eadb\"\n               hash2 = \"ac99602999bf9823f221372378f95baa4fc68929bac3a10e8d9a107ec8074eca\"\n               hash3 = \"51079c7e549cbad25429ff98b6d6ca02dc9234e466dd9b75a5e05b9d7b95af72\"\n             strings:\n               $s1 = \"20230313064152Z0\"\n               $s2 = \"Developer ID Application: 3CX (33CF4654HL)\"\n             condition:\n               uint16(0) == 0xfeca and all of them\n         }\n\n         /* 30.03.2023 */\n\n         rule APT_MAL_MacOS_NK_3CX_DYLIB_Mar23_1 {\n            meta:\n               description = \"Detects malicious DYLIB files related to 3CX compromise\"\n               author = \"Florian Roth\"\n               reference = \"https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/\"\n               date = \"2023-03-30\"\n               score = 80\n               hash1 = \"a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67\"\n               hash2 = \"fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7\"\n            strings:\n               /* XORed UA 0x7a */\n               $xc1 = { 37 15 00 13 16 16 1B 55 4F 54 4A 5A 52 2D 13 14 \n                        1E 15 0D 09 5A 34 2E 5A 4B 4A 54 4A 41 5A 2D 13\n                        14 4C 4E 41 5A 02 4C 4E 53 5A 3B 0A 0A 16 1F 2D\n                        1F 18 31 13 0E 55 4F 49 4D 54 49 4C 5A 52 31 32\n                        2E 37 36 56 5A 16 13 11 1F 5A 3D 1F 19 11 15 53\n                        5A 39 12 08 15 17 1F 55 4B 4A 42 54 4A 54 4F 49\n                        4F 43 54 4B 48 42 5A 29 1B 1C 1B 08 13 55 4F 49\n                        4D 54 49 4C 7A }\n               /* /;3cx_auth_token_content=%s;__tutma= */\n               $xc2 = { 41 49 19 02 25 1b 0f 0e 12 25 0e 15 11 1f 14 25 19 15 14 0e 1f 14 0e 47 5f 09 41 25 25 0e 0f 0e 17 1b 47 }\n               /* /System/Library/CoreServices/SystemVersion.plist */\n               $xc3 = { 55 29 03 09 0e 1f 17 55 36 13 18 08 1b 08 03 55 39 15 08 1f 29 1f 08 0c 13 19 1f 09 55 29 03 09 0e 1f 17 2c 1f 08 09 13 15 14 54 0a 16 13 09 0e }\n            condition:\n               1 of them\n         }\n\n         rule APT_SUSP_NK_3CX_Malicious_Samples_Mar23_1 {\n            meta:\n               description = \"Detects indicator (event name) found in samples related to 3CX compromise\"\n               author = \"Florian Roth\"\n               reference = \"https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/\"\n               date = \"2023-03-30\"\n               score = 70\n               hash1 = \"7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896\"\n               hash2 = \"59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983\"\n               hash3 = \"aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868\"\n               hash4 = \"c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02\"\n            strings:\n               $a1 = \"AVMonitorRefreshEvent\" wide fullword\n            condition:\n               1 of them\n         }\n\n         rule APT_MAL_NK_3CX_Malicious_Samples_Mar23_4 {\n             meta:\n                 author = \"MalGamy\"\n                 reference = \"https://twitter.com/WhichbufferArda/status/1641404343323688964?s=20\"\n                 description = \"Detects decrypted payload loaded inside 3CXDesktopApp.exe which downloads info stealer\"\n                 date = \"2023-03-29\"\n                 hash = \"851c2c99ebafd4e5e9e140cfe3f2d03533846ca16f8151ae8ee0e83c692884b7\" \n                 score = 80\n             strings:\n                 $op1 = {41 69 D0 [4] 8B C8 C1 E9 ?? 33 C1 8B C8 C1 E1 ?? 81 C2 [4] 33 C1 43 8D 0C 02 02 C8 49 C1 EA ?? 41 88 0B 8B C8 C1 E1 ?? 33 C1 44 69 C2 [4] 8B C8 C1 E9 ?? 33 C1 8B C8 C1 E1 ?? 41 81 C0 [4] 33 C1 4C 0F AF CF 4D 03 CA 45 8B D1 4C 0F AF D7 41 8D 0C 11 49 C1 E9 ?? 02 C8} // // xor with mul operation\n                 $op2 = {4D 0F AF CC 44 69 C2 [4] 4C 03 C9 45 8B D1 4D 0F AF D4 41 8D 0C 11 41 81 C0 [4] 02 C8 49 C1 E9 ?? 41 88 4B ?? 4D 03 D1 8B C8 45 8B CA C1 E1 ?? 33 C1} // xor with mul operation\n                 $op3 = {33 C1 4C 0F AF C7 8B C8 C1 E1 ?? 4D 03 C2 33 C1} // shift operation\n             condition: \n                 2 of them\n         }\n\n         rule MAL_3CXDesktopApp_MacOS_Backdoor_Mar23 {\n             meta:\n               author = \"X__Junior\"\n                 reference = \"https://www.volexity.com/blog/2023/03/30/3cx-supply-chain-compromise-leads-to-iconic-incident/\"\n                 description = \"Detects 3CXDesktopApp MacOS Backdoor component\"\n                 date = \"2023-03-30\"\n                 hash = \"a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67\"\n                 score = 80\n             strings:\n                 $sa1 = \"%s/.main_storage\" ascii fullword\n                 $sa2 = \"%s/UpdateAgent\" ascii fullword\n\n                 $op1 = { 31 C0 41 80 34 06 ?? 48 FF C0 48 83 F8 ?? 75 ?? BE ?? ?? ?? ?? BA ?? ?? ?? ?? 4C 89 F7 48 89 D9 E8 ?? ?? ?? ?? 48 89 DF E8 ?? ?? ?? ?? 48 89 DF E8 ?? ?? ?? ?? 4C 89 F7 5B 41 5E 41 5F E9 ?? ?? ?? ?? 5B 41 5E 41 5F C3} /* string decryption */\n                 $op2 = { 0F 11 84 24 ?? ?? ?? ?? 0F 28 05 ?? ?? ?? ?? 0F 29 84 24 ?? ?? ?? ?? 0F 28 05 ?? ?? ?? ?? 0F 29 84 24 ?? ?? ?? ?? 31 C0 80 B4 04 ?? ?? ?? ?? ?? 48 FF C0} /* string decryption */\n             condition:\n               ( uint16(0) == 0xfeca and filesize \u003c 6MB\n                  and\n                  (\n                     ( 1 of ($sa*) and 1 of ($op* ) )\n                     or all of ($sa*)\n                  )\n               )\n               or ( all of ($op*) )\n         }\n\n   - name: VersionRegex\n     description: Known comromised 3CXDesktopApp.exe Windows versions to search AMCache.\n     default: ^(18\\.12\\.407\\.0|18\\.12\\.416)$\n\nsources:\n  - query: |\n      SELECT * FROM Artifact.Generic.Detection.Yara.Glob(\n                                                        PathGlob=TargetGlob,\n                                                        YaraRule=TargetYara,\n                                                        UploadHits=UploadHits )\n\n  - name: VAD - 3CX process\n    precondition: |\n        SELECT OS From info() where OS = 'windows'\n    query: |\n        SELECT * FROM Artifact.Windows.System.VAD(\n                                                ProcessRegex='3cxdesktopapp.exe',\n                                                SuspiciousContent=TargetYara )\n\n  - name: AMCache\n    precondition: |\n        SELECT OS From info() where OS = 'windows'\n    query: |\n        LET X = scope()\n        SELECT FileId,\n               Key.OSPath.Path as Key,\n               Key.OSPath.DelegatePath AS Hive,\n               Key.Mtime as LastModified,\n               X.LowerCaseLongPath as Binary,\n               X.Name AS Name,\n               X.Size AS Size,\n               X.ProductName AS ProductName,\n               X.Publisher AS Publisher,\n               X.Version AS Version,\n               X.BinFileVersion AS BinFileVersion\n        FROM foreach(\n            row={\n                SELECT FullPath FROM glob(globs=expand(path=\"%SYSTEMROOT%/appcompat/Programs/Amcache.hve\"))\n                WHERE log(message=\"Processing \"+FullPath)\n            }, query={\n                SELECT * FROM read_reg_key(\n                   globs=\"/Root/InventoryApplicationFile/*\",\n                   root=pathspec(DelegatePath=FullPath),\n                   accessor='raw_reg' )\n            })\n        WHERE Name = '3cxdesktopapp.exe'\n            AND ( Version =~ VersionRegex\n                OR BinVersion =~ VersionRegex )\n        \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Splunk.Events.Clients","op":"set","definition":"name: Exchange.Splunk.Events.Clients\nauthor: \"@jurelou, Modified By @SilverKnightKMA\"\ndescription: |\n  This server monitoring artifact will watch a selection of client\n  monitoring artifacts for new events and push those to a splunk\n  index.\n\n  NOTE: You must ensure you are collecting these artifacts from the\n  clients by adding them to the \"Client Events\" GUI.\n\n  To configure the event collector properly a couple steps need to be\n  completed prior to setting up this event:\n    1. Configure an index to ingest the data.\n       * Go to Settings \u003e Index.\n       * New Index.\n    2. Configure the collector.\n       * Go to Settings \u003e Data Inputs \u003e HTTP Event Collector.\n       * Add New.\n       * Name does not matter, but ensure indexer acknowledgement is OFF.\n       * Set `Selected Indexes` to the index configured in step 1.\n       * Save API key for this event.\n    3. Set Global settings.\n       * Go to Settings \u003e Data Inputs \u003e HTTP Event Collector \u003e Global Settings\n       * Ensure `All Tokens` is set to ENABLED\n       * Copy the HTTP Port Number for this event\n    4. Configure your Splunk props.conf and tranforms.conf\n       * Add the following to props.conf\n        [vql]\n        INDEXED_EXTRACTIONS = json\n        DATETIME_CONFIG = CURRENT\n        TZ = GMT\n        category = Custom\n        pulldown_type = 1\n        TRANSFORMS-vql-sourcetype = vql-sourcetype,vql-timestamp\n        TRUNCATE = 512000\n        KV_MODE = none\n        AUTO_KV_JSON = false\n       * Add the following to transforms.conf\n        [vql-sourcetype]\n        INGEST_EVAL = sourcetype=lower(src_artifact)\n        [vql-timestamp]\n        INGEST_EVAL = _time=case( \\\n                      src_artifact=\"artifact_Linux_Search_FileFinder\",strptime(CTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_System_VFS_ListDirectory\",strptime(ctime,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                      src_artifact=\"artifact_Windows_Timeline_MFT\",strptime(event_time,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                      src_artifact=\"artifact_Windows_NTFS_MFT\",strptime(Created0x10,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                      src_artifact=\"artifact_Windows_EventLogs_Evtx\",strptime(TimeCreated,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Custom_Windows_EventLogs_System_7045\",strptime(TimeCreated,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_EventLogs_RDPAuth\",strptime(EventTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Analysis_EvidenceOfExecution_UserAssist\",strptime(LastExecution,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Analysis_EvidenceOfExecution_Amcache\",strptime(KeyMTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_System_Amcache_InventoryApplicationFile\",strptime(LastModified,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Search_FileFinder\",strptime(CTime,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                      src_artifact=\"artifact_Windows_Applications_NirsoftBrowserViewer\",strptime(Visited,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Registry_RecentDocs\",strptime(LastWriteTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_Clients\",strptime(InsertDate,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_DNS\",strptime(LastSeen,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_SystemIdentity\",strptime(CreationTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Custom_Windows_Application_IIS_IISLogs\",strptime(event_time,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_MacOS_Applications_Chrome_History\",strptime(last_visit_time,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                      src_artifact=\"artifact_Windows_Registry_UserAssist\",strptime(LastExecution,\"%Y-%m-%dT%H:%M:%SZ\") \\\n                      )\n\n\n       \u003e Note: `Enable SSL` only works if SSL is properly configured on your\n       Splunk server -- meaning you have proper certificates and DNS. If you are\n       accessing your Splunk instance by IP, `Enable SSL` should be set to OFF.\n\ntype: SERVER_EVENT\n\nparameters:\n  - name: ClientArtifactsToWatch\n    type: artifactset\n    artifact_type: CLIENT_EVENT\n    default: |\n      Artifact\n      Windows.Detection.PsexecService\n      Windows.Events.ProcessCreation\n      Windows.Events.ServiceCreation\n  - name: ServerArtifactsToWatch\n    type: artifactset\n    artifact_type: SERVER_EVENT\n    default: |\n      Artifact\n      Server.Audit.Logs\n  - name: url\n    default: http://127.0.0.1:8088/services/collector\n    description: |\n      The Splunk collector url, this is typically the url of the Splunk\n      server followed by :8088/services/collector.\n  - name: token\n    description: |\n      API token given when the event collector is configured on Splunk.\n  - name: index\n    default: velociraptor\n    description: |\n      Index to ingest the data. This should be set up when configuring\n      the event collector.\n  - name: SkipVerify\n    default: false\n    type: bool\n    description: |\n      SSL configured with the event collector. This is false by default.\n  - name: RootCerts\n    description: |\n      As a better alternative to skip_verify, allows root ca certs to\n      be added here.\n  - name: HostnameField\n    description: Field to extract hostname from\n    default: ClientId\n  - name: TimestampField\n    description: Field to extract timestamp from\n    default: timestamp\n\nsources:\n  - query: |\n      LET artifacts_to_watch = SELECT * FROM chain(\n        a={SELECT Artifact FROM ClientArtifactsToWatch},\n        b={SELECT Artifact FROM ServerArtifactsToWatch})\n      WHERE NOT Artifact =~ \"Splunk.Events.Clients\"\n        AND log(message=\"Uploading artifact \" + Artifact + \" to Splunk\")\n      LET events = SELECT * FROM foreach(\n          row=artifacts_to_watch,\n          async=TRUE,   // Required for event queries in foreach()\n          query={\n             SELECT *, \"Artifact_\" + Artifact as _index,\n                    Artifact,\n                    timestamp(epoch=now()) AS timestamp\n             FROM watch_monitoring(artifact=Artifact)\n          })\n          \n       SELECT * FROM splunk_upload(\n        query = events,\n        url = url,\n        token = token,\n        index = index,\n        skip_verify = SkipVerify,\n        root_ca = RootCerts,\n        wait_time=5,\n        hostname_field=HostnameField,\n        timestamp_field=TimestampField\n        )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Carving.SquirrelWaffle","op":"set","definition":"name: Exchange.Windows.Carving.SquirrelWaffle\nauthor: \"Eduardo Mattos - @eduardfir \u0026 Kostya Iliouk - @kostyailiouk\"\ndescription: |\n    This artifact yara-scans memory or process dumps for unpacked\n    SquirrelWaffle Dlls, decodes the configuration and returns the C2s\n    and the payload.\n\n    Depending on the initial infection vector (the macro within .doc or\n    .xls maldoc), SquirrelWaffle packed droper will be loaded by either rundll32\n    or regsvr32 and unpack itself in memory.\n\n    The decoded configurations found so far contain (1) a list of C2\n    URLS, (2*) *may* contain a list of C2 IPs, and lastly, (3)\n    contains the command \"regsvr32.exe -s\". The command is used to\n    launch its second-stage payload downloaded from its C2 addresses,\n    as a \".txt\" file that is in fact a disguised PE, to be loaded in\n    memory.\n\n    ### NOTE\n    This content simply carves the configuration and does not unpack\n    files on disk. That means pointing this artifact as a packed or\n    obfuscated file will not obtain the expected results.\n\ntype: CLIENT\n\nreference:\n  - https://github.com/OALabs/Lab-Notes/blob/main/SquirrelWaffle/SquirrelWaffle.ipynb\n  - https://www.zscaler.com/blogs/security-research/squirrelwaffle-new-loader-delivering-cobalt-strike\n\nparameters:\n  - name: TargetFileGlob\n    default:\n  - name: PidRegex\n    default: .\n  - name: ProcessRegex\n    default: .\n  - name: DetectionYara\n    default: |\n        rule SquirrelWaffle {\n           meta:\n              description = \"Detects Unpacked SquirrelWaffle DLLs in Memory\"\n              author = \"Eduardo Mattos - @eduardfir\"\n              reference = \"https://www.malware-traffic-analysis.net/2021/09/17/index.html\"\n              date = \"2021-09-29\"\n              hash = \"ea4e9be41fa3f6895423e791596011f88ba45cde\"\n           strings:\n              $s1 = { 20 48 54 54 50 2F 31 2E 31 0D 0A 48 6F 73 74 3A 20 } // HTTP/1.1 Host:\n              $s2 = { 41 50 50 44 41 54 41 00 54 45 4D 50 } // APPDATA TEMP\n              $s3 = { 34 30 34 00 32 30 30 00 2E 74 78 74 } // 404 200 .txt\n              $s4 = { 20 03 2C 35 3E 18 58 59 48 0F 37 26 } // xored regsvr32.exe\n              $s5 = \"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\Dll1\\\\Release\\\\Dll1.pdb\"\n           condition:\n              4 of ($s*)\n        }\nsources:\n  - query: |\n        LET CountBlock \u003c= starl(code='''\n        def Main(arr):\n            res=[]\n            for i in range(0,len(arr),2):\n\n                res.append({\"Length\":arr[i],\"DataBlock\":arr[i+1],\"Count\":i/2})\n\n            return Pair(sorted(res, key=GetLength, reverse=True))\n\n        def GetLength(dic):\n           return dic[\"Length\"]\n\n        def Pair(arr):\n            res=[]\n            for dic in arr:\n                found = False\n                for tdic in arr:\n                    if (tdic[\"Count\"] == dic[\"Count\"] + 1):\n                        res.append({\"DataBlock\":dic,\"Key\":tdic})\n                        found = True\n                        break\n                if (found == False):\n\n                    res.append(({\"DataBlock\":dic,\"Key\":0}))\n            return res\n        ''')\n        -- find target files\n        LET TargetFiles = SELECT FullPath FROM glob(globs=TargetFileGlob)\n\n        -- find velociraptor process\n        LET me \u003c= SELECT Pid\n                  FROM pslist(pid=getpid())\n\n        -- find all processes and add filters\n        LET processes \u003c= SELECT Name AS ProcessName, CommandLine, Exe, Pid\n                        FROM pslist()\n                        WHERE Name =~ ProcessRegex\n                            AND format(format=\"%d\", args=Pid) =~ PidRegex\n                            AND NOT Pid in me.Pid\n\n        -- scan processes in scope with our Detection\n        LET processDetections \u003c= SELECT * FROM foreach(row=processes,\n                                query={\n                                    SELECT * FROM if(condition=TargetFileGlob=\"\",\n                                        then={\n                                            SELECT ProcessName, CommandLine, Exe, Pid, Rule AS YaraRule, Strings[0].Base AS BaseOffset\n                                            FROM proc_yara(pid=Pid, rules=DetectionYara)\n                                            GROUP BY Pid\n                                        })\n                                })\n\n        -- return the VAD region size from yara detections for later use\n        LET regionDetections = SELECT *\n                                FROM foreach(row=processDetections,\n                                    query={\n                                        SELECT YaraRule, Pid, ProcessName, CommandLine, Exe, BaseOffset, Size AS VADSize\n                                        FROM vad(pid=Pid)\n                                        WHERE Address = BaseOffset\n                                })\n\n        -- scan files in scope with our rule\n        LET fileDetections = SELECT * FROM foreach(row=TargetFiles,\n                                query={\n                                    SELECT * FROM if(condition=TargetFileGlob,\n                                        then={\n                                            SELECT * FROM switch(\n                                                a={ -- yara detection\n                                                    SELECT FullPath, Rule AS YaraRule, (String.Offset - 1000) AS IdealOffset\n                                                    FROM yara(files=FullPath, rules=DetectionYara)\n                                                },\n                                                b={ -- yara miss\n                                                    SELECT FullPath, Null AS YaraRule\n                                                    FROM TargetFiles\n                                                })\n                                        },\n                                        else={ -- no yara detection run\n                                            SELECT FullPath, 'N/A' AS YaraRule\n                                            FROM TargetFiles\n                                        })\n                             })\n\n        -- scan files in scope with our rule\n        LET fileConfiguration = SELECT * FROM foreach(row=fileDetections,\n                                    query={\n                                        SELECT FullPath, YaraRule,\n                                            read_file(filename=FullPath, offset=IdealOffset, length=10000) AS PEData\n                                        FROM scope()\n                                    })\n\n        -- get data from the rdata section, or whole PE\n        LET processConfiguration \u003c= SELECT YaraRule, Pid, ProcessName, CommandLine, Exe, BaseOffset,\n                                        read_file(filename=str(str=Pid), accessor='process', offset=BaseOffset, length=VADSize) AS PEData\n                                    FROM regionDetections\n\n        -- store the SquirrelWaffle configuration in blocks split by null bytes.\n        LET parsedRdata = SELECT *,\n                            split(string=format(format=\"% X\", args=parse_binary(filename=PEData, accessor=\"data\", profile='''[\n                                [\"SquirrelRdata\", 0, [\n                                        [\"__prefix\", 0, \"String\", {\"length\": x=\u003e 100000, \"term_hex\":\"004142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F00\", \"max_length\": x=\u003e 100000}],\n                                        [\"ConfigSection\", \"x=\u003elen(list=x.__prefix) + 66\", \"String\", {\"length\": x=\u003e 10000, \"term_hex\":\"7374617274202F69\"}]\n                                    ]\n                                ]\n                            ]''', struct=\"SquirrelRdata\").ConfigSection ), sep=\"00\") AS SplitBlocks\n                          FROM if(condition=TargetFileGlob,\n                                then= fileConfiguration,\n                                else= processConfiguration)\n\n        -- generate a list of sorted blocks and then pair encoded blocks with their keys using Starlark\n        LET blocks \u003c= SELECT *, CountBlock.Main(arr=array(a=enumerate(items=NewDict))) AS EnumDict\n                      FROM foreach(row=parsedRdata,\n                        query= {\n                            SELECT *, FullPath, YaraRule, Pid, ProcessName, CommandLine, Exe\n                            FROM foreach(row=SplitBlocks,\n                                query= {\n                                        SELECT dict(Length=len(list=_value), DataBlock=_value) AS NewDict\n                                        FROM scope()\n                                        WHERE NewDict.Length \u003e 45\n                                })\n                        })\n                      GROUP BY if(condition=TargetFileGlob,\n                                then= FullPath,\n                                else= CommandLine)\n\n        -- store encoded blocks and their keys in separate columns, filtering out FPs based on key size\n        LET finalPairs \u003c= SELECT *, unhex(string=regex_replace(source=DataBlock.DataBlock, re=\" \", replace=\"\")) AS DataBlock,\n                            unhex(string=regex_replace(source=Key.DataBlock, re=\" \", replace=\"\")) AS Key\n                          FROM foreach(row=blocks,\n                                query= {\n                                    SELECT *, FullPath, YaraRule, Pid, ProcessName, CommandLine, Exe FROM foreach(row=EnumDict,\n                                        query={\n                                            SELECT DataBlock, Key FROM scope()\n                                    })\n                            })\n                          WHERE len(list=Key) \u003e 32 AND len(list=Key) \u003c 256\n\n        -- return our results\n        SELECT * FROM if(condition=TargetFileGlob,\n            then= {\n                SELECT YaraRule, FullPath, regex_replace(source=xor(key=Key,string=DataBlock), re=\"(\\r)|(\\\\|)\", replace=\",\\n\") AS DecodedConfigs\n                FROM finalPairs\n            },\n            else= {\n                SELECT YaraRule, Pid, ProcessName, CommandLine, Exe, regex_replace(source=xor(key=Key,string=DataBlock), re=\"(\\r)|(\\\\|)\", replace=\",\\n\") AS DecodedConfigs\n                FROM finalPairs\n        })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Analysis.SuspiciousWMIConsumers","op":"set","definition":"name: Exchange.Windows.Analysis.SuspiciousWMIConsumers\n\ndescription: |\n  This artifact reports suspicious WMI Event Consumers and their associated Filters\n  that may indicate a malicious abuse for persistence.\n\n  NOTE: This artifact uses the same logic as Windows.Persistence.PermanentWMIEvents \n  however, this artifact narrows down the reported results based on a research by SANS.\n\nreference: \n  - https://youtu.be/aBQ1vEjK6v4\n\nauthor: Amged Wageh - @amgdgocha\n\nparameters:\n  - name: AllRootNamespaces\n    description: Select to scan all ROOT namespaces. This setting over rides specific namespaces configured below.\n    type: bool\n  - name: Namespaces\n    description: Add a list of target namespaces.\n    type: csv\n    default: |\n       namespace\n       root/subscription\n       root/default\n  - name: InterstingConsumerTypes\n    description: A list of the most abused event consumer types.\n    type: csv\n    default: |\n       consumer_types\n       ActiveScriptEventConsumer\n       CommandLineEventConsumer\n  - name: KnownGoodFilters\n    description: A list of known good filter names.\n    type: csv\n    default: |\n       filter_name\n       BVTFilter\n       TSLogonFilter\n       RmAssistEventFilter\n  - name: KnownGoodConsumers\n    description: A list of known good consumer names.\n    type: csv\n    default: |\n       consumer_name\n       NTEventLogConsumer\n       \"SCM Event Log Consumer\"\n  - name: KnownBadKeywords\n    description: A list of known bad keywords.\n    type: csv\n    default: |\n       keyword\n       .exe\n       .vbs\n       .ps1\n       .dll\n       .eval\n       activexobject\n       powershell\n       commandLinetemplate\n       scripttext\n       wscript\n  - name: KnownGoodKeywords\n    description: A list of known good scripts and executables.\n    type: csv\n    default: |\n       keyword\n       TSLogonEvents.vbs\n       RAevent.vbs\n       KernCap.vbs\n       WSCEAA.exe\n  - name: ScriptingEngines\n    description: A list of the ActiveScriptEventConsumer scripting engines.\n    type: csv\n    default: |\n       scripting_engine\n       VBScript\n       JScript\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET namespaces \u003c= SELECT * FROM if(condition=AllRootNamespaces, \n            then= { \n                SELECT 'root/' + Name as namespace \n                FROM wmi(namespace='ROOT',query='SELECT * FROM __namespace')\n                WHERE namespace\n            },\n            else= Namespaces)\n\n      LET FilterToConsumerBinding \u003c= SELECT * FROM foreach(\n            row=namespaces,\n            query={\n                SELECT parse_string_with_regex(string=Consumer,\n                    regex=['((?P\u003cnamespace\u003e^[^:]+):)?(?P\u003cType\u003e.+?)\\\\.Name=\"(?P\u003cName\u003e.+)\"']) as Consumer,\n                    parse_string_with_regex(string=Filter,regex=['((?P\u003cnamespace\u003e^[^:]+):)?(?P\u003cType\u003e.+?)\\\\.Name=\"(?P\u003cName\u003e.+)\"']) as Filter\n                FROM wmi(\n                    query=\"SELECT * FROM __FilterToConsumerBinding\",namespace=namespace)\n        },workers=len(list=namespaces))\n        WHERE Consumer.Type IN InterstingConsumerTypes.consumer_types\n\n      LET FilterToConsumerBindingLookup \u003c= SELECT * FROM foreach(\n            row=namespaces,\n            query={\n                 SELECT {\n                     SELECT * FROM wmi(\n                       query=\"SELECT * FROM \" + Consumer.Type, namespace=Consumer.namespace || namespace) \n                     WHERE Name = Consumer.Name AND NOT \n                       Name IN KnownGoodConsumers.consumer_name\n                   } AS ConsumerDetails,\n                   {\n                     SELECT * FROM wmi(\n                       query=\"SELECT * FROM \" + Filter.Type, namespace=Filter.namespace || namespace) \n                     WHERE Name = Filter.Name AND NOT\n                       Name IN KnownGoodFilters.filter_name\n                   } AS FilterDetails,\n                   namespace as Namespace\n                 FROM FilterToConsumerBinding\n                 WHERE (FilterDetails AND ConsumerDetails)\n            },workers=len(list=namespaces))\n\n      LET SuspiciousFilterToConsumerBindingLookup \u003c= SELECT * FROM foreach(\n        row=KnownBadKeywords,\n        query={\n          SELECT ConsumerDetails, FilterDetails \n          FROM FilterToConsumerBindingLookup\n          WHERE lowcase(string=ConsumerDetails.CommandLineTemplate) =~ keyword OR \n            lowcase(string=ConsumerDetails.ScriptText) =~ keyword OR \n            ConsumerDetails.ScriptingEngine IN ScriptingEngines.scripting_engine\n        }\n      ) GROUP BY ConsumerDetails, FilterDetails\n\n      SELECT * FROM foreach(\n        row=KnownGoodKeywords,\n        query={\n          SELECT ConsumerDetails, FilterDetails \n          FROM SuspiciousFilterToConsumerBindingLookup\n          WHERE NOT ConsumerDetails.CommandLineTemplate =~ keyword\n        }\n      ) GROUP BY ConsumerDetails, FilterDetails\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.BaseVQL","op":"set","definition":"name: Windows.Sigma.BaseVQL\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Sigma Forensic Triage on Windows.\n\n  NOTE: This artifact does not include any rules. You can launch it\n  with rules provided to the SigmaRules parameter or call it from\n  another artifact with a set of rules passed to the SigmaRules\n  parameter.\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\nexport: |\n  LET X = scope()\n\n  LET DateAfterTime \u003c= X.DateAfter || timestamp(epoch=\"1600-01-01\")\n  LET DateBeforeTime \u003c= X.DateBefore || timestamp(epoch=\"2200-01-01\")\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=X.RuleStatus || \"All Rules\")\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=X.RuleLevel || \"All\")\n\n  // Helpers for VQL rules\n  LET FetchKeyValues(OSPath) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n  })\n\n  LET SearchFiles(Glob) =  SELECT OSPath, Size,\n      read_file(filename=OSPath, length=100) AS Data\n    FROM glob(globs=Glob, accessor=\"auto\")\n\n  LET SearchRegistryKeys(Glob) = to_dict(item={\n      SELECT OSPath.String AS _key, Data.value AS _value\n      FROM glob(globs=Glob, accessor=\"registry\")\n    })\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET GetCallChain(Pid) = join(array=process_tracker_callchain(id=Pid).Data.Name, sep=\" -\u003e \")\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `vql/windows/*`={\n     SELECT timestamp(epoch=now()) AS Timestamp,\n       dict(\n         Computer=Hostname,\n         Channel=\"VQL Evaluation\",\n         TimeCreated=dict(SystemTime=now())\n       ) AS System,\n       dict() AS EventData\n     FROM scope()\n    },\n    `filesystem/windows/glob`={\n     SELECT Mtime AS Timestamp,\n            dict(Computer=Hostname, Channel='Velociraptor') AS System,\n            dict(Name=Name,\n                 OSPath=OSPath,\n                 Size=Size,\n                 Mtime=Mtime) AS EventData\n     FROM glob(globs='C:/**')\n    },\n    `*/windows/schtasks`={\n     SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\n     FROM Artifact.Windows.System.TaskScheduler()\n    },\n    `*/windows/services`={\n     SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *,\n         PathName AS CommandLine, ServiceDll AS Image,\n         UserAccount AS User\n     FROM Artifact.Windows.System.Services()\n    },\n    `persistence/windows/services`={\n     SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *,\n         PathName AS CommandLine, ServiceDll AS Image,\n         UserAccount AS User\n     FROM Artifact.Windows.System.Services()\n    },\n    `process_creation/vql/execution`={\n     SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\n     FROM Artifact.Windows.Analysis.EvidenceOfExecution()\n    },\n    `webserver/windows/*`={\n     SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\n     FROM Artifact.Windows.Applications.IISLogs()\n    },\n    `process_creation/windows/pslist`={\n     SELECT CreateTime AS Timestamp,\n            dict(Computer=Hostname, Channel='Velociraptor') AS System,\n            dict(CreateTime=CreateTime, CommandLine= CommandLine,\n                 Image=Exe, MD5=H.MD5, SHA256=H.SHA256, SHA1=H.SHA1,\n                 ParentCommandLine=P.CommandLine,\n                 ParentImage=P.Exe,\n                 ParentMD5=PH.MD5,\n                 ParentSHA1=PH.SHA1,\n                 ParentSHA256=PH.SHA256,\n                 GrandParentCommandLine=GP.CommandLine,\n                 GrandParentImage=GP.Exe,\n                 User=Username\n            ) AS EventData\n     FROM foreach(row={\n           SELECT StartTime AS CreateTime,\n               Pid, CommandLine, Exe,\n               process_tracker_get(id=Ppid).Data AS P,\n               if(condition=process_tracker_get(id=Ppid).Data.Exe,\n                  then=hash(path=process_tracker_get(id=Ppid).Data.Exe)) AS PH,\n               process_tracker_get(id=process_tracker_get(id=Ppid).ParentId).Data AS GP,\n               if(condition=Exe, then=hash(path=Exe)) AS H,\n               Username\n           FROM process_tracker_pslist()\n     })\n    },\n    `image_load/vql/pslist`={\n     SELECT CreateTime AS Timestamp,\n            dict(Computer=Hostname, Channel='Velociraptor') AS System,\n            dict(CommandLine=CommandLine,\n                 Image=Exe,\n                 User=Username,\n                 MD5=H.MD5,\n                 SHA1=H.SHA1,\n                 SHA256=H.SHA256,\n                 ModuleName=ModuleName,\n                 ModulePath=ModulePath,\n                 ModuleMD5=MH.MD5,\n                 ModuleSHA1=MH.SHA1,\n                 ModuleSHA256=MH.SHA256,\n                 GrandParentImage=GP.Exe,\n                 GrandParentCommandLine=GP.CommandLine,\n                 ParentCommandLine=P.CommandLine,\n                 ParentImage=P.Exe,\n                 ParentMD5=PH.MD5,\n                 ParentSHA1=PH.SHA1,\n                 ParentSHA256=PH.SHA256) AS EventData\n     FROM foreach(\n       row={\n           SELECT StartTime AS CreateTime,\n               Pid, CommandLine, Exe,\n               process_tracker_get(id=Ppid).Data AS P,\n               if(condition=Exe, then=hash(path=Exe)) AS H,\n               Username\n           FROM process_tracker_pslist()},\n       query={\n           SELECT CreateTime, Exe, CommandLine, P, H, Username,\n               if(condition=P.Exe, then=hash(path=P.Exe), else=P.Exe) AS PH,\n               ModuleName, ExePath AS ModulePath,\n               if(condition=ExePath, then=hash(path=ExePath), else=ExePath) AS MH,\n               process_tracker_get(id=P.Ppid).Data AS GP\n           FROM modules(pid=int(int=Pid))}\n     )\n    },\n    `network_connection/windows/netstat`={\n     SELECT pt.CreateTime AS Timestamp,\n            dict(Computer=Hostname, Channel='Velociraptor') AS System,\n            dict(CommandLine=CommandLine,\n                 Status= Status,\n                 Image=Image,\n                 LocalIP= LocalIP,\n                 LocalPort= LocalPort,\n                 RemoteIP= RemoteIP,\n                 RemotePort = RemotePort,\n                 ParentImage= ParentImage,\n                 Protocol= Protocol) AS EventData\n     \n     FROM foreach(\n         row={SELECT * , process_tracker_get(id=Pid) AS pt FROM netstat()},\n         query={\n             SELECT Timestamp,\n               Laddr.IP as LocalIP, Laddr.Port AS LocalPort,\n               Raddr.IP AS RemoteIP, Raddr.Port AS RemotePort,\n               Pid, TypeString AS Protocol, Status, pt.Data.Exe AS Image,\n               pt.Data.CommandLine as CommandLine,\n               process_tracker_get(id=pt.Data.Ppid).Data.Exe AS ParentImage,\n               pt\n             FROM scope()})\n    },`velociraptor/info/*`={ SELECT * FROM info() })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/3TMvaoCMRDF8Xc51QaGZeF2F9IpaOEHrKXNIMFJkd1ARl0U313IKqYw3TD/H+eB5dUNumBl/GOyx0vX/bmp/X4JK05SROEkTWQVW7B2HfjsDAj5+L01IxA26kPNzI2w5SrJibDr96xSMe9I6P29tpMT4eCDS8ohFkw/v8bF8SR2GG+NMXi+AgAA///BFdSlMAEAAA==\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6pWilCyUopQqgUEAAD//1vc8X8JAAAA\")))\n\n  LET DefaultDetailsLambda = '''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\nsources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         _Match, *\n   FROM sigma(\n     rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=RuleFilterLambda,\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details,\n            _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.ETWBase.CaptureTestSet","op":"set","definition":"name: Windows.Sigma.ETWBase.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.ETWBase. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    default: '[]'\n    choices:\n    - \"etw/windows/kernel\"\n    - \"etw/windows/file\"\n    - \"etw/windows/registry\"\n    - \"etw/windows/process\"\n    - \"etw/windows/sysmon\"\n    - \"etw/windows/etw\"\n    - \"etw/windows/wmi\"\n    - \"etw/windows/dns\"\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Windows.Sigma.ETWBase\nsources:\n- query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.SysAid","op":"set","definition":"name: Exchange.Windows.Detection.SysAid\nauthor: Matt Green - @mgreen27\ndescription: |\n   Detects artifacts associated with post exploitation activity of \n   LaceTempest related to the SysAid 0day.\n   \n   There are several sub artifact scopes, with configurable regex parameters to \n   target.\n   \n   - Yara.Process: Targets observed malware and cobalt strike via process yara\n   - Disk.Ntfs: targets known disk IOCs via Windows.ntfs.mft\n   - Forensic.Usn: targets known disk IOCs via USN journal\n   - Evtx.Defender: Searches Defender event logs for evidence of associated alerts\n   - Evtx.NetworkIOC: targets known strings of network IOCs in Firewall, Sysmon logs.\n   - Evtx.PowershellIOC: targets known strings of powershell IOCs in Powershell logs.\n   \ntype: CLIENT\nresources:\n  timeout: 1800\n  \nparameters:\n  - name: FileNameRegex\n    description: FileName disk IOC regex\n    type: regex\n    default: ^(usersfiles\\.war|user\\.exe|leave)$\n  - name: PathRegex\n    description: Path disk IOC regex\n    type: regex\n    default: \\\\Program Files\\\\SysAidServer\\\\tomcat\\\\webapps\\\\\n  - name: AllDrives\n    type: bool\n    description: target all drives.\n  - name: DefenderDetection\n    description: Regex of Defender strings to hunt in Defender evtx\n    type: regex\n    default: Win32/Clop|Win32/TurtleLoader\n  - name: NetworkIoc\n    description: Regex of network IOCs to hunt evtx\n    default: 81\\.19\\.138\\.52|45\\.182\\.189\\.100|179\\.60\\.150\\.34|45\\.155\\.37\\.105\n  - name: PowershellIoc\n    description: Regex of Powershell string IOCs to hunt evtx\n    default: STOP-PROCs FOUND\\! Exiting|userentry\\|getLogo\\\\\\.jsp\\|Go|179\\.60\\.150\\.34\n  - name: UploadYaraHits\n    type: bool\n  - name: YaraRule\n    type: yara\n    default: |\n        rule Windows_Trojan_HazelCobra_6a9fe48a {\n            meta:\n                author = \"Elastic Security\"\n                id = \"6a9fe48a-6fd9-4bce-ac43-254c02d6b3a4\"\n                fingerprint = \"4dc883be5fb6aae0dac0ec5d64baf24f0f3aaded6d759ec7dccb1a2ae641ae7b\"\n                creation_date = \"2023-11-01\"\n                last_modified = \"2023-11-01\"\n                threat_name = \"Windows.Trojan.HazelCobra\"\n                reference_sample = \"b5acf14cdac40be590318dee95425d0746e85b1b7b1cbd14da66f21f2522bf4d\"\n                severity = 100\n                arch_context = \"x86\"\n                scan_context = \"file, memory\"\n                license = \"Elastic License v2\"\n                os = \"windows\"\n            strings:\n                $a1 = { 83 E9 37 48 63 C2 F6 C2 01 75 0C C0 E1 04 48 D1 F8 88 4C 04 40 EB 07 }\n                $s1 = \"Data file loaded. Running...\" fullword\n                $s2 = \"No key in args\" fullword\n                $s3 = \"Can't read data file\" fullword\n            condition:\n                $a1 or all of ($s*)\n        }\n        rule Windows_Trojan_FlawedGrace_8c5eb04b {\n            meta:\n                author = \"Elastic Security\"\n                id = \"8c5eb04b-301b-4d05-a010-3329e5b764c6\"\n                fingerprint = \"46ce025974792cdefe9d4f4493cee477c0eaf641564cd44becd687c27d9e7c30\"\n                creation_date = \"2023-11-01\"\n                last_modified = \"2023-11-02\"\n                threat_name = \"Windows.Trojan.FlawedGrace\"\n                reference_sample = \"966112f3143d751a95c000a990709572ac8b49b23c0e57b2691955d6fda1016e\"\n                severity = 100\n                arch_context = \"x86\"\n                scan_context = \"file, memory\"\n                license = \"Elastic License v2\"\n                os = \"windows\"\n            strings:\n                $a1 = \"Grace finalized, no more library calls allowed.\" ascii fullword\n                $a2 = \".?AVReadThread@TunnelIO@NS@@\" ascii fullword\n                $a3 = \".?AVTunnelClientDirectIO@NS@@\" ascii fullword\n                $a4 = \".?AVWireClientConnectionThread@NS@@\" ascii fullword\n                $a5 = \".?AVWireParam@NS@@\" ascii fullword\n            condition:\n                3 of them\n        }\n        rule win_cobalt_strike_auto {\n            meta:\n                author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n                date = \"2023-07-11\"\n                description = \"Detects win.cobalt_strike.\"\n                malpedia_reference = \"https://malpedia.caad.fkie.fraunhofer.de/details/win.cobalt_strike\"\n                malpedia_license = \"CC BY-SA 4.0\"\n                malpedia_sharing = \"TLP:WHITE\"\n            strings:\n                $sequence_0 = { e9???????? eb0a b801000000 e9???????? }\n                $sequence_1 = { 3bc7 750d ff15???????? 3d33270000 }\n                $sequence_2 = { ff15???????? 03c6 59 8bf0 }\n                $sequence_3 = { ff05???????? 891e 8937 894f08 894604 c7470408000000 5b }\n                $sequence_4 = { ff15???????? 03f8 03f0 83f8ff 740b 3b750c 7ce0 }\n                $sequence_5 = { eb0b 8b45d4 83c010 8945d4 eb84 e9???????? 837d0c18 }\n                $sequence_6 = { ff13 83c40c 3bc7 7545 }\n                $sequence_7 = { eb0c 890d???????? e8???????? 59 5f 5e 5d }\n                $sequence_8 = { 85c0 741d ff15???????? 85c0 7513 }\n                $sequence_9 = { e8???????? e9???????? 833d????????01 7505 e8???????? }\n                $sequence_10 = { 8bd0 e8???????? 85c0 7e0e }\n                $sequence_11 = { 85c0 7405 e8???????? 8b0d???????? 85c9 }\n                $sequence_12 = { e8???????? 488d4c2420 41b800200000 488bd3 e8???????? 4533c0 488bd3 }\n                $sequence_13 = { c1e810 25ff000000 b901000000 486bc901 488b542448 88040a 8b0424 }\n                $sequence_14 = { 83f835 741d ff15???????? 413bc6 7312 b9e8030000 ff15???????? }\n                $sequence_15 = { 7514 488b4f20 ff15???????? 488b4f20 ff15???????? 488b7f30 4885ff }\n\n            condition:\n                7 of them\n        }\n     \nreference:\n    - https://profero.io/posts/sysaidonpremvulnerability/\n    - https://www.sysaid.com/blog/service-desk/on-premise-software-security-vulnerability-notification\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - name: Yara.Process\n    query: |\n      SELECT * FROM Artifact.Windows.Detection.Yara.Process(\n                                YaraRule=YaraRule,\n                                UploadHits=UploadYaraHits )\n  - name: Disk.Ntfs\n    query: |\n      SELECT * FROM Artifact.Windows.NTFS.MFT(  AllDrives=AllDrives,\n                                                FileRegex=FileNameRegex,\n                                                PathRegex=PathRegex )\n  - name: Forensic.Usn\n    query: |\n      SELECT * FROM Artifact.Windows.Forensics.Usn( AllDrives=AllDrives,\n                                                    FileNameRegex=FileNameRegex,\n                                                    PathRegex=PathRegex )\n  - name: Evtx.Defender\n    query: |\n      SELECT * FROM Artifact.Windows.EventLogs.EvtxHunter(\n                EvtxGlob='%SystemRoot%\\\\System32\\\\Winevt\\\\Logs\\\\*Defender*.evtx',\n                IocRegex= DefenderDetection )\n                \n  - name: Evtx.NetworkIOC\n    query: |\n      SELECT * FROM Artifact.Windows.EventLogs.EvtxHunter(\n                EvtxGlob='%SystemRoot%\\\\System32\\\\Winevt\\\\Logs\\\\*{Firewall,Sysmon}*.evtx',\n                IocRegex= NetworkIoc )\n\n  - name: Evtx.Powershell\n    query: |\n      SELECT * FROM Artifact.Windows.EventLogs.EvtxHunter(\n                EvtxGlob='%SystemRoot%\\\\System32\\\\Winevt\\\\Logs\\\\*Powershell*.evtx',\n                IocRegex= PowershellIoc )\n                \n                \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Sysinternals.SysmonArchive","op":"set","definition":"name: Exchange.Windows.Sysinternals.SysmonArchive\nauthor: Matt Green - @mgreen27\ndescription: |\n   If configured, Sysmon EID 23: FileDelete enables archiving file deletes on \n   disk. The challenges of this configuration is management of the archive \n   folder which can grow to be significant size and use up disk space.  \n   \n   This artifact enables management of the archive, listing files and removing \n   old files over a configured maximum.\n   \n   For monitoring: Use in combination with Windows.Events.SysmonArchive\n   \nreference:\n    - https://github.com/trustedsec/SysmonCommunityGuide/blob/master/chapters/file-delete.md\n    - https://isc.sans.edu/diary/Sysmon+and+File+Deletion/26084\n    \nparameters:\n  - name: SysmonArchiveGlob\n    description: Glob to target configured Sysmon archive folder contents.\n    default: C:\\Sysmon\\*\n  - name: ArchiveSize\n    description: Desired size of archive in bytes. Default is ~1GB.\n    default: 1000000000\n    type: int64\n  - name: DeleteFiles\n    description: When selected will delete older files outside configured archive size.\n    type: bool\n  - name: ShowAll\n    description: When selected will show all files in Sysmon archive folder.\n    type: bool\n\nsources:\n  - query: |\n      LET files = SELECT Ctime,OSPath,Size\n          FROM glob(globs=SysmonArchiveGlob,accessor='ntfs')\n          WHERE NOT IsDir AND NOT IsLink\n          ORDER BY Ctime DESC\n      \n      LET calc_sum = SELECT *, sum(item=Size) as TotalSize\n        FROM files\n        \n      SELECT Ctime, OSPath,Size,TotalSize,\n        if(condition= TotalSize \u003e ArchiveSize,\n            then= if(condition= DeleteFiles, then=rm(filename=OSPath), else='To delete'),\n            else= 'Not to delete') as Delete\n      FROM calc_sum\n      WHERE if(condition= ShowAll,\n                then= TRUE,\n                else= TotalSize \u003e ArchiveSize) \n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.ETWBase.ReplayTestSet","op":"set","definition":"name: Windows.Sigma.ETWBase.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.ETWBase\nsources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT Timestamp,\n       System.Computer AS Computer,\n       System.Channel AS Channel,\n       System.EventID.Value AS EID,\n       System.EventType AS EventType,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Events.SysmonArchiveMonitor","op":"set","definition":"name: Exchange.Windows.Events.SysmonArchiveMonitor\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact enables automatic management of the Sysmon archive folder.\n\n   FileDelete is a super usefuil capability offered by Sysmon enabling archive\n   of deleted files. It is typically used to archive interesting files or to target\n   collection during an active engagement.\n\n   Requrements: Windows.Sysinternals.SysmonArchive\n\nreference:\n    - https://github.com/trustedsec/SysmonCommunityGuide/blob/master/chapters/file-delete.md\n    - https://isc.sans.edu/diary/Sysmon+and+File+Deletion/26084\n    - https://blog.nviso.eu/2022/06/30/enforcing-a-sysmon-archive-quota/\n\n\ntype: CLIENT_EVENT\n\nparameters:\n   - name: SysmonArchiveGlob\n     description: Glob to target configured Sysmon archive folder contents.\n     default: C:\\Sysmon\\*\n   - name: ArchiveSize\n     description: Desired size of archive in bytes. Default is ~1GB.\n     default: 1000000000\n     type: int64\n   - name: CheckDelay\n     description: Desired time to wait between checks. Default is 10 mins (600s).\n     default: 600\n     type: int64\n\n\nsources:\n  - query: |\n      LET schedule = SELECT UTC.String AS Now\n        FROM clock(period=CheckDelay)\n\n      -- on each schedule run Windows.Sysinternals.SysmonArchive\n      SELECT * FROM foreach(row=schedule,\n                query={\n                    SELECT *\n                    FROM Artifact.Windows.Sysinternals.SysmonArchive(\n                                        ArchiveSize=ArchiveSize,\n                                        SysmonArchiveGlob=SysmonArchiveGlob,\n                                        DeleteFiles=True,\n                                        ShowAll=False)\n                })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Events.SysmonRegistry","op":"set","definition":"name: Exchange.Windows.Events.SysmonRegistry\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact enables monitoring for registry events of interest via the Sysmon \n  ETW proiver.\n  \n  The artifact requires Sysmon installed collecting registry events 12,13 and 14.  \n  It is also reccomended to run Windows.Events.TrackProcesses as this also \n  includes a base level Sysmon install.\n  \n  Monitoring is configured by a csv KeyRegex which has the following fields:  \n    * Regex - a regex to select registry key events of interest.  \n    * FilterRegex - a regex to filter out keys.  \n    * FilterProcess - a regex to filter out Image field - \n    e.g ```C:\\\\Windows\\\\regedit\\.exe$```.  \n    * Details - a description of the Detection.   \n    * ATT\u0026CK - a MITRE ATT\u0026CK reference.  \n    \n  Note: This artifact may be impacted by your Sysmon configuration. \n  Generally it is more efficient to filter at the kernel level via Sysmon \n  configurtion.\n  \ntype: CLIENT_EVENT\n\nparameters:\n  - name: KeyRegex\n    type: csv\n    default: |\n        Regex,FilterRegex,FilterProcess,Details,ATT\u0026CK\n        CurrentVersion\\\\Run,,,\"Windows: Wildcard for Run keys, including RunOnce, RunOnceEx, RunServices, RunServicesOnce [Also covers terminal server] \",T1060\n        Policies\\\\Explorer\\\\Run,,,Windows: Alternate runs keys | Credit @ion-storm,T1060\n        Group Policy\\\\Scripts,,,Windows: Group policy scripts,T1484\n        Windows\\\\System\\\\Scripts,,,\"Windows: Wildcard for Logon, Loggoff, Shutdown\",T1484\n        CurrentVersion\\\\Windows\\\\Load,,,Windows: [ https://msdn.microsoft.com/en-us/library/jj874148.aspx ],T1060\n        CurrentVersion\\\\Windows\\\\Run,,,Windows: [ https://msdn.microsoft.com/en-us/library/jj874148.aspx ],T1060\n        CurrentVersion\\\\Winlogon\\\\Shell,,,Windows: [ https://msdn.microsoft.com/en-us/library/ms838576(v=winembedded.5).aspx ],T1060\n        CurrentVersion\\\\Winlogon\\\\System,,,Windows [ https://www.exterminate-it.com/malpedia/regvals/zlob-dns-changer/118 ],T1060\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Notify,,,Windows: Autorun location [ https://attack.mitre.org/wiki/Technique/T1004 ] [ https://www.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order ],\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell,,,Windows: [ https://technet.microsoft.com/en-us/library/ee851671.aspx ],\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit,,,Windows: Autorun location [ https://www.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order ],\n        ^HKLM\\\\Software\\\\WOW6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Drivers32,,,Windows: Legacy driver loading | Credit @ion-storm ,\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\BootExecute,,,Windows: Autorun | Credit @ion-storm | [ https://www.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order ],\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AeDebug,,,Windows: Automatic program crash debug program [ https://www.symantec.com/security_response/writeup.jsp?docid=2007-050712-5453-99\u0026tabid=2 ],\n        UserInitMprLogonScript,,,Windows: Legacy logon script environment variable [ http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/ ],\n        user shell folders\\\\startup$,,,Monitor changes to Startup folder location for monitoring evasion | Credit @SBousseaden,T1112\n        \\\\ServiceDll$,,,Windows: Points to a service's DLL [ https://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services ],T1031|T1050\n        \\\\ServiceManifest$,,,Windows: Manifest pointing to service's DLL [ https://www.geoffchappell.com/studies/windows/win32/services/svchost/index.htm ],T1031|T1050\n        \\\\ImagePath$,,,Windows: Points to a service's EXE [ https://attack.mitre.org/wiki/Technique/T1050 ],T1031|T1050\n        \\\\Start$,,,\"Windows: Services start mode changes (Disabled, Automatically, Manual)\",T1031|T1050\n        Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\PortNumber$,,,Windows: RDP port change under Control [ https://blog.menasec.net/2019/02/of-rdp-hijacking-part1-remote-desktop.html ],\n        Control\\\\Terminal Server\\\\fSingleSessionPerUser$,,,\"Windows: Allow same user to have mutliple RDP sessions, to hide from admin being impersonated\",\n        fDenyTSConnections$,,,Windows: Attacker turning on RDP,\n        LastLoggedOnUser$,,,Windows: Changing last-logged in user,\n        RDP-tcp\\\\PortNumber$,,,Windows: Changing RDP port to evade IDS,\n        Services\\\\PortProxy\\\\v4tov4$,,,Windows: Changing RDP port to evade IDS,\n        \\\\command\\\\,,,Windows: Sensitive sub-key under file associations and CLSID that map to launch command,T1042\n        \\\\ddeexec\\\\,,,Windows: Sensitive sub-key under file associations and CLSID that map to launch command,T1122\n        {86C86720-42A0-1069-A2E8-08002B30309D},,,Windows: Tooltip handler,T1122\n        exefile,,,\"Windows Executable handler, to log any changes not already monitored\",T1042\n        \\\\InprocServer32\\\\(Default)$,,,Windows:COM Object Hijacking [ https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence ] | Credit @ion-storm,T1122\n        \\\\Hidden$,,,\"Windows:Explorer: Some types of malware try to hide their hidden system files from the user, good signal event \",T1158\n        \\\\ShowSuperHidden$,,,\"Windows:Explorer: Some types of malware try to hide their hidden system files from the user, good signal event [ Example: https://www.symantec.com/security_response/writeup.jsp?docid=2007-061811-4341-99\u0026tabid=2 ]\",T1158\n        \\\\HideFileExt$,,,Windows:Explorer: Some malware hides file extensions to make diagnosis/disinfection more daunting to novice users ,T1158\n        Classes\\\\*\\\\,,,Windows:Explorer: [ http://www.silentrunners.org/launchpoints.html ] ,\n        Classes\\\\AllFilesystemObjects\\\\,,,Windows:Explorer: [ http://www.silentrunners.org/launchpoints.html ] ,\n        Classes\\\\Directory\\\\,,,Windows:Explorer: [ https://stackoverflow.com/questions/1323663/windows-shell-context-menu-option ],\n        Classes\\\\Drive\\\\,,,Windows:Explorer: [ https://stackoverflow.com/questions/1323663/windows-shell-context-menu-option ],\n        Classes\\\\Folder\\\\,,,\"Windows:Explorer: ContextMenuHandlers, DragDropHandlers, CopyHookHandlers, [ https://stackoverflow.com/questions/1323663/windows-shell-context-menu-option ]\",\n        Classes\\\\PROTOCOLS\\\\,,,Windows:Explorer: Protocol handlers,\n        ContextMenuHandlers\\\\,,,Windows: [ http://oalabs.openanalysis.net/2015/06/04/malware-persistence-hkey_current_user-shell-extension-handlers/ ],\n        CurrentVersion\\\\Shell,,,\"Windows: Shell Folders, ShellExecuteHooks, ShellIconOverloadIdentifers, ShellServiceObjects, ShellServiceObjectDelayLoad [ http://oalabs.openanalysis.net/2015/06/04/malware-persistence-hkey_current_user-shell-extension-handlers/ ]\",\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\explorer\\\\ShellExecuteHooks,,,Windows: ShellExecuteHooks,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\explorer\\\\ShellServiceObjectDelayLoad,,,Windows: ShellExecuteHooks,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\explorer\\\\ShellIconOverlayIdentifiers,,,Windows: ShellExecuteHooks,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\,,,Windows: Credit to @Hexacorn [ http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/ ],\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram,,,Windows:RDP: Note other Terminal Server run keys are handled by another wildcard already,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\GPExtensions\\\\,,,Windows: Group Policy internally uses a plug-in architecture that nothing should be modifying,T1484\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\WinSock,,,\"Windows: Wildcard, includes Winsock and Winsock2\",\n        \\\\ProxyServer$,,,Windows: System and user proxy server,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Authentication\\\\Credential Provider,,,\"Wildcard, includes Credential Providers and Credential Provider Filters\",\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\,,,[ https://attack.mitre.org/wiki/Technique/T1131 ] [ https://attack.mitre.org/wiki/Technique/T1101 ],T1101\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\SecurityProviders,,,Windows: Changes to WDigest-UseLogonCredential for password scraping [ https://www.trustedsec.com/april-2015/dumping-wdigest-creds-with-meterpreter-mimikatzkiwi-in-windows-8-1/ ],\n        ^HKLM\\\\Software\\\\Microsoft\\\\Netsh,,,Windows: Netsh helper DLL [ https://attack.mitre.org/wiki/Technique/T1128 ],\n        Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ProxyEnable,,,Windows: Malware often disables a web proxy for 2nd stage downloads,\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\NetworkProvider\\\\Order\\\\,,,Windows: Order of network providers that are checked to connect to destination [ https://www.malwarearchaeology.com/cheat-sheets ] ,\n        \\\\EnableFirewall$,,,\"Windows: Monitor for firewall disablement, all firewall profiles [ https://attack.mitre.org/wiki/Technique/T1089 ]\",T1089\n        \\\\DoNotAllowExceptions$,,,\"Windows: Monitor for firewall disablement, all firewall profiles [ https://attack.mitre.org/wiki/Technique/T1089 ]\",T1089\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\StandardProfile\\\\AuthorizedApplications\\\\List,,,Windows Firewall authorized applications for all networks| Credit @ion-storm ,\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\DomainProfile\\\\AuthorizedApplications\\\\List,,,Windows Firewall authorized applications for domain networks ,\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\Appinit_Dlls\\\\,,,Windows: Feature disabled by default [ https://attack.mitre.org/wiki/Technique/T1103 ],T1103\n        ^HKLM\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\\\\Appinit_Dlls\\\\,,,Windows: Feature disabled by default [ https://attack.mitre.org/wiki/Technique/T1103 ],T1103\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\AppCertDlls\\\\,,,Windows: Credit to @Hexacorn [ http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/ ] [ https://blog.comodo.com/malware/trojware-win32-trojanspy-volisk-a/ ],\n        Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\,,,\"Microsoft:Office: Outlook add-ins, access to sensitive data and often cause issues\",T1137\n        Office Test\\\\,,,Microsoft:Office: Persistence method [ http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/ ] | Credit @Hexacorn,T1137\n        Security\\\\Trusted Documents\\\\TrustRecords,,,\"Microsoft:Office: Monitor when \"\"Enable editing\"\" or \"\"Enable macros\"\" is used | Credit @OutflankNL | [ https://outflank.nl/blog/2018/01/16/hunting-for-evil-detect-macros-being-executed/ ]\",\n        Internet Explorer\\\\Toolbar\\\\,,,Microsoft:InternetExplorer: Machine and user [ Example: https://www.exterminate-it.com/malpedia/remove-mywebsearch ] ,T1176\n        Internet Explorer\\\\Extensions\\\\,,,Microsoft:InternetExplorer: Machine and user [ Example: https://www.exterminate-it.com/malpedia/remove-mywebsearch ] ,T1176\n        Browser Helper Objects\\\\,,,Microsoft:InternetExplorer: Machine and user [ https://msdn.microsoft.com/en-us/library/bb250436(v=vs.85).aspx ],T1176\n        ^HKLM\\\\Software\\\\Classes\\\\CLSID\\\\{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}\\\\,,,Windows: Thumbnail cache autostart [ http://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-levels-up-with-new-autostart-mechanism/ ] ,\n        ^HKLM\\\\Software\\\\Classes\\\\WOW6432Node\\\\CLSID\\\\{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}\\\\,,,Windows: Thumbnail cache autostart [ http://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-levels-up-with-new-autostart-mechanism/ ] ,\n        ^HKLM\\\\Software\\\\Classes\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\,,,Windows: DirectX instances,\n        ^HKLM\\\\Software\\\\Classes\\\\WOW6432Node\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\,,,Windows: DirectX instances,\n        \\\\UrlUpdateInfo$,,,Microsoft:ClickOnce: Source URL is stored in this value [ https://subt0x10.blogspot.com/2016/12/mimikatz-delivery-via-clickonce-with.html ],\n        \\\\InstallSource$,,,Windows: Source folder for certain program and component installations,\n        \\\\EulaAccepted$,,,Sysinternals tool launched. Lots of useful abilities for attackers ,\n        \\\\DisableAntiSpyware$,,,Windows:Defender: State modified via registry,T1089|Tamper-Defender\n        \\\\DisableAntiVirus$,,,Windows:Defender: State modified via registry,T1089|Tamper-Defender\n        \\\\SpynetReporting$,,,Windows:Defender: State modified via registry,T1089|Tamper-Defender\n        DisableRealtimeMonitoring$,,,Windows:Defender: State modified via registry,T1089|Tamper-Defender\n        \\\\SubmitSamplesConsent$,,,Windows:Defender: State modified via registry,T1089|Tamper-Defender\n        HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLUA$,,,Detect: UAC Tampering | Credit @ion-storm ,T1088\n        HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LocalAccountTokenFilterPolicy$,,,Detect: UAC Tampering | Credit @ion-storm ,T1088\n        HKLM\\\\Software\\\\Microsoft\\\\Security Center\\\\$,,,[ https://attack.mitre.org/wiki/Technique/T1089 ],T1089|Tamper-SecCenter\n        SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAHealth$,,,Windows:Security Center: Malware sometimes disables [ https://blog.avast.com/2013/08/12/your-documents-are-corrupted-from-image-to-an-information-stealing-trojan/ ],T1089|Tamper-SecCenter\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom,,,Windows: AppCompat [ https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html ],T1138\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB,,,Windows: AppCompat [ https://attack.mitre.org/wiki/Technique/T1138 ],T1138\n        VirtualStore,,,\"Windows: Registry virtualization, something's wrong if it's in use [ https://msdn.microsoft.com/en-us/library/windows/desktop/aa965884(v=vs.85).aspx ]\",\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\\\\,,,\"Windows: Malware likes changing IFEO, like adding Debugger to disable antivirus EXE\",T1183\n        ^HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\,,,Windows: Event log system integrity and ACLs,\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Safeboot\\\\,,,Windows: Services approved to load in safe mode. Almost nothing should ever modify this.,Tamper-Safemode\n        ^HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Winlogon\\\\,,,Windows: Providers notified by WinLogon,Tamper-Winlogon\n        ^HKLM\\\\Software\\\\Microsoft\\\\Tracing\\\\RASAPI32,,,Windows: Malware sometimes disables tracing to obfuscate tracks,Tamper-Tracing\n        \\\\{CAFEEFAC-,,,Java Registry,\n        \n\nsources:\n  - query: |\n      -- firstly generate initial regex to apply to events\n      LET target_entries = join(array=KeyRegex.Regex,sep='|')\n      \n      -- Monitor ETW provider and extract target key event by regex\n      LET hits = SELECT \n            EventData.UtcTime as EventTime,\n            System.ID as EventId,\n            EventData.EventType as EventType,\n            EventData.TargetObject as TargetObject,\n            EventData.Details as Value,\n            dict(Image=EventData.Image,User=EventData.User,ProcessId=EventData.ProcessId,ProcessGuid=EventData.ProcessGuid) as ProcessInfo,\n            EventData.Image as _Image\n        FROM watch_etw(guid=\"{5770385f-c22a-43e0-bf4c-06f5698ffbd9}\")\n        WHERE System.ID in ( 12, 13, 14 )\n            AND TargetObject =~ target_entries\n\n      -- apply additional filters and add context.\n      SELECT *, process_tracker_callchain(id=ProcessInfo.ProcessId).Data as ProcessChain\n      FROM foreach(row=hits, query={\n          SELECT EventTime,EventId,EventType,TargetObject,Value,ProcessInfo,\n            dict(Regex=Regex,FilterRegex=FilterRegex,FilterProcess=FilterProcess,Details=Details,`ATT\u0026CK`=`ATT\u0026CK`) as Detection\n          FROM KeyRegex\n          WHERE TargetObject =~ Regex\n            AND NOT if(condition= FilterProcess,\n                        then= _Image =~ FilterProcess,\n                        else= False)\n            AND NOT if(condition= FilterRegex,\n                        then= TargetObject =~ FilterRegex,\n                        else= False)\n      })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Triage.Sysmon","op":"set","definition":"name: Exchange.Windows.Triage.Sysmon\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact allows collecting Sysmon Events for Triage around a timestamp.\n   \n   By default collection will be 600 seconds from the current time and allows \n   fast triage of a machine with recent telemetry.\n   \ntype: CLIENT\n\nparameters:\n   - name: TargetTime\n     description: the timestamp we want to box time around. Default is current time.\n     type: timestamp\n   - name: TargetTimeBox\n     description: the time box in seconds we want around TargetTime.\n     default: 600\n     type: int\n   - name: IdRegex\n     description: Regex of Sysmon EventIDs to include. Default is all.\n     default: .\n   - name: IocRegex\n     description: Regex of strings to search for in Sysmon events. Default is any.\n     default: .\n   - name: FilterRegex\n     description: Regex of strings to filter out of results. Default is none.\n     \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- firstly set boxed timebounds\n      LET DateAfterTime \u003c= if(condition=TargetTime,\n        then=timestamp(epoch=TargetTime.Unix - TargetTimeBox), else=timestamp(epoch=now() - TargetTimeBox))\n      LET DateBeforeTime \u003c= if(condition=TargetTime,\n        then=timestamp(epoch=TargetTime.Unix + TargetTimeBox), else=timestamp(epoch=now() + TargetTimeBox))\n        \n      -- run query and output rows\n      SELECT * FROM Artifact.Windows.EventLogs.EvtxHunter(\n                EvtxGlob='''%SystemRoot%\\System32\\Winevt\\Logs\\*Sysmon*.evtx''',\n                ChannelRegex='Sysmon',\n                DateAfter= DateAfterTime,\n                DateBefore= DateBeforeTime,\n                IdRegex=IdRegex,\n                IocRegex=IocRegex,\n                WhitelistRegex=FilterRegex )\n\n    notebook:\n      - type: vql_suggestion\n        name: 1. Process event timeline\n        template: |\n            /*\n            ## 1: Process creation\n            Comment in fields as needed.\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --EventData.RuleName as RuleName\n                --EventData.UtcTime as UtcTime\n                --EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.OriginalFileName as OriginalFileName\n                --,dict(FileVersion = EventData.FileVersion, Description = EventData.Description, Product = EventData.Product,Company = EventData.Company,OriginalFileName = EventData.OriginalFileName) as VersionInformation\n                ,EventData.CommandLine as CommandLine\n                --,EventData.CurrentDirectory as CurrentDirectory\n                ,EventData.User as User\n                --,EventData.LogonGuid as LogonGuid\n                --,EventData.LogonId as LogonId\n                --,EventData.TerminalSessionId as TerminalSessionId\n                --,EventData.IntegrityLevel as IntegrityLevel\n                --,parse_string_with_regex(string=EventData.Hashes, regex=[\"MD5=(?P\u003cMD5\u003e[^,]+)\",\"SHA1=(?P\u003cSHA1\u003e[^,]+)\",\"SHA256=(?P\u003cSHA256\u003e[^,]+)\",\"IMPHASH=(?P\u003cIMPHASH\u003e[^,]+)\"] ) as Hash\n                --,EventData.ParentProcessGuid as ParentProcessGuid\n                ,EventData.ParentProcessId as ParentProcessId\n                ,EventData.ParentImage as ParentImage\n                ,EventData.ParentCommandLine as ParentCommandLine\n                --,EventData.ParentUser as ParentUser\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 1\n \n      - type: vql_suggestion\n        name: 2 Change file time\n        template: |\n            /*\n            ## 2: A process changed a file creation time\n                The change file creation time event is registered when a file creation time is \n                explicitly modified by a process. This event helps tracking the real creation \n                time of a file. Attackers may change the file creation time of a backdoor to \n                make it look like it was installed with the operating system. Note that many \n                processes legitimately change the creation time of a file; it does not \n                necessarily indicate malicious activity.\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --EventData.RuleName as RuleName\n                --EventData.UtcTime as UtcTime\n                --EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.TargetFilename as TargetFilename\n                ,EventData.CreationUtcTime as CreationUtcTime\n                ,EventData.PreviousCreationUtcTime as PreviousCreationUtcTime\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 2\n\n      - type: vql_suggestion\n        name: 3. Network event timeline\n        template: |             \n            /*\n            ## 3. Network connection\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.Protocol as Protocol\n                ,EventData.Initiated as Initiated\n                ,EventData.SourceIsIpv6 as SourceIsIpv6\n                ,EventData.SourceIp as SourceIp\n                ,EventData.SourceHostname as SourceHostname\n                ,EventData.SourcePort as SourcePort\n                ,EventData.SourcePortName as SourcePortName\n                ,EventData.DestinationIsIpv6 as DestinationIsIpv6\n                ,EventData.DestinationIp as DestinationIp\n                ,EventData.DestinationHostname as DestinationHostname\n                ,EventData.DestinationPort as DestinationPort\n                ,EventData.DestinationPortName as DestinationPortName\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 3\n       \n       \n      - type: vql_suggestion\n        name: 8. CreateRemoteThread\n        template: |           \n            /*\n            ## 8: CreateRemoteThread\n            The CreateRemoteThread event detects when a process creates a thread in another \n            process. This technique is used by malware to inject code and hide in other \n            processes. The event indicates the source and target process. It gives \n            information on the code that will be run in the new thread: StartAddress, \n            StartModule and StartFunction. Note that StartModule and StartFunction fields \n            are inferred, they might be empty if the starting address is outside loaded \n            modules or known exported functions.\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.SourceProcessGuid as SourceProcessGuid\n                ,EventData.SourceProcessId as SourceProcessId\n                ,EventData.SourceImage as SourceImage\n                ,EventData.SourceUser as SourceUser\n                --,EventData.TargetProcessGuid as TargetProcessGuid\n                ,EventData.TargetImage as TargetImage\n                ,EventData.TargetUser as TargetUser\n                ,EventData.NewThreadId as NewThreadId\n                ,EventData.StartAddress as StartAddress\n                ,EventData.StartModule as StartModule\n                ,EventData.StartFunction as StartFunction\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 8\n     \n      - type: vql_suggestion\n        name: 10. ProcessAccess\n        template: |          \n            /*\n            ## 10: ProcessAccess\n            The process accessed event reports when a process opens another process, \n            an operation that’s often followed by information queries or reading \n            and writing the address space of the target process. This enables \n            detection of hacking tools that read the memory contents of processes \n            like Local Security Authority (Lsass.exe) in order to steal credentials \n            for use in Pass-the-Hash attacks. Enabling it can generate significant \n            amounts of logging if there are diagnostic utilities active that \n            repeatedly open processes to query their state, so it generally \n            should only be done so with filters that remove expected accesses.\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.SourceProcessGuid as SourceProcessGuid\n                ,EventData.SourceProcessId as SourceProcessId\n                ,EventData.SourceThreadId as SourceThreadId\n                ,EventData.SourceImage as SourceImage\n                ,EventData.SourceUser as SourceUser\n                --,EventData.TargetProcessGuid as TargetProcessGuid\n                ,EventData.TargetProcessId as TargetProcessId\n                ,EventData.TargetImage as TargetImage\n                ,EventData.TargetUser as TargetUser\n                ,EventData.GrantedAccess as GrantedAccess\n                ,EventData.CallTrace as CallTrace\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 10\n\n      - type: vql_suggestion\n        name: 11. FileCreate\n        template: |             \n            /*\n            ## 11: FileCreate\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.TargetFilename as TargetFilename\n                ,EventData.CreationUtcTime as CreationUtcTime\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 11\n\n      - type: vql_suggestion\n        name: 12 13 14. Registry events\n        template: |                 \n            /*\n            ## 12, 13, 14: Registry\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.EventType as EventType\n                ,EventData.TargetObject as TargetObject\n                ,EventData.Details as Details\n                ,EventData.NewName as NewName\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID in ( 12, 13, 14 )\n\n      - type: vql_suggestion\n        name: 15. FileCreateStreamHash\n        template: | \n            /*\n            ## 15: FileCreateStreamHash\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.TargetFileName as TargetFileName\n                ,EventData.CreationUtcTime as CreationUtcTime\n                --,parse_string_with_regex(string=EventData.Hash, regex=[\"MD5=(?P\u003cMD5\u003e[^,]+)\",\"SHA1=(?P\u003cSHA1\u003e[^,]+)\",\"SHA256=(?P\u003cSHA256\u003e[^,]+)\"] ) as Hash\n                ,EventData.Hash as Hash\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 15\n\n      - type: vql_suggestion\n        name: 17 18. Named Pipes\n        template: | \n            /*\n            ## 17, 18: Named Pipes\n            17: Pipe created\n            18: Pipe connected\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.EventType as EventType\n                ,EventData.PipeName as PipeName\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID in ( 17,18 )\n            \n            \n            /*\n            \n      - type: vql_suggestion\n        name: 19 20 21. WMI Eventing\n        template: |            \n            ## 19,20,21: WMI Eventing\n            19: WmiEventFilter activity detected.  \n            20: WmiEventConsumer activity detected.  \n            21: WmiEventConsumerToFilter activity detected.  \n            \n            Note: some fields for each event will be null.  \n            Comment in and out relevant fields.\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.EventType as EventType\n                ,EventData.Operation as Operation\n                ,EventData.EventNamespace as EventNamespace\n                ,EventData.Name as Name\n                ,EventData.Query as Query\n                ,EventData.Type as Type\n                ,EventData.Destination as Destination\n                ,EventData.Consumer as Consumer\n                ,EventData.Filter as Filter\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID in ( 19,20,21 )\n\n      - type: vql_suggestion\n        name: 22. DNS event timeline\n        template: |            \n            /*\n            ## 22: DNSEvent\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.QueryName as QueryName\n                ,EventData.QueryStatus as QueryStatus\n                ,EventData.QueryResults as QueryResults\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 22\n\n      - type: vql_suggestion\n        name: 23. FileDelete\n        template: |             \n            /*\n            ## 23: FileDelete\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.TargetFilename as TargetFilename\n                --,parse_string_with_regex(string=EventData.Hashes, regex=[\"MD5=(?P\u003cMD5\u003e[^,]+)\",\"SHA1=(?P\u003cSHA1\u003e[^,]+)\",\"SHA256=(?P\u003cSHA256\u003e[^,]+)\"] ) as Hashes\n                ,EventData.Hashes as Hashes\n                ,EventData.Archived as Archived\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 23\n\n      - type: vql_suggestion\n        name: 24. ClipboardChange\n        template: |             \n            /*\n            ## 24: ClipboardChange\n            */\n            SELECT EventTime, Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                --,EventData.ProcessGuid as ProcessGuid\n                ,EventData.ProcessId as ProcessId\n                ,EventData.Image as Image\n                ,EventData.User as User\n                ,EventData.Session as Session\n                ,EventData.ClientInfo as ClientInfo\n                --,parse_string_with_regex(string=EventData.Hashes, regex=[\"MD5=(?P\u003cMD5\u003e[^,]+)\",\"SHA1=(?P\u003cSHA1\u003e[^,]+)\",\"SHA256=(?P\u003cSHA256\u003e[^,]+)\"] ) as Hashes\n                ,EventData.Hashes as Hashes\n                ,EventData.Archived as Archived\n                --,EventData\n                --,Message\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n            WHERE EventID = 24\n\n      - type: vql_suggestion\n        name: Timesketch format\n        template: |                \n            SELECT EventTime as datetime\n                ,Computer,EventID\n                --,Channel,Provider\n                --,EventData.RuleName as RuleName\n                --,EventData.UtcTime as UtcTime\n                ,get(item=dict(\n                    `1` = 'Process Create',\n                    `2` = 'File creation time changed',\n                    `3` = 'Network connection detected',\n                    `4` = 'Sysmon service state changed',\n                    `5` = 'Process terminated',\n                    `6` = 'Driver loaded',\n                    `7` = 'Image loaded',\n                    `8` = 'CreateRemoteThread detected',\n                    `9` = 'RawAccessRead detected',\n                    `10` = 'Process accessed',\n                    `11` = 'File created',\n                    `12` = 'Registry object added or deleted',\n                    `13` = 'Registry value set',\n                    `14` = 'Registry object renamed',\n                    `15` = 'File stream created',\n                    `16` = 'Sysmon config state changed',\n                    `17` = 'Pipe Created\"',\n                    `18` = 'Pipe Connected',\n                    `19` = 'WmiEventFilter activity detected',\n                    `20` = 'WmiEventConsumer activity detected',\n                    `21` = 'WmiEventConsumerToFilter activity detected',\n                    `22` = 'Dns query',\n                    `23` = 'File Delete archived',\n                    `24` = 'Clipboard changed',\n                    `25` = 'Process Tampering',\n                    `26` = 'File Delete logged',\n                    `27` = 'File Block Executable',\n                    `28` = 'File Block Shredding',\n                    `255` = 'Error'),\n                    member=str(str=EventID)) as timestamp_desc\n                ,Message as message\n                --,EventData\n            FROM source(artifact=\"Exchange.Windows.Triage.Sysmon\")\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Carving.SystemBC","op":"set","definition":"name: Exchange.Windows.Carving.SystemBC\nauthor: Matt Green - @mgreen27\ndescription: |\n  This artifact extracts SystemBC RAT configuration from a byte stream, \n  process or file on disk.\n  \n  The User can define bytes, file glob, process name or pid regex as a target.\n  The artifact firstly discovers configuration and extracts bytes, \n  before parsing with Velociraptor Binary Parser.\n  \n  This content simply carves the configuration and does not unpack files on\n  disk. That means pointing this artifact as a packed or obfuscated file may not\n  obtain the expected results.\n\nreference:\n  - https://malpedia.caad.fkie.fraunhofer.de/details/win.systembc\n  \n\nparameters:\n  - name: TargetBytes\n    default:\n  - name: TargetFileGlob\n    default:\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: ProcessRegex\n    default: .\n    type: regex\n  - name: FindConfig\n    type: hidden\n    description: Final Yara option and the default if no other options provided.\n    default: |\n        rule SystemBC_Config\n            {\n                meta:\n                    author = \"Matt Green - @mgreen27\"\n                    description = \"SystemBC configuration\"\n            \n                strings:\n                    $BEGINDATA = { 00 42 45 47 49 4e 44 41 54 41 00 } //BEGINDATA\n                    $ = \"HOST1:\" ascii wide fullword\n                    $ = \"HOST2:\" ascii wide fullword\n                    $ = \"PORT1:\" ascii wide fullword\n                    $ = \"TOR:\" ascii wide fullword\n                    $ = \"-WindowStyle Hidden -ep bypass -file\" ascii wide\n            \n                condition:\n                    $BEGINDATA and 3 of them\n            }\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- binary parse profile to extract SystemBC configuration.\n      LET PROFILE = '''[\n                [SystemBC, 0, [\n                    [\"__FindHost1\",0, \"String\",{term: \"HOST1:\"}],\n                    [\"HOST1\",\"x=\u003elen(list=x.__FindHost1) + 6\", \"String\",{term_hex: \"0000\"}],\n                    [\"__FindHost2\",0, \"String\",{term: \"HOST2:\"}],\n                    [\"HOST2\",\"x=\u003elen(list=x.__FindHost2) + 6\", \"String\",{term_hex: \"0000\"}],\n                    [\"__FindPort1\",0, \"String\",{term: \"PORT1:\"}],\n                    [\"PORT1\",\"x=\u003elen(list=x.__FindPort1) + 6\", \"String\",{term_hex: \"0000\"}],\n                    [\"__FindTOR\",0, \"String\",{term: \"TOR:\"}],\n                    [\"TOR\",\"x=\u003elen(list=x.__FindTOR) + 4\", \"String\",{term_hex: \"0000\"}],\n                    [\"__FindUserAgent\",0, \"String\",{term: \"\\r\\nUser-Agent: \"}],\n                    [\"User-Agent\",\"x=\u003elen(list=x.__FindUserAgent) + 14\", \"String\",{term: \"\\r\\n\"}],\n                ]\n            ]]'''\n            \n      \n      -- Bytes usecase: scan DataBytes for config\n      LET ByteConfiguration = SELECT\n            Rule,\n            len(list=TargetBytes) as Size,\n            hash(path=TargetBytes,accessor='data') as Hash,\n            String.Offset as HitOffset,\n            read_file(accessor=\"data\",filename=TargetBytes, offset=String.Offset, length=1000) as _RawConfig\n        FROM yara(\n                files=TargetBytes,\n                accessor='data',\n                rules=FindConfig,\n                number=99,\n                context=1000\n            )\n        GROUP BY _RawConfig\n      \n      -- Glob usecase: find target files\n      LET TargetFiles = SELECT OSPath,Size\n        FROM glob(globs=TargetFileGlob) WHERE NOT IsDir\n\n      -- Glob usecase: Extract config from files in scope\n      LET FileConfiguration = SELECT * FROM foreach(row=TargetFiles,\n            query={\n                SELECT \n                    Rule,\n                    OSPath, Size,\n                    hash(path=OSPath) as Hash,\n                    String.Offset as HitOffset,\n                    read_file(filename=OSPath, offset=String.Offset, length=1000) as _RawConfig\n                FROM yara(\n                        files=OSPath,\n                        rules=FindConfig,\n                        number=99,\n                        context=1000\n                    )\n                GROUP BY OSPath,_RawConfig\n            })\n            \n      -- find velociraptor process\n      LET me \u003c= SELECT * FROM if(condition= NOT ( TargetFileGlob OR TargetBytes ),\n                    then = { SELECT Pid FROM pslist(pid=getpid()) })\n\n      -- find all processes and add filters\n      LET processes = SELECT Name as ProcessName, Exe, CommandLine, Pid\n        FROM pslist()\n        WHERE\n            Name =~ ProcessRegex\n            AND format(format=\"%d\", args=Pid) =~ PidRegex\n            AND NOT Pid in me.Pid\n      \n      -- scan processes in scope with our rule, limit 1 hit and extract context to parse\n      LET ProcessConfiguration = SELECT * FROM foreach(\n        row=processes,\n        query={\n            SELECT\n                Rule,\n                Pid, ProcessName, CommandLine,\n                String.Offset as HitOffset,\n                read_file(accessor=\"process\", filename=format(format=\"/%d\", args=Pid), offset=String.Offset, length=1000) as _RawConfig\n            FROM yara( \n                    files=format(format=\"/%d\", args=Pid),\n                    accessor='process',\n                    rules=FindConfig,\n                    number=99,\n                    context=1000\n                )\n            GROUP BY Pid, ProcessName, CommandLine,_RawConfig\n          })\n        \n\n\n      -- generate results remove any FPs\n      SELECT *,\n        parse_binary(accessor=\"data\", filename=_RawConfig, profile=PROFILE, struct='SystemBC') AS SystemBC,\n        _RawConfig\n      FROM if(condition=TargetBytes,\n            then=ByteConfiguration,\n            else= if(condition=TargetFileGlob,\n                then= FileConfiguration,\n                else= ProcessConfiguration))\n      WHERE SystemBC.HOST1 OR SystemBC.HOST2 OR SystemBC.TOR\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Forensics.TabState","op":"set","definition":"name: Exchange.Windows.Forensics.TabState\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact parses notepad TabState files in available in Windows 11.\n   \n   In Windows 11, notepad has implemented a feature to repopulate previously \n   open notepad tabs - both saved and unsaved. This data is stored on disk and \n   provides an interesting opportunity for DFIR practitioners.\n   \nreference:\n  - https://medium.com/@mahmoudsoheem/new-digital-forensics-artifact-from-windows-notepad-527645906b7b\n  - https://www.youtube.com/watch?v=zSSBbv2fc2s\n  \ntype: CLIENT\n\nparameters:\n   - name: TargetGlob\n     description: Target glob for notepad TabState bin files.\n     default: C:\\Users\\*\\AppData\\Local\\Packages\\Microsoft.WindowsNotepad_8wekyb3d8bbwe\\LocalState\\TabState\\*.bin\n   - name: ContentRegex\n     description: Content filter regex to select which TabState files return a row.\n     type: regex\n     default: .\n   - name: FilenameRegex\n     description: Filter regex to select Saved filename path. ```^$``` returns only unsaved files.\n     type: regex\n     default: .\n   - name: UploadFile\n     description: If selected will upload TabState file.\n     type: bool\n\nexport: |\n    LET TSProfile = '''[\n        [\"TabState\", 0, [\n            [\"__Magic\", 0, \"String\", {\"length\": 3, \"term_hex\" : \"FFFFFF\" }],\n            [\"__Saved\", 3, \"char\"],\n            [\"__FileNameSize\", 4, \"int8\"],\n            [\"__Filename\", 5, \"String\", {\n                                        encoding: \"utf8\",\n                                        length: \"x=\u003ex.__FileNameSize * 2\", \n                                        term_hex : \"000000\",\n                                    }],\n            [\"Filename\",0,\"Value\",{\"value\": \"x=\u003eif(condition= x.__Saved \u003e 0, then=utf16(string=x.__Filename),else='')\"}],\n            \n            [\"__HeaderPrefix\", \"x=\u003e5 + len(list=x.__Filename)\", \"String\",{\"term_hex\": \"0100\", length: 1000, max_length: 1000}],\n            [\"__DataOffset\",0,\"Value\",{ \"value\": \"x=\u003e5 + len(list=x.__Filename) + len(list=x.__HeaderPrefix)\"}],\n            [\"__Data\", \"x=\u003e x.__DataOffset + 5\", \"String\", {\n                                        encoding: \"utf8\",\n                                        length: 100000,\n                                        max_length: 100000, \n                                        \"term_hex\" : \"000000000000000000000000\" \n                                    }],\n            [\"StateData\",0,\"Value\",{ \"value\": \"x=\u003eutf16(string=x.__Data[:(len(list=x.__Data) - 5)])\"}],\n        ]]]'''\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET results = SELECT OSPath, Name,Mtime,Atime,Ctime,Btime,\n            parse_binary(filename=OSPath,profile=TSProfile,struct='TabState') as Parsed\n        FROM glob(globs=expand(path=TargetGlob)) \n        WHERE NOT IsDir \n            AND NOT OSPath =~'''\\.(0|1)\\.bin$'''\n            AND Parsed.StateData =~ ContentRegex\n            AND Parsed.Filename =~ FilenameRegex\n        \n      SELECT \n        Name,Mtime,Atime,Ctime,Btime,\n        Parsed.Filename as SavedFilename,\n        Parsed.StateData as StateData,\n        OSPath\n      FROM if(condition= UploadFile,\n        then={ \n            SELECT *, upload(file=OSPath) as Upload \n            FROM results \n        },\n        else= results )\n\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.ETWBase","op":"set","definition":"name: Windows.Sigma.ETWBase\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Windows.\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\nexport: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET WindowsKernelFile_EIDLookup \u003c= dict(\n       `10`=\"NameCreate\", `11`=\"NameDelete\", `12`=\"FileOpen\",\n       `19`=\"Rename\", `27`=\"RenamePath\",`30`=\"CreateNewFile\")\n\n  LET WindowsKernelFile_Keyword \u003c= 0x1490\n\n  LET WindowsKernelProcess_EIDLookup \u003c= dict(\n    `1`=\"ProcessStart\", `2`=\"ProcessStop\",\n    `5`=\"ImageLoad\", `6`=\"ImageUnload\")\n\n  LET WindowsKernelProcess_Keyword \u003c= 0x50\n\n  LET WindowsKernelRegistry_EIDLookup \u003c= dict(\n    `2`=\"OpenKey\", `1`=\"CreateKey\", `5`=\"SetValueKey\",\n    `6`=\"DeleteValueKey\", `3`=\"DeleteKey\")\n\n  -- SetValueKey | DeleteValueKey | CreateKey | OpenKey | DeleteKey = 0x100 | 0x200 | 0x1000 | 0x2000 | 0x4000\n  LET WindowsKernelRegistry_Keyword \u003c= 0x7300\n\n  LET PublisherGlob \u003c= pathspec(\n    Path='''HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Publishers''',\n    path_type=\"registry\")\n\n  LET GUIDLookup(GUID) = SELECT Data.value AS Provider\n    FROM stat(accessor=\"registry\", filename=PublisherGlob + (\"/\" + GUID + \"/@\"))\n\n  LET GetProcInfo(PID) = to_dict(item={\n    SELECT * FROM items(item=process_tracker_get(id=PID).Data)\n       WHERE _key =~ \"Name|CommandLine|CreateTime|Exe|Cwd|Username\"\n    })\n\n  \n  LET LogSources \u003c= sigma_log_sources(\n  \n    `etw/windows/kernel`={\n     SELECT * FROM delay(\n       query={\n         SELECT timestamp(epoch=now()) AS Timestamp,\n                System + dict(Channel=\"NT-Kernel-Logger\",\n                     Computer=Hostname,\n                     EventType=System.KernelEventType,\n                     EventID=dict(Value=System.ID)) AS System,\n                System.KernelEventType AS EventType,\n                EventData + dict(\n                   ProcInfo=GetProcInfo(PID=System.ProcessID)\n                ) AS EventData\n         FROM watch_etw(guid='{9E814AAD-3204-11D2-9A82-006008A86939}',\n                        capture_state=TRUE,\n                        level=5,\n                        description=\"NT-Kernel-Logger\",\n                        kernel_tracer_type=[\"registry\", \"process\", \"network\", \"driver\", \"file\"])\n         WHERE EventType\n     }, delay=1)\n    },\n    `etw/windows/file`={\n     SELECT timestamp(epoch=now()) AS Timestamp,\n            System + dict(Channel=\"Microsoft-Windows-Kernel-File\",\n                 Computer=Hostname,\n                 EventType=get(item=WindowsKernelFile_EIDLookup,\n                               field=str(str=System.ID)),\n                 EventID=dict(Value=System.ID)) AS System,\n            EventData + dict(\n                ProcInfo=GetProcInfo(PID=System.ProcessID)\n            ) AS EventData\n     FROM delay(query={\n        SELECT * FROM watch_etw(\n           guid='{edd08927-9cc4-4e65-b970-c2560fb5c289}',\n           description=\"Microsoft-Windows-Kernel-File\",\n           any=WindowsKernelFile_Keyword)\n     }, delay=1)\n    },\n    `etw/windows/registry`={\n     SELECT timestamp(epoch=now()) AS Timestamp,\n            System + dict(Channel=\"Microsoft-Windows-Kernel-Registry\",\n                 Computer=Hostname,\n                 EventType=get(item=WindowsKernelRegistry_EIDLookup,\n                               field=str(str=System.ID)),\n                 EventID=dict(Value=System.ID)) AS System,\n            EventData + dict(\n                ProcInfo=GetProcInfo(PID=System.ProcessID)\n            ) AS EventData\n     FROM delay(query={\n        SELECT * FROM watch_etw(\n           guid='{70eb4f03-c1de-4f73-a051-33d13d5413bd}',\n           capture_state=TRUE,\n           description=\"Microsoft-Windows-Kernel-Registry\",\n           any=WindowsKernelRegistry_Keyword)\n     }, delay=1)\n    },\n    `etw/windows/process`={\n     SELECT timestamp(epoch=now()) AS Timestamp,\n            System + dict(Channel=\"Microsoft-Windows-Kernel-Process\",\n                 Computer=Hostname,\n                 EventType=get(item=WindowsKernelProcess_EIDLookup,\n                               field=str(str=System.ID)),\n                 EventID=dict(Value=System.ID)) AS System,\n            EventData + dict(\n               ProcInfo=GetProcInfo(PID=System.ProcessID)\n            ) AS EventData\n     FROM delay(query={\n        SELECT * FROM watch_etw(\n           guid='{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}',\n           description=\"Microsoft-Windows-Kernel-Process\",\n           any=WindowsKernelProcess_Keyword)\n     }, delay=1)\n    },\n    `etw/windows/sysmon`={\n     SELECT *\n     FROM delay(query={\n        SELECT System.TimeStamp AS Timestamp,\n         System + dict(\n            EventId=System.ID,\n            Computer=Hostname,\n            Channel=\"Microsoft-Windows-Sysmon/Operational\") AS System,\n         EventData + dict(ProcInfo=process_tracker_get(\n            id=System.ProcessID).Data) AS EventData\n       FROM watch_etw(\n           guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}',\n           description=\"Microsoft-Windows-Sysmon/Operational\")\n     }, delay=1)\n    },\n    `etw/windows/etw`={\n     SELECT *\n     FROM delay(query={\n        SELECT System.TimeStamp AS Timestamp,\n         System + dict(\n            EventId=System.ID,\n            Computer=Hostname,\n            Channel=\"Microsoft-Windows-Kernel-EventTracing\") AS System,\n         EventData + dict(ProcInfo=process_tracker_get(\n            id=System.ProcessID).Data) AS EventData\n       FROM watch_etw(\n           guid='{B675EC37-BDB6-4648-BC92-F3FDC74D3CA2}', any=0x30,\n           description=\"Microsoft-Windows-Kernel-EventTracing\")\n     }, delay=1)\n    },\n    `etw/windows/wmi`={\n     SELECT *\n     FROM delay(query={\n        SELECT System.TimeStamp AS Timestamp,\n         System + dict(\n            EventId=System.ID,\n            Computer=Hostname,\n            Channel=\"Microsoft-Windows-WMI-Activity\") AS System,\n         EventData + dict(ProcInfo=process_tracker_get(\n            id=System.ProcessID).Data) AS EventData\n       FROM watch_etw(\n           guid='{1418EF04-B0B4-4623-BF7E-D74AB47BBDAA}', any=0x30,\n           description=\"Microsoft-Windows-WMI-Activity\")\n     }, delay=1)\n    },\n    `etw/windows/dns`={\n     SELECT *\n     FROM delay(query={\n        SELECT System.TimeStamp AS Timestamp,\n         System + dict(\n            EventId=System.ID,\n            Computer=Hostname,\n            Channel=\"Microsoft-Windows-DNS-Client\") AS System,\n         EventData + dict(ProcInfo=process_tracker_get(\n            id=System.ProcessID).Data) AS EventData\n       FROM watch_etw(\n           guid='{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}', any=0x30,\n           description=\"Microsoft-Windows-DNS-Client\")\n     }, delay=1)\n    },`velociraptor/info/*`={ SELECT * FROM info() })\n  \n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/4yQX0uHMBSGv4qcq4IxhO4Cr8wgipT+3HUz6pgDd5TtGI7su4ejmYLZ79bneV/fs0/IG0WELVzCmL0MaXqBo3z0jtHIiATknTGK3u404UYsPpD4SrGSle1eb6ju5FoNwX5gtLv1kQkIPU++xz3vFwq41i3eK/PXioiTaUrW38seqVLcgIBb9AcFkQoo69ohrzRNfKaJs01vkM5BwHw/OleM/z7QrCz+wZQl8DPoAd+1Y+vDHfuRjSLg2aGlE36weF/fAQAA//+5wRAHDwIAAA==\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6quBQQAAP//Q7+mowIAAAA=\")))\n\n  LET DefaultDetailsLambda = '''x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.ID])\n      ) || x.Message || x.UserData || x.EventData'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\nsources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         System.EventType AS EventType,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID, EventType,\n            Level, Title, Details, X._Correlations || _Event AS _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.TeamViewerLanguage","op":"set","definition":"name: Exchange.Windows.Detection.TeamViewerLanguage\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact enables collection of TeamViewer log entries for keyboard layout \n   changes.  \n   \n   The artifact firstly searches for TeamViewer log filenames, then applies yara \n   to extract log lines. The artifact by default hunts for Chinese, Vietnamese \n   and Russian language changes as priority, then uses a catch all for generic \n   changes. You can add additional targeted yara as desired to sort output.  \n   \n   In each log entry there are two language codes, the first being keyboard \n   layout of the connecting system and the second one the default input profile \n   of the target host. The same language codes could indicate legitimate support.\n   \n   Lookup Language codes at the Microsoft link for references. Examples below:  \n   \n   0409 - US English  \n   0419 - Russian  \n   0804 - Chinese Simplified  \n   0404 - Chinese Traditional  \n   042a - Vietnamese  \n   \nreference:\n  - https://twitter.com/cyb3rops/status/1600157565148483584\n  - https://github.com/Neo23x0/signature-base/blob/master/yara/log_teamviewer_keyboard_layouts.yar\n  - https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs?view=windows-11\n  \ntype: CLIENT\n\nparameters:\n   - name: TargetFileRegex\n     default: ^TeamViewer.._Logfile.*\\.log$\n     description: target teamviewer log filenames.\n   - name: DriveLetter\n     default: \"C:\"\n   - name: AllDrives\n     type: bool\n   - name: LayoutRegex\n     default: .\n     description: Regex of Layout to filter for\n   - name: YaraToScan\n     description: Yata to scan. High priority rules first then catch all for generic changes at end.\n     default: |\n        rule LOG_TeamViewer_Connect_Chinese_Keyboard_Layout {\n           meta:\n              description = \"Detects a suspicious TeamViewer log entry stating that the remote systems had a Chinese keyboard layout\"\n              author = \"Florian Roth\"\n              date = \"2019-10-12\"\n              modified = \"2020-12-16\"\n              score = 60\n              limit = \"Logscan\"\n              reference = \"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs\"\n           strings:\n              /* Source has Chinese simplified keyboard layout */\n              $x1 = \"Changing keyboard layout to: 0804\" ascii\n              $x2 = \"Changing keyboard layout to: 042a\"\n              /* Avoiding Chinese to Chinese support cases */\n              $fp1 = \"Changing keyboard layout to: 08040804\" ascii\n              $fp2 = \"Changing keyboard layout to: 042a042a\" ascii\n           condition:\n              ( #x1 + #x2 ) \u003e ( #fp1 + #fp2 )\n        }\n        rule LOG_TeamViewer_Connect_Russian_Keyboard_Layout {\n           meta:\n              description = \"Detects a suspicious TeamViewer log entry stating that the remote systems had a Russian keyboard layout\"\n              author = \"Florian Roth\"\n              date = \"2019-10-12\"\n              modified = \"2022-12-07\"\n              score = 60\n              limit = \"Logscan\"\n              reference = \"https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs\"\n           strings:\n              /* Source has Russian keyboard layout */\n              $x1 = \"Changing keyboard layout to: 0419\" ascii\n              /* Avoiding Russian to Russian support cases */\n              $fp1 = \"Changing keyboard layout to: 04190419\" ascii\n           condition:\n              #x1 \u003e #fp1\n        }\n        rule LOG_TeamViewer_Connect_any_Keyboard_Layout {\n           meta:\n              description = \"Detects a generic TeamViewer log entry stating change in keyboard layout\"\n           strings:\n             $x1 = \"Changing keyboard layout to:\" ascii\n            condition:\n              any of them\n        }\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET hits = SELECT OSPath,Rule,\n        Meta.description as RuleDescription,\n        filter(list=split(string=HitContext,sep='\\r\\n'),regex='Changing keyboard layout to')[0] as HitContent\n      FROM Artifact.Windows.Detection.Yara.NTFS(\n            FileNameRegex=TargetFileRegex,PathRegex='.',\n            AllDrives=AllDrives,\n            DriveLetter=DriveLetter,\n            NumberOfHits=9999999, \n            ContextBytes=50,\n            YaraRule=YaraToScan )\n      \n\n      LET details = SELECT*,\n            parse_string_with_regex(string=HitContent,\n            regex=[\n                '^(?P\u003cEventTime\u003e\\\\d{4}.\\\\d{2}.\\\\d{2}.\\\\d{2}:\\\\d{2}:\\\\d{2}[^\\\\s]+)',\n                'Changing keyboard layout to: (?P\u003cKeyboardLayout\u003e[^\\\\s]+)']) as Details\n      FROM hits\n\n      SELECT\n        timestamp(string=Details.EventTime) as EventTime,\n        Rule,\n        Details.KeyboardLayout as KeyboardLayout,\n        HitContent, \n        RuleDescription,\n        OSPath\n      FROM details\n      WHERE KeyboardLayout =~ LayoutRegex\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.Termsrv","op":"set","definition":"name: Exchange.Windows.Detection.Termsrv\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact detects patched TerminalService / Remote Desktop (RDP) dynamic link library or ServiceDll - \n    termsrv.dll.\n    \n    ATT\u0026CK T1505.005. Non Terminal Services Windows systems (e.g Windows 10 or 11) do not allow \n    concurrent users to RDP into the machine at the same time. Typically a notice \n    is displayed to the logged-on user requesting access and notifying of the \n    impending log off. As a defence evasion technique threat actors have been \n    known to patch termsrv.dll to evade detections.\n    \n    The artifact collects 3 potential detection points:\n    \n    1. In memory - targeting termsrv.dll mapped file for the patch bytes\n    2. On disk - targeting and file named termsrv.dll\n    3. Services - targeting any unutual ServiceDll path or an untrusted authenticode ServiceDll\n    \nreference:\n  - https://attack.mitre.org/techniques/T1505/005/\n  - https://www.mysysadmintips.com/windows/clients/545-multiple-rdp-remote-desktop-sessions-in-windows-10\n  \ntype: CLIENT\n  \nparameters:\n  - name: FileNameRegex\n    description: Only file names that match this regular expression will be scanned.\n    default: termsrv\\.dll$\n  - name: MappingRegex\n    description: Only mapped sections that match this regular expression will be scanned.\n    default: termsrv\\.dll$\n  - name: UploadHits\n    type: bool\n    description: If selected will upload any yara hits\n  - name: YaraRule\n    type: yara\n    description: Patched RDP yara\n    default: |\n        rule termsrv_modified\n        {\n            meta:\n                description = \"Finds hex of termsrv.dll patch\"\n           strings:\n                $patch = { B8 00 01 00 00 89 81 38 06 00 00 90 }\n        \n            condition:\n                $patch\n        }\n  - name: ExpectedServiceDll\n    description: Expected service dll location regex\n    default: '''^C:\\\\Windows\\\\System32\\\\termsrv\\.dll$'''\n    \nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - name: VAD\n    query: |\n        SELECT ProcessCreateTime,Pid,Name,MappingName,AddressRange,State,Type,\n            ProtectionMsg,Protection,SectionSize,YaraHit,HitContext,ProcessChain\n        FROM Artifact.Windows.System.VAD(\n                ProcessRegex='svchost\\.exe',\n                MappingNameRegex=MappingRegex,\n                SuspiciousContent=YaraRule,\n                UploadSection=UploadHits )\n\n  - name: Yara.NTFS\n    query: |\n        SELECT OSPath,Size,ModTime,Rule,Meta,YaraString,HitOffset,HitContext\n        FROM Artifact.Windows.Detection.Yara.NTFS(\n                FileNameRegex=FileNameRegex,\n                PathRegex=\".\",\n                YaraRule=YaraRule,\n                UploadHits=UploadHits,\n                NumberOfHits=1 )\n                \n  - name: Services\n    query: |\n        SELECT State,Name,DisplayName,Status,Pid,ExitCode,StartMode,PathName,\n            ServiceType,UserAccount,Created,FailureCommand,FailureActions,\n            AbsoluteExePath, ServiceDll,\n            HashServiceDll, CertinfoServiceDll,\n            parse_pe(file=ServiceDll) as PEInfo\n        FROM Artifact.Windows.System.Services(\n                            DisplayNameRegex='Remote Desktop Services',\n                            Calculate_hashes='Y',\n                            CertificateInfo='Y')\n        WHERE Name =~ 'TermService'\n            AND ( NOT ServiceDll =~ ExpectedServiceDll OR CertinfoServiceDll.Trusted = 'untrusted' )\n            \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Windows.Sigma.Triage","op":"set","definition":"name: Windows.Sigma.Triage\ndescription: |\n  This artifact contains VQL based triage rules for Windows.\n\n  This artifact was built on 2025-08-19T21:35:41Z\n\ntype: CLIENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\n\nimports:\n  - Windows.Sigma.BaseVQL\nsources:\n- query: |\n    LET Rules \u003c= gunzip(string=base64decode(string=\"\"))\n    SELECT *\n    FROM Artifact.Windows.Sigma.BaseVQL(\n       RuleLevel=RuleLevel, RuleStatus=RuleStatus,\n       RuleTitleFilter=RuleTitleFilter, Debug=Debug,\n       DateAfter=DateAfter, DateBefore=DateBefore,\n       SigmaRules=Rules, NTFS_CACHE_TIME=NTFS_CACHE_TIME)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Forensics.ThumbCache","op":"set","definition":"name: Exchange.Windows.Forensics.ThumbCache\nauthor: \"Yogesh Khatri - @SwiftForensics / CyberCX\"\ndescription: |\n    ThumbCache_xx.db parser. \n    \n    Windows 8 and above is supported. This does NOT parse Win7/Vista caches.\n    \n    By default, for resident files, the NAME field in a cache entry contains the\n    ASCII equivalent of the cache id, a 64 bit number. However for some deleted \n    files and files residing on external hosts or external storage, there is \n    either a file name, full UNC path or an alternate representation such as:\n        ```\u003cVOLUME NAME\u003e?\u003cVOLUME NUMBER\u003e?\u003cFILENAME\u003e ```  \n        or  \n        ```\u003cVOLUME NAME\u003e?\u003cVOLUME NUMBER\u003e?\u003cMFT REFERENCE NUMBER\u003e```  \n        or  \n        ```\\\\\u003chostname\u003e\\c$\\\u003cfile path\u003e```\n        \n    This artifact \u003cb\u003eomits\u003c/b\u003e the default resident files by removing any entries that \n    look like the cache ids leaving behind the \u003cb\u003einteresting files\u003c/b\u003e, usually \n    references to external disks or deleted files. At times there are references\n    to external files that may be useful to an investigation, when other \n    artifacts have been removed.\n\nreference:\n    - https://github.com/jas502n/010-Editor-Template/blob/main/ThumbCache.bt\n    - https://www.hackerfactor.com/blog/index.php?/archives/360-Thumbs-Up.html\n\ntype: CLIENT\n\nparameters:\n   - name: GlobPath\n     default: \"C:/Users/**/AppData/Local/Microsoft/Windows/Explorer/thumbcache_*.db\"\n     description: Change this to scan custom folders\n     \n   - name: MaxCountPerFile\n     default: 10000\n     type: int64\n     description: Don't change unless you have a good reason to. By default, the max count is far less than this.\n\n   - name: NameRegex\n     default: .\n     type: regex\n     description: Regex to filter on Name field. E.g Add ^\\\\\\\\ to hunt for UNC path.\n     \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      \n      LET ProfileX = '''\n        [\n           [\"Header\", 0, [\n              [\"Signature\", 0, \"String\", { \"length\": 4 }],\n              [\"Version\", 4, \"Enumeration\", {\n                  \"type\": \"uint32\",\n                  \"map\": {\n                            \"WINDOWS_VISTA\" : 0x14,\n                            \"WINDOWS_7\"     : 0x15,\n                            \"WINDOWS_8\"     : 0x1A,\n                            \"WINDOWS_8v2\"   : 0x1C,\n                            \"WINDOWS_8v3\"   : 0x1E,\n                            \"WINDOWS_8_1\"   : 0x1F,\n                            \"WINDOWS_10\"    : 0x20,\n                  }\n              }\n              ],\n              [\"HeaderSize\", 16, \"uint32\"],\n              [\"records\", \"x=\u003ex.HeaderSize\", \"Array\", {\n                  \"type\": \"Entry\",\n                  \"max_count\": \"x=\u003eMaxCountPerFile\",\n                  \"count\": \"x=\u003eMaxCountPerFile\",\n              }]\n            ]],\n           [\"Entry\", \"x=\u003ex.Size\", [\n              [\"Signature\", 0, \"String\", { \"length\": 4 }],\n              [\"Size\", 4, \"uint32\"],\n              [\"NameSize\", 16, \"uint32\"],\n              [\"Name\", 56, \"String\", {\"encoding\": \"utf16\", \"length\": \"x=\u003ex.NameSize\"}]\n             ],\n            ]\n        ]\n        '''\n   \n        LET targets \u003c= SELECT OSPath, \n            read_file(filename=OSPath,offset=0,length=4) as _Header\n            FROM glob(globs=GlobPath)\n            WHERE NOT IsDir \n              AND OSPath =~ \"thumbcache_[0-9]+\\.db\"\n              AND _Header =~ '^CMMM$'\n\n        LET thumbcache_data \u003c= SELECT OSPath,\n            parse_binary(filename=OSPath,\n                profile=ProfileX, struct=\"Header\") AS Parsed \n        FROM targets\n                WHERE NOT Parsed.Version IN (\"WINDOWS_VISTA\", \"WINDOWS_7\")\n                \n        SELECT OSPath, Name, Version FROM \n              foreach(row=thumbcache_data, query={\n                  SELECT Name, OSPath, Parsed.Version as Version\n                    FROM foreach(row=Parsed.records) \n              })\n              WHERE Name\n                  AND Name =~ NameRegex\n                  AND NOT Name =~ \"^[0-9a-fA-F]{14,16}$\" \n                  AND NOT Name =~ \"^::{\"\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.NTFS.Timestomp","op":"set","definition":"name: Exchange.Windows.NTFS.Timestomp\nauthor: \"Matt Green - @mgreen27\"\ndescription: |\n    This artifact enables triage to detect potential time stomped files.\n\n    Checks:\n    \n    - $STANDARD_INFORMATION “B” time prior to $FILE_NAME “B” time\n    - $STANDARD_INFORMATION “B” or \"M\" time has nanosecond precision. \n    - PE compile time prior to any $STANDARD_INFORMATION time stamp.  \n    \n    Optional:  \n    \n    - $STANDARD_INFORMATION “M” time prior to ShimCache timestamp\n    - $STANDARD_INFORMATION times prior to $I30 slack \"B\" or \"M\" times.\n    - Full PE metadata output.\n    \n    Note: If an option is selected the artifact will also output additional metadata for context.\n    \n    Available filters include:  \n      PathRegex (OSPath): e.g ^C:\\\\folder\\\\file\\.ext$ or partial \\\\folder\\\\folder2\\\\ or string|string2|string3  \n      FileRegex: ^filename.ext$ or partial string1|string2  \n\n    \nparameters:\n  - name: MFTDrive\n    description: |\n      The path to to the drive that holds the MFT file (can be a\n      pathspec).\n    default: \"C:\"\n  - name: PathRegex\n    description: \"Regex search over FullPath.\"\n    default: \".\"\n  - name: FileRegex\n    description: \"Regex search over FileName.\"\n    default: \".\"\n    type: regex\n  - name: UploadHits\n    type: bool\n    description: \"Upload complete complete attribute data.\"\n  - name: ShimcacheTest\n    type: bool\n    description: \"If PE, check $STANDARD_INFORMATION “M” time prior to ShimCache timestamp\"\n  - name: I30Test\n    type: bool\n    description: \"Check $STANDARD_INFORMATION times prior to $I30 slack B or M times.\"\n  - name: OutputPEInfo\n    type: bool\n    description: \"Output full PE metadata information.\"\n\nsources:\n  - query: |\n      -- find all MFT entries in scope\n      LET mft_entries = SELECT *,OSPath,FileName,FileNames,EntryNumber,\n            LastModified0x10,LastAccess0x10, LastRecordChange0x10,Created0x10, --SI used in test\n            LastModified0x30,Created0x30, -- FN used in test\n            IsDir,InUse,SI_Lt_FN,USecZeros,\n            parse_pe(file=OSPath) as PE,\n            magic(path=OSPath) as Magic\n        FROM Artifact.Windows.NTFS.MFT(MFTDrive=MFTDrive,PathRegex=PathRegex,FileRegex=FileRegex)\n        --WHERE NOT IsDir\n      \n      -- if MZ files collect shimcache to compare modification time\n      LET shimcache \u003c= SELECT * \n        FROM if(condition= ShimcacheTest,\n            then= { SELECT Name, ModificationTime FROM Artifact.Windows.Registry.AppCompatCache() })\n      LET shimcache_mtime(target) = SELECT Name, ModificationTime FROM shimcache \n        WHERE Name = target \n        ORDER BY ModificationTime\n      \n      LET i30 \u003c= SELECT * FROM if(condition= I30Test,\n            then= { \n                SELECT * FROM foreach(\n                    row={ \n                        SELECT dirname(path=OSPath) as Directory FROM mft_entries\n                        GROUP BY Directory\n                    },\n                    query={\n                        SELECT\n                            split(sep_string='\\\\\\\\.\\\\',string=FullPath)[1] + '\\\\' + Name as FullPath,\n                            IsSlack,MFTId,Mtime,Atime,Ctime,Btime\n                        FROM Artifact.Windows.NTFS.I30(DirectoryGlobs=Directory,preconditions=True)\n                        WHERE MFTId OR FullPath\n                    })\n            })\n      LET find_i30_slack(inode,folder,filenames,mtime,ctime,slackcheck) = SELECT * FROM i30 \n        WHERE MFTId = str(str=inode) OR ( split(sep_string='''\\\\.\\''',string=FullPath)[1] = folder AND Name in filenames) \n            AND if(condition= slackcheck,\n                then= ( Mtime \u003e mtime OR Btime \u003e btime ) AND IsSlack,\n                else= True )\n                \n      LET base_results = SELECT \n            OSPath,\n            dict(Created0x10=Created0x10,Created0x30=Created0x30) as CreatedTimestamps,\n            InUse,\n            SI_Lt_FN as `SI\u003cFN`,USecZeros,\n            if(condition=PE.FileHeader.TimeDateStamp,\n                then= if(condition= LastModified0x10 \u003c PE.FileHeader.TimeDateStamp OR LastAccess0x10 \u003c PE.FileHeader.TimeDateStamp OR LastRecordChange0x10 \u003c PE.FileHeader.TimeDateStamp OR Created0x10 \u003c PE.FileHeader.TimeDateStamp,\n                        then= True,\n                        else= False),\n                else= 'N/A') as SuspiciousCompileTime,\n            parse_ntfs(mft=EntryNumber, device=MFTDrive ) as NtfsMetadata,\n            Magic,\n            if(condition=PE, then=PE,else='N/A') as PE,\n            Created0x10,LastModified0x10,FileNames,EntryNumber,\n            if(condition= Magic=~'^PE' AND NOT Magic =~ '\\(DLL\\)',\n                then= if(condition= LastModified0x10 \u003c shimcache_mtime(target=str(str=OSPath))[0].ModificationTime,\n                    then= True,\n                    else= False),\n                else= 'N/A') as SuspiciousShimcache,\n            if(condition= Magic=~'^PE' AND NOT Magic =~ '\\(DLL\\)',\n                then= shimcache_mtime(target=str(str=OSPath))[0],\n                else= 'N/A') as Shimcache,\n            if(condition = find_i30_slack(inode=EntryNumber,folder=dirname(path=OSPath),filenames=FileNames,mtime=LastModified0x10,ctime=Created0x10,slackcheck=True),\n                then= True,\n                else= False ) as SuspiciousI30,\n            find_i30_slack(inode=EntryNumber,folder=dirname(path=OSPath),filenames=FileNames,mtime=LastModified0x10,ctime=Created0x10,slackcheck=False) as I30\n      FROM mft_entries\n      \n      LET results = SELECT * FROM if(condition= ShimcacheTest AND I30Test AND OutputPEInfo,\n            then={\n                SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousShimcache,\n                    SuspiciousI30,\n                    NtfsMetadata,\n                    Magic,\n                    Shimcache,\n                    I30,\n                    PE\n                FROM base_results\n            },\n            else= if(condition= ShimcacheTest AND I30Test,\n                then={\n                SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousShimcache,\n                    SuspiciousI30,\n                    NtfsMetadata,\n                    Magic,\n                    Shimcache,\n                    I30\n                FROM base_results\n            },\n            else= if(condition= ShimcacheTest AND OutputPEInfo,\n                then={\n                    SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousShimcache,\n                    NtfsMetadata,\n                    Magic,\n                    Shimcache,\n                    PE\n                FROM base_results\n            },\n            else= if(condition= I30Test AND OutputPEInfo,\n                then={\n                    SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousI30,\n                    NtfsMetadata,\n                    Magic,\n                    I30,\n                    PE\n                FROM base_results\n            },\n            else= if(condition= ShimcacheTest,\n                then={\n                    SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousShimcache,\n                    NtfsMetadata,\n                    Magic,\n                    Shimcache\n                FROM base_results\n            },\n            else= if(condition= I30Test,\n                then={\n                    SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    SuspiciousI30,\n                    NtfsMetadata,\n                    Magic,\n                    I30\n                FROM base_results\n            },\n            else= if(condition= OutputPEInfo,\n                then={\n                    SELECT \n                    OSPath,CreatedTimestamps,InUse,\n                    `SI\u003cFN`,USecZeros,\n                    SuspiciousCompileTime,\n                    NtfsMetadata,\n                    Magic,\n                    PE\n                FROM base_results\n            },\n                else={\n                    SELECT \n                        OSPath,CreatedTimestamps,InUse,\n                        `SI\u003cFN`,USecZeros,\n                        SuspiciousCompileTime,\n                        NtfsMetadata,\n                        Magic\n                    FROM base_results\n            })\n            ))))))\n\n      LET upload_results = SELECT *, upload(file=OSPath) as Upload FROM results\n      \n      SELECT * FROM if(condition= UploadHits,\n        then= upload_results,\n        else= results)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Forensics.Trawler","op":"set","definition":"name: Exchange.Windows.Forensics.Trawler\ndescription: |\n  Trawler [https://github.com/joeavanzato/Trawler] is a PowerShell script designed to help Incident\n  Responders rapidly identify potential adversary persistence mechanisms on Windows.  It is similar\n  in nature to PersistenceSniper with additional targeted checks as well as the capability to operate\n  against a 'dead box' (mounted drive). The output is simplified compared to PersistenceSniper, providing\n  the user with the details needed to kick off an investigation into any identified mechanisms.\n  Think of these tools as autoruns on steroids.\n\n  Please ensure the Velociraptor binary (and child powershell process) are excluded in any EDR/AV products.\n\nauthor: Joe Avanzato\n\nparameters:\n  - name: UploadResults\n    type: bool\n    default: true\n\ntools:\n  - name: Trawler\n    url: https://github.com/joeavanzato/Trawler/releases/download/1_0_0/trawler_release_v1_0_0.zip\n    expected_hash: efade9e0e6d228c118c4c28de2e45c37ae2fa4973283d5f851e6c62c7b72f53b\n\ntype: Client\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n    - query: |\n       LET TmpDir \u003c= tempdir(remove_last='Y')\n\n       LET TrawlerZIP \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Trawler\", IsExecutable=FALSE)\n\n       LET _ \u003c= SELECT * FROM unzip(filename=TrawlerZIP.FullPath, output_directory=TmpDir)\n\n       LET TrawlerLocation = path_join(components=[TmpDir, 'trawler.ps1'], path_type='windows')\n\n       LET TrawlerOutput \u003c= path_join(components=[TmpDir + '\\\\detections.csv'], path_type='windows')\n       LET TrawlerOutputPath = '\"' + TrawlerOutput.Path + '\"'\n\n       LET cmdline \u003c= join(\n           array=[TrawlerLocation, '-outpath', TrawlerOutputPath],\n           sep=' ')\n\n       LET _ \u003c= SELECT *\n         FROM execve(\n           argv=[\"powershell\", \"-ExecutionPolicy\", \"bypass\", \"-command\", cmdline])\n\n       LET LocalUploadTrawlerRecords = SELECT *\n         FROM parse_csv(filename=TrawlerOutput)\n\n       LET UploadTrawlerRecords = SELECT *, upload(file=TrawlerOutput) AS Upload\n                         FROM LocalUploadTrawlerRecords\n\n       SELECT *\n       FROM if(\n         condition=UploadResults,\n         then=UploadTrawlerRecords,\n         else=LocalUploadTrawlerRecords)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Monitor.USBPlugIn","op":"set","definition":"name: Exchange.Windows.Monitor.USBPlugIn\ndescription: |\n  Monitor for plug in of USB volume.  Output drive letter for\n  additional enrichment artifacts\n\ntype: CLIENT_EVENT\n\nsources:\n  - query: |\n      SELECT\n            timestamp(winfiletime=int(int=Parse.TIME_CREATED)) as TimeCreated,\n            Parse.DriveName as DriveName,\n            Parse.EventType as EventType,\n            Parse.__Type as Source,\n            Raw\n        FROM wmi_events(\n            query=\"SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2\",\n            namespace=\"ROOT/CIMV2\",\n            wait=50000000)\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.USBYara","op":"set","definition":"name: Exchange.Windows.Detection.USBYara\nauthor: Matt Green - @mgreen27\ndescription: |\n  Run yara over usb when USB is plugged into machine.  Return context\n  and hit details.\n\n  This artifact requires:\n\n    * Windows.Monitor.USBPlugIn (imported from Exchange)\n    * Generic.Detection.Yara.Glob\n\n  Yara rule deployed and target path can be modified.\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: TargetGlob\n    default: '/**.lnk'\n  - name: PayloadYara\n    default: |\n            rule recyclebin_lnk{\n                meta:\n                    description = \"AvastSvcpCP lnkfile\"\n                    author = \"@mgreen27\"\n                    date = \"2021-11-18\"\n\n                strings:\n                    $s1 = \"AvastSvcpCP\" wide nocase\n                    $s2 = \"cefhelper.exe\" wide nocase\n                    $s3 = \"RECYCLER.BIN\" wide nocase\n                    $s4 = \"wsc.zip\" wide nocase\n                    $s6 = \"/q /c\" wide nocase\n                    $s8 = \"S-1-5-21-1063499884-3365855816-3691837489-1000\" wide nocase\n                    $s9 = \"Xayemarlwin-pc\" wide nocase\n\n               condition:\n                    int16(0) == 0x004c and any of them\n            }\n\nsources:\n  - query: |\n      SELECT * FROM foreach(\n            row={\n              SELECT DriveName,TimeCreated\n              FROM Artifact.Windows.Monitor.USBPlugIn()\n            }, query={\n                SELECT\n                    TimeCreated as EventTime,\n                    { SELECT Fqdn from info() } as Hostname,\n                    FullPath,Size,\n                    dict(Mtime=Mtime,Atime=Atime,Ctime=Ctime,Btime=Btime) as SITimestamps,\n                    Rule,Meta,\n                    HitContext,HitOffset,\n                    {\n                        SELECT Name, FileSystem,Description,FreeSpace,Size,VolumeSerialNumber,VolumeName\n                        FROM wmi(query='SELECT * FROM Win32_logicaldisk WHERE DeviceID = \"' + DriveName + '\"',namespace='ROOT/CIMV2')\n                    } as DiskInfo\n                FROM Artifact.Generic.Detection.Yara.Glob(PathGlob=DriveName + TargetGlob,YaraRule=PayloadYara)\n            })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.UnattendXML","op":"set","definition":"name: Exchange.Windows.Detection.UnattendXML\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact will find unscrubbed passwords in unattend.xml answer files. This \n   file is used for non interactive Windows installation.\n\nreference:\n   - https://twitter.com/malmoeb/status/1561443455095771136\n   - https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs?view=windows-11\n\nparameters:\n   - name: TargetFileName\n     default: ^(unattend\\.xml|autounattend\\.xml|sysprep\\.xml)$\n     type: regex\n     description: File names to target for unattend xml files.\n   - name: ExcludeString\n     default: ^\\*SENSITIVE\\*DATA\\*DELETED\\*$\n     description: regex to exclude\n   - name: UploadHits\n     description: select to upload file\n     type: bool\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' \n\n    query: |\n      LET targets = SELECT OSPath,FileName,LastModified0x10,Created0x10 FROM Artifact.Windows.NTFS.MFT(FileRegex=TargetFileName)\n\n      LET hits = SELECT * FROM foreach(row=targets,\n        query={\n          SELECT \n            Type,Value,OSPath,\n            LastModified0x10 as ModificationTime,\n            Created0x10 as CreationTime,\n            parse_xml(file=OSPath).unattend as Xml\n          FROM  parse_records_with_regex(file=OSPath,regex='\\\\\u003c(?P\u003cType\u003e.*Password.*)\\\\\u003e(?P\u003cValue\u003e[^\u003c]+)\\\\\u003c/.*Password.*\\\\\u003e')\n          WHERE NOT Value =~ ExcludeString      \n        })\n\n      LET upload_hits = SELECT *, upload(file=OSPath) as Upload FROM hits\n        \n      SELECT * FROM if(condition=UploadHits,\n        then= upload_hits,\n        else= hits )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Linux.Volatility.Create.Profile","op":"set","definition":"name: Exchange.Linux.Volatility.Create.Profile\nauthor: URCA (Corentin Garcia / Emmanuel Mesnard)\ndescription: |\n  This artifact is used to create the profile to the environnements Debian / Ubuntu.\n\n\nrequired_permissions:\n  - EXECVE\n\ntools:\n  - name: Volatility\n    url: https://github.com/volatilityfoundation/volatility/archive/master.zip\n\nparameters:\n    - name: Zipname\n      type: string\n      default: Ubuntu\n      \nprecondition: SELECT OS From info() where OS = 'linux'\n\nsources:\n  - queries:\n    - LET dirtmp = tempdir(remove_last=true)\n    \n      LET vola = SELECT * FROM execve(argv=['bash', '-c', 'mv /tmp/master.zip /tmp/volatility-master.zip ; cd /tmp/ ; apt install -y dwarfdump zip unzip ; unzip -o /tmp/volatility-master.zip -d /tmp/  ; cd /tmp/volatility-master/tools/linux/ ; make clean ; make ; zip /tmp/' + Zipname + '.zip /tmp/volatility-master/tools/linux/module.dwarf /boot/System.map-$(uname -r)'])\n    \n      SELECT * FROM foreach(\n          row={\n            SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Volatility\")\n          },\n          query={\n            SELECT * FROM chain(\n                a={SELECT *, if(condition=Complete, then=upload(file=\"/tmp/\" + Zipname + \".zip\", name=Zipname + \".zip\")) As Upload FROM vola},\n                b={SELECT * FROM execve(argv=['bash', '-c', 'mv /tmp/volatility-master /tmp/volatility-master.zip /tmp/' + Zipname + '.zip ' + dirtmp])})\n          })\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Persistence.VscodeTasks","op":"set","definition":"name: Exchange.Windows.Persistence.VscodeTasks\nauthor: Matt Green - @mgreen27\ndescription: |\n   This artifact parses VSCode configuration files to find potenital \n   persistence.\n   \n   Terminal Profiles via settings.json  \n   Visual Studio tasks via tasks.json  \n\n   The artifact has configurable options to Include all tasks and settings for \n   visibility. \n   \n   NOTE: experimental - additional research may include Visual Studio Code Extensions\n   \nreference:\n    - https://twitter.com/nas_bench/status/1618021415852335105\n    - https://twitter.com/nas_bench/status/1618021838407495681\n\n\ntype: CLIENT\n\nparameters:\n   - name: IncludeAllTasks\n     type: bool\n   - name: IncludeAllSettings\n     type: bool\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT\n            OSPath,\t\n            FileSize,\n            FileName,\t\n            parse_json(data=regex_replace(source=read_file(filename=OSPath) , re='''//.+\\n''', replace='')) As Parsed,\n            dict(\n                Created0x10=Created0x10,\t\n                Created0x30=Created0x30,\n                LastModified0x10=LastModified0x10,\n                LastModified0x30=LastModified0x30,\n                LastRecordChange0x10=LastRecordChange0x10,\n                LastRecordChange0x30=LastRecordChange0x30,\n                LastAccess0x10=LastAccess0x10,\n                LastAccess0x30=LastAccess0x30\n            ) as Timestamps\n          FROM Artifact.Windows.NTFS.MFT(FileRegex='^(settings|tasks)\\.json$',PathRegex='vscode')\n          WHERE\n            if(condition=IncludeAllTasks,\n                then= FileName='tasks.json',\n                else= Parsed.settings.`task.allowAutomaticTasks` = 'on' )\n            OR if(condition=IncludeAllSettings,\n                then= FileName='settings.json',\n                else= Parsed.settings.`terminal.integrated.defaultprofile.windows` )\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.ETW.WMIEventing","op":"set","definition":"name: Exchange.Windows.ETW.WMIEventing\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact collects events associated with creation and deletion of WMI \n    Event Consumers. All Event Consumers created under any namespace will \n    generate events which are filtered on event consumer classes.  \n    \n    It uses the ETW provider:\n    Microsoft-Windows-WMI-Activity {1418ef04-b0b4-4623-bf7e-d74ab47bbdaa}  \n    Note: This provider events have support on Windows 10+\n\ntype: CLIENT_EVENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n      \n    query: |\n      LET RecentProcesses = SELECT * FROM fifo(query={\n                SELECT System.TimeStamp AS CreateTime, \n                    EventData.ImageName AS ImageName,\n                    int(int=EventData.ProcessID) AS Pid,\n                    EventData.MandatoryLabel AS MandatoryLabel,\n                    EventData.ProcessTokenElevationType AS ProcessTokenElevationType,\n                    EventData.ProcessTokenIsElevated AS TokenIsElevated\n                FROM watch_etw(guid=\"{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}\", any=0x10)\n                WHERE System.ID = 1   \n            }, max_rows=1000, max_age=60)\n        \n      -- Query it once to materialize the FIFO\n      LET _ \u003c= SELECT * FROM RecentProcesses\n        \n      LET GetProcessInfo(TargetPid) = SELECT * FROM switch(\n            -- First try to get the pid directly\n            a={\n                SELECT \n                    Name, Pid, CreateTime,\n                    Exe as ImageName,\n                    CommandLine,\n                    Username,\n                    TokenIsElevated\n                FROM pslist(pid=TargetPid)\n            },\n            -- Failing this look in the FIFO for a recently started process.\n            b={\n                SELECT\n                    basename(path=ImageName) as Name,\n                    Pid,\n                    CreateTime,\n                    ImageName,\n                    Null as CommandLine,\n                    Null as Username,\n                    if(condition= TokenIsElevated=\"0\", \n                        then= false, \n                        else= true ) as TokenIsElevated\n                FROM RecentProcesses\n                WHERE Pid = TargetPid\n                LIMIT 1\n            })\n            \n      -- watch ETW provider and first round data manipulation\n      SELECT\n            System.TimeStamp AS EventTime,\n            System.ID as EventId,\n            strip(prefix='\\\\\\\\\\.\\\\',string=EventData.NamespaceName) as NamespaceName,\n            EventData.Operation as Operation,\n            GetProcessInfo(TargetPid=int(int=EventData.ClientProcessId))[0] as Process,\n            EventData.IsLocal as IsLocal,\n            EventData.ClientMachine as ClientMachine,\n            EventData.ClientMachineFQDN as ClientMachineFQDN,\n            EventData.User as User,\n            EventData.CorrelationId as CorrelationId,\n            EventData.OperationId as OperationId,\n            EventData.GroupOperationId as GroupOperationId\n        FROM watch_etw(guid=\"{1418ef04-b0b4-4623-bf7e-d74ab47bbdaa}\")\n        WHERE EventId = 11\n            AND Operation =~ 'WbemServices::(PutInstance|DeleteInstance|PutClass|DeleteClass)'\n            AND Operation =~ 'EventConsumer|EventFilter|FilterToConsumerBinding'\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Detection.WS_FTP","op":"set","definition":"\nname: Exchange.Windows.Detection.WS_FTP\nauthor: Matt Green - @mgreen27\ndescription: | \n   This is an artifact to detect exploitation of a Progress Software's WS_FTP \n   critical vulnerability observed in the wild.\n   \n   CVE-2023–40044 is a severe .NET deserialization vulnerability in WS_FTP \n   Server’s Ad Hoc Transfer module, allowing a pre-authenticated attacker to \n   execute remote commands on the server’s operating system.   \n   \n   CVE-2023–42657 is a directory traversal vulnerability, enabling attackers to \n   perform file operations outside their authorized WS_FTP folder path and \n   operate on the underlying OS.   \n   \n   Both vulnerabilities are critical, with CVSS scores of 8.8 and 9.9 \n   respectively, and affect versions prior to 8.7.4 and 8.8.2​.\n   \n   The artifact enables detection via:\n   \n   - Yara: IIS logs\n   - Evtx: Application Event Logs IIS exception   \n   \n   Both methods target observed IPs and the string /AHT/AhtApiService.asmx which \n   is part of the vulnerable module.\n   Note: no direct evidence of exploitation observed in application logs, only \n   exceptions that otherwise seem rare around the time of exploitation.\n   \n   \n   Last updated: 2023-10-01T13:15Z\n   \nreference:\n  - https://www.rapid7.com/blog/post/2023/09/29/etr-critical-vulnerabilities-in-ws_ftp-server/\n\ntype: CLIENT\nresources:\n  timeout: 1800\n\nparameters:\n  - name: EvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx'\n  - name: IocRegex\n    type: regex\n    description: \"IOC Regex in evtxHunt\"\n    default: '/AHT/|86\\.48\\.3\\.172'\n  - name: DateAfter\n    type: timestamp\n    default: 1685232000\n    description: \"Search for events or Modification time after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"Search for events or Modification time after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: AllDrives\n    type: bool\n    description: \"By default we target yara at all drives\"\n    default: Y\n  - name: DriveLetter\n    description: \"Target yara drive. Default is a C: if not AllDrives\"\n    default: \"C:\"\n  - name: LogYara\n    default: |\n        rule LOG_ws_ftp_exploit {\n          meta:\n            description = \"Detects potential exploitation of Progress Software WS_FTP Server in IIS logs\"\n            author = \"Matt Green - @mgreen27\"\n            reference = \"https://www.rapid7.com/blog/post/2023/09/29/etr-critical-vulnerabilities-in-ws_ftp-server/\"\n            date = \"2023-10-01\"\n            score = 80\n      \n         strings:\n           $post = /\\n.{1,50} POST \\/AHT\\/.{1,250}\\n/\n           $ip = \" 86.48.3.172 \" ascii\n      \n          condition:\n            any of them\n        }\n  - name: NumberOfHits\n    description: This artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int64\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int\n  - name: UploadYaraHits\n    type: bool\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n    \n    name: Yara\n    query: |\n      -- check which Yara to use\n      LET yara_rules \u003c= LogYara\n\n      -- first find all matching files mft\n      LET files = SELECT OSPath, IsDir\n        FROM Artifact.Windows.NTFS.MFT(MFTDrive=DriveLetter, AllDrives=AllDrives,\n            FileRegex='^u_.+\\.log$',\n            PathRegex='inetpub' )\n        WHERE NOT IsDir\n            AND NOT OSPath =~ '''.:\\\\\u003cErr\u003e\\\\'''\n            AND (FileName=~ '^u_.+\\.log$' AND OSPath =~ 'inetpub' )\n            AND if(condition=DateAfter,\n                then= LastRecordChange0x10 \u003e DateAfter,\n                else= True)\n            AND if(condition=DateBefore,\n                then= LastRecordChange0x10 \u003c DateBefore,\n                else= True)\n\n      -- scan files and only report a single hit.\n      LET hits = SELECT * FROM foreach(row=files,\n            query={\n                SELECT\n                    FileName, OSPath,\n                    File.Size AS Size,\n                    File.ModTime AS ModTime,\n                    Rule, Tags, Meta,\n                    String.Name as YaraString,\n                    String.Offset as HitOffset,\n                    upload( accessor='scope', \n                            file='String.Data', \n                            name=format(format=\"%v-%v-%v\", \n                            args=[\n                                OSPath,\n                                if(condition= String.Offset - ContextBytes \u003c 0,\n                                    then= 0,\n                                    else= String.Offset - ContextBytes),\n                                if(condition= String.Offset + ContextBytes \u003e File.Size,\n                                    then= File.Size,\n                                    else= String.Offset + ContextBytes) ]\n                            )) as HitContext\n                FROM yara(rules=yara_rules, files=OSPath, context=ContextBytes,number=NumberOfHits)\n            })\n\n      -- upload files that have hit\n      LET upload_hits=SELECT *,\n            upload(file=OSPath) AS Upload\n        FROM hits\n        GROUP BY OSPath\n\n      -- return rows\n      SELECT * FROM if(condition=UploadYaraHits,\n        then={ SELECT * FROM upload_hits},\n        else={ SELECT * FROM hits})\n\n\n  - name: Evtx\n    query: |\n      SELECT EventTime,Computer,Channel,Provider,EventID,EventRecordID,\n        EventData,\n        OSPath\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n                        EvtxGlob=EvtxGlob,\n                        IocRegex=IocRegex,\n                        IdRegex='^1309$',\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore )\n      \ncolumn_types:\n  - name: HitContext\n    type: preview_upload\n  - name: ModTime\n    type: timestamp\n  - name: EventTime\n    type: timestamp\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Analysis.Capa","op":"set","definition":"name: Exchange.Windows.Analysis.Capa\ndescription: |\n   Analyze PE, ELF, or shellcode files with capa.\n\n   \"capa detects capabilities in executable files. You run it against\n   a PE, ELF, or shellcode file and it tells you what it thinks the\n   program can do. For example, it might suggest that the file is a\n   backdoor, is capable of installing services, or relies on HTTP to\n   communicate.\"\n\n   https://github.com/fireeye/capa\n\ntype: CLIENT\nauthor: Wes Lambert - @therealwlambert\ntools:\n  - name: CapaWindows\n    url: https://github.com/mandiant/capa/releases/download/v6.1.0/capa-v6.1.0-windows.zip\n    expected_hash: 070923d5ca225ef29a670af9cc66a8d648fcaaff7e283cb1ddc73de6e3610f0f\n    serve_locally: true\nparameters:\n   - name: File\nsources:\n   - query: |\n        LET Capa \u003c= SELECT OSPath FROM Artifact.Generic.Utils.FetchBinary(\n              ToolName=\"CapaWindows\")\n        LET CapaPath \u003c= tempfile(extension=\".exe\")\n        LET UnzipIt \u003c= SELECT\n            copy(filename=pathspec(DelegateAccessor='file',\n                DelegatePath=Capa[0].OSPath, Path='capa.exe'),\n                dest=CapaPath,\n                accessor='zip')\n        FROM scope()\n        Let ExecCapa \u003c= SELECT * FROM execve(argv=[\n            CapaPath,\n            '-j',\n            File\n        ], length=10000000)\n        LET Data = SELECT * FROM foreach (row={\n            SELECT parse_json(data=Stdout)\n            AS Data\n            FROM ExecCapa}, query={\n                SELECT rules FROM Data})\n        SELECT * FROM foreach(row=items(item=Data.rules[0]), query={\n            SELECT _key AS Rule,\n                _value.matches AS Matches,\n                get(member=\"_value.meta.namespace\") AS Namespace,\n                get(member=\"_value.meta.scope\") AS _Scope,\n                get(member=\"_value.meta.att\u0026ck.0.tactic\") AS Tactic,\n                get(member=\"_value.meta.att\u0026ck.0.technique\") + \" - \" + get(member=\"_value.meta.att\u0026ck.0.id\")  AS Technique,\n                get(member=\"_value.meta.author\") AS _Author,\n                get(member=\"_value.meta\") AS _Meta\n            FROM scope()})\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Applications.AnyDesk.LogParser","op":"set","definition":"name: Exchange.Windows.Applications.AnyDesk.LogParser\ndescription: |\n   Parses the AnyDesk ad.trace log file.\n\n   Info such as connection times, clipboard activity, and remote host information are captured.\n\nauthor: Rob Homewood, angry-bender and Yogesh Khatri (@swiftforensics)\n\ntype: CLIENT\nparameters:\n    - name: FileGlob\n      default: C:\\Users\\*\\AppData\\Roaming\\Anydesk\\ad.trace\n\nsources:\n    - query: |\n\n        -- Grabs file path of provided file glob\n        LET InputLogPath \u003c= SELECT FullPath \n        FROM glob(globs=FileGlob)\n\n        -- Parses file against regex\n        LET parse_log \u003c= SELECT\n            parse_string_with_regex(\n                string=Line,\n                regex= ['''\\s+(?P\u003cInfo\u003e(info)\\s+)''', \n                       '''(?P\u003cDate\u003e\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})''',\n                       '''(\\d{4,}.*?)(?P\u003cPPID\u003e\\b\\d{4,5}\\b)''',\n                       '''\\b\\b\\d{4,5}.*(?P\u003cPID\u003e\\b\\b\\d{4,5}\\b)''',\n                       '''(?P\u003cMessage\u003e(anynet.relay_conn|anynet.any_socket|app.local_file_transfer|app.prepare_task|app.local_file_transfer|app.ctrl_clip_comp|app.backend_session|app.ft_src_session|app.ctrl_clip_comp)\\s-\\s\\w.*)'''])\n                       as Record\n                       FROM parse_lines(filename=InputLogPath.FullPath)\n                    \n        -- Prints matching data where there is an entry in Record.Message                    \n        SELECT Record.Date as Date, Record.PPID as PPID, Record.PID as PID, Record.Message as Message,\n        -- Extracts IP address from Message field and adds to its own column\n        if(condition=Record.Message=~\"External\", then=parse_string_with_regex(string=Record.Message, regex=\"((?:[0-9]{1,3}[\\\\.]){3}[0-9]{1,3})\")).g1 AS ExternalIPAddress,\n        -- Extracts remote IP address from Message field and adds to its own column\n        if(condition=Record.Message=~\"Logged in from \", then=parse_string_with_regex(string=Record.Message, regex=\"((?:[0-9]{1,3}[\\\\.]){3}[0-9]{1,3})\")).g1 AS RemoteIP\n        FROM parse_log \n        WHERE Record.Message\n","id":78560752944729352,"_ts":1757377137}
{"setter":"api","artifact":"Exchange.Windows.Applications.AnyDesk","op":"set","definition":"name: Exchange.Windows.Applications.AnyDesk\ndescription: |\n   This parses AnyDesk logs to retrieve information about AnyDesk usage. It includes source IP addresses, AnyDesk ID's, and filetransfers.\n\n   Parts of below code was used from Matt Green - @mgreen27\n\nauthor: Jos Clephas - @DfirJos\n\nreference:\n  - https://attack.mitre.org/techniques/T1219/\n\n\ntype: CLIENT\nparameters:\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n  - name: SearchVSS\n    description: \"Add VSS into query.\"\n    type: bool\n  - name: MessageRegex\n    description: \"Keyword search using regex, for example: IP address, AnyDesk ID's\"\n    default: .\n  - name: SearchFilesGlobTable\n    type: csv\n    default: |\n      Glob\n      C:\\Users\\*\\AppData\\Roaming\\AnyDesk\\ad_*\\ad*.trace\n      C:\\Users\\*\\AppData\\Roaming\\AnyDesk\\ad*.trace\n      C:\\ProgramData\\AnyDesk\\ad*.trace\n  - name: OutputAll\n    type: bool\n    description: \"By default it only shows events concerning IP addresses, AnyDeskID's and source hostnames. By selecting this it outputs all events.\"\n    default: FALSE\n\nsources:\n  - query: |\n      -- Build time bounds\n      LET DateAfterTime \u003c= if(condition=DateAfter,\n        then=DateAfter, else=\"1600-01-01\")\n      LET DateBeforeTime \u003c= if(condition=DateBefore,\n        then=DateBefore, else=\"2200-01-01\")\n\n      LET fspaths \u003c= SELECT OSPath FROM glob(globs=SearchFilesGlobTable.Glob)\n\n      -- function returning list of VSS paths corresponding to path\n      LET vsspaths(path) = SELECT OSPath\n        FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)\n\n      LET parse_log(OSPath) = SELECT parse_string_with_regex(\n            string=Line,\n            regex=\"^[\\\\s\\\\w]+?\" + \n              \"(?P\u003cTimestamp\u003e[\\\\d]{4}-[\\\\d]{2}-[\\\\d]{2}\\\\s[\\\\d]{2}:[\\\\d]{2}:[\\\\d]{2}.[\\\\d]{3})\" +\n              \"\\\\s+\\\\w+\\\\s+\" +\n              \"(?P\u003cPPID\u003e\\\\d+)\\\\s+\" +\n              \"(?P\u003cPID\u003e\\\\d+)[\\\\s\\\\w]+\" +\n              \"(?P\u003cType\u003e.+)[ ][-][ ]\" +\n              \"(?P\u003cMessage\u003e\" +\n                \"(Incoming session request: (?P\u003cComputerName\u003e.+)[ ][(](?P\u003cAnyDeskID\u003e\\\\d+).)?\" +\n                \"(Logged in from (?P\u003cLoggedInFromIP\u003e[\\\\d.]+):(?P\u003cPort\u003e\\\\d+))?\" +\n                \"(?P\u003cSessionStopped\u003eSession stopped)?\" +\n                \"(Preparing files in ['](?P\u003cPotentialFileTransfer\u003e.+)['].+)?\" +\n                \"(External address: (?P\u003cExternalAddress\u003e[\\\\d.]+):)?\" + \n                \".+$)\"\n              ) as Record,OSPath\n        FROM parse_lines(filename=OSPath) \n\n      -- function returning IOC hits\n      LET logsearch(PathList) = SELECT * FROM foreach(\n            row=PathList,\n            query={\n               SELECT *,timestamp(epoch=Record.Timestamp,format=\"2006-01-02 15:04:05\") AS Timestamp\n               FROM parse_log(OSPath=OSPath)\n               WHERE Timestamp \u003c DateBeforeTime AND\n                     Timestamp \u003e DateAfterTime AND \n                     Record.Message =~ MessageRegex AND \n                     if(condition=OutputAll, then=TRUE, else= Record.ComputerName OR\n                                                            Record.LoggedInFromIP OR\n                                                            Record.PotentialFileTransfer OR\n                                                            Record.SessionStopped OR\n                                                            Record.AnyDeskID OR\n                                                            Record.ExternalAddress)     \n               }) \n\n      -- include VSS in calculation and deduplicate with GROUP BY by file\n      LET include_vss = SELECT * FROM foreach(row=fspaths,\n            query={\n                SELECT *\n                FROM logsearch(PathList={\n                        SELECT OSPath FROM vsspaths(path=OSPath)\n                    })\n                GROUP BY Record\n              })\n\n      -- exclude VSS in logsearch`\n      LET exclude_vss = SELECT * FROM logsearch(PathList={SELECT OSPath FROM fspaths})\n\n      -- return rows\n      SELECT Timestamp,\n             Record.Message as Message,\n             Record.ComputerName as ComputerName,\n             Record.LoggedInFromIP as LoggedInFromIP,\n             Record.PotentialFileTransfer as PotentialFileTransfer,\n             Record.AnyDeskID as AnyDeskID,\n             Record.ExternalAddress as ExternalAddress,\n             OSPath\n      FROM if(condition=SearchVSS,\n            then=include_vss,\n            else=exclude_vss)\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Applications.DefenderHistory","op":"set","definition":"name: Exchange.Windows.Applications.DefenderHistory\nauthor: \"Roman Makuch - @rmakuch Kanstantsin Ilioukevitch - @kostyailiouk\"\ndescription:  |\n    This artifact parses the Windows Defender files generated on threat detection and returns\n    the contained parameters created by Windows Defender about the detected threat. \n\n    By default with no parameters DefenderHistory parses \n    \"C:/ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory/**\"\n    A different TargetGlob can be entered.\n\n    Based on the research work done by Jordan Klepser @JordanKlepser\n    https://github.com/jklepsercyber/defender-detectionhistory-parser \n\nreference:\n  - https://github.com/jklepsercyber/defender-detectionhistory-parser\n\nparameters: \n  - name: TargetGlob\n    description: Glob to target.\n    default: C:/ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory/**\n\nsources:\n  - query: |\n        Let profile = '''\n          [\n            [\"Info\", 0, [\n                [\"__FileHeaderSearch\", 0, \"String\", {\"length\": 6, \"term\":\"\"}],\n                [\"__FileHeader\", 0, \"Value\", {\"value\":\"x=\u003eformat(format='%#x', args=x.__FileHeaderSearch)\"}],\n                [\"__GUID\", 24, \"GUIDStruct\"],\n                [\"__MagicVersion\", 48, \"String\", {\"length\": 38, \"encoding\":\"utf16\"}],\n                [\"__ThreatTypeLength\", 88, \"uint8\"],\n                [\"ThreatType\", 96, \"String\", {\"length\":\"x=\u003e x.__ThreatTypeLength - 2\", \"encoding\":\"utf16\"}],\n                [\"ThreatStatusID\", 240, \"Enumeration\", {\n                    type: \"uint8\",\n                    map: {\n                         \"Unknown\": 0,\n                         \"Detected\": 1,\n                         \"Cleaned\": 2,\n                         \"Quarantined\": 3,\n                         \"Removed\": 4,\n                         \"Allowed\": 5,\n                         \"Blocked\": 6,\n                         \"Clean Failed\": 7,\n                         \"Quarantine Failed\": 102,\n                         \"Remove Failed\": 103,\n                         \"Allow Failed\": 104,\n                         \"Abandoned\": 105,\n                         \"Blocked Failed\": 107,\n                     }}],\n                [\"__Search\", 241, \"String\", {\"length\": 1024, \"term_hex\":\"0A00000015\"}],\n                [\"SourceType\", \"x =\u003e len(list=x.__Search) + 249\", \"String\", {\"encoding\": \"utf16\"}],\n                [\"__FullPathLength\", \"x =\u003e len(list=x.__Search) + 265\", \"uint8\"],\n                [\"FullPath\", \"x =\u003e len(list=x.__Search) + 273\", \"String\", {\"length\":\"x=\u003e x.__FullPathLength - 2\", \"encoding\":\"utf16\"}],\n                [\"__Sha256Search\", 300, \"String\", {\"length\": 1024, \"term_hex\":\"53006800610032\"}],\n                [\"Sha256\", \"x =\u003e len(list=x.__Sha256Search) + 322\", \"String\", {\"length\": 128, \"encoding\":\"utf16\"}],\n                [\"__TimeSearch\", 300, \"String\", {\"length\": 1024, \"term_hex\":\"540069006D0065\"}],\n                [\"Time\", \"x =\u003e len(list=x.__TimeSearch) + 314\", \"WinFileTime\"],\n                [\"__FileSizeSearch\", 300, \"String\", {\"length\": 4000, \"max_length\": 4000, \"term_hex\":\"530069007A0065\"}],\n                [\"ThreatFileSize\", \"x =\u003e len(list=x.__FileSizeSearch) +  314\", \"uint32\"],\n                [\"__UserSearch\", \"x=\u003e if(condition=Size \u003e 1024, then=(Size - 1024), else=0)\", \"String\", {\"length\": 1024, \"term_hex\":\"0000080000000A0000\"}],\n                [\"__Section3Offset\", 0, \"Value\", {\"value\": \"x =\u003e if(condition=Size \u003e 1024, then=len(list=x.__UserSearch) + (Size - 1024), else=len(list=x.__UserSearch)) + 114\" }],\n                [\"User\", \"x =\u003e x.__Section3Offset\", \"String\", {\"encoding\": \"utf16\"}],\n                [\"__SearchStartingProcess\", \"x=\u003e x.__Section3Offset + len(list=x.User)\", \"String\", {\"length\": 1024, \"term_hex\": \"0000150000\"}],\n                [\"StartingProcess\", \"x=\u003e x.__Section3Offset + len(list=x.User) + len(list=x.__SearchStartingProcess) + 6\", \"String\", {\"encoding\": \"utf16\"}]\n            ]],\n            [\"GUIDStruct\", 16, [\n              [\"__D1\", 0, \"uint32\"],\n              [\"__D2\", 4, \"uint16\"],\n              [\"__D3\", 6, \"uint16\"],\n              [\"__D4\", 8, \"String\", {\"term\": \"\", \"length\": 2}],\n              [\"__D5\", 10, \"String\", {\"term\": \"\", \"length\": 6}],\n              [\"DetectionID\", 0, \"Value\", {\"value\": \"x=\u003eformat(format='{%x-%x-%x-%x-%x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])\"}]\n             ]],\n          ]\n          '''\n    \n            Let temp = SELECT FullPath, \n                  Size,    \n                  parse_binary(filename=FullPath, profile = profile, struct = 'Info') as parsedfile \n            FROM glob(globs = TargetGlob)\n            Where IsDir = False\n            \n            SELECT  parsedfile.Time as EventTime,\n                    parsedfile.ThreatType as ThreatType,\n                    parsedfile.ThreatStatusID as ThreatStatus,\n                    parsedfile.FullPath as FullPath,\n                    parsedfile.Sha256 as Sha256,\n                    parsedfile.SourceType as SourceType,\n                    parsedfile.ThreatFileSize as FileSizeBytes,\n                    parsedfile.User as User,\n                    parsedfile.StartingProcess as StartingProcess,\n                    FullPath as ParsedFileFullPath\n            FROM temp\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Applications.FreeFileSync","op":"set","definition":"name: Exchange.Windows.Applications.FreeFileSync\nauthor: Nathanaël Ndong, Synacktiv\ndescription: |\n   This artefact can be used to retrieve and parse some FreeFileSync file in order to:\n   - Identify the latest account used to transfer data and the remote ip adresse destination in the case of SFTP protocol with the qeury GlobalInfo\n   - Identify the latest transfered files with Latest Data Transfer\n   - Identify the presence of others interesting logs about previous or attempt of files transfer\n\n   In the case of logs files, only the html version has been parsed\n   \n   These query were made in the context of the use of legitimate data transfer tools by an attacker.\n   You can read more about it on https://www.synacktiv.com/publications/legitimate-exfiltration-tools-summary-and-detection-for-incident-response-and-threat\n\ntype: CLIENT\n\nparameters:\n   - name: FreeFileInfoGlob\n     default: \\AppData\\Roaming\\FreeFileSync\\\n     description: Use to retreive lastest global information including userID and remote destination for SFTP from GlobalSettings.xml file\n\n   - name: userRegex\n     default: .\n     type: regex \n     \n   - name: SearchFreeFileSyncLogs\n     default: C:\\Users\\*\\AppData\\Roaming\\FreeFileSync\\Logs\\*\n     description:  Use a glob to define the files that will be searched\n\n   - name: FreeFileSyncGlob\n     default: C:\\Users\\*\\AppData\\Roaming\\FreeFileSync\\Logs\\*Last*.html\n     description: Use to retreive and parse lastest html log file\n    \nsources:\n    - name: GlobalInfo\n      query: |\n        \n        LET GlobalSettings_xml = SELECT * FROM foreach(\n            row={\n                SELECT Uid, Name As User,\n                    expand (path=Directory) AS HomeDirectory\n                FROM Artifact.Windows.Sys.Users()\n                WHERE Name=~userRegex\n            },\n            query={\n                SELECT User, OSPath,\n                    parse_xml(file=OSPath).FreeFileSync.MainDialog.FilePanel.FolderHistoryRight AS Protocol,\n                    parse_xml(file=OSPath).FreeFileSync.LastOnlineCheck AS Online,\n                    Mtime\n                FROM glob(globs=FreeFileInfoGlob + 'GlobalSettings.xml', root=HomeDirectory)\n            })\n        \n        LET Value = SELECT * FROM foreach(\n            row=GlobalSettings_xml,\n            query={\n                SELECT *, OSPath AS SourceFilePath\n                FROM foreach(row=Protocol, query={\n                    SELECT * FROM _value\n                })\n            })\n        \n        SELECT Item AS Last_Session_GlobalInfo FROM Value\n\n    - name: Latest Data Transfer\n      query: |\n        LET InputLogPath = SELECT OSPath FROM glob(globs=FreeFileSyncGlob)\n        \n        LET extract_file(message)= parse_string_with_regex(string=message,\n            regex=\n                '''\u003c.+?\u003e(?P\u003cCopy\u003e.+?\\s.+?)\\s''' +\n                '''\u0026quot;'''+\n                '''\u003c*(?P\u003cProvider\u003e.+?)'''+\n                ''':'''+\n                '''[/\\\\]{1,2}'''+'''(?P\u003cConnexion\u003e.+?)[/\\\\]'''+\n                '''(?P\u003cMessage\u003e.+?)'''+\n                '''\u0026.*?\u003c/.+?\u003e'''\n        )\n        \n        LET last_date(message) = parse_string_with_regex(string=message,\n            regex=\n                '''(?P\u003cDirectory\u003e.+?)''' +\n                '''(?P\u003cDate\u003e\\[.+?).html'''\n        )\n        \n        LET parsed_line = SELECT * FROM foreach(row=InputLogPath,\n            query={\n                SELECT Line, FullPath FROM parse_lines(filename=InputLogPath.FullPath)\n                WHERE Line =~ \"Creating\"\n        })\n                \n        SELECT extract_file(message=Line).Copy AS Operation,\n            extract_file(message=Line).Provider AS Protocol,\n            extract_file(message=Line).Connexion AS Identifer, \n            extract_file(message=Line).Message AS File_Destination,\n            last_date(message=FullPath).Date AS Last_Session_Date\n        FROM parsed_line\n        \n        \n    - name: FileUpload\n      query: |\n        LET logs_search = SELECT \n            OSPath,\n            get(item=Data, field=\"mft\") as Inode,\n            Mode.String AS Mode,\n            Size,\n            Btime AS BTime,\n            Mtime AS MTime,\n            Ctime AS CTime,\n            Atime AS ATime,\n            IsDir, Data\n        FROM glob(globs=SearchFreeFileSyncLogs)\n      \n        SELECT OSPath, Size,\n            BTime, MTime, ATime,\n            upload(file=OSPath) AS Upload\n        FROM logs_search\n\ncolumn_types:\n  - name: Modified\n    type: timestamp\n  - name: ATime\n    type: timestamp\n  - name: MTime\n    type: timestamp\n  - name: CTime\n    type: timestamp\n  - name: Upload\n    type: preview_upload\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Applications.GoodSync","op":"set","definition":"name: Exchange.Windows.Applications.GoodSync\nauthor: Nathanaël Ndong, Synacktiv\ndescription: |\n   This artefact can be used to retrieve and parse some GoodSync file in order to\n   - identify configured Good Sync account;\n   - identify data and time of transfered files.\n   \n   This artifact have been created to identify potential exfiltrated files using GoodSync tool.\n   You can read more about it on https://www.synacktiv.com/publications/legitimate-exfiltration-tools-summary-and-detection-for-incident-response-and-threat\n\ntype: CLIENT\nparameters:\n    - name: FileGlob\n      default: C:\\Users\\*\\AppData\\Local\\GoodSync\\GoodSync-*\n\nsources:\n    - name: sync files\n      query: |\n\n        -- Grabs file path of provided file glob\n        LET InputLogPath \u003c= SELECT FullPath \n        FROM glob(globs=FileGlob)\n\n        -- Parses file against regex\n        LET parse_log \u003c= SELECT\n            parse_string_with_regex(\n                string=Line,\n                regex= '''^(?P\u003cDate\u003e\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s''' + \n                       '''#\\d+\\s'''+\n                       '''(?P\u003cMessage\u003e.+?)$''')\n                       as Record\n                       FROM parse_lines(filename=InputLogPath.FullPath)\n                    \n        --SELECT * FROM parse_log WHERE Record.Message =~ \"Copy New\"\n        -- Prints matching data where there is an entry in Record.Message  \n        LET extract_files(message) =\n        parse_string_with_regex(string=message,\n            regex=\n            '''^(?P\u003cProtocol\u003e\\[.+?\\])\\s''' +\n            '''.?''' +\n            '''\\s?(?P\u003cOperation\u003eCopy\\sNew)\\s''' +\n            '''\\'(?P\u003cSource\u003e.+?)\\'\\s''' +\n            '''.+?\\s''' +\n            '''\\'(?P\u003cDestination\u003e.+?)\\'\\s''' +\n            '''\\((?P\u003cByte\u003e.+?)\\)'''\n            )\n        SELECT Record.Date as Date, \n            extract_files(message=Record.Message).Protocol AS Protocol,\n            extract_files(message=Record.Message).Operation AS Operation,\n            extract_files(message=Record.Message).Source AS Source,\n            extract_files(message=Record.Message).Destination AS Destination,\n            extract_files(message=Record.Message).Size AS Size\n        FROM parse_log\n        WHERE Record.Message =~ \"Copy New\"\n \n    - name: good_sync_account\n      query: |\n      \n        LET InputLogPath \u003c= SELECT FullPath \n        FROM glob(globs=FileGlob)\n\n        LET parse_log \u003c= SELECT\n            parse_string_with_regex(\n                string=Line,\n                regex= '''^(?P\u003cDate\u003e\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s''' + \n                       '''#\\d+\\s'''+\n                       '''(?P\u003cMessage\u003e.+?)$''')\n                       as Record\n                       FROM parse_lines(filename=InputLogPath.FullPath)\n    \n        LET extract_user(message)= parse_string_with_regex(string=message,\n            regex='''.+?\\s.+?\\s.+?\\s''' +\n            '''UserId=''' +\n            '''(?P\u003cUserId\u003e.+?)\\s''' +\n            '''m_bLicActive=''' +\n            '''(?P\u003cNb_licence\u003e.+?)\\s''' +\n            '''.+?''' +\n            '''(?P\u003cDate_expiration\u003e\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s'''+\n            '''.+?\\s.+?\\s.+?''' +\n            '''(?P\u003cDate_creation\u003e\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2})\\s'''\n        )   \n\n        --SELECT * FROM parse_log WHERE Record.Message =~ \"CheckLicenseViaGsAccount:\"  \n        SELECT Record.Date as Date,\n            extract_user(message=Record.Message).UserId AS GoodSync_Account,\n            extract_user(message=Record.Message).Nb_licence AS Active_Licence,\n            extract_user(message=Record.Message).Date_expiration AS Licence_Expiration,\n            extract_user(message=Record.Message).Date_creation AS Account_Creation\n        FROM parse_log\n        WHERE Record.Message =~ \"CheckLicenseViaGsAccount:\"  \n        \n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Applications.LECmd","op":"set","definition":"name: Exchange.Windows.Applications.LECmd\ndescription: |\n    Execute Eric Zimmerman's LECmd and return output for analysis.\n    Created using @eduardfir SBECmd VQL as a quide.  \n    LECmd is a CLI tool for analyzing lnk data. Learn more - https://github.com/EricZimmerman/LECmd\n\nauthor: Carlos Cajigas @carlos_cajigas \n\ntype: CLIENT\n\ntools:\n  - name: LECmd\n    url: https://download.mikestammer.com/net6/LECmd.zip\n    \nparameters:\n  - name: sourceFile\n    default: .\n    type: regex\n    description: \"RegEx pattern for the name or path of the lnk file. Example 'recent' folder\"\n  - name: localPath\n    default: .\n    type: regex\n    description: \"RegEx pattern for the name or path of the target of the lnk file. Example 'cmd.exe'\"\n  - name: arguments\n    default: .\n    type: regex\n    description: \"Arguments of the lnk file. Example '/c powershell Invoke-Command'\"\n  - name: dateAfter\n    description: \"search for lnk files with a SourceCreated after this date. YYYY-MM-DD\"\n  - name: dateBefore\n    description: \"search for lnk files with a SourceCreated before this date. YYYY-MM-DD\"\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n      -- get context on target binary\n      LET lecmdpackage \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n                    ToolName=\"LECmd\", IsExecutable=FALSE)\n\n      -- build tempfolder for output\n      LET tmpdir \u003c= tempdir()\n      \n      -- decompress utility\n      LET payload = SELECT * \n        FROM unzip(filename=lecmdpackage[0].FullPath,\n            output_directory=tmpdir)\n      \n      -- execute payload\n      LET deploy \u003c= SELECT * \n        FROM execve(argv=[payload.NewPath[0], \n        \"-d\", \n        \"c:/\", \n        \"--csv\", \n        tmpdir + \"lecmd\", \n        \"--csvf\", \n        \"results.csv\"])\n      \n      -- parse csv\n      SELECT SourceFile, LocalPath, Arguments, SourceCreated, \n        SourceModified, WorkingDirectory, RelativePath, \n        TargetCreated, TargetModified, DriveType, VolumeLabel\n      FROM parse_csv(filename=tmpdir + \"lecmd\" + \"\\\\results.csv\")\n      WHERE \n        (if(condition=dateAfter, then=SourceCreated \u003e dateAfter,\n            else=TRUE) AND \n        if(condition=dateBefore, then=SourceCreated \u003c dateBefore, \n            else=TRUE))\n      AND SourceFile =~ sourceFile\n      AND LocalPath =~ localPath\n      AND Arguments =~ arguments\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Applications.MouseWithoutBorders","op":"set","definition":"name: Exchange.Windows.Applications.MouseWithoutBorders\ndescription: |\n  This artifact parses Microsoft Mouse Without Borders (MWB) runtime logs, module interface logs and the settings file.\n\n\n  * It's recommended to use the Sort and Stack features to handle repeated events effectively.\n\nauthor: Mohamed Sultan\n  \nreference:\n  - https://0xsultan.github.io/dfir/Exfiltrate-Without-Borders/\n\ntype: CLIENT\nparameters:\n  - name: UserFilter\n    default: .\n    type: regex\n    description: Regex to filter specific users (default all users)\n    \n  - name: DateAfter\n    type: timestamp\n    description: Only show logs after this date\n    \n  - name: DateBefore\n    type: timestamp\n    description: Only show logs before this date\n  \n  - name: RuntimeLogs\n    default: 'C:\\Users\\*\\AppData\\Local\\Microsoft\\PowerToys\\MouseWithoutBorders\\Logs\\*\\*.*'\n    description: Glob to runtime logs.\n\n  - name: ModuleLogFiles\n    default: 'C:\\Users\\*\\AppData\\Local\\Microsoft\\PowerToys\\MouseWithoutBorders\\LogsModuleInterface\\*.*'\n    description: Glob pattern for module interface log files\n\n  - name: SettingsFile\n    default: 'C:\\Users\\*\\AppData\\Local\\Microsoft\\PowerToys\\MouseWithoutBorders\\settings.json'\n    description: Glob to settings.\n\nprecondition: SELECT OS FROM info() WHERE OS = 'windows'\n\nsources:\n\n  - name: RuntimeLogs\n    description: Parses MWB runtime logs\n    query: |\n      -- message line e.g. 05/17 07:29:43.152(1)PowerToys Started!\n      LET MessageRegex = '''(?P\u003cMonthDay\u003e\\d{2}/\\d{2}) (?P\u003cTime\u003e\\d{2}:\\d{2}:\\d{2}\\.\\d+)\\((?P\u003cThreadID\u003e\\d+)\\)(?P\u003cMessage\u003e.+)'''\n\n      -- message patterns\n      LET ImportantPatterns = '''PowerToys Started|TCP listening on port|Keyboard/Mouse hooks installed|Helper process|New connection from client|tcpClient\\.Connect.*Unable to connect|Cannot resolve.*machine|==\u003e '''\n \n      -- parse runtime log files\n      LET parsed_messages = SELECT * FROM foreach(\n        row={\n          SELECT OSPath \n          FROM glob(globs=RuntimeLogs)\n          WHERE OSPath =~ UserFilter\n        },\n        query={\n          SELECT \n            OSPath,\n            parse_string_with_regex(string=Line, regex=MessageRegex) AS Parsed\n          FROM parse_lines(filename=OSPath)\n          WHERE Line =~ MessageRegex\n            AND parse_string_with_regex(string=Line, regex=MessageRegex).Message =~ ImportantPatterns\n        }\n      )\n\n      SELECT \n        OSPath,\n        timestamp(string=format(format=\"%s/%s %s\", args=[ regex_replace(source=OSPath, re=\".*Log_(\\\\d{4})-\\\\d{2}-\\\\d{2}\\\\.log.*\", replace=\"$1\"), Parsed.MonthDay, Parsed.Time ])) AS Timestamp,\n        regex_replace(source=Parsed.Message, re=\"^==\u003e \", replace=\"File Transfer: \") AS EventDescription\n\n      FROM parsed_messages\n      WHERE Parsed.Message != \"\"\n        AND (NOT DateAfter OR timestamp(string=format(format=\"%s/%s %s\", args=[ regex_replace(source=OSPath, re=\".*Log_(\\\\d{4})-\\\\d{2}-\\\\d{2}\\\\.log.*\", replace=\"$1\"), Parsed.MonthDay, Parsed.Time ])) \u003e DateAfter)\n        AND (NOT DateBefore OR timestamp(string=format(format=\"%s/%s %s\", args=[ regex_replace(source=OSPath, re=\".*Log_(\\\\d{4})-\\\\d{2}-\\\\d{2}\\\\.log.*\", replace=\"$1\"), Parsed.MonthDay, Parsed.Time ])) \u003c DateBefore)\n      ORDER BY Timestamp\n\n\n  - name: ModuleInterfaceLogs\n    description: Parses MWB module interface logs\n    query: |\n      -- Define regex for module interface logs\n      LET ModuleLogRegex = '''^\\[(?P\u003cTimestamp\u003e\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}\\.\\d+)\\]\\s+\\[p-(?P\u003cPID\u003e\\d+)\\]\\s+\\[t-(?P\u003cTID\u003e\\d+)\\]\\s+\\[(?P\u003cLevel\u003e\\w+)\\]\\s+(?P\u003cMessage\u003e.*)$'''\n      \n      -- Find module interface log files\n      LET module_files = SELECT * FROM foreach(\n        row={\n          SELECT OSPath \n          FROM glob(globs=ModuleLogFiles)\n          WHERE OSPath =~ UserFilter\n        },\n        query={\n          SELECT OSPath \n          FROM glob(globs=ModuleLogFiles)\n          WHERE OSPath =~ UserFilter\n        }\n      )\n\n      -- Parse module logs\n      LET parsed_module = SELECT * FROM foreach(\n        row=module_files,\n        query={\n          SELECT \n            OSPath,\n            parse_string_with_regex(\n              string=Line,\n              regex=ModuleLogRegex\n            ) AS Parsed\n          FROM parse_lines(filename=OSPath)\n          WHERE Line =~ \"^\\\\[\"\n        }\n      )\n      \n      -- Extract structured data\n      SELECT \n        OSPath,\n        timestamp(string=Parsed.Timestamp) AS Timestamp,\n        -- Parsed.PID AS PID,\n        -- Parsed.TID AS TID,\n        Parsed.Message AS RawMessage\n        \n      FROM parsed_module\n      WHERE Parsed.Timestamp\n        AND (NOT DateAfter OR timestamp(string=Parsed.Timestamp) \u003e DateAfter)\n        AND (NOT DateBefore OR timestamp(string=Parsed.Timestamp) \u003c DateBefore)\n\n  - name: Configuration\n    description: Extracts MWB configuration from settings.json\n    query: |\n      LET config_files = SELECT OSPath\n      FROM glob(globs=\"C:\\\\Users\\\\*\\\\AppData\\\\Local\\\\Microsoft\\\\PowerToys\\\\MouseWithoutBorders\\\\settings.json\")\n      WHERE OSPath =~ UserFilter\n      \n      LET parsed_config = SELECT \n        OSPath,\n        stat(filename=OSPath).Mtime AS ModificationTime,\n        parse_json(data=read_file(filename=OSPath)) AS Config\n      FROM config_files\n      \n      SELECT \n        OSPath,\n        ModificationTime,\n        Config.properties.SecurityKey.value AS SecurityKey,\n        Config.properties.MachineMatrixString AS ConnectedMachines,\n        Config.properties.MachinePool.value AS MachinePool_ID,\n        -- Extract CurrentMachineName (first machine name from MachinePool)\n        if(condition=Config.properties.MachinePool.value AND Config.properties.MachinePool.value =~ \"^([^:,]+):\",\n           then=regex_replace(source=Config.properties.MachinePool.value, re=\"^([^:,]+):.*\", replace=\"$1\"),\n           else=\"Unknown\") AS CurrentMachineName,\n        Config.properties.TCPPort.value AS TCPPort,\n        Config.properties.ShareClipboard.value AS ShareClipboard,\n        Config.properties.TransferFile.value AS TransferFile,\n        Config.properties.UseService.value AS UseService,\n        Config.properties.ValidateRemoteMachineIP.value AS ValidateRemoteIP,\n        Config.properties.SameSubnetOnly.value AS SameSubnetOnly,\n        Config.properties.FirstRun.value AS FirstRun,\n        -- Name2IP field (most time is empty)\n        if(condition=Config.properties.Name2IP.value AND Config.properties.Name2IP.value != \"\",\n           then=Config.properties.Name2IP.value,\n           else=\"\") AS IPAddressMapping\n\n      FROM parsed_config\n\ncolumn_types:\n  - name: Timestamp\n    type: timestamp\n  - name: ModificationTime\n    type: timestamp\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.AttackSimulation.AtomicRedTeam","op":"set","definition":"name: Exchange.Windows.AttackSimulation.AtomicRedTeam\nauthor: Wes Lambert -- @therealwlambert\ndescription: |\n    This artifact allows you to run Atomic Red Team tests on Windows\n    endpoints using Invoke-AtomicRedTeam. Linux and MacOS endpoints\n    will soon be supported.\n\n    NOTE: All tests may not work out OOB. You may notice interference\n    or inoperability of some tests with Windows Defender/antivirus/EDR\n    enabled. Best-effort checks are made using the built-in\n    **-GetPreReqs** flag. This is an initial PoC, and as such, much\n    testing is needed, and feedback is welcome.\n\n    **Reference:**\n\n    https://github.com/redcanaryco/invoke-atomicredteam\n\n    **Description:**\n\n    Invoke-AtomicRedTeam is a PowerShell module to execute tests as\n    defined in the atomics folder of Red Canary's Atomic Red Team\n    project. The \"atomics folder\" contains a folder for each Technique\n    defined by the MITRE ATT\u0026CK™ Framework. Inside of each of these\n    \"T#\" folders you'll find a yaml file that defines the attack\n    procedures for each atomic test as well as an easier to read\n    markdown (md) version of the same data.\n\n    - Executing atomic tests may leave your system in an undesirable\n      state. You are responsible for understanding what a test does\n      before executing.\n\n    - Ensure you have permission to test before you begin.\n\n    - It is recommended to set up a test machine for atomic test\n      execution that is similar to the build in your environment. Be\n      sure you have your collection/EDR solution in place, and that\n      the endpoint is checking in and active.\n\ntype: CLIENT\n\ncolumn_types:\n  - name: Technique\n    type: safe_url\n\nparameters:\n    - name: InstallART\n      description: Install AtomicRedTeam Execution Framework (Choose this for the first run, then de-select thereafter)\n      default: Y\n      type: bool\n\n    - name: ExecutionLogFile\n      description: Path to log file (CSV) for executions by ART tests\n      default: C:\\Windows\\Temp\\ARTExec.csv\n\n    - name: RemoveExecLog\n      description: Remove execution log before running artifact (in the event we don't want to intertwine results from previous tests)\n      default: Y\n      type: bool\n\n    - name: Cleanup\n      description: Clean up execution artifacts\n      default: Y\n      type: bool\n\n    - name: RunAll\n      description: NOT RECOMMENDED...USE WITH CAUTION - Run all ART tests\n      default: N\n      type: bool\n\n    - name: T1558.004 - 1\n      description: AS-REP Roasting - Rubeus asreproast\n      type: bool\n\n    - name: T1056.004 - 1\n      description: Credential API Hooking - Hook PowerShell TLS Encrypt/Decrypt Messages\n      type: bool\n\n    - name: T1552.001 - 3\n      description: Credentials In Files - Extracting passwords with findstr\n      type: bool\n\n    - name: T1552.001 - 4\n      description: Credentials In Files - Access unattend.xml\n      type: bool\n\n    - name: T1555 - 1\n      description: Credentials from Password Stores - Extract Windows Credential Manager via VBA\n      type: bool\n\n    - name: T1555 - 2\n      description: Credentials from Password Stores - Dump credentials from Windows Credential Manager With PowerShell [windows Credentials]\n      type: bool\n\n    - name: T1555 - 3\n      description: Credentials from Password Stores - Dump credentials from Windows Credential Manager With PowerShell [web Credentials]\n      type: bool\n\n    - name: T1555 - 4\n      description: Credentials from Password Stores - Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials]\n      type: bool\n\n    - name: T1555 - 5\n      description: Credentials from Password Stores - Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials]\n      type: bool\n\n    - name: T1555.003 - 1\n      description: Credentials from Web Browsers - Run Chrome-password Collector\n      type: bool\n\n    - name: T1555.003 - 3\n      description: Credentials from Web Browsers - LaZagne - Credentials from Browser\n      type: bool\n\n    - name: T1555.003 - 4\n      description: Credentials from Web Browsers - Simulating access to Chrome Login Data\n      type: bool\n\n    - name: T1552.002 - 1\n      description: Credentials in Registry - Enumeration for Credentials in Registry\n      type: bool\n\n    - name: T1552.002 - 2\n      description: Credentials in Registry - Enumeration for PuTTY Credentials in Registry\n      type: bool\n\n    - name: T1003.006 - 1\n      description: DCSync - DCSync (Active Directory)\n      type: bool\n\n    - name: T1187 - 1\n      description: Forced Authentication - PetitPotam\n      type: bool\n\n    - name: T1056.002 - 2\n      description: GUI Input Capture - PowerShell - Prompt User for Password\n      type: bool\n\n    - name: T1558.001 - 1\n      description: Golden Ticket - Crafting Active Directory golden tickets with mimikatz\n      type: bool\n\n    - name: T1552.006 - 1\n      description: Group Policy Preferences - GPP Passwords (findstr)\n      type: bool\n\n    - name: T1552.006 - 2\n      description: Group Policy Preferences - GPP Passwords (Get-GPPPassword)\n      type: bool\n\n    - name: T1558.003 - 1\n      description: Kerberoasting - Request for service tickets\n      type: bool\n\n    - name: T1558.003 - 2\n      description: Kerberoasting - Rubeus kerberoast\n      type: bool\n\n    - name: T1558.003 - 3\n      description: Kerberoasting - Extract all accounts in use as SPN using setspn\n      type: bool\n\n    - name: T1558.003 - 4\n      description: Kerberoasting - Request A Single Ticket via PowerShell\n      type: bool\n\n    - name: T1558.003 - 5\n      description: Kerberoasting - Request All Tickets via PowerShell\n      type: bool\n\n    - name: T1056.001 - 1\n      description: Keylogging - Input Capture\n      type: bool\n\n    - name: T1003.004 - 1\n      description: LSA Secrets - Dumping LSA Secrets\n      type: bool\n\n    - name: T1003.001 - 1\n      description: LSASS Memory - Windows Credential Editor\n      type: bool\n\n    - name: T1003.001 - 2\n      description: LSASS Memory - Dump LSASS.exe Memory using ProcDump\n      type: bool\n\n    - name: T1003.001 - 3\n      description: LSASS Memory - Dump LSASS.exe Memory using comsvcs.dll\n      type: bool\n\n    - name: T1003.001 - 4\n      description: LSASS Memory - Dump LSASS.exe Memory using direct system calls and API unhooking\n      type: bool\n\n    - name: T1003.001 - 5\n      description: LSASS Memory - Dump LSASS.exe Memory using Windows Task Manager\n      type: bool\n\n    - name: T1003.001 - 6\n      description: LSASS Memory - Offline Credential Theft With Mimikatz\n      type: bool\n\n    - name: T1003.001 - 7\n      description: LSASS Memory - LSASS read with pypykatz\n      type: bool\n\n    - name: T1003.001 - 8\n      description: LSASS Memory - Dump LSASS.exe Memory using Out-Minidump.ps1\n      type: bool\n\n    - name: T1003.001 - 9\n      description: LSASS Memory - Create Mini Dump of LSASS.exe using ProcDump\n      type: bool\n\n    - name: T1003.001 - 10\n      description: LSASS Memory - Powershell Mimikatz\n      type: bool\n\n    - name: T1003.001 - 11\n      description: LSASS Memory - Dump LSASS with .Net 5 createdump.exe\n      type: bool\n\n    - name: T1003.001 - 12\n      description: LSASS Memory - Dump LSASS.exe using imported Microsoft DLLs\n      type: bool\n\n    - name: T1003.003 - 1\n      description: NTDS - Create Volume Shadow Copy with vssadmin\n      type: bool\n\n    - name: T1003.003 - 2\n      description: NTDS - Copy NTDS.dit from Volume Shadow Copy\n      type: bool\n\n    - name: T1003.003 - 3\n      description: NTDS - Dump Active Directory Database with NTDSUtil\n      type: bool\n\n    - name: T1003.003 - 4\n      description: NTDS - Create Volume Shadow Copy with WMI\n      type: bool\n\n    - name: T1003.003 - 5\n      description: NTDS - Create Volume Shadow Copy remotely with WMI\n      type: bool\n\n    - name: T1003.003 - 6\n      description: NTDS - Create Volume Shadow Copy with Powershell\n      type: bool\n\n    - name: T1003.003 - 7\n      description: NTDS - Create Symlink to Volume Shadow Copy\n      type: bool\n\n    - name: T1040 - 3\n      description: Network Sniffing - Packet Capture Windows Command Prompt\n      type: bool\n\n    - name: T1040 - 4\n      description: Network Sniffing - Windows Internal Packet Capture\n      type: bool\n\n    - name: T1003 - 1\n      description: OS Credential Dumping - Gsecdump\n      type: bool\n\n    - name: T1003 - 2\n      description: OS Credential Dumping - Credential Dumping with NPPSpy\n      type: bool\n\n    - name: T1003 - 3\n      description: OS Credential Dumping - Dump svchost.exe to gather RDP credentials\n      type: bool\n\n    - name: T1110.002 - 1\n      description: Password Cracking - Password Cracking with Hashcat\n      type: bool\n\n    - name: T1556.002 - 1\n      description: Password Filter DLL - Install and Register Password Filter DLL\n      type: bool\n\n    - name: T1110.001 - 1\n      description: Password Guessing - Brute Force Credentials of all Active Directory domain users via SMB\n      type: bool\n\n    - name: T1110.001 - 2\n      description: Password Guessing - Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)\n      type: bool\n\n    - name: T1110.003 - 1\n      description: Password Spraying - Password Spray all Domain Users\n      type: bool\n\n    - name: T1110.003 - 2\n      description: Password Spraying - Password Spray (DomainPasswordSpray)\n      type: bool\n\n    - name: T1110.003 - 3\n      description: Password Spraying - Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)\n      type: bool\n\n    - name: T1552.004 - 1\n      description: Private Keys - Private Keys\n      type: bool\n\n    - name: T1552.004 - 6\n      description: Private Keys - ADFS token signing and encryption certificates theft - Local\n      type: bool\n\n    - name: T1552.004 - 7\n      description: Private Keys - ADFS token signing and encryption certificates theft - Remote\n      type: bool\n\n    - name: T1003.002 - 1\n      description: Security Account Manager - Registry dump of SAM, creds, and secrets\n      type: bool\n\n    - name: T1003.002 - 2\n      description: Security Account Manager - Registry parse with pypykatz\n      type: bool\n\n    - name: T1003.002 - 3\n      description: Security Account Manager - esentutl.exe SAM copy\n      type: bool\n\n    - name: T1003.002 - 4\n      description: Security Account Manager - PowerDump Registry dump of SAM for hashes and usernames\n      type: bool\n\n    - name: T1003.002 - 5\n      description: Security Account Manager - dump volume shadow copy hives with certutil\n      type: bool\n\n    - name: T1003.002 - 6\n      description: Security Account Manager - dump volume shadow copy hives with System.IO.File\n      type: bool\n\n    - name: T1560 - 1\n      description: Archive Collected Data - Compress Data for Exfiltration With PowerShell\n      type: bool\n\n    - name: T1560.001 - 1\n      description: Archive via Utility - Compress Data for Exfiltration With Rar\n      type: bool\n\n    - name: T1560.001 - 2\n      description: Archive via Utility - Compress Data and lock with password for Exfiltration with winrar\n      type: bool\n\n    - name: T1560.001 - 3\n      description: Archive via Utility - Compress Data and lock with password for Exfiltration with winzip\n      type: bool\n\n    - name: T1560.001 - 4\n      description: Archive via Utility - Compress Data and lock with password for Exfiltration with 7zip\n      type: bool\n\n    - name: T1123 - 1\n      description: Audio Capture - using device audio capture commandlet\n      type: bool\n\n    - name: T1119 - 1\n      description: Automated Collection - Automated Collection Command Prompt\n      type: bool\n\n    - name: T1119 - 2\n      description: Automated Collection - Automated Collection PowerShell\n      type: bool\n\n    - name: T1119 - 3\n      description: Automated Collection - Recon information for export with PowerShell\n      type: bool\n\n    - name: T1119 - 4\n      description: Automated Collection - Recon information for export with Command Prompt\n      type: bool\n\n    - name: T1115 - 1\n      description: Clipboard Data - Utilize Clipboard to store or execute commands from\n      type: bool\n\n    - name: T1115 - 2\n      description: Clipboard Data - Execute Commands from Clipboard using PowerShell\n      type: bool\n\n    - name: T1115 - 4\n      description: Clipboard Data - Collect Clipboard Data via VBA\n      type: bool\n\n    - name: T1056.004 - 1\n      description: Credential API Hooking - Hook PowerShell TLS Encrypt/Decrypt Messages\n      type: bool\n\n    - name: T1056.002 - 2\n      description: GUI Input Capture - PowerShell - Prompt User for Password\n      type: bool\n\n    - name: T1056.001 - 1\n      description: Keylogging - Input Capture\n      type: bool\n\n    - name: T1074.001 - 1\n      description: Local Data Staging - Stage data from Discovery.bat\n      type: bool\n\n    - name: T1074.001 - 3\n      description: Local Data Staging - Zip a Folder with PowerShell for Staging in Temp\n      type: bool\n\n    - name: T1114.001 - 1\n      description: Local Email Collection - Email Collection with PowerShell Get-Inbox\n      type: bool\n\n    - name: T1113 - 5\n      description: Screen Capture - Windows Screencapture\n      type: bool\n\n    - name: T1113 - 6\n      description: Screen Capture - Windows Screen Capture (CopyFromScreen)\n      type: bool\n\n    - name: T1546.008 - 1\n      description: Accessibility Features - Attaches Command Prompt as a Debugger to a List of Target Processes\n      type: bool\n\n    - name: T1546.008 - 2\n      description: Accessibility Features - Replace binary of sticky keys\n      type: bool\n\n    - name: T1546.010 - 1\n      description: AppInit DLLs - Install AppInit Shim\n      type: bool\n\n    - name: T1546.011 - 1\n      description: Application Shimming - Application Shim Installation\n      type: bool\n\n    - name: T1546.011 - 2\n      description: Application Shimming - New shim database files created in the default shim database directory\n      type: bool\n\n    - name: T1546.011 - 3\n      description: Application Shimming - Registry key creation and/or modification events for SDB\n      type: bool\n\n    - name: T1055.004 - 1\n      description: Asynchronous Procedure Call - Process Injection via C#\n      type: bool\n\n    - name: T1053.002 - 1\n      description: At (Windows) - At.exe Scheduled task\n      type: bool\n\n    - name: T1548.002 - 1\n      description: Bypass User Account Control - Bypass UAC using Event Viewer (cmd)\n      type: bool\n\n    - name: T1548.002 - 2\n      description: Bypass User Account Control - Bypass UAC using Event Viewer (PowerShell)\n      type: bool\n\n    - name: T1548.002 - 3\n      description: Bypass User Account Control - Bypass UAC using Fodhelper\n      type: bool\n\n    - name: T1548.002 - 4\n      description: Bypass User Account Control - Bypass UAC using Fodhelper - PowerShell\n      type: bool\n\n    - name: T1548.002 - 5\n      description: Bypass User Account Control - Bypass UAC using ComputerDefaults (PowerShell)\n      type: bool\n\n    - name: T1548.002 - 6\n      description: Bypass User Account Control - Bypass UAC by Mocking Trusted Directories\n      type: bool\n\n    - name: T1548.002 - 7\n      description: Bypass User Account Control - Bypass UAC using sdclt DelegateExecute\n      type: bool\n\n    - name: T1548.002 - 8\n      description: Bypass User Account Control - Disable UAC using reg.exe\n      type: bool\n\n    - name: T1548.002 - 9\n      description: Bypass User Account Control - Bypass UAC using SilentCleanup task\n      type: bool\n\n    - name: T1548.002 - 10\n      description: Bypass User Account Control - UACME Bypass Method 23\n      type: bool\n\n    - name: T1548.002 - 11\n      description: Bypass User Account Control - UACME Bypass Method 31\n      type: bool\n\n    - name: T1548.002 - 12\n      description: Bypass User Account Control - UACME Bypass Method 33\n      type: bool\n\n    - name: T1548.002 - 13\n      description: Bypass User Account Control - UACME Bypass Method 34\n      type: bool\n\n    - name: T1548.002 - 14\n      description: Bypass User Account Control - UACME Bypass Method 39\n      type: bool\n\n    - name: T1548.002 - 15\n      description: Bypass User Account Control - UACME Bypass Method 56\n      type: bool\n\n    - name: T1548.002 - 16\n      description: Bypass User Account Control - UACME Bypass Method 59\n      type: bool\n\n    - name: T1548.002 - 17\n      description: Bypass User Account Control - UACME Bypass Method 61\n      type: bool\n\n    - name: T1574.012 - 1\n      description: COR_PROFILER - User scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 2\n      description: COR_PROFILER - System Scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 3\n      description: COR_PROFILER - Registry-free process scope COR_PROFILER\n      type: bool\n\n    - name: T1546.001 - 1\n      description: Change Default File Association - Change Default File Association\n      type: bool\n\n    - name: T1134.002 - 1\n      description: Create Process with Token - Access Token Manipulation\n      type: bool\n\n    - name: T1574.001 - 1\n      description: DLL Search Order Hijacking - DLL Search Order Hijacking - amsi.dll\n      type: bool\n\n    - name: T1574.002 - 1\n      description: DLL Side-Loading - DLL Side-Loading using the Notepad++ GUP.exe binary\n      type: bool\n\n    - name: T1078.001 - 1\n      description: Default Accounts - Enable Guest account with RDP capability and admin privileges\n      type: bool\n\n    - name: T1078.001 - 2\n      description: Default Accounts - Activate Guest Account\n      type: bool\n\n    - name: T1055.001 - 1\n      description: Dynamic-link Library Injection - Process Injection via mavinject.exe\n      type: bool\n\n    - name: T1546.012 - 1\n      description: Image File Execution Options Injection - IFEO Add Debugger\n      type: bool\n\n    - name: T1546.012 - 2\n      description: Image File Execution Options Injection - IFEO Global Flags\n      type: bool\n\n    - name: T1078.003 - 1\n      description: Local Accounts - Create local account with admin privileges\n      type: bool\n\n    - name: T1037.001 - 1\n      description: Logon Script (Windows) - Logon Scripts\n      type: bool\n\n    - name: T1546.007 - 1\n      description: Netsh Helper DLL - Netsh Helper DLL Registration\n      type: bool\n\n    - name: T1134.004 - 1\n      description: Parent PID Spoofing - Parent PID Spoofing using PowerShell\n      type: bool\n\n    - name: T1134.004 - 2\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from Current Process\n      type: bool\n\n    - name: T1134.004 - 3\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from Specified Process\n      type: bool\n\n    - name: T1134.004 - 4\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from svchost.exe\n      type: bool\n\n    - name: T1134.004 - 5\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from New Process\n      type: bool\n\n    - name: T1574.009 - 1\n      description: Path Interception by Unquoted Path - Execution of program.exe as service with unquoted service path\n      type: bool\n\n    - name: T1547.010 - 1\n      description: Port Monitors - Add Port Monitor persistence in Registry\n      type: bool\n\n    - name: T1546.013 - 1\n      description: PowerShell Profile - Append malicious start-process cmdlet\n      type: bool\n\n    - name: T1055.012 - 1\n      description: Process Hollowing - Process Hollowing using PowerShell\n      type: bool\n\n    - name: T1055.012 - 2\n      description: Process Hollowing - RunPE via VBA\n      type: bool\n\n    - name: T1055 - 1\n      description: Process Injection - Shellcode execution via VBA\n      type: bool\n\n    - name: T1055 - 2\n      description: Process Injection - Remote Process Injection in LSASS via mimikatz\n      type: bool\n\n    - name: T1547.001 - 1\n      description: Registry Run Keys / Startup Folder - Reg Key Run\n      type: bool\n\n    - name: T1547.001 - 2\n      description: Registry Run Keys / Startup Folder - Reg Key RunOnce\n      type: bool\n\n    - name: T1547.001 - 3\n      description: Registry Run Keys / Startup Folder - PowerShell Registry RunOnce\n      type: bool\n\n    - name: T1547.001 - 4\n      description: Registry Run Keys / Startup Folder - Suspicious vbs file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 5\n      description: Registry Run Keys / Startup Folder - Suspicious jse file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 6\n      description: Registry Run Keys / Startup Folder - Suspicious bat file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 7\n      description: Registry Run Keys / Startup Folder - Add Executable Shortcut Link to User Startup Folder\n      type: bool\n\n    - name: T1053.005 - 1\n      description: Scheduled Task - Scheduled Task Startup Script\n      type: bool\n\n    - name: T1053.005 - 2\n      description: Scheduled Task - Scheduled task Local\n      type: bool\n\n    - name: T1053.005 - 3\n      description: Scheduled Task - Scheduled task Remote\n      type: bool\n\n    - name: T1053.005 - 4\n      description: Scheduled Task - Powershell Cmdlet Scheduled Task\n      type: bool\n\n    - name: T1053.005 - 5\n      description: Scheduled Task - Task Scheduler via VBA\n      type: bool\n\n    - name: T1053.005 - 6\n      description: Scheduled Task - WMI Invoke-CimMethod Scheduled Task\n      type: bool\n\n    - name: T1546.002 - 1\n      description: Screensaver - Set Arbitrary Binary as Screensaver\n      type: bool\n\n    - name: T1547.005 - 1\n      description: Security Support Provider - Modify SSP configuration in registry\n      type: bool\n\n    - name: T1574.011 - 1\n      description: Services Registry Permissions Weakness - Service Registry Permissions Weakness\n      type: bool\n\n    - name: T1574.011 - 2\n      description: Services Registry Permissions Weakness - Service ImagePath Change with reg.exe\n      type: bool\n\n    - name: T1547.009 - 1\n      description: Shortcut Modification - Shortcut Modification\n      type: bool\n\n    - name: T1547.009 - 2\n      description: Shortcut Modification - Create shortcut to cmd in startup folders\n      type: bool\n\n    - name: T1134.001 - 1\n      description: Token Impersonation/Theft - Named pipe client impersonation\n      type: bool\n\n    - name: T1134.001 - 2\n      description: Token Impersonation/Theft - `SeDebugPrivilege` token duplication\n      type: bool\n\n    - name: T1546.003 - 1\n      description: Windows Management Instrumentation Event Subscription - Persistence via WMI Event Subscription\n      type: bool\n\n    - name: T1543.003 - 1\n      description: Windows Service - Modify Fax service to run PowerShell\n      type: bool\n\n    - name: T1543.003 - 2\n      description: Windows Service - Service Installation CMD\n      type: bool\n\n    - name: T1543.003 - 3\n      description: Windows Service - Service Installation PowerShell\n      type: bool\n\n    - name: T1547.004 - 1\n      description: Winlogon Helper DLL - Winlogon Shell Key Persistence - PowerShell\n      type: bool\n\n    - name: T1547.004 - 2\n      description: Winlogon Helper DLL - Winlogon Userinit Key Persistence - PowerShell\n      type: bool\n\n    - name: T1547.004 - 3\n      description: Winlogon Helper DLL - Winlogon Notify Key Logon Persistence - PowerShell\n      type: bool\n\n    - name: T1055.004 - 1\n      description: Asynchronous Procedure Call - Process Injection via C#\n      type: bool\n\n    - name: T1197 - 1\n      description: BITS Jobs - Bitsadmin Download (cmd)\n      type: bool\n\n    - name: T1197 - 2\n      description: BITS Jobs - Bitsadmin Download (PowerShell)\n      type: bool\n\n    - name: T1197 - 3\n      description: BITS Jobs - Persist, Download, \u0026 Execute\n      type: bool\n\n    - name: T1197 - 4\n      description: BITS Jobs - Bits download using desktopimgdownldr.exe (cmd)\n      type: bool\n\n    - name: T1548.002 - 1\n      description: Bypass User Account Control - Bypass UAC using Event Viewer (cmd)\n      type: bool\n\n    - name: T1548.002 - 2\n      description: Bypass User Account Control - Bypass UAC using Event Viewer (PowerShell)\n      type: bool\n\n    - name: T1548.002 - 3\n      description: Bypass User Account Control - Bypass UAC using Fodhelper\n      type: bool\n\n    - name: T1548.002 - 4\n      description: Bypass User Account Control - Bypass UAC using Fodhelper - PowerShell\n      type: bool\n\n    - name: T1548.002 - 5\n      description: Bypass User Account Control - Bypass UAC using ComputerDefaults (PowerShell)\n      type: bool\n\n    - name: T1548.002 - 6\n      description: Bypass User Account Control - Bypass UAC by Mocking Trusted Directories\n      type: bool\n\n    - name: T1548.002 - 7\n      description: Bypass User Account Control - Bypass UAC using sdclt DelegateExecute\n      type: bool\n\n    - name: T1548.002 - 8\n      description: Bypass User Account Control - Disable UAC using reg.exe\n      type: bool\n\n    - name: T1548.002 - 9\n      description: Bypass User Account Control - Bypass UAC using SilentCleanup task\n      type: bool\n\n    - name: T1548.002 - 10\n      description: Bypass User Account Control - UACME Bypass Method 23\n      type: bool\n\n    - name: T1548.002 - 11\n      description: Bypass User Account Control - UACME Bypass Method 31\n      type: bool\n\n    - name: T1548.002 - 12\n      description: Bypass User Account Control - UACME Bypass Method 33\n      type: bool\n\n    - name: T1548.002 - 13\n      description: Bypass User Account Control - UACME Bypass Method 34\n      type: bool\n\n    - name: T1548.002 - 14\n      description: Bypass User Account Control - UACME Bypass Method 39\n      type: bool\n\n    - name: T1548.002 - 15\n      description: Bypass User Account Control - UACME Bypass Method 56\n      type: bool\n\n    - name: T1548.002 - 16\n      description: Bypass User Account Control - UACME Bypass Method 59\n      type: bool\n\n    - name: T1548.002 - 17\n      description: Bypass User Account Control - UACME Bypass Method 61\n      type: bool\n\n    - name: T1218.003 - 1\n      description: CMSTP - CMSTP Executing Remote Scriptlet\n      type: bool\n\n    - name: T1218.003 - 2\n      description: CMSTP - CMSTP Executing UAC Bypass\n      type: bool\n\n    - name: T1574.012 - 1\n      description: COR_PROFILER - User scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 2\n      description: COR_PROFILER - System Scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 3\n      description: COR_PROFILER - Registry-free process scope COR_PROFILER\n      type: bool\n\n    - name: T1070.003 - 10\n      description: Clear Command History - Prevent Powershell History Logging\n      type: bool\n\n    - name: T1070.003 - 11\n      description: Clear Command History - Clear Powershell History by Deleting History File\n      type: bool\n\n    - name: T1070.001 - 1\n      description: Clear Windows Event Logs - Clear Logs\n      type: bool\n\n    - name: T1070.001 - 2\n      description: Clear Windows Event Logs - Delete System Logs Using Clear-EventLog\n      type: bool\n\n    - name: T1070.001 - 3\n      description: Clear Windows Event Logs - Clear Event Logs via VBA\n      type: bool\n\n    - name: T1027.004 - 1\n      description: Compile After Delivery - Compile After Delivery using csc.exe\n      type: bool\n\n    - name: T1027.004 - 2\n      description: Compile After Delivery - Dynamic C# Compile\n      type: bool\n\n    - name: T1218.001 - 1\n      description: Compiled HTML File - Compiled HTML Help Local Payload\n      type: bool\n\n    - name: T1218.001 - 2\n      description: Compiled HTML File - Compiled HTML Help Remote Payload\n      type: bool\n\n    - name: T1218.001 - 3\n      description: Compiled HTML File - Invoke CHM with default Shortcut Command Execution\n      type: bool\n\n    - name: T1218.001 - 4\n      description: Compiled HTML File - Invoke CHM with InfoTech Storage Protocol Handler\n      type: bool\n\n    - name: T1218.001 - 5\n      description: Compiled HTML File - Invoke CHM Simulate Double click\n      type: bool\n\n    - name: T1218.001 - 6\n      description: Compiled HTML File - Invoke CHM with Script Engine and Help Topic\n      type: bool\n\n    - name: T1218.001 - 7\n      description: Compiled HTML File - Invoke CHM Shortcut Command with ITS and Help Topic\n      type: bool\n\n    - name: T1218.002 - 1\n      description: Control Panel - Control Panel Items\n      type: bool\n\n    - name: T1134.002 - 1\n      description: Create Process with Token - Access Token Manipulation\n      type: bool\n\n    - name: T1574.001 - 1\n      description: DLL Search Order Hijacking - DLL Search Order Hijacking - amsi.dll\n      type: bool\n\n    - name: T1574.002 - 1\n      description: DLL Side-Loading - DLL Side-Loading using the Notepad++ GUP.exe binary\n      type: bool\n\n    - name: T1078.001 - 1\n      description: Default Accounts - Enable Guest account with RDP capability and admin privileges\n      type: bool\n\n    - name: T1078.001 - 2\n      description: Default Accounts - Activate Guest Account\n      type: bool\n\n    - name: T1140 - 1\n      description: Deobfuscate/Decode Files or Information - Deobfuscate/Decode Files Or Information\n      type: bool\n\n    - name: T1140 - 2\n      description: Deobfuscate/Decode Files or Information - Certutil Rename and Decode\n      type: bool\n\n    - name: T1006 - 1\n      description: Direct Volume Access - Read volume boot sector via DOS device path (PowerShell)\n      type: bool\n\n    - name: T1562.002 - 1\n      description: Disable Windows Event Logging - Disable Windows IIS HTTP Logging\n      type: bool\n\n    - name: T1562.002 - 2\n      description: Disable Windows Event Logging - Kill Event Log Service Threads\n      type: bool\n\n    - name: T1562.002 - 3\n      description: Disable Windows Event Logging - Impair Windows Audit Log Policy\n      type: bool\n\n    - name: T1562.002 - 4\n      description: Disable Windows Event Logging - Clear Windows Audit Policy Config\n      type: bool\n\n    - name: T1562.002 - 5\n      description: Disable Windows Event Logging - Disable Event Logging with wevtutil\n      type: bool\n\n    - name: T1562.004 - 1\n      description: Disable or Modify System Firewall - Disable Microsoft Defender Firewall\n      type: bool\n\n    - name: T1562.004 - 2\n      description: Disable or Modify System Firewall - Disable Microsoft Defender Firewall via Registry\n      type: bool\n\n    - name: T1562.004 - 3\n      description: Disable or Modify System Firewall - Allow SMB and RDP on Microsoft Defender Firewall\n      type: bool\n\n    - name: T1562.004 - 4\n      description: Disable or Modify System Firewall - Opening ports for proxy - HARDRAIN\n      type: bool\n\n    - name: T1562.004 - 5\n      description: Disable or Modify System Firewall - Open a local port through Windows Firewall to any profile\n      type: bool\n\n    - name: T1562.004 - 6\n      description: Disable or Modify System Firewall - Allow Executable Through Firewall Located in Non-Standard Location\n      type: bool\n\n    - name: T1562.001 - 10\n      description: Disable or Modify Tools - Unload Sysmon Filter Driver\n      type: bool\n\n    - name: T1562.001 - 11\n      description: Disable or Modify Tools - Uninstall Sysmon\n      type: bool\n\n    - name: T1562.001 - 12\n      description: Disable or Modify Tools - AMSI Bypass - AMSI InitFailed\n      type: bool\n\n    - name: T1562.001 - 13\n      description: Disable or Modify Tools - AMSI Bypass - Remove AMSI Provider Reg Key\n      type: bool\n\n    - name: T1562.001 - 14\n      description: Disable or Modify Tools - Disable Arbitrary Security Windows Service\n      type: bool\n\n    - name: T1562.001 - 15\n      description: Disable or Modify Tools - Tamper with Windows Defender ATP PowerShell\n      type: bool\n\n    - name: T1562.001 - 16\n      description: Disable or Modify Tools - Tamper with Windows Defender Command Prompt\n      type: bool\n\n    - name: T1562.001 - 17\n      description: Disable or Modify Tools - Tamper with Windows Defender Registry\n      type: bool\n\n    - name: T1562.001 - 18\n      description: Disable or Modify Tools - Disable Microsoft Office Security Features\n      type: bool\n\n    - name: T1562.001 - 19\n      description: Disable or Modify Tools - Remove Windows Defender Definition Files\n      type: bool\n\n    - name: T1562.001 - 20\n      description: Disable or Modify Tools - Stop and Remove Arbitrary Security Windows Service\n      type: bool\n\n    - name: T1562.001 - 21\n      description: Disable or Modify Tools - Uninstall Crowdstrike Falcon on Windows\n      type: bool\n\n    - name: T1562.001 - 22\n      description: Disable or Modify Tools - Tamper with Windows Defender Evade Scanning -Folder\n      type: bool\n\n    - name: T1562.001 - 23\n      description: Disable or Modify Tools - Tamper with Windows Defender Evade Scanning -Extension\n      type: bool\n\n    - name: T1562.001 - 24\n      description: Disable or Modify Tools - Tamper with Windows Defender Evade Scanning -Process\n      type: bool\n\n    - name: T1055.001 - 1\n      description: Dynamic-link Library Injection - Process Injection via mavinject.exe\n      type: bool\n\n    - name: T1070.004 - 4\n      description: File Deletion - Delete a single file - Windows cmd\n      type: bool\n\n    - name: T1070.004 - 5\n      description: File Deletion - Delete an entire folder - Windows cmd\n      type: bool\n\n    - name: T1070.004 - 6\n      description: File Deletion - Delete a single file - Windows PowerShell\n      type: bool\n\n    - name: T1070.004 - 7\n      description: File Deletion - Delete an entire folder - Windows PowerShell\n      type: bool\n\n    - name: T1070.004 - 9\n      description: File Deletion - Delete Prefetch File\n      type: bool\n\n    - name: T1070.004 - 10\n      description: File Deletion - Delete TeamViewer Log Files\n      type: bool\n\n    - name: T1564.001 - 3\n      description: Hidden Files and Directories - Create Windows System File with Attrib\n      type: bool\n\n    - name: T1564.001 - 4\n      description: Hidden Files and Directories - Create Windows Hidden File with Attrib\n      type: bool\n\n    - name: T1564.003 - 1\n      description: Hidden Window - Hidden Window\n      type: bool\n\n    - name: T1564 - 1\n      description: Hide Artifacts - Extract binary files via VBA\n      type: bool\n\n    - name: T1564 - 2\n      description: Hide Artifacts - Create a Hidden User Called \"$\"\n      type: bool\n\n    - name: T1564 - 3\n      description: Hide Artifacts - Create an \"Administrator \" user (with a space on the end)\n      type: bool\n\n    - name: T1070 - 1\n      description: Indicator Removal on Host - Indicator Removal using FSUtil\n      type: bool\n\n    - name: T1202 - 1\n      description: Indirect Command Execution - Indirect Command Execution - pcalua.exe\n      type: bool\n\n    - name: T1202 - 2\n      description: Indirect Command Execution - Indirect Command Execution - forfiles.exe\n      type: bool\n\n    - name: T1202 - 3\n      description: Indirect Command Execution - Indirect Command Execution - conhost.exe\n      type: bool\n\n    - name: T1553.004 - 4\n      description: Install Root Certificate - Install root CA on Windows\n      type: bool\n\n    - name: T1553.004 - 5\n      description: Install Root Certificate - Install root CA on Windows with certutil\n      type: bool\n\n    - name: T1218.004 - 1\n      description: InstallUtil - CheckIfInstallable method call\n      type: bool\n\n    - name: T1218.004 - 2\n      description: InstallUtil - InstallHelper method call\n      type: bool\n\n    - name: T1218.004 - 3\n      description: InstallUtil - InstallUtil class constructor method call\n      type: bool\n\n    - name: T1218.004 - 4\n      description: InstallUtil - InstallUtil Install method call\n      type: bool\n\n    - name: T1218.004 - 5\n      description: InstallUtil - InstallUtil Uninstall method call - /U variant\n      type: bool\n\n    - name: T1218.004 - 6\n      description: InstallUtil - InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant\n      type: bool\n\n    - name: T1218.004 - 7\n      description: InstallUtil - InstallUtil HelpText method call\n      type: bool\n\n    - name: T1218.004 - 8\n      description: InstallUtil - InstallUtil evasive invocation\n      type: bool\n\n    - name: T1078.003 - 1\n      description: Local Accounts - Create local account with admin privileges\n      type: bool\n\n    - name: T1127.001 - 1\n      description: MSBuild - MSBuild Bypass Using Inline Tasks (C#)\n      type: bool\n\n    - name: T1127.001 - 2\n      description: MSBuild - MSBuild Bypass Using Inline Tasks (VB)\n      type: bool\n\n    - name: T1553.005 - 1\n      description: Mark-of-the-Web Bypass - Mount ISO image\n      type: bool\n\n    - name: T1553.005 - 2\n      description: Mark-of-the-Web Bypass - Mount an ISO image and run executable from the ISO\n      type: bool\n\n    - name: T1553.005 - 3\n      description: Mark-of-the-Web Bypass - Remove the Zone.Identifier alternate data stream\n      type: bool\n\n    - name: T1036.004 - 1\n      description: Masquerade Task or Service - Creating W32Time similar named service using schtasks\n      type: bool\n\n    - name: T1036.004 - 2\n      description: Masquerade Task or Service - Creating W32Time similar named service using sc\n      type: bool\n\n    - name: T1036 - 1\n      description: Masquerading - System File Copied to Unusual Location\n      type: bool\n\n    - name: T1112 - 1\n      description: Modify Registry - Modify Registry of Current User Profile - cmd\n      type: bool\n\n    - name: T1112 - 2\n      description: Modify Registry - Modify Registry of Local Machine - cmd\n      type: bool\n\n    - name: T1112 - 3\n      description: Modify Registry - Modify registry to store logon credentials\n      type: bool\n\n    - name: T1112 - 4\n      description: Modify Registry - Add domain to Trusted sites Zone\n      type: bool\n\n    - name: T1112 - 5\n      description: Modify Registry - Javascript in registry\n      type: bool\n\n    - name: T1112 - 6\n      description: Modify Registry - Change Powershell Execution Policy to Bypass\n      type: bool\n\n    - name: T1218.005 - 1\n      description: Mshta - Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject\n      type: bool\n\n    - name: T1218.005 - 2\n      description: Mshta - Mshta executes VBScript to execute malicious command\n      type: bool\n\n    - name: T1218.005 - 3\n      description: Mshta - Mshta Executes Remote HTML Application (HTA)\n      type: bool\n\n    - name: T1218.005 - 4\n      description: Mshta - Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement\n      type: bool\n\n    - name: T1218.005 - 5\n      description: Mshta - Invoke HTML Application - Jscript Engine Simulating Double Click\n      type: bool\n\n    - name: T1218.005 - 6\n      description: Mshta - Invoke HTML Application - Direct download from URI\n      type: bool\n\n    - name: T1218.005 - 7\n      description: Mshta - Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler\n      type: bool\n\n    - name: T1218.005 - 8\n      description: Mshta - Invoke HTML Application - JScript Engine with Inline Protocol Handler\n      type: bool\n\n    - name: T1218.005 - 9\n      description: Mshta - Invoke HTML Application - Simulate Lateral Movement over UNC Path\n      type: bool\n\n    - name: T1218.005 - 10\n      description: Mshta - Mshta used to Execute PowerShell\n      type: bool\n\n    - name: T1218.007 - 1\n      description: Msiexec - Msiexec.exe - Execute Local MSI file\n      type: bool\n\n    - name: T1218.007 - 2\n      description: Msiexec - Msiexec.exe - Execute Remote MSI file\n      type: bool\n\n    - name: T1218.007 - 3\n      description: Msiexec - Msiexec.exe - Execute Arbitrary DLL\n      type: bool\n\n    - name: T1564.004 - 1\n      description: NTFS File Attributes - Alternate Data Streams (ADS)\n      type: bool\n\n    - name: T1564.004 - 2\n      description: NTFS File Attributes - Store file in Alternate Data Stream (ADS)\n      type: bool\n\n    - name: T1564.004 - 3\n      description: NTFS File Attributes - Create ADS command prompt\n      type: bool\n\n    - name: T1564.004 - 4\n      description: NTFS File Attributes - Create ADS PowerShell\n      type: bool\n\n    - name: T1070.005 - 1\n      description: Network Share Connection Removal - Add Network Share\n      type: bool\n\n    - name: T1070.005 - 2\n      description: Network Share Connection Removal - Remove Network Share\n      type: bool\n\n    - name: T1070.005 - 3\n      description: Network Share Connection Removal - Remove Network Share PowerShell\n      type: bool\n\n    - name: T1027 - 2\n      description: Obfuscated Files or Information - Execute base64-encoded PowerShell\n      type: bool\n\n    - name: T1027 - 3\n      description: Obfuscated Files or Information - Execute base64-encoded PowerShell from Windows Registry\n      type: bool\n\n    - name: T1027 - 4\n      description: Obfuscated Files or Information - Execution from Compressed File\n      type: bool\n\n    - name: T1027 - 5\n      description: Obfuscated Files or Information - DLP Evasion via Sensitive Data in VBA Macro over email\n      type: bool\n\n    - name: T1027 - 6\n      description: Obfuscated Files or Information - DLP Evasion via Sensitive Data in VBA Macro over HTTP\n      type: bool\n\n    - name: T1027 - 7\n      description: Obfuscated Files or Information - Obfuscated Command in PowerShell\n      type: bool\n\n    - name: T1027 - 8\n      description: Obfuscated Files or Information - Obfuscated Command Line using special Unicode characters\n      type: bool\n\n    - name: T1218.008 - 1\n      description: Odbcconf - Odbcconf.exe - Execute Arbitrary DLL\n      type: bool\n\n    - name: T1134.004 - 1\n      description: Parent PID Spoofing - Parent PID Spoofing using PowerShell\n      type: bool\n\n    - name: T1134.004 - 2\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from Current Process\n      type: bool\n\n    - name: T1134.004 - 3\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from Specified Process\n      type: bool\n\n    - name: T1134.004 - 4\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from svchost.exe\n      type: bool\n\n    - name: T1134.004 - 5\n      description: Parent PID Spoofing - Parent PID Spoofing - Spawn from New Process\n      type: bool\n\n    - name: T1550.002 - 1\n      description: Pass the Hash - Mimikatz Pass the Hash\n      type: bool\n\n    - name: T1550.002 - 2\n      description: Pass the Hash - crackmapexec Pass the Hash\n      type: bool\n\n    - name: T1550.003 - 1\n      description: Pass the Ticket - Mimikatz Kerberos Ticket Attack\n      type: bool\n\n    - name: T1556.002 - 1\n      description: Password Filter DLL - Install and Register Password Filter DLL\n      type: bool\n\n    - name: T1574.009 - 1\n      description: Path Interception by Unquoted Path - Execution of program.exe as service with unquoted service path\n      type: bool\n\n    - name: T1055.012 - 1\n      description: Process Hollowing - Process Hollowing using PowerShell\n      type: bool\n\n    - name: T1055.012 - 2\n      description: Process Hollowing - RunPE via VBA\n      type: bool\n\n    - name: T1055 - 1\n      description: Process Injection - Shellcode execution via VBA\n      type: bool\n\n    - name: T1055 - 2\n      description: Process Injection - Remote Process Injection in LSASS via mimikatz\n      type: bool\n\n    - name: T1216.001 - 1\n      description: PubPrn - PubPrn.vbs Signed Script Bypass\n      type: bool\n\n    - name: T1218.009 - 1\n      description: Regsvcs/Regasm - Regasm Uninstall Method Call Test\n      type: bool\n\n    - name: T1218.009 - 2\n      description: Regsvcs/Regasm - Regsvcs Uninstall Method Call Test\n      type: bool\n\n    - name: T1218.010 - 1\n      description: Regsvr32 - Regsvr32 local COM scriptlet execution\n      type: bool\n\n    - name: T1218.010 - 2\n      description: Regsvr32 - Regsvr32 remote COM scriptlet execution\n      type: bool\n\n    - name: T1218.010 - 3\n      description: Regsvr32 - Regsvr32 local DLL execution\n      type: bool\n\n    - name: T1218.010 - 4\n      description: Regsvr32 - Regsvr32 Registering Non DLL\n      type: bool\n\n    - name: T1218.010 - 5\n      description: Regsvr32 - Regsvr32 Silent DLL Install Call DllRegisterServer\n      type: bool\n\n    - name: T1036.003 - 1\n      description: Rename System Utilities - Masquerading as Windows LSASS process\n      type: bool\n\n    - name: T1036.003 - 3\n      description: Rename System Utilities - Masquerading - cscript.exe running as notepad.exe\n      type: bool\n\n    - name: T1036.003 - 4\n      description: Rename System Utilities - Masquerading - wscript.exe running as svchost.exe\n      type: bool\n\n    - name: T1036.003 - 5\n      description: Rename System Utilities - Masquerading - powershell.exe running as taskhostw.exe\n      type: bool\n\n    - name: T1036.003 - 6\n      description: Rename System Utilities - Masquerading - non-windows exe running as windows exe\n      type: bool\n\n    - name: T1036.003 - 7\n      description: Rename System Utilities - Masquerading - windows exe running as different windows exe\n      type: bool\n\n    - name: T1036.003 - 8\n      description: Rename System Utilities - Malicious process Masquerading as LSM.exe\n      type: bool\n\n    - name: T1036.003 - 9\n      description: Rename System Utilities - File Extension Masquerading\n      type: bool\n\n    - name: T1207 - 1\n      description: Rogue Domain Controller - DCShadow (Active Directory)\n      type: bool\n\n    - name: T1014 - 3\n      description: Rootkit - Windows Signed Driver Rootkit Test\n      type: bool\n\n    - name: T1218.011 - 1\n      description: Rundll32 - Rundll32 execute JavaScript Remote Payload With GetObject\n      type: bool\n\n    - name: T1218.011 - 2\n      description: Rundll32 - Rundll32 execute VBscript command\n      type: bool\n\n    - name: T1218.011 - 3\n      description: Rundll32 - Rundll32 advpack.dll Execution\n      type: bool\n\n    - name: T1218.011 - 4\n      description: Rundll32 - Rundll32 ieadvpack.dll Execution\n      type: bool\n\n    - name: T1218.011 - 5\n      description: Rundll32 - Rundll32 syssetup.dll Execution\n      type: bool\n\n    - name: T1218.011 - 6\n      description: Rundll32 - Rundll32 setupapi.dll Execution\n      type: bool\n\n    - name: T1218.011 - 7\n      description: Rundll32 - Execution of HTA and VBS Files using Rundll32 and URL.dll\n      type: bool\n\n    - name: T1218.011 - 8\n      description: Rundll32 - Launches an executable using Rundll32 and pcwutl.dll\n      type: bool\n\n    - name: T1574.011 - 1\n      description: Services Registry Permissions Weakness - Service Registry Permissions Weakness\n      type: bool\n\n    - name: T1574.011 - 2\n      description: Services Registry Permissions Weakness - Service ImagePath Change with reg.exe\n      type: bool\n\n    - name: T1218 - 1\n      description: Signed Binary Proxy Execution - mavinject - Inject DLL into running process\n      type: bool\n\n    - name: T1218 - 2\n      description: Signed Binary Proxy Execution - SyncAppvPublishingServer - Execute arbitrary PowerShell code\n      type: bool\n\n    - name: T1218 - 3\n      description: Signed Binary Proxy Execution - Register-CimProvider - Execute evil dll\n      type: bool\n\n    - name: T1218 - 4\n      description: Signed Binary Proxy Execution - InfDefaultInstall.exe .inf Execution\n      type: bool\n\n    - name: T1218 - 5\n      description: Signed Binary Proxy Execution - ProtocolHandler.exe Downloaded a Suspicious File\n      type: bool\n\n    - name: T1218 - 6\n      description: Signed Binary Proxy Execution - Microsoft.Workflow.Compiler.exe Payload Execution\n      type: bool\n\n    - name: T1218 - 7\n      description: Signed Binary Proxy Execution - Renamed Microsoft.Workflow.Compiler.exe Payload Executions\n      type: bool\n\n    - name: T1218 - 8\n      description: Signed Binary Proxy Execution - Invoke-ATHRemoteFXvGPUDisablementCommand base test\n      type: bool\n\n    - name: T1216 - 1\n      description: Signed Script Proxy Execution - SyncAppvPublishingServer Signed Script PowerShell Command Execution\n      type: bool\n\n    - name: T1216 - 2\n      description: Signed Script Proxy Execution - manage-bde.wsf Signed Script Command Execution\n      type: bool\n\n    - name: T1497.001 - 2\n      description: System Checks - Detect Virtualization Environment (Windows)\n      type: bool\n\n    - name: T1221 - 1\n      description: Template Injection - WINWORD Remote Template Injection\n      type: bool\n\n    - name: T1070.006 - 5\n      description: Timestomp - Windows - Modify file creation timestamp with PowerShell\n      type: bool\n\n    - name: T1070.006 - 6\n      description: Timestomp - Windows - Modify file last modified timestamp with PowerShell\n      type: bool\n\n    - name: T1070.006 - 7\n      description: Timestomp - Windows - Modify file last access timestamp with PowerShell\n      type: bool\n\n    - name: T1070.006 - 8\n      description: Timestomp - Windows - Timestomp a File\n      type: bool\n\n    - name: T1134.001 - 1\n      description: Token Impersonation/Theft - Named pipe client impersonation\n      type: bool\n\n    - name: T1134.001 - 2\n      description: Token Impersonation/Theft - `SeDebugPrivilege` token duplication\n      type: bool\n\n    - name: T1222.001 - 1\n      description: Windows File and Directory Permissions Modification - Take ownership using takeown utility\n      type: bool\n\n    - name: T1222.001 - 2\n      description: Windows File and Directory Permissions Modification - cacls - Grant permission to specified user or group recursively\n      type: bool\n\n    - name: T1222.001 - 3\n      description: Windows File and Directory Permissions Modification - attrib - Remove read-only attribute\n      type: bool\n\n    - name: T1222.001 - 4\n      description: Windows File and Directory Permissions Modification - attrib - hide file\n      type: bool\n\n    - name: T1222.001 - 5\n      description: Windows File and Directory Permissions Modification - Grant Full Access to folder for Everyone - Ryuk Ransomware Style\n      type: bool\n\n    - name: T1220 - 1\n      description: XSL Script Processing - MSXSL Bypass using local files\n      type: bool\n\n    - name: T1220 - 2\n      description: XSL Script Processing - MSXSL Bypass using remote files\n      type: bool\n\n    - name: T1220 - 3\n      description: XSL Script Processing - WMIC bypass using local XSL file\n      type: bool\n\n    - name: T1220 - 4\n      description: XSL Script Processing - WMIC bypass using remote XSL file\n      type: bool\n\n    - name: T1546.008 - 1\n      description: Accessibility Features - Attaches Command Prompt as a Debugger to a List of Target Processes\n      type: bool\n\n    - name: T1546.008 - 2\n      description: Accessibility Features - Replace binary of sticky keys\n      type: bool\n\n    - name: T1098 - 1\n      description: Account Manipulation - Admin Account Manipulate\n      type: bool\n\n    - name: T1098 - 2\n      description: Account Manipulation - Domain Account and Group Manipulate\n      type: bool\n\n    - name: T1137.006 - 1\n      description: Add-ins - Code Executed Via Excel Add-in File (Xll)\n      type: bool\n\n    - name: T1546.010 - 1\n      description: AppInit DLLs - Install AppInit Shim\n      type: bool\n\n    - name: T1546.011 - 1\n      description: Application Shimming - Application Shim Installation\n      type: bool\n\n    - name: T1546.011 - 2\n      description: Application Shimming - New shim database files created in the default shim database directory\n      type: bool\n\n    - name: T1546.011 - 3\n      description: Application Shimming - Registry key creation and/or modification events for SDB\n      type: bool\n\n    - name: T1053.002 - 1\n      description: At (Windows) - At.exe Scheduled task\n      type: bool\n\n    - name: T1197 - 1\n      description: BITS Jobs - Bitsadmin Download (cmd)\n      type: bool\n\n    - name: T1197 - 2\n      description: BITS Jobs - Bitsadmin Download (PowerShell)\n      type: bool\n\n    - name: T1197 - 3\n      description: BITS Jobs - Persist, Download, \u0026 Execute\n      type: bool\n\n    - name: T1197 - 4\n      description: BITS Jobs - Bits download using desktopimgdownldr.exe (cmd)\n      type: bool\n\n    - name: T1176 - 1\n      description: Browser Extensions - Chrome (Developer Mode)\n      type: bool\n\n    - name: T1176 - 2\n      description: Browser Extensions - Chrome (Chrome Web Store)\n      type: bool\n\n    - name: T1176 - 3\n      description: Browser Extensions - Firefox\n      type: bool\n\n    - name: T1176 - 4\n      description: Browser Extensions - Edge Chromium Addon - VPN\n      type: bool\n\n    - name: T1574.012 - 1\n      description: COR_PROFILER - User scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 2\n      description: COR_PROFILER - System Scope COR_PROFILER\n      type: bool\n\n    - name: T1574.012 - 3\n      description: COR_PROFILER - Registry-free process scope COR_PROFILER\n      type: bool\n\n    - name: T1546.001 - 1\n      description: Change Default File Association - Change Default File Association\n      type: bool\n\n    - name: T1574.001 - 1\n      description: DLL Search Order Hijacking - DLL Search Order Hijacking - amsi.dll\n      type: bool\n\n    - name: T1574.002 - 1\n      description: DLL Side-Loading - DLL Side-Loading using the Notepad++ GUP.exe binary\n      type: bool\n\n    - name: T1078.001 - 1\n      description: Default Accounts - Enable Guest account with RDP capability and admin privileges\n      type: bool\n\n    - name: T1078.001 - 2\n      description: Default Accounts - Activate Guest Account\n      type: bool\n\n    - name: T1136.002 - 1\n      description: Domain Account - Create a new Windows domain admin user\n      type: bool\n\n    - name: T1136.002 - 2\n      description: Domain Account - Create a new account similar to ANONYMOUS LOGON\n      type: bool\n\n    - name: T1136.002 - 3\n      description: Domain Account - Create a new Domain Account using PowerShell\n      type: bool\n\n    - name: T1133 - 1\n      description: External Remote Services - Running Chrome VPN Extensions via the Registry 2 vpn extension\n      type: bool\n\n    - name: T1546.012 - 1\n      description: Image File Execution Options Injection - IFEO Add Debugger\n      type: bool\n\n    - name: T1546.012 - 2\n      description: Image File Execution Options Injection - IFEO Global Flags\n      type: bool\n\n    - name: T1136.001 - 3\n      description: Local Account - Create a new user in a command prompt\n      type: bool\n\n    - name: T1136.001 - 4\n      description: Local Account - Create a new user in PowerShell\n      type: bool\n\n    - name: T1136.001 - 6\n      description: Local Account - Create a new Windows admin user\n      type: bool\n\n    - name: T1078.003 - 1\n      description: Local Accounts - Create local account with admin privileges\n      type: bool\n\n    - name: T1037.001 - 1\n      description: Logon Script (Windows) - Logon Scripts\n      type: bool\n\n    - name: T1546.007 - 1\n      description: Netsh Helper DLL - Netsh Helper DLL Registration\n      type: bool\n\n    - name: T1137 - 1\n      description: Office Application Startup - Office Application Startup - Outlook as a C2\n      type: bool\n\n    - name: T1137.002 - 1\n      description: Office Test - Office Application Startup Test Persistence\n      type: bool\n\n    - name: T1137.004 - 1\n      description: Outlook Home Page - Install Outlook Home Page Persistence\n      type: bool\n\n    - name: T1556.002 - 1\n      description: Password Filter DLL - Install and Register Password Filter DLL\n      type: bool\n\n    - name: T1574.009 - 1\n      description: Path Interception by Unquoted Path - Execution of program.exe as service with unquoted service path\n      type: bool\n\n    - name: T1547.010 - 1\n      description: Port Monitors - Add Port Monitor persistence in Registry\n      type: bool\n\n    - name: T1546.013 - 1\n      description: PowerShell Profile - Append malicious start-process cmdlet\n      type: bool\n\n    - name: T1547.001 - 1\n      description: Registry Run Keys / Startup Folder - Reg Key Run\n      type: bool\n\n    - name: T1547.001 - 2\n      description: Registry Run Keys / Startup Folder - Reg Key RunOnce\n      type: bool\n\n    - name: T1547.001 - 3\n      description: Registry Run Keys / Startup Folder - PowerShell Registry RunOnce\n      type: bool\n\n    - name: T1547.001 - 4\n      description: Registry Run Keys / Startup Folder - Suspicious vbs file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 5\n      description: Registry Run Keys / Startup Folder - Suspicious jse file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 6\n      description: Registry Run Keys / Startup Folder - Suspicious bat file run from startup Folder\n      type: bool\n\n    - name: T1547.001 - 7\n      description: Registry Run Keys / Startup Folder - Add Executable Shortcut Link to User Startup Folder\n      type: bool\n\n    - name: T1053.005 - 1\n      description: Scheduled Task - Scheduled Task Startup Script\n      type: bool\n\n    - name: T1053.005 - 2\n      description: Scheduled Task - Scheduled task Local\n      type: bool\n\n    - name: T1053.005 - 3\n      description: Scheduled Task - Scheduled task Remote\n      type: bool\n\n    - name: T1053.005 - 4\n      description: Scheduled Task - Powershell Cmdlet Scheduled Task\n      type: bool\n\n    - name: T1053.005 - 5\n      description: Scheduled Task - Task Scheduler via VBA\n      type: bool\n\n    - name: T1053.005 - 6\n      description: Scheduled Task - WMI Invoke-CimMethod Scheduled Task\n      type: bool\n\n    - name: T1546.002 - 1\n      description: Screensaver - Set Arbitrary Binary as Screensaver\n      type: bool\n\n    - name: T1547.005 - 1\n      description: Security Support Provider - Modify SSP configuration in registry\n      type: bool\n\n    - name: T1574.011 - 1\n      description: Services Registry Permissions Weakness - Service Registry Permissions Weakness\n      type: bool\n\n    - name: T1574.011 - 2\n      description: Services Registry Permissions Weakness - Service ImagePath Change with reg.exe\n      type: bool\n\n    - name: T1547.009 - 1\n      description: Shortcut Modification - Shortcut Modification\n      type: bool\n\n    - name: T1547.009 - 2\n      description: Shortcut Modification - Create shortcut to cmd in startup folders\n      type: bool\n\n    - name: T1505.002 - 1\n      description: Transport Agent - Install MS Exchange Transport Agent Persistence\n      type: bool\n\n    - name: T1505.003 - 1\n      description: Web Shell - Web Shell Written to Disk\n      type: bool\n\n    - name: T1546.003 - 1\n      description: Windows Management Instrumentation Event Subscription - Persistence via WMI Event Subscription\n      type: bool\n\n    - name: T1543.003 - 1\n      description: Windows Service - Modify Fax service to run PowerShell\n      type: bool\n\n    - name: T1543.003 - 2\n      description: Windows Service - Service Installation CMD\n      type: bool\n\n    - name: T1543.003 - 3\n      description: Windows Service - Service Installation PowerShell\n      type: bool\n\n    - name: T1547.004 - 1\n      description: Winlogon Helper DLL - Winlogon Shell Key Persistence - PowerShell\n      type: bool\n\n    - name: T1547.004 - 2\n      description: Winlogon Helper DLL - Winlogon Userinit Key Persistence - PowerShell\n      type: bool\n\n    - name: T1547.004 - 3\n      description: Winlogon Helper DLL - Winlogon Notify Key Logon Persistence - PowerShell\n      type: bool\n\n    - name: T1531 - 1\n      description: Account Access Removal - Change User Password - Windows\n      type: bool\n\n    - name: T1531 - 2\n      description: Account Access Removal - Delete User - Windows\n      type: bool\n\n    - name: T1531 - 3\n      description: Account Access Removal - Remove Account From Domain Admin Group\n      type: bool\n\n    - name: T1485 - 1\n      description: Data Destruction - Windows - Overwrite file with Sysinternals SDelete\n      type: bool\n\n    - name: T1486 - 5\n      description: Data Encrypted for Impact - PureLocker Ransom Note\n      type: bool\n\n    - name: T1490 - 1\n      description: Inhibit System Recovery - Windows - Delete Volume Shadow Copies\n      type: bool\n\n    - name: T1490 - 2\n      description: Inhibit System Recovery - Windows - Delete Volume Shadow Copies via WMI\n      type: bool\n\n    - name: T1490 - 3\n      description: Inhibit System Recovery - Windows - wbadmin Delete Windows Backup Catalog\n      type: bool\n\n    - name: T1490 - 4\n      description: Inhibit System Recovery - Windows - Disable Windows Recovery Console Repair\n      type: bool\n\n    - name: T1490 - 5\n      description: Inhibit System Recovery - Windows - Delete Volume Shadow Copies via WMI with PowerShell\n      type: bool\n\n    - name: T1490 - 6\n      description: Inhibit System Recovery - Windows - Delete Backup Files\n      type: bool\n\n    - name: T1490 - 7\n      description: Inhibit System Recovery - Windows - wbadmin Delete systemstatebackup\n      type: bool\n\n    - name: T1490 - 8\n      description: Inhibit System Recovery - Windows - Disable the SR scheduled task\n      type: bool\n\n    - name: T1491.001 - 1\n      description: Internal Defacement - Replace Desktop Wallpaper\n      type: bool\n\n    - name: T1489 - 1\n      description: Service Stop - Windows - Stop service using Service Controller\n      type: bool\n\n    - name: T1489 - 2\n      description: Service Stop - Windows - Stop service using net.exe\n      type: bool\n\n    - name: T1489 - 3\n      description: Service Stop - Windows - Stop service by killing process\n      type: bool\n\n    - name: T1529 - 1\n      description: System Shutdown/Reboot - Shutdown System - Windows\n      type: bool\n\n    - name: T1529 - 2\n      description: System Shutdown/Reboot - Restart System - Windows\n      type: bool\n\n    - name: T1010 - 1\n      description: Application Window Discovery - List Process Main Windows - C# .NET\n      type: bool\n\n    - name: T1217 - 4\n      description: Browser Bookmark Discovery - List Google Chrome Bookmarks on Windows with powershell\n      type: bool\n\n    - name: T1217 - 5\n      description: Browser Bookmark Discovery - List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt\n      type: bool\n\n    - name: T1217 - 6\n      description: Browser Bookmark Discovery - List Mozilla Firefox bookmarks on Windows with command prompt\n      type: bool\n\n    - name: T1217 - 7\n      description: Browser Bookmark Discovery - List Internet Explorer Bookmarks using the command prompt\n      type: bool\n\n    - name: T1087.002 - 1\n      description: Domain Account - Enumerate all accounts (Domain)\n      type: bool\n\n    - name: T1087.002 - 2\n      description: Domain Account - Enumerate all accounts via PowerShell (Domain)\n      type: bool\n\n    - name: T1087.002 - 3\n      description: Domain Account - Enumerate logged on users via CMD (Domain)\n      type: bool\n\n    - name: T1087.002 - 4\n      description: Domain Account - Automated AD Recon (ADRecon)\n      type: bool\n\n    - name: T1087.002 - 5\n      description: Domain Account - Adfind -Listing password policy\n      type: bool\n\n    - name: T1087.002 - 6\n      description: Domain Account - Adfind - Enumerate Active Directory Admins\n      type: bool\n\n    - name: T1087.002 - 7\n      description: Domain Account - Adfind - Enumerate Active Directory User Objects\n      type: bool\n\n    - name: T1087.002 - 8\n      description: Domain Account - Adfind - Enumerate Active Directory Exchange AD Objects\n      type: bool\n\n    - name: T1087.002 - 9\n      description: Domain Account - Enumerate Default Domain Admin Details (Domain)\n      type: bool\n\n    - name: T1087.002 - 10\n      description: Domain Account - Enumerate Active Directory for Unconstrained Delegation\n      type: bool\n\n    - name: T1069.002 - 1\n      description: Domain Groups - Basic Permission Groups Discovery Windows (Domain)\n      type: bool\n\n    - name: T1069.002 - 2\n      description: Domain Groups - Permission Groups Discovery PowerShell (Domain)\n      type: bool\n\n    - name: T1069.002 - 3\n      description: Domain Groups - Elevated group enumeration using net group (Domain)\n      type: bool\n\n    - name: T1069.002 - 4\n      description: Domain Groups - Find machines where user has local admin access (PowerView)\n      type: bool\n\n    - name: T1069.002 - 5\n      description: Domain Groups - Find local admins on all machines in domain (PowerView)\n      type: bool\n\n    - name: T1069.002 - 6\n      description: Domain Groups - Find Local Admins via Group Policy (PowerView)\n      type: bool\n\n    - name: T1069.002 - 7\n      description: Domain Groups - Enumerate Users Not Requiring Pre Auth (ASRepRoast)\n      type: bool\n\n    - name: T1069.002 - 8\n      description: Domain Groups - Adfind - Query Active Directory Groups\n      type: bool\n\n    - name: T1482 - 1\n      description: Domain Trust Discovery - Windows - Discover domain trusts with dsquery\n      type: bool\n\n    - name: T1482 - 2\n      description: Domain Trust Discovery - Windows - Discover domain trusts with nltest\n      type: bool\n\n    - name: T1482 - 3\n      description: Domain Trust Discovery - Powershell enumerate domains and forests\n      type: bool\n\n    - name: T1482 - 4\n      description: Domain Trust Discovery - Adfind - Enumerate Active Directory OUs\n      type: bool\n\n    - name: T1482 - 5\n      description: Domain Trust Discovery - Adfind - Enumerate Active Directory Trusts\n      type: bool\n\n    - name: T1482 - 6\n      description: Domain Trust Discovery - Get-DomainTrust with PowerView\n      type: bool\n\n    - name: T1482 - 7\n      description: Domain Trust Discovery - Get-ForestTrust with PowerView\n      type: bool\n\n    - name: T1083 - 1\n      description: File and Directory Discovery - File and Directory Discovery (cmd.exe)\n      type: bool\n\n    - name: T1083 - 2\n      description: File and Directory Discovery - File and Directory Discovery (PowerShell)\n      type: bool\n\n    - name: T1087.001 - 8\n      description: Local Account - Enumerate all accounts on Windows (Local)\n      type: bool\n\n    - name: T1087.001 - 9\n      description: Local Account - Enumerate all accounts via PowerShell (Local)\n      type: bool\n\n    - name: T1087.001 - 10\n      description: Local Account - Enumerate logged on users via CMD (Local)\n      type: bool\n\n    - name: T1069.001 - 2\n      description: Local Groups - Basic Permission Groups Discovery Windows (Local)\n      type: bool\n\n    - name: T1069.001 - 3\n      description: Local Groups - Permission Groups Discovery PowerShell (Local)\n      type: bool\n\n    - name: T1069.001 - 4\n      description: Local Groups - SharpHound3 - LocalAdmin\n      type: bool\n\n    - name: T1069.001 - 5\n      description: Local Groups - Wmic Group Discovery\n      type: bool\n\n    - name: T1069.001 - 6\n      description: Local Groups - WMIObject Group Discovery\n      type: bool\n\n    - name: T1046 - 3\n      description: Network Service Scanning - Port Scan NMap for Windows\n      type: bool\n\n    - name: T1046 - 4\n      description: Network Service Scanning - Port Scan using python\n      type: bool\n\n    - name: T1135 - 3\n      description: Network Share Discovery - Network Share Discovery command prompt\n      type: bool\n\n    - name: T1135 - 4\n      description: Network Share Discovery - Network Share Discovery PowerShell\n      type: bool\n\n    - name: T1135 - 5\n      description: Network Share Discovery - View available share drives\n      type: bool\n\n    - name: T1135 - 6\n      description: Network Share Discovery - Share Discovery with PowerView\n      type: bool\n\n    - name: T1040 - 3\n      description: Network Sniffing - Packet Capture Windows Command Prompt\n      type: bool\n\n    - name: T1040 - 4\n      description: Network Sniffing - Windows Internal Packet Capture\n      type: bool\n\n    - name: T1201 - 5\n      description: Password Policy Discovery - Examine local password policy - Windows\n      type: bool\n\n    - name: T1201 - 6\n      description: Password Policy Discovery - Examine domain password policy - Windows\n      type: bool\n\n    - name: T1120 - 1\n      description: Peripheral Device Discovery - Win32_PnPEntity Hardware Inventory\n      type: bool\n\n    - name: T1057 - 2\n      description: Process Discovery - Process Discovery - tasklist\n      type: bool\n\n    - name: T1012 - 1\n      description: Query Registry - Query Registry\n      type: bool\n\n    - name: T1018 - 1\n      description: Remote System Discovery - Remote System Discovery - net\n      type: bool\n\n    - name: T1018 - 2\n      description: Remote System Discovery - Remote System Discovery - net group Domain Computers\n      type: bool\n\n    - name: T1018 - 3\n      description: Remote System Discovery - Remote System Discovery - nltest\n      type: bool\n\n    - name: T1018 - 4\n      description: Remote System Discovery - Remote System Discovery - ping sweep\n      type: bool\n\n    - name: T1018 - 5\n      description: Remote System Discovery - Remote System Discovery - arp\n      type: bool\n\n    - name: T1018 - 8\n      description: Remote System Discovery - Remote System Discovery - nslookup\n      type: bool\n\n    - name: T1018 - 9\n      description: Remote System Discovery - Remote System Discovery - adidnsdump\n      type: bool\n\n    - name: T1018 - 10\n      description: Remote System Discovery - Adfind - Enumerate Active Directory Computer Objects\n      type: bool\n\n    - name: T1018 - 11\n      description: Remote System Discovery - Adfind - Enumerate Active Directory Domain Controller Objects\n      type: bool\n\n    - name: T1518.001 - 1\n      description: Security Software Discovery - Security Software Discovery\n      type: bool\n\n    - name: T1518.001 - 2\n      description: Security Software Discovery - Security Software Discovery - powershell\n      type: bool\n\n    - name: T1518.001 - 5\n      description: Security Software Discovery - Security Software Discovery - Sysmon Service\n      type: bool\n\n    - name: T1518.001 - 6\n      description: Security Software Discovery - Security Software Discovery - AV Discovery via WMI\n      type: bool\n\n    - name: T1518 - 1\n      description: Software Discovery - Find and Display Internet Explorer Browser Version\n      type: bool\n\n    - name: T1518 - 2\n      description: Software Discovery - Applications Installed\n      type: bool\n\n    - name: T1497.001 - 2\n      description: System Checks - Detect Virtualization Environment (Windows)\n      type: bool\n\n    - name: T1082 - 1\n      description: System Information Discovery - System Information Discovery\n      type: bool\n\n    - name: T1082 - 6\n      description: System Information Discovery - Hostname Discovery (Windows)\n      type: bool\n\n    - name: T1082 - 8\n      description: System Information Discovery - Windows MachineGUID Discovery\n      type: bool\n\n    - name: T1082 - 9\n      description: System Information Discovery - Griffon Recon\n      type: bool\n\n    - name: T1082 - 10\n      description: System Information Discovery - Environment variables discovery on windows\n      type: bool\n\n    - name: T1016 - 1\n      description: System Network Configuration Discovery - System Network Configuration Discovery on Windows\n      type: bool\n\n    - name: T1016 - 2\n      description: System Network Configuration Discovery - List Windows Firewall Rules\n      type: bool\n\n    - name: T1016 - 4\n      description: System Network Configuration Discovery - System Network Configuration Discovery (TrickBot Style)\n      type: bool\n\n    - name: T1016 - 5\n      description: System Network Configuration Discovery - List Open Egress Ports\n      type: bool\n\n    - name: T1016 - 6\n      description: System Network Configuration Discovery - Adfind - Enumerate Active Directory Subnet Objects\n      type: bool\n\n    - name: T1016 - 7\n      description: System Network Configuration Discovery - Qakbot Recon\n      type: bool\n\n    - name: T1049 - 1\n      description: System Network Connections Discovery - System Network Connections Discovery\n      type: bool\n\n    - name: T1049 - 2\n      description: System Network Connections Discovery - System Network Connections Discovery with PowerShell\n      type: bool\n\n    - name: T1049 - 4\n      description: System Network Connections Discovery - System Discovery using SharpView\n      type: bool\n\n    - name: T1033 - 1\n      description: System Owner/User Discovery - System Owner/User Discovery\n      type: bool\n\n    - name: T1033 - 3\n      description: System Owner/User Discovery - Find computers where user has session - Stealth mode (PowerView)\n      type: bool\n\n    - name: T1007 - 1\n      description: System Service Discovery - System Service Discovery\n      type: bool\n\n    - name: T1007 - 2\n      description: System Service Discovery - System Service Discovery - net.exe\n      type: bool\n\n    - name: T1124 - 1\n      description: System Time Discovery - System Time Discovery\n      type: bool\n\n    - name: T1124 - 2\n      description: System Time Discovery - System Time Discovery - PowerShell\n      type: bool\n\n    - name: T1071.004 - 1\n      description: DNS - DNS Large Query Volume\n      type: bool\n\n    - name: T1071.004 - 2\n      description: DNS - DNS Regular Beaconing\n      type: bool\n\n    - name: T1071.004 - 3\n      description: DNS - DNS Long Domain Query\n      type: bool\n\n    - name: T1071.004 - 4\n      description: DNS - DNS C2\n      type: bool\n\n    - name: T1573 - 1\n      description: Encrypted Channel - OpenSSL C2\n      type: bool\n\n    - name: T1105 - 7\n      description: Ingress Tool Transfer - certutil download (urlcache)\n      type: bool\n\n    - name: T1105 - 8\n      description: Ingress Tool Transfer - certutil download (verifyctl)\n      type: bool\n\n    - name: T1105 - 9\n      description: Ingress Tool Transfer - Windows - BITSAdmin BITS Download\n      type: bool\n\n    - name: T1105 - 10\n      description: Ingress Tool Transfer - Windows - PowerShell Download\n      type: bool\n\n    - name: T1105 - 11\n      description: Ingress Tool Transfer - OSTAP Worming Activity\n      type: bool\n\n    - name: T1105 - 12\n      description: Ingress Tool Transfer - svchost writing a file to a UNC path\n      type: bool\n\n    - name: T1105 - 13\n      description: Ingress Tool Transfer - Download a File with Windows Defender MpCmdRun.exe\n      type: bool\n\n    - name: T1105 - 15\n      description: Ingress Tool Transfer - File Download via PowerShell\n      type: bool\n\n    - name: T1105 - 16\n      description: Ingress Tool Transfer - File download with finger.exe on Windows\n      type: bool\n\n    - name: T1105 - 17\n      description: Ingress Tool Transfer - Download a file with IMEWDBLD.exe\n      type: bool\n\n    - name: T1105 - 18\n      description: Ingress Tool Transfer - Curl Download File\n      type: bool\n\n    - name: T1090.001 - 3\n      description: Internal Proxy - portproxy reg key\n      type: bool\n\n    - name: T1095 - 1\n      description: Non-Application Layer Protocol - ICMP C2\n      type: bool\n\n    - name: T1095 - 2\n      description: Non-Application Layer Protocol - Netcat C2\n      type: bool\n\n    - name: T1095 - 3\n      description: Non-Application Layer Protocol - Powercat C2\n      type: bool\n\n    - name: T1571 - 1\n      description: Non-Standard Port - Testing usage of uncommonly used port with PowerShell\n      type: bool\n\n    - name: T1572 - 1\n      description: Protocol Tunneling - DNS over HTTPS Large Query Volume\n      type: bool\n\n    - name: T1572 - 2\n      description: Protocol Tunneling - DNS over HTTPS Regular Beaconing\n      type: bool\n\n    - name: T1572 - 3\n      description: Protocol Tunneling - DNS over HTTPS Long Domain Query\n      type: bool\n\n    - name: T1219 - 1\n      description: Remote Access Software - TeamViewer Files Detected Test on Windows\n      type: bool\n\n    - name: T1219 - 2\n      description: Remote Access Software - AnyDesk Files Detected Test on Windows\n      type: bool\n\n    - name: T1219 - 3\n      description: Remote Access Software - LogMeIn Files Detected Test on Windows\n      type: bool\n\n    - name: T1219 - 4\n      description: Remote Access Software - GoToAssist Files Detected Test on Windows\n      type: bool\n\n    - name: T1219 - 5\n      description: Remote Access Software - ScreenConnect Application Download and Install on Windows\n      type: bool\n\n    - name: T1132.001 - 2\n      description: Standard Encoding - XOR Encoded data.\n      type: bool\n\n    - name: T1071.001 - 1\n      description: Web Protocols - Malicious User Agents - Powershell\n      type: bool\n\n    - name: T1071.001 - 2\n      description: Web Protocols - Malicious User Agents - CMD\n      type: bool\n\n    - name: T1053.002 - 1\n      description: At (Windows) - At.exe Scheduled task\n      type: bool\n\n    - name: T1559.002 - 1\n      description: Dynamic Data Exchange - Execute Commands\n      type: bool\n\n    - name: T1559.002 - 2\n      description: Dynamic Data Exchange - Execute PowerShell script via Word DDE\n      type: bool\n\n    - name: T1559.002 - 3\n      description: Dynamic Data Exchange - DDEAUTO\n      type: bool\n\n    - name: T1204.002 - 1\n      description: Malicious File - OSTap Style Macro Execution\n      type: bool\n\n    - name: T1204.002 - 2\n      description: Malicious File - OSTap Payload Download\n      type: bool\n\n    - name: T1204.002 - 3\n      description: Malicious File - Maldoc choice flags command execution\n      type: bool\n\n    - name: T1204.002 - 4\n      description: Malicious File - OSTAP JS version\n      type: bool\n\n    - name: T1204.002 - 5\n      description: Malicious File - Office launching .bat file from AppData\n      type: bool\n\n    - name: T1204.002 - 6\n      description: Malicious File - Excel 4 Macro\n      type: bool\n\n    - name: T1204.002 - 7\n      description: Malicious File - Headless Chrome code execution via VBA\n      type: bool\n\n    - name: T1204.002 - 8\n      description: Malicious File - Potentially Unwanted Applications (PUA)\n      type: bool\n\n    - name: T1204.002 - 9\n      description: Malicious File - Office Generic Payload Download\n      type: bool\n\n    - name: T1106 - 1\n      description: Native API - Execution through API - CreateProcess\n      type: bool\n\n    - name: T1059.001 - 1\n      description: PowerShell - Mimikatz\n      type: bool\n\n    - name: T1059.001 - 2\n      description: PowerShell - Run BloodHound from local disk\n      type: bool\n\n    - name: T1059.001 - 3\n      description: PowerShell - Run Bloodhound from Memory using Download Cradle\n      type: bool\n\n    - name: T1059.001 - 4\n      description: PowerShell - Obfuscation Tests\n      type: bool\n\n    - name: T1059.001 - 5\n      description: PowerShell - Mimikatz - Cradlecraft PsSendKeys\n      type: bool\n\n    - name: T1059.001 - 6\n      description: PowerShell - Invoke-AppPathBypass\n      type: bool\n\n    - name: T1059.001 - 7\n      description: PowerShell - Powershell MsXml COM object - with prompt\n      type: bool\n\n    - name: T1059.001 - 8\n      description: PowerShell - Powershell XML requests\n      type: bool\n\n    - name: T1059.001 - 9\n      description: PowerShell - Powershell invoke mshta.exe download\n      type: bool\n\n    - name: T1059.001 - 10\n      description: PowerShell - Powershell Invoke-DownloadCradle\n      type: bool\n\n    - name: T1059.001 - 11\n      description: PowerShell - PowerShell Fileless Script Execution\n      type: bool\n\n    - name: T1059.001 - 12\n      description: PowerShell - PowerShell Downgrade Attack\n      type: bool\n\n    - name: T1059.001 - 13\n      description: PowerShell - NTFS Alternate Data Stream Access\n      type: bool\n\n    - name: T1059.001 - 14\n      description: PowerShell - PowerShell Session Creation and Use\n      type: bool\n\n    - name: T1059.001 - 15\n      description: PowerShell - ATHPowerShellCommandLineParameter -Command parameter variations\n      type: bool\n\n    - name: T1059.001 - 16\n      description: PowerShell - ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments\n      type: bool\n\n    - name: T1059.001 - 17\n      description: PowerShell - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations\n      type: bool\n\n    - name: T1059.001 - 18\n      description: PowerShell - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments\n      type: bool\n\n    - name: T1059.001 - 19\n      description: PowerShell - PowerShell Command Execution\n      type: bool\n\n    - name: T1059.001 - 20\n      description: PowerShell - PowerShell Invoke Known Malicious Cmdlets\n      type: bool\n\n    - name: T1059.001 - 21\n      description: PowerShell - PowerUp Invoke-AllChecks\n      type: bool\n\n    - name: T1053.005 - 1\n      description: Scheduled Task - Scheduled Task Startup Script\n      type: bool\n\n    - name: T1053.005 - 2\n      description: Scheduled Task - Scheduled task Local\n      type: bool\n\n    - name: T1053.005 - 3\n      description: Scheduled Task - Scheduled task Remote\n      type: bool\n\n    - name: T1053.005 - 4\n      description: Scheduled Task - Powershell Cmdlet Scheduled Task\n      type: bool\n\n    - name: T1053.005 - 5\n      description: Scheduled Task - Task Scheduler via VBA\n      type: bool\n\n    - name: T1053.005 - 6\n      description: Scheduled Task - WMI Invoke-CimMethod Scheduled Task\n      type: bool\n\n    - name: T1569.002 - 1\n      description: Service Execution - Execute a Command as a Service\n      type: bool\n\n    - name: T1569.002 - 2\n      description: Service Execution - Use PsExec to execute a command on a remote host\n      type: bool\n\n    - name: T1072 - 1\n      description: Software Deployment Tools - Radmin Viewer Utility\n      type: bool\n\n    - name: T1059.005 - 1\n      description: Visual Basic - Visual Basic script execution to gather local computer information\n      type: bool\n\n    - name: T1059.005 - 2\n      description: Visual Basic - Encoded VBS code execution\n      type: bool\n\n    - name: T1059.005 - 3\n      description: Visual Basic - Extract Memory via VBA\n      type: bool\n\n    - name: T1059.003 - 1\n      description: Windows Command Shell - Create and Execute Batch Script\n      type: bool\n\n    - name: T1059.003 - 2\n      description: Windows Command Shell - Writes text to a file and displays it.\n      type: bool\n\n    - name: T1059.003 - 3\n      description: Windows Command Shell - Suspicious Execution via Windows Command Shell\n      type: bool\n\n    - name: T1047 - 1\n      description: Windows Management Instrumentation - WMI Reconnaissance Users\n      type: bool\n\n    - name: T1047 - 2\n      description: Windows Management Instrumentation - WMI Reconnaissance Processes\n      type: bool\n\n    - name: T1047 - 3\n      description: Windows Management Instrumentation - WMI Reconnaissance Software\n      type: bool\n\n    - name: T1047 - 4\n      description: Windows Management Instrumentation - WMI Reconnaissance List Remote Services\n      type: bool\n\n    - name: T1047 - 5\n      description: Windows Management Instrumentation - WMI Execute Local Process\n      type: bool\n\n    - name: T1047 - 6\n      description: Windows Management Instrumentation - WMI Execute Remote Process\n      type: bool\n\n    - name: T1047 - 7\n      description: Windows Management Instrumentation - Create a Process using WMI Query and an Encoded Command\n      type: bool\n\n    - name: T1047 - 8\n      description: Windows Management Instrumentation - Create a Process using obfuscated Win32_Process\n      type: bool\n\n    - name: T1047 - 9\n      description: Windows Management Instrumentation - WMI Execute rundll32\n      type: bool\n\n    - name: T1020 - 1\n      description: Automated Exfiltration - IcedID Botnet HTTP PUT\n      type: bool\n\n    - name: T1048 - 3\n      description: Exfiltration Over Alternative Protocol - DNSExfiltration (doh)\n      type: bool\n\n    - name: T1041 - 1\n      description: Exfiltration Over C2 Channel - C2 Data Exfiltration\n      type: bool\n\n    - name: T1048.003 - 2\n      description: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol - Exfiltration Over Alternative Protocol - ICMP\n      type: bool\n\n    - name: T1048.003 - 4\n      description: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol - Exfiltration Over Alternative Protocol - HTTP\n      type: bool\n\n    - name: T1048.003 - 5\n      description: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol - Exfiltration Over Alternative Protocol - SMTP\n      type: bool\n\n    - name: T1567 - 1\n      description: Exfiltration Over Web Service - Data Exfiltration with ConfigSecurityPolicy\n      type: bool\n\n    - name: T1021.003 - 1\n      description: Distributed Component Object Model - PowerShell Lateral Movement using MMC20\n      type: bool\n\n    - name: T1550.002 - 1\n      description: Pass the Hash - Mimikatz Pass the Hash\n      type: bool\n\n    - name: T1550.002 - 2\n      description: Pass the Hash - crackmapexec Pass the Hash\n      type: bool\n\n    - name: T1550.003 - 1\n      description: Pass the Ticket - Mimikatz Kerberos Ticket Attack\n      type: bool\n\n    - name: T1563.002 - 1\n      description: RDP Hijacking - RDP hijacking\n      type: bool\n\n    - name: T1021.001 - 1\n      description: Remote Desktop Protocol - RDP to DomainController\n      type: bool\n\n    - name: T1021.001 - 2\n      description: Remote Desktop Protocol - RDP to Server\n      type: bool\n\n    - name: T1021.001 - 3\n      description: Remote Desktop Protocol - Changing RDP Port to Non Standard Port via Powershell\n      type: bool\n\n    - name: T1021.001 - 4\n      description: Remote Desktop Protocol - Changing RDP Port to Non Standard Port via Command_Prompt\n      type: bool\n\n    - name: T1021.002 - 1\n      description: SMB/Windows Admin Shares - Map admin share\n      type: bool\n\n    - name: T1021.002 - 2\n      description: SMB/Windows Admin Shares - Map Admin Share PowerShell\n      type: bool\n\n    - name: T1021.002 - 3\n      description: SMB/Windows Admin Shares - Copy and Execute File with PsExec\n      type: bool\n\n    - name: T1021.002 - 4\n      description: SMB/Windows Admin Shares - Execute command writing output to local Admin Share\n      type: bool\n\n    - name: T1072 - 1\n      description: Software Deployment Tools - Radmin Viewer Utility\n      type: bool\n\n    - name: T1021.006 - 1\n      description: Windows Remote Management - Enable Windows Remote Management\n      type: bool\n\n    - name: T1021.006 - 2\n      description: Windows Remote Management - Invoke-Command\n      type: bool\n\n    - name: T1021.006 - 3\n      description: Windows Remote Management - WinRM Access with Evil-WinRM\n      type: bool\n\n    - name: T1078.001 - 1\n      description: Default Accounts - Enable Guest account with RDP capability and admin privileges\n      type: bool\n\n    - name: T1078.001 - 2\n      description: Default Accounts - Activate Guest Account\n      type: bool\n\n    - name: T1133 - 1\n      description: External Remote Services - Running Chrome VPN Extensions via the Registry 2 vpn extension\n      type: bool\n\n    - name: T1078.003 - 1\n      description: Local Accounts - Create local account with admin privileges\n      type: bool\n\n    - name: T1566.001 - 1\n      description: Spearphishing Attachment - Download Phishing Attachment - VBScript\n      type: bool\n\n    - name: T1566.001 - 2\n      description: Spearphishing Attachment - Word spawned a command shell and used an IP address in the command line\n      type: bool\n\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n     LET CommandTable = SELECT * FROM parse_csv(accessor=\"data\", filename='''\n     Flag,Command\n     T1558.004 - 1,Invoke-AtomicTest T1558.004 -TestNumbers 1\n     T1056.004 - 1,Invoke-AtomicTest T1056.004 -TestNumbers 1\n     T1552.001 - 3,Invoke-AtomicTest T1552.001 -TestNumbers 3\n     T1552.001 - 4,Invoke-AtomicTest T1552.001 -TestNumbers 4\n     T1555 - 1,Invoke-AtomicTest T1555 -TestNumbers 1\n     T1555 - 2,Invoke-AtomicTest T1555 -TestNumbers 2\n     T1555 - 3,Invoke-AtomicTest T1555 -TestNumbers 3\n     T1555 - 4,Invoke-AtomicTest T1555 -TestNumbers 4\n     T1555 - 5,Invoke-AtomicTest T1555 -TestNumbers 5\n     T1555.003 - 1,Invoke-AtomicTest T1555.003 -TestNumbers 1\n     T1555.003 - 3,Invoke-AtomicTest T1555.003 -TestNumbers 3\n     T1555.003 - 4,Invoke-AtomicTest T1555.003 -TestNumbers 4\n     T1552.002 - 1,Invoke-AtomicTest T1552.002 -TestNumbers 1\n     T1552.002 - 2,Invoke-AtomicTest T1552.002 -TestNumbers 2\n     T1003.006 - 1,Invoke-AtomicTest T1003.006 -TestNumbers 1\n     T1187 - 1,Invoke-AtomicTest T1187 -TestNumbers 1\n     T1056.002 - 2,Invoke-AtomicTest T1056.002 -TestNumbers 2\n     T1558.001 - 1,Invoke-AtomicTest T1558.001 -TestNumbers 1\n     T1552.006 - 1,Invoke-AtomicTest T1552.006 -TestNumbers 1\n     T1552.006 - 2,Invoke-AtomicTest T1552.006 -TestNumbers 2\n     T1558.003 - 1,Invoke-AtomicTest T1558.003 -TestNumbers 1\n     T1558.003 - 2,Invoke-AtomicTest T1558.003 -TestNumbers 2\n     T1558.003 - 3,Invoke-AtomicTest T1558.003 -TestNumbers 3\n     T1558.003 - 4,Invoke-AtomicTest T1558.003 -TestNumbers 4\n     T1558.003 - 5,Invoke-AtomicTest T1558.003 -TestNumbers 5\n     T1056.001 - 1,Invoke-AtomicTest T1056.001 -TestNumbers 1\n     T1003.004 - 1,Invoke-AtomicTest T1003.004 -TestNumbers 1\n     T1003.001 - 1,Invoke-AtomicTest T1003.001 -TestNumbers 1\n     T1003.001 - 2,Invoke-AtomicTest T1003.001 -TestNumbers 2\n     T1003.001 - 3,Invoke-AtomicTest T1003.001 -TestNumbers 3\n     T1003.001 - 4,Invoke-AtomicTest T1003.001 -TestNumbers 4\n     T1003.001 - 5,Invoke-AtomicTest T1003.001 -TestNumbers 5\n     T1003.001 - 6,Invoke-AtomicTest T1003.001 -TestNumbers 6\n     T1003.001 - 7,Invoke-AtomicTest T1003.001 -TestNumbers 7\n     T1003.001 - 8,Invoke-AtomicTest T1003.001 -TestNumbers 8\n     T1003.001 - 9,Invoke-AtomicTest T1003.001 -TestNumbers 9\n     T1003.001 - 10,Invoke-AtomicTest T1003.001 -TestNumbers 10\n     T1003.001 - 11,Invoke-AtomicTest T1003.001 -TestNumbers 11\n     T1003.001 - 12,Invoke-AtomicTest T1003.001 -TestNumbers 12\n     T1003.003 - 1,Invoke-AtomicTest T1003.003 -TestNumbers 1\n     T1003.003 - 2,Invoke-AtomicTest T1003.003 -TestNumbers 2\n     T1003.003 - 3,Invoke-AtomicTest T1003.003 -TestNumbers 3\n     T1003.003 - 4,Invoke-AtomicTest T1003.003 -TestNumbers 4\n     T1003.003 - 5,Invoke-AtomicTest T1003.003 -TestNumbers 5\n     T1003.003 - 6,Invoke-AtomicTest T1003.003 -TestNumbers 6\n     T1003.003 - 7,Invoke-AtomicTest T1003.003 -TestNumbers 7\n     T1040 - 3,Invoke-AtomicTest T1040 -TestNumbers 3\n     T1040 - 4,Invoke-AtomicTest T1040 -TestNumbers 4\n     T1003 - 1,Invoke-AtomicTest T1003 -TestNumbers 1\n     T1003 - 2,Invoke-AtomicTest T1003 -TestNumbers 2\n     T1003 - 3,Invoke-AtomicTest T1003 -TestNumbers 3\n     T1110.002 - 1,Invoke-AtomicTest T1110.002 -TestNumbers 1\n     T1556.002 - 1,Invoke-AtomicTest T1556.002 -TestNumbers 1\n     T1110.001 - 1,Invoke-AtomicTest T1110.001 -TestNumbers 1\n     T1110.001 - 2,Invoke-AtomicTest T1110.001 -TestNumbers 2\n     T1110.003 - 1,Invoke-AtomicTest T1110.003 -TestNumbers 1\n     T1110.003 - 2,Invoke-AtomicTest T1110.003 -TestNumbers 2\n     T1110.003 - 3,Invoke-AtomicTest T1110.003 -TestNumbers 3\n     T1552.004 - 1,Invoke-AtomicTest T1552.004 -TestNumbers 1\n     T1552.004 - 6,Invoke-AtomicTest T1552.004 -TestNumbers 6\n     T1552.004 - 7,Invoke-AtomicTest T1552.004 -TestNumbers 7\n     T1003.002 - 1,Invoke-AtomicTest T1003.002 -TestNumbers 1\n     T1003.002 - 2,Invoke-AtomicTest T1003.002 -TestNumbers 2\n     T1003.002 - 3,Invoke-AtomicTest T1003.002 -TestNumbers 3\n     T1003.002 - 4,Invoke-AtomicTest T1003.002 -TestNumbers 4\n     T1003.002 - 5,Invoke-AtomicTest T1003.002 -TestNumbers 5\n     T1003.002 - 6,Invoke-AtomicTest T1003.002 -TestNumbers 6\n     T1560 - 1,Invoke-AtomicTest T1560 -TestNumbers 1\n     T1560.001 - 1,Invoke-AtomicTest T1560.001 -TestNumbers 1\n     T1560.001 - 2,Invoke-AtomicTest T1560.001 -TestNumbers 2\n     T1560.001 - 3,Invoke-AtomicTest T1560.001 -TestNumbers 3\n     T1560.001 - 4,Invoke-AtomicTest T1560.001 -TestNumbers 4\n     T1123 - 1,Invoke-AtomicTest T1123 -TestNumbers 1\n     T1119 - 1,Invoke-AtomicTest T1119 -TestNumbers 1\n     T1119 - 2,Invoke-AtomicTest T1119 -TestNumbers 2\n     T1119 - 3,Invoke-AtomicTest T1119 -TestNumbers 3\n     T1119 - 4,Invoke-AtomicTest T1119 -TestNumbers 4\n     T1115 - 1,Invoke-AtomicTest T1115 -TestNumbers 1\n     T1115 - 2,Invoke-AtomicTest T1115 -TestNumbers 2\n     T1115 - 4,Invoke-AtomicTest T1115 -TestNumbers 4\n     T1056.004 - 1,Invoke-AtomicTest T1056.004 -TestNumbers 1\n     T1056.002 - 2,Invoke-AtomicTest T1056.002 -TestNumbers 2\n     T1056.001 - 1,Invoke-AtomicTest T1056.001 -TestNumbers 1\n     T1074.001 - 1,Invoke-AtomicTest T1074.001 -TestNumbers 1\n     T1074.001 - 3,Invoke-AtomicTest T1074.001 -TestNumbers 3\n     T1114.001 - 1,Invoke-AtomicTest T1114.001 -TestNumbers 1\n     T1113 - 5,Invoke-AtomicTest T1113 -TestNumbers 5\n     T1113 - 6,Invoke-AtomicTest T1113 -TestNumbers 6\n     T1546.008 - 1,Invoke-AtomicTest T1546.008 -TestNumbers 1\n     T1546.008 - 2,Invoke-AtomicTest T1546.008 -TestNumbers 2\n     T1546.010 - 1,Invoke-AtomicTest T1546.010 -TestNumbers 1\n     T1546.011 - 1,Invoke-AtomicTest T1546.011 -TestNumbers 1\n     T1546.011 - 2,Invoke-AtomicTest T1546.011 -TestNumbers 2\n     T1546.011 - 3,Invoke-AtomicTest T1546.011 -TestNumbers 3\n     T1055.004 - 1,Invoke-AtomicTest T1055.004 -TestNumbers 1\n     T1053.002 - 1,Invoke-AtomicTest T1053.002 -TestNumbers 1\n     T1548.002 - 1,Invoke-AtomicTest T1548.002 -TestNumbers 1\n     T1548.002 - 2,Invoke-AtomicTest T1548.002 -TestNumbers 2\n     T1548.002 - 3,Invoke-AtomicTest T1548.002 -TestNumbers 3\n     T1548.002 - 4,Invoke-AtomicTest T1548.002 -TestNumbers 4\n     T1548.002 - 5,Invoke-AtomicTest T1548.002 -TestNumbers 5\n     T1548.002 - 6,Invoke-AtomicTest T1548.002 -TestNumbers 6\n     T1548.002 - 7,Invoke-AtomicTest T1548.002 -TestNumbers 7\n     T1548.002 - 8,Invoke-AtomicTest T1548.002 -TestNumbers 8\n     T1548.002 - 9,Invoke-AtomicTest T1548.002 -TestNumbers 9\n     T1548.002 - 10,Invoke-AtomicTest T1548.002 -TestNumbers 10\n     T1548.002 - 11,Invoke-AtomicTest T1548.002 -TestNumbers 11\n     T1548.002 - 12,Invoke-AtomicTest T1548.002 -TestNumbers 12\n     T1548.002 - 13,Invoke-AtomicTest T1548.002 -TestNumbers 13\n     T1548.002 - 14,Invoke-AtomicTest T1548.002 -TestNumbers 14\n     T1548.002 - 15,Invoke-AtomicTest T1548.002 -TestNumbers 15\n     T1548.002 - 16,Invoke-AtomicTest T1548.002 -TestNumbers 16\n     T1548.002 - 17,Invoke-AtomicTest T1548.002 -TestNumbers 17\n     T1574.012 - 1,Invoke-AtomicTest T1574.012 -TestNumbers 1\n     T1574.012 - 2,Invoke-AtomicTest T1574.012 -TestNumbers 2\n     T1574.012 - 3,Invoke-AtomicTest T1574.012 -TestNumbers 3\n     T1546.001 - 1,Invoke-AtomicTest T1546.001 -TestNumbers 1\n     T1134.002 - 1,Invoke-AtomicTest T1134.002 -TestNumbers 1\n     T1574.001 - 1,Invoke-AtomicTest T1574.001 -TestNumbers 1\n     T1574.002 - 1,Invoke-AtomicTest T1574.002 -TestNumbers 1\n     T1078.001 - 1,Invoke-AtomicTest T1078.001 -TestNumbers 1\n     T1078.001 - 2,Invoke-AtomicTest T1078.001 -TestNumbers 2\n     T1055.001 - 1,Invoke-AtomicTest T1055.001 -TestNumbers 1\n     T1546.012 - 1,Invoke-AtomicTest T1546.012 -TestNumbers 1\n     T1546.012 - 2,Invoke-AtomicTest T1546.012 -TestNumbers 2\n     T1078.003 - 1,Invoke-AtomicTest T1078.003 -TestNumbers 1\n     T1037.001 - 1,Invoke-AtomicTest T1037.001 -TestNumbers 1\n     T1546.007 - 1,Invoke-AtomicTest T1546.007 -TestNumbers 1\n     T1134.004 - 1,Invoke-AtomicTest T1134.004 -TestNumbers 1\n     T1134.004 - 2,Invoke-AtomicTest T1134.004 -TestNumbers 2\n     T1134.004 - 3,Invoke-AtomicTest T1134.004 -TestNumbers 3\n     T1134.004 - 4,Invoke-AtomicTest T1134.004 -TestNumbers 4\n     T1134.004 - 5,Invoke-AtomicTest T1134.004 -TestNumbers 5\n     T1574.009 - 1,Invoke-AtomicTest T1574.009 -TestNumbers 1\n     T1547.010 - 1,Invoke-AtomicTest T1547.010 -TestNumbers 1\n     T1546.013 - 1,Invoke-AtomicTest T1546.013 -TestNumbers 1\n     T1055.012 - 1,Invoke-AtomicTest T1055.012 -TestNumbers 1\n     T1055.012 - 2,Invoke-AtomicTest T1055.012 -TestNumbers 2\n     T1055 - 1,Invoke-AtomicTest T1055 -TestNumbers 1\n     T1055 - 2,Invoke-AtomicTest T1055 -TestNumbers 2\n     T1547.001 - 1,Invoke-AtomicTest T1547.001 -TestNumbers 1\n     T1547.001 - 2,Invoke-AtomicTest T1547.001 -TestNumbers 2\n     T1547.001 - 3,Invoke-AtomicTest T1547.001 -TestNumbers 3\n     T1547.001 - 4,Invoke-AtomicTest T1547.001 -TestNumbers 4\n     T1547.001 - 5,Invoke-AtomicTest T1547.001 -TestNumbers 5\n     T1547.001 - 6,Invoke-AtomicTest T1547.001 -TestNumbers 6\n     T1547.001 - 7,Invoke-AtomicTest T1547.001 -TestNumbers 7\n     T1053.005 - 1,Invoke-AtomicTest T1053.005 -TestNumbers 1\n     T1053.005 - 2,Invoke-AtomicTest T1053.005 -TestNumbers 2\n     T1053.005 - 3,Invoke-AtomicTest T1053.005 -TestNumbers 3\n     T1053.005 - 4,Invoke-AtomicTest T1053.005 -TestNumbers 4\n     T1053.005 - 5,Invoke-AtomicTest T1053.005 -TestNumbers 5\n     T1053.005 - 6,Invoke-AtomicTest T1053.005 -TestNumbers 6\n     T1546.002 - 1,Invoke-AtomicTest T1546.002 -TestNumbers 1\n     T1547.005 - 1,Invoke-AtomicTest T1547.005 -TestNumbers 1\n     T1574.011 - 1,Invoke-AtomicTest T1574.011 -TestNumbers 1\n     T1574.011 - 2,Invoke-AtomicTest T1574.011 -TestNumbers 2\n     T1547.009 - 1,Invoke-AtomicTest T1547.009 -TestNumbers 1\n     T1547.009 - 2,Invoke-AtomicTest T1547.009 -TestNumbers 2\n     T1134.001 - 1,Invoke-AtomicTest T1134.001 -TestNumbers 1\n     T1134.001 - 2,Invoke-AtomicTest T1134.001 -TestNumbers 2\n     T1546.003 - 1,Invoke-AtomicTest T1546.003 -TestNumbers 1\n     T1543.003 - 1,Invoke-AtomicTest T1543.003 -TestNumbers 1\n     T1543.003 - 2,Invoke-AtomicTest T1543.003 -TestNumbers 2\n     T1543.003 - 3,Invoke-AtomicTest T1543.003 -TestNumbers 3\n     T1547.004 - 1,Invoke-AtomicTest T1547.004 -TestNumbers 1\n     T1547.004 - 2,Invoke-AtomicTest T1547.004 -TestNumbers 2\n     T1547.004 - 3,Invoke-AtomicTest T1547.004 -TestNumbers 3\n     T1055.004 - 1,Invoke-AtomicTest T1055.004 -TestNumbers 1\n     T1197 - 1,Invoke-AtomicTest T1197 -TestNumbers 1\n     T1197 - 2,Invoke-AtomicTest T1197 -TestNumbers 2\n     T1197 - 3,Invoke-AtomicTest T1197 -TestNumbers 3\n     T1197 - 4,Invoke-AtomicTest T1197 -TestNumbers 4\n     T1548.002 - 1,Invoke-AtomicTest T1548.002 -TestNumbers 1\n     T1548.002 - 2,Invoke-AtomicTest T1548.002 -TestNumbers 2\n     T1548.002 - 3,Invoke-AtomicTest T1548.002 -TestNumbers 3\n     T1548.002 - 4,Invoke-AtomicTest T1548.002 -TestNumbers 4\n     T1548.002 - 5,Invoke-AtomicTest T1548.002 -TestNumbers 5\n     T1548.002 - 6,Invoke-AtomicTest T1548.002 -TestNumbers 6\n     T1548.002 - 7,Invoke-AtomicTest T1548.002 -TestNumbers 7\n     T1548.002 - 8,Invoke-AtomicTest T1548.002 -TestNumbers 8\n     T1548.002 - 9,Invoke-AtomicTest T1548.002 -TestNumbers 9\n     T1548.002 - 10,Invoke-AtomicTest T1548.002 -TestNumbers 10\n     T1548.002 - 11,Invoke-AtomicTest T1548.002 -TestNumbers 11\n     T1548.002 - 12,Invoke-AtomicTest T1548.002 -TestNumbers 12\n     T1548.002 - 13,Invoke-AtomicTest T1548.002 -TestNumbers 13\n     T1548.002 - 14,Invoke-AtomicTest T1548.002 -TestNumbers 14\n     T1548.002 - 15,Invoke-AtomicTest T1548.002 -TestNumbers 15\n     T1548.002 - 16,Invoke-AtomicTest T1548.002 -TestNumbers 16\n     T1548.002 - 17,Invoke-AtomicTest T1548.002 -TestNumbers 17\n     T1218.003 - 1,Invoke-AtomicTest T1218.003 -TestNumbers 1\n     T1218.003 - 2,Invoke-AtomicTest T1218.003 -TestNumbers 2\n     T1574.012 - 1,Invoke-AtomicTest T1574.012 -TestNumbers 1\n     T1574.012 - 2,Invoke-AtomicTest T1574.012 -TestNumbers 2\n     T1574.012 - 3,Invoke-AtomicTest T1574.012 -TestNumbers 3\n     T1070.003 - 10,Invoke-AtomicTest T1070.003 -TestNumbers 10\n     T1070.003 - 11,Invoke-AtomicTest T1070.003 -TestNumbers 11\n     T1070.001 - 1,Invoke-AtomicTest T1070.001 -TestNumbers 1\n     T1070.001 - 2,Invoke-AtomicTest T1070.001 -TestNumbers 2\n     T1070.001 - 3,Invoke-AtomicTest T1070.001 -TestNumbers 3\n     T1027.004 - 1,Invoke-AtomicTest T1027.004 -TestNumbers 1\n     T1027.004 - 2,Invoke-AtomicTest T1027.004 -TestNumbers 2\n     T1218.001 - 1,Invoke-AtomicTest T1218.001 -TestNumbers 1\n     T1218.001 - 2,Invoke-AtomicTest T1218.001 -TestNumbers 2\n     T1218.001 - 3,Invoke-AtomicTest T1218.001 -TestNumbers 3\n     T1218.001 - 4,Invoke-AtomicTest T1218.001 -TestNumbers 4\n     T1218.001 - 5,Invoke-AtomicTest T1218.001 -TestNumbers 5\n     T1218.001 - 6,Invoke-AtomicTest T1218.001 -TestNumbers 6\n     T1218.001 - 7,Invoke-AtomicTest T1218.001 -TestNumbers 7\n     T1218.002 - 1,Invoke-AtomicTest T1218.002 -TestNumbers 1\n     T1134.002 - 1,Invoke-AtomicTest T1134.002 -TestNumbers 1\n     T1574.001 - 1,Invoke-AtomicTest T1574.001 -TestNumbers 1\n     T1574.002 - 1,Invoke-AtomicTest T1574.002 -TestNumbers 1\n     T1078.001 - 1,Invoke-AtomicTest T1078.001 -TestNumbers 1\n     T1078.001 - 2,Invoke-AtomicTest T1078.001 -TestNumbers 2\n     T1140 - 1,Invoke-AtomicTest T1140 -TestNumbers 1\n     T1140 - 2,Invoke-AtomicTest T1140 -TestNumbers 2\n     T1006 - 1,Invoke-AtomicTest T1006 -TestNumbers 1\n     T1562.002 - 1,Invoke-AtomicTest T1562.002 -TestNumbers 1\n     T1562.002 - 2,Invoke-AtomicTest T1562.002 -TestNumbers 2\n     T1562.002 - 3,Invoke-AtomicTest T1562.002 -TestNumbers 3\n     T1562.002 - 4,Invoke-AtomicTest T1562.002 -TestNumbers 4\n     T1562.002 - 5,Invoke-AtomicTest T1562.002 -TestNumbers 5\n     T1562.004 - 1,Invoke-AtomicTest T1562.004 -TestNumbers 1\n     T1562.004 - 2,Invoke-AtomicTest T1562.004 -TestNumbers 2\n     T1562.004 - 3,Invoke-AtomicTest T1562.004 -TestNumbers 3\n     T1562.004 - 4,Invoke-AtomicTest T1562.004 -TestNumbers 4\n     T1562.004 - 5,Invoke-AtomicTest T1562.004 -TestNumbers 5\n     T1562.004 - 6,Invoke-AtomicTest T1562.004 -TestNumbers 6\n     T1562.001 - 10,Invoke-AtomicTest T1562.001 -TestNumbers 10\n     T1562.001 - 11,Invoke-AtomicTest T1562.001 -TestNumbers 11\n     T1562.001 - 12,Invoke-AtomicTest T1562.001 -TestNumbers 12\n     T1562.001 - 13,Invoke-AtomicTest T1562.001 -TestNumbers 13\n     T1562.001 - 14,Invoke-AtomicTest T1562.001 -TestNumbers 14\n     T1562.001 - 15,Invoke-AtomicTest T1562.001 -TestNumbers 15\n     T1562.001 - 16,Invoke-AtomicTest T1562.001 -TestNumbers 16\n     T1562.001 - 17,Invoke-AtomicTest T1562.001 -TestNumbers 17\n     T1562.001 - 18,Invoke-AtomicTest T1562.001 -TestNumbers 18\n     T1562.001 - 19,Invoke-AtomicTest T1562.001 -TestNumbers 19\n     T1562.001 - 20,Invoke-AtomicTest T1562.001 -TestNumbers 20\n     T1562.001 - 21,Invoke-AtomicTest T1562.001 -TestNumbers 21\n     T1562.001 - 22,Invoke-AtomicTest T1562.001 -TestNumbers 22\n     T1562.001 - 23,Invoke-AtomicTest T1562.001 -TestNumbers 23\n     T1562.001 - 24,Invoke-AtomicTest T1562.001 -TestNumbers 24\n     T1055.001 - 1,Invoke-AtomicTest T1055.001 -TestNumbers 1\n     T1070.004 - 4,Invoke-AtomicTest T1070.004 -TestNumbers 4\n     T1070.004 - 5,Invoke-AtomicTest T1070.004 -TestNumbers 5\n     T1070.004 - 6,Invoke-AtomicTest T1070.004 -TestNumbers 6\n     T1070.004 - 7,Invoke-AtomicTest T1070.004 -TestNumbers 7\n     T1070.004 - 9,Invoke-AtomicTest T1070.004 -TestNumbers 9\n     T1070.004 - 10,Invoke-AtomicTest T1070.004 -TestNumbers 10\n     T1564.001 - 3,Invoke-AtomicTest T1564.001 -TestNumbers 3\n     T1564.001 - 4,Invoke-AtomicTest T1564.001 -TestNumbers 4\n     T1564.003 - 1,Invoke-AtomicTest T1564.003 -TestNumbers 1\n     T1564 - 1,Invoke-AtomicTest T1564 -TestNumbers 1\n     T1564 - 2,Invoke-AtomicTest T1564 -TestNumbers 2\n     T1564 - 3,Invoke-AtomicTest T1564 -TestNumbers 3\n     T1070 - 1,Invoke-AtomicTest T1070 -TestNumbers 1\n     T1202 - 1,Invoke-AtomicTest T1202 -TestNumbers 1\n     T1202 - 2,Invoke-AtomicTest T1202 -TestNumbers 2\n     T1202 - 3,Invoke-AtomicTest T1202 -TestNumbers 3\n     T1553.004 - 4,Invoke-AtomicTest T1553.004 -TestNumbers 4\n     T1553.004 - 5,Invoke-AtomicTest T1553.004 -TestNumbers 5\n     T1218.004 - 1,Invoke-AtomicTest T1218.004 -TestNumbers 1\n     T1218.004 - 2,Invoke-AtomicTest T1218.004 -TestNumbers 2\n     T1218.004 - 3,Invoke-AtomicTest T1218.004 -TestNumbers 3\n     T1218.004 - 4,Invoke-AtomicTest T1218.004 -TestNumbers 4\n     T1218.004 - 5,Invoke-AtomicTest T1218.004 -TestNumbers 5\n     T1218.004 - 6,Invoke-AtomicTest T1218.004 -TestNumbers 6\n     T1218.004 - 7,Invoke-AtomicTest T1218.004 -TestNumbers 7\n     T1218.004 - 8,Invoke-AtomicTest T1218.004 -TestNumbers 8\n     T1078.003 - 1,Invoke-AtomicTest T1078.003 -TestNumbers 1\n     T1127.001 - 1,Invoke-AtomicTest T1127.001 -TestNumbers 1\n     T1127.001 - 2,Invoke-AtomicTest T1127.001 -TestNumbers 2\n     T1553.005 - 1,Invoke-AtomicTest T1553.005 -TestNumbers 1\n     T1553.005 - 2,Invoke-AtomicTest T1553.005 -TestNumbers 2\n     T1553.005 - 3,Invoke-AtomicTest T1553.005 -TestNumbers 3\n     T1036.004 - 1,Invoke-AtomicTest T1036.004 -TestNumbers 1\n     T1036.004 - 2,Invoke-AtomicTest T1036.004 -TestNumbers 2\n     T1036 - 1,Invoke-AtomicTest T1036 -TestNumbers 1\n     T1112 - 1,Invoke-AtomicTest T1112 -TestNumbers 1\n     T1112 - 2,Invoke-AtomicTest T1112 -TestNumbers 2\n     T1112 - 3,Invoke-AtomicTest T1112 -TestNumbers 3\n     T1112 - 4,Invoke-AtomicTest T1112 -TestNumbers 4\n     T1112 - 5,Invoke-AtomicTest T1112 -TestNumbers 5\n     T1112 - 6,Invoke-AtomicTest T1112 -TestNumbers 6\n     T1218.005 - 1,Invoke-AtomicTest T1218.005 -TestNumbers 1\n     T1218.005 - 2,Invoke-AtomicTest T1218.005 -TestNumbers 2\n     T1218.005 - 3,Invoke-AtomicTest T1218.005 -TestNumbers 3\n     T1218.005 - 4,Invoke-AtomicTest T1218.005 -TestNumbers 4\n     T1218.005 - 5,Invoke-AtomicTest T1218.005 -TestNumbers 5\n     T1218.005 - 6,Invoke-AtomicTest T1218.005 -TestNumbers 6\n     T1218.005 - 7,Invoke-AtomicTest T1218.005 -TestNumbers 7\n     T1218.005 - 8,Invoke-AtomicTest T1218.005 -TestNumbers 8\n     T1218.005 - 9,Invoke-AtomicTest T1218.005 -TestNumbers 9\n     T1218.005 - 10,Invoke-AtomicTest T1218.005 -TestNumbers 10\n     T1218.007 - 1,Invoke-AtomicTest T1218.007 -TestNumbers 1\n     T1218.007 - 2,Invoke-AtomicTest T1218.007 -TestNumbers 2\n     T1218.007 - 3,Invoke-AtomicTest T1218.007 -TestNumbers 3\n     T1564.004 - 1,Invoke-AtomicTest T1564.004 -TestNumbers 1\n     T1564.004 - 2,Invoke-AtomicTest T1564.004 -TestNumbers 2\n     T1564.004 - 3,Invoke-AtomicTest T1564.004 -TestNumbers 3\n     T1564.004 - 4,Invoke-AtomicTest T1564.004 -TestNumbers 4\n     T1070.005 - 1,Invoke-AtomicTest T1070.005 -TestNumbers 1\n     T1070.005 - 2,Invoke-AtomicTest T1070.005 -TestNumbers 2\n     T1070.005 - 3,Invoke-AtomicTest T1070.005 -TestNumbers 3\n     T1027 - 2,Invoke-AtomicTest T1027 -TestNumbers 2\n     T1027 - 3,Invoke-AtomicTest T1027 -TestNumbers 3\n     T1027 - 4,Invoke-AtomicTest T1027 -TestNumbers 4\n     T1027 - 5,Invoke-AtomicTest T1027 -TestNumbers 5\n     T1027 - 6,Invoke-AtomicTest T1027 -TestNumbers 6\n     T1027 - 7,Invoke-AtomicTest T1027 -TestNumbers 7\n     T1027 - 8,Invoke-AtomicTest T1027 -TestNumbers 8\n     T1218.008 - 1,Invoke-AtomicTest T1218.008 -TestNumbers 1\n     T1134.004 - 1,Invoke-AtomicTest T1134.004 -TestNumbers 1\n     T1134.004 - 2,Invoke-AtomicTest T1134.004 -TestNumbers 2\n     T1134.004 - 3,Invoke-AtomicTest T1134.004 -TestNumbers 3\n     T1134.004 - 4,Invoke-AtomicTest T1134.004 -TestNumbers 4\n     T1134.004 - 5,Invoke-AtomicTest T1134.004 -TestNumbers 5\n     T1550.002 - 1,Invoke-AtomicTest T1550.002 -TestNumbers 1\n     T1550.002 - 2,Invoke-AtomicTest T1550.002 -TestNumbers 2\n     T1550.003 - 1,Invoke-AtomicTest T1550.003 -TestNumbers 1\n     T1556.002 - 1,Invoke-AtomicTest T1556.002 -TestNumbers 1\n     T1574.009 - 1,Invoke-AtomicTest T1574.009 -TestNumbers 1\n     T1055.012 - 1,Invoke-AtomicTest T1055.012 -TestNumbers 1\n     T1055.012 - 2,Invoke-AtomicTest T1055.012 -TestNumbers 2\n     T1055 - 1,Invoke-AtomicTest T1055 -TestNumbers 1\n     T1055 - 2,Invoke-AtomicTest T1055 -TestNumbers 2\n     T1216.001 - 1,Invoke-AtomicTest T1216.001 -TestNumbers 1\n     T1218.009 - 1,Invoke-AtomicTest T1218.009 -TestNumbers 1\n     T1218.009 - 2,Invoke-AtomicTest T1218.009 -TestNumbers 2\n     T1218.010 - 1,Invoke-AtomicTest T1218.010 -TestNumbers 1\n     T1218.010 - 2,Invoke-AtomicTest T1218.010 -TestNumbers 2\n     T1218.010 - 3,Invoke-AtomicTest T1218.010 -TestNumbers 3\n     T1218.010 - 4,Invoke-AtomicTest T1218.010 -TestNumbers 4\n     T1218.010 - 5,Invoke-AtomicTest T1218.010 -TestNumbers 5\n     T1036.003 - 1,Invoke-AtomicTest T1036.003 -TestNumbers 1\n     T1036.003 - 3,Invoke-AtomicTest T1036.003 -TestNumbers 3\n     T1036.003 - 4,Invoke-AtomicTest T1036.003 -TestNumbers 4\n     T1036.003 - 5,Invoke-AtomicTest T1036.003 -TestNumbers 5\n     T1036.003 - 6,Invoke-AtomicTest T1036.003 -TestNumbers 6\n     T1036.003 - 7,Invoke-AtomicTest T1036.003 -TestNumbers 7\n     T1036.003 - 8,Invoke-AtomicTest T1036.003 -TestNumbers 8\n     T1036.003 - 9,Invoke-AtomicTest T1036.003 -TestNumbers 9\n     T1207 - 1,Invoke-AtomicTest T1207 -TestNumbers 1\n     T1014 - 3,Invoke-AtomicTest T1014 -TestNumbers 3\n     T1218.011 - 1,Invoke-AtomicTest T1218.011 -TestNumbers 1\n     T1218.011 - 2,Invoke-AtomicTest T1218.011 -TestNumbers 2\n     T1218.011 - 3,Invoke-AtomicTest T1218.011 -TestNumbers 3\n     T1218.011 - 4,Invoke-AtomicTest T1218.011 -TestNumbers 4\n     T1218.011 - 5,Invoke-AtomicTest T1218.011 -TestNumbers 5\n     T1218.011 - 6,Invoke-AtomicTest T1218.011 -TestNumbers 6\n     T1218.011 - 7,Invoke-AtomicTest T1218.011 -TestNumbers 7\n     T1218.011 - 8,Invoke-AtomicTest T1218.011 -TestNumbers 8\n     T1574.011 - 1,Invoke-AtomicTest T1574.011 -TestNumbers 1\n     T1574.011 - 2,Invoke-AtomicTest T1574.011 -TestNumbers 2\n     T1218 - 1,Invoke-AtomicTest T1218 -TestNumbers 1\n     T1218 - 2,Invoke-AtomicTest T1218 -TestNumbers 2\n     T1218 - 3,Invoke-AtomicTest T1218 -TestNumbers 3\n     T1218 - 4,Invoke-AtomicTest T1218 -TestNumbers 4\n     T1218 - 5,Invoke-AtomicTest T1218 -TestNumbers 5\n     T1218 - 6,Invoke-AtomicTest T1218 -TestNumbers 6\n     T1218 - 7,Invoke-AtomicTest T1218 -TestNumbers 7\n     T1218 - 8,Invoke-AtomicTest T1218 -TestNumbers 8\n     T1216 - 1,Invoke-AtomicTest T1216 -TestNumbers 1\n     T1216 - 2,Invoke-AtomicTest T1216 -TestNumbers 2\n     T1497.001 - 2,Invoke-AtomicTest T1497.001 -TestNumbers 2\n     T1221 - 1,Invoke-AtomicTest T1221 -TestNumbers 1\n     T1070.006 - 5,Invoke-AtomicTest T1070.006 -TestNumbers 5\n     T1070.006 - 6,Invoke-AtomicTest T1070.006 -TestNumbers 6\n     T1070.006 - 7,Invoke-AtomicTest T1070.006 -TestNumbers 7\n     T1070.006 - 8,Invoke-AtomicTest T1070.006 -TestNumbers 8\n     T1134.001 - 1,Invoke-AtomicTest T1134.001 -TestNumbers 1\n     T1134.001 - 2,Invoke-AtomicTest T1134.001 -TestNumbers 2\n     T1222.001 - 1,Invoke-AtomicTest T1222.001 -TestNumbers 1\n     T1222.001 - 2,Invoke-AtomicTest T1222.001 -TestNumbers 2\n     T1222.001 - 3,Invoke-AtomicTest T1222.001 -TestNumbers 3\n     T1222.001 - 4,Invoke-AtomicTest T1222.001 -TestNumbers 4\n     T1222.001 - 5,Invoke-AtomicTest T1222.001 -TestNumbers 5\n     T1220 - 1,Invoke-AtomicTest T1220 -TestNumbers 1\n     T1220 - 2,Invoke-AtomicTest T1220 -TestNumbers 2\n     T1220 - 3,Invoke-AtomicTest T1220 -TestNumbers 3\n     T1220 - 4,Invoke-AtomicTest T1220 -TestNumbers 4\n     T1546.008 - 1,Invoke-AtomicTest T1546.008 -TestNumbers 1\n     T1546.008 - 2,Invoke-AtomicTest T1546.008 -TestNumbers 2\n     T1098 - 1,Invoke-AtomicTest T1098 -TestNumbers 1\n     T1098 - 2,Invoke-AtomicTest T1098 -TestNumbers 2\n     T1137.006 - 1,Invoke-AtomicTest T1137.006 -TestNumbers 1\n     T1546.010 - 1,Invoke-AtomicTest T1546.010 -TestNumbers 1\n     T1546.011 - 1,Invoke-AtomicTest T1546.011 -TestNumbers 1\n     T1546.011 - 2,Invoke-AtomicTest T1546.011 -TestNumbers 2\n     T1546.011 - 3,Invoke-AtomicTest T1546.011 -TestNumbers 3\n     T1053.002 - 1,Invoke-AtomicTest T1053.002 -TestNumbers 1\n     T1197 - 1,Invoke-AtomicTest T1197 -TestNumbers 1\n     T1197 - 2,Invoke-AtomicTest T1197 -TestNumbers 2\n     T1197 - 3,Invoke-AtomicTest T1197 -TestNumbers 3\n     T1197 - 4,Invoke-AtomicTest T1197 -TestNumbers 4\n     T1176 - 1,Invoke-AtomicTest T1176 -TestNumbers 1\n     T1176 - 2,Invoke-AtomicTest T1176 -TestNumbers 2\n     T1176 - 3,Invoke-AtomicTest T1176 -TestNumbers 3\n     T1176 - 4,Invoke-AtomicTest T1176 -TestNumbers 4\n     T1574.012 - 1,Invoke-AtomicTest T1574.012 -TestNumbers 1\n     T1574.012 - 2,Invoke-AtomicTest T1574.012 -TestNumbers 2\n     T1574.012 - 3,Invoke-AtomicTest T1574.012 -TestNumbers 3\n     T1546.001 - 1,Invoke-AtomicTest T1546.001 -TestNumbers 1\n     T1574.001 - 1,Invoke-AtomicTest T1574.001 -TestNumbers 1\n     T1574.002 - 1,Invoke-AtomicTest T1574.002 -TestNumbers 1\n     T1078.001 - 1,Invoke-AtomicTest T1078.001 -TestNumbers 1\n     T1078.001 - 2,Invoke-AtomicTest T1078.001 -TestNumbers 2\n     T1136.002 - 1,Invoke-AtomicTest T1136.002 -TestNumbers 1\n     T1136.002 - 2,Invoke-AtomicTest T1136.002 -TestNumbers 2\n     T1136.002 - 3,Invoke-AtomicTest T1136.002 -TestNumbers 3\n     T1133 - 1,Invoke-AtomicTest T1133 -TestNumbers 1\n     T1546.012 - 1,Invoke-AtomicTest T1546.012 -TestNumbers 1\n     T1546.012 - 2,Invoke-AtomicTest T1546.012 -TestNumbers 2\n     T1136.001 - 3,Invoke-AtomicTest T1136.001 -TestNumbers 3\n     T1136.001 - 4,Invoke-AtomicTest T1136.001 -TestNumbers 4\n     T1136.001 - 6,Invoke-AtomicTest T1136.001 -TestNumbers 6\n     T1078.003 - 1,Invoke-AtomicTest T1078.003 -TestNumbers 1\n     T1037.001 - 1,Invoke-AtomicTest T1037.001 -TestNumbers 1\n     T1546.007 - 1,Invoke-AtomicTest T1546.007 -TestNumbers 1\n     T1137 - 1,Invoke-AtomicTest T1137 -TestNumbers 1\n     T1137.002 - 1,Invoke-AtomicTest T1137.002 -TestNumbers 1\n     T1137.004 - 1,Invoke-AtomicTest T1137.004 -TestNumbers 1\n     T1556.002 - 1,Invoke-AtomicTest T1556.002 -TestNumbers 1\n     T1574.009 - 1,Invoke-AtomicTest T1574.009 -TestNumbers 1\n     T1547.010 - 1,Invoke-AtomicTest T1547.010 -TestNumbers 1\n     T1546.013 - 1,Invoke-AtomicTest T1546.013 -TestNumbers 1\n     T1547.001 - 1,Invoke-AtomicTest T1547.001 -TestNumbers 1\n     T1547.001 - 2,Invoke-AtomicTest T1547.001 -TestNumbers 2\n     T1547.001 - 3,Invoke-AtomicTest T1547.001 -TestNumbers 3\n     T1547.001 - 4,Invoke-AtomicTest T1547.001 -TestNumbers 4\n     T1547.001 - 5,Invoke-AtomicTest T1547.001 -TestNumbers 5\n     T1547.001 - 6,Invoke-AtomicTest T1547.001 -TestNumbers 6\n     T1547.001 - 7,Invoke-AtomicTest T1547.001 -TestNumbers 7\n     T1053.005 - 1,Invoke-AtomicTest T1053.005 -TestNumbers 1\n     T1053.005 - 2,Invoke-AtomicTest T1053.005 -TestNumbers 2\n     T1053.005 - 3,Invoke-AtomicTest T1053.005 -TestNumbers 3\n     T1053.005 - 4,Invoke-AtomicTest T1053.005 -TestNumbers 4\n     T1053.005 - 5,Invoke-AtomicTest T1053.005 -TestNumbers 5\n     T1053.005 - 6,Invoke-AtomicTest T1053.005 -TestNumbers 6\n     T1546.002 - 1,Invoke-AtomicTest T1546.002 -TestNumbers 1\n     T1547.005 - 1,Invoke-AtomicTest T1547.005 -TestNumbers 1\n     T1574.011 - 1,Invoke-AtomicTest T1574.011 -TestNumbers 1\n     T1574.011 - 2,Invoke-AtomicTest T1574.011 -TestNumbers 2\n     T1547.009 - 1,Invoke-AtomicTest T1547.009 -TestNumbers 1\n     T1547.009 - 2,Invoke-AtomicTest T1547.009 -TestNumbers 2\n     T1505.002 - 1,Invoke-AtomicTest T1505.002 -TestNumbers 1\n     T1505.003 - 1,Invoke-AtomicTest T1505.003 -TestNumbers 1\n     T1546.003 - 1,Invoke-AtomicTest T1546.003 -TestNumbers 1\n     T1543.003 - 1,Invoke-AtomicTest T1543.003 -TestNumbers 1\n     T1543.003 - 2,Invoke-AtomicTest T1543.003 -TestNumbers 2\n     T1543.003 - 3,Invoke-AtomicTest T1543.003 -TestNumbers 3\n     T1547.004 - 1,Invoke-AtomicTest T1547.004 -TestNumbers 1\n     T1547.004 - 2,Invoke-AtomicTest T1547.004 -TestNumbers 2\n     T1547.004 - 3,Invoke-AtomicTest T1547.004 -TestNumbers 3\n     T1531 - 1,Invoke-AtomicTest T1531 -TestNumbers 1\n     T1531 - 2,Invoke-AtomicTest T1531 -TestNumbers 2\n     T1531 - 3,Invoke-AtomicTest T1531 -TestNumbers 3\n     T1485 - 1,Invoke-AtomicTest T1485 -TestNumbers 1\n     T1486 - 5,Invoke-AtomicTest T1486 -TestNumbers 5\n     T1490 - 1,Invoke-AtomicTest T1490 -TestNumbers 1\n     T1490 - 2,Invoke-AtomicTest T1490 -TestNumbers 2\n     T1490 - 3,Invoke-AtomicTest T1490 -TestNumbers 3\n     T1490 - 4,Invoke-AtomicTest T1490 -TestNumbers 4\n     T1490 - 5,Invoke-AtomicTest T1490 -TestNumbers 5\n     T1490 - 6,Invoke-AtomicTest T1490 -TestNumbers 6\n     T1490 - 7,Invoke-AtomicTest T1490 -TestNumbers 7\n     T1490 - 8,Invoke-AtomicTest T1490 -TestNumbers 8\n     T1491.001 - 1,Invoke-AtomicTest T1491.001 -TestNumbers 1\n     T1489 - 1,Invoke-AtomicTest T1489 -TestNumbers 1\n     T1489 - 2,Invoke-AtomicTest T1489 -TestNumbers 2\n     T1489 - 3,Invoke-AtomicTest T1489 -TestNumbers 3\n     T1529 - 1,Invoke-AtomicTest T1529 -TestNumbers 1\n     T1529 - 2,Invoke-AtomicTest T1529 -TestNumbers 2\n     T1010 - 1,Invoke-AtomicTest T1010 -TestNumbers 1\n     T1217 - 4,Invoke-AtomicTest T1217 -TestNumbers 4\n     T1217 - 5,Invoke-AtomicTest T1217 -TestNumbers 5\n     T1217 - 6,Invoke-AtomicTest T1217 -TestNumbers 6\n     T1217 - 7,Invoke-AtomicTest T1217 -TestNumbers 7\n     T1087.002 - 1,Invoke-AtomicTest T1087.002 -TestNumbers 1\n     T1087.002 - 2,Invoke-AtomicTest T1087.002 -TestNumbers 2\n     T1087.002 - 3,Invoke-AtomicTest T1087.002 -TestNumbers 3\n     T1087.002 - 4,Invoke-AtomicTest T1087.002 -TestNumbers 4\n     T1087.002 - 5,Invoke-AtomicTest T1087.002 -TestNumbers 5\n     T1087.002 - 6,Invoke-AtomicTest T1087.002 -TestNumbers 6\n     T1087.002 - 7,Invoke-AtomicTest T1087.002 -TestNumbers 7\n     T1087.002 - 8,Invoke-AtomicTest T1087.002 -TestNumbers 8\n     T1087.002 - 9,Invoke-AtomicTest T1087.002 -TestNumbers 9\n     T1087.002 - 10,Invoke-AtomicTest T1087.002 -TestNumbers 10\n     T1069.002 - 1,Invoke-AtomicTest T1069.002 -TestNumbers 1\n     T1069.002 - 2,Invoke-AtomicTest T1069.002 -TestNumbers 2\n     T1069.002 - 3,Invoke-AtomicTest T1069.002 -TestNumbers 3\n     T1069.002 - 4,Invoke-AtomicTest T1069.002 -TestNumbers 4\n     T1069.002 - 5,Invoke-AtomicTest T1069.002 -TestNumbers 5\n     T1069.002 - 6,Invoke-AtomicTest T1069.002 -TestNumbers 6\n     T1069.002 - 7,Invoke-AtomicTest T1069.002 -TestNumbers 7\n     T1069.002 - 8,Invoke-AtomicTest T1069.002 -TestNumbers 8\n     T1482 - 1,Invoke-AtomicTest T1482 -TestNumbers 1\n     T1482 - 2,Invoke-AtomicTest T1482 -TestNumbers 2\n     T1482 - 3,Invoke-AtomicTest T1482 -TestNumbers 3\n     T1482 - 4,Invoke-AtomicTest T1482 -TestNumbers 4\n     T1482 - 5,Invoke-AtomicTest T1482 -TestNumbers 5\n     T1482 - 6,Invoke-AtomicTest T1482 -TestNumbers 6\n     T1482 - 7,Invoke-AtomicTest T1482 -TestNumbers 7\n     T1083 - 1,Invoke-AtomicTest T1083 -TestNumbers 1\n     T1083 - 2,Invoke-AtomicTest T1083 -TestNumbers 2\n     T1087.001 - 8,Invoke-AtomicTest T1087.001 -TestNumbers 8\n     T1087.001 - 9,Invoke-AtomicTest T1087.001 -TestNumbers 9\n     T1087.001 - 10,Invoke-AtomicTest T1087.001 -TestNumbers 10\n     T1069.001 - 2,Invoke-AtomicTest T1069.001 -TestNumbers 2\n     T1069.001 - 3,Invoke-AtomicTest T1069.001 -TestNumbers 3\n     T1069.001 - 4,Invoke-AtomicTest T1069.001 -TestNumbers 4\n     T1069.001 - 5,Invoke-AtomicTest T1069.001 -TestNumbers 5\n     T1069.001 - 6,Invoke-AtomicTest T1069.001 -TestNumbers 6\n     T1046 - 3,Invoke-AtomicTest T1046 -TestNumbers 3\n     T1046 - 4,Invoke-AtomicTest T1046 -TestNumbers 4\n     T1135 - 3,Invoke-AtomicTest T1135 -TestNumbers 3\n     T1135 - 4,Invoke-AtomicTest T1135 -TestNumbers 4\n     T1135 - 5,Invoke-AtomicTest T1135 -TestNumbers 5\n     T1135 - 6,Invoke-AtomicTest T1135 -TestNumbers 6\n     T1040 - 3,Invoke-AtomicTest T1040 -TestNumbers 3\n     T1040 - 4,Invoke-AtomicTest T1040 -TestNumbers 4\n     T1201 - 5,Invoke-AtomicTest T1201 -TestNumbers 5\n     T1201 - 6,Invoke-AtomicTest T1201 -TestNumbers 6\n     T1120 - 1,Invoke-AtomicTest T1120 -TestNumbers 1\n     T1057 - 2,Invoke-AtomicTest T1057 -TestNumbers 2\n     T1012 - 1,Invoke-AtomicTest T1012 -TestNumbers 1\n     T1018 - 1,Invoke-AtomicTest T1018 -TestNumbers 1\n     T1018 - 2,Invoke-AtomicTest T1018 -TestNumbers 2\n     T1018 - 3,Invoke-AtomicTest T1018 -TestNumbers 3\n     T1018 - 4,Invoke-AtomicTest T1018 -TestNumbers 4\n     T1018 - 5,Invoke-AtomicTest T1018 -TestNumbers 5\n     T1018 - 8,Invoke-AtomicTest T1018 -TestNumbers 8\n     T1018 - 9,Invoke-AtomicTest T1018 -TestNumbers 9\n     T1018 - 10,Invoke-AtomicTest T1018 -TestNumbers 10\n     T1018 - 11,Invoke-AtomicTest T1018 -TestNumbers 11\n     T1518.001 - 1,Invoke-AtomicTest T1518.001 -TestNumbers 1\n     T1518.001 - 2,Invoke-AtomicTest T1518.001 -TestNumbers 2\n     T1518.001 - 5,Invoke-AtomicTest T1518.001 -TestNumbers 5\n     T1518.001 - 6,Invoke-AtomicTest T1518.001 -TestNumbers 6\n     T1518 - 1,Invoke-AtomicTest T1518 -TestNumbers 1\n     T1518 - 2,Invoke-AtomicTest T1518 -TestNumbers 2\n     T1497.001 - 2,Invoke-AtomicTest T1497.001 -TestNumbers 2\n     T1082 - 1,Invoke-AtomicTest T1082 -TestNumbers 1\n     T1082 - 6,Invoke-AtomicTest T1082 -TestNumbers 6\n     T1082 - 8,Invoke-AtomicTest T1082 -TestNumbers 8\n     T1082 - 9,Invoke-AtomicTest T1082 -TestNumbers 9\n     T1082 - 10,Invoke-AtomicTest T1082 -TestNumbers 10\n     T1016 - 1,Invoke-AtomicTest T1016 -TestNumbers 1\n     T1016 - 2,Invoke-AtomicTest T1016 -TestNumbers 2\n     T1016 - 4,Invoke-AtomicTest T1016 -TestNumbers 4\n     T1016 - 5,Invoke-AtomicTest T1016 -TestNumbers 5\n     T1016 - 6,Invoke-AtomicTest T1016 -TestNumbers 6\n     T1016 - 7,Invoke-AtomicTest T1016 -TestNumbers 7\n     T1049 - 1,Invoke-AtomicTest T1049 -TestNumbers 1\n     T1049 - 2,Invoke-AtomicTest T1049 -TestNumbers 2\n     T1049 - 4,Invoke-AtomicTest T1049 -TestNumbers 4\n     T1033 - 1,Invoke-AtomicTest T1033 -TestNumbers 1\n     T1033 - 3,Invoke-AtomicTest T1033 -TestNumbers 3\n     T1007 - 1,Invoke-AtomicTest T1007 -TestNumbers 1\n     T1007 - 2,Invoke-AtomicTest T1007 -TestNumbers 2\n     T1124 - 1,Invoke-AtomicTest T1124 -TestNumbers 1\n     T1124 - 2,Invoke-AtomicTest T1124 -TestNumbers 2\n     T1071.004 - 1,Invoke-AtomicTest T1071.004 -TestNumbers 1\n     T1071.004 - 2,Invoke-AtomicTest T1071.004 -TestNumbers 2\n     T1071.004 - 3,Invoke-AtomicTest T1071.004 -TestNumbers 3\n     T1071.004 - 4,Invoke-AtomicTest T1071.004 -TestNumbers 4\n     T1573 - 1,Invoke-AtomicTest T1573 -TestNumbers 1\n     T1105 - 7,Invoke-AtomicTest T1105 -TestNumbers 7\n     T1105 - 8,Invoke-AtomicTest T1105 -TestNumbers 8\n     T1105 - 9,Invoke-AtomicTest T1105 -TestNumbers 9\n     T1105 - 10,Invoke-AtomicTest T1105 -TestNumbers 10\n     T1105 - 11,Invoke-AtomicTest T1105 -TestNumbers 11\n     T1105 - 12,Invoke-AtomicTest T1105 -TestNumbers 12\n     T1105 - 13,Invoke-AtomicTest T1105 -TestNumbers 13\n     T1105 - 15,Invoke-AtomicTest T1105 -TestNumbers 15\n     T1105 - 16,Invoke-AtomicTest T1105 -TestNumbers 16\n     T1105 - 17,Invoke-AtomicTest T1105 -TestNumbers 17\n     T1105 - 18,Invoke-AtomicTest T1105 -TestNumbers 18\n     T1090.001 - 3,Invoke-AtomicTest T1090.001 -TestNumbers 3\n     T1095 - 1,Invoke-AtomicTest T1095 -TestNumbers 1\n     T1095 - 2,Invoke-AtomicTest T1095 -TestNumbers 2\n     T1095 - 3,Invoke-AtomicTest T1095 -TestNumbers 3\n     T1571 - 1,Invoke-AtomicTest T1571 -TestNumbers 1\n     T1572 - 1,Invoke-AtomicTest T1572 -TestNumbers 1\n     T1572 - 2,Invoke-AtomicTest T1572 -TestNumbers 2\n     T1572 - 3,Invoke-AtomicTest T1572 -TestNumbers 3\n     T1219 - 1,Invoke-AtomicTest T1219 -TestNumbers 1\n     T1219 - 2,Invoke-AtomicTest T1219 -TestNumbers 2\n     T1219 - 3,Invoke-AtomicTest T1219 -TestNumbers 3\n     T1219 - 4,Invoke-AtomicTest T1219 -TestNumbers 4\n     T1219 - 5,Invoke-AtomicTest T1219 -TestNumbers 5\n     T1132.001 - 2,Invoke-AtomicTest T1132.001 -TestNumbers 2\n     T1071.001 - 1,Invoke-AtomicTest T1071.001 -TestNumbers 1\n     T1071.001 - 2,Invoke-AtomicTest T1071.001 -TestNumbers 2\n     T1053.002 - 1,Invoke-AtomicTest T1053.002 -TestNumbers 1\n     T1559.002 - 1,Invoke-AtomicTest T1559.002 -TestNumbers 1\n     T1559.002 - 2,Invoke-AtomicTest T1559.002 -TestNumbers 2\n     T1559.002 - 3,Invoke-AtomicTest T1559.002 -TestNumbers 3\n     T1204.002 - 1,Invoke-AtomicTest T1204.002 -TestNumbers 1\n     T1204.002 - 2,Invoke-AtomicTest T1204.002 -TestNumbers 2\n     T1204.002 - 3,Invoke-AtomicTest T1204.002 -TestNumbers 3\n     T1204.002 - 4,Invoke-AtomicTest T1204.002 -TestNumbers 4\n     T1204.002 - 5,Invoke-AtomicTest T1204.002 -TestNumbers 5\n     T1204.002 - 6,Invoke-AtomicTest T1204.002 -TestNumbers 6\n     T1204.002 - 7,Invoke-AtomicTest T1204.002 -TestNumbers 7\n     T1204.002 - 8,Invoke-AtomicTest T1204.002 -TestNumbers 8\n     T1204.002 - 9,Invoke-AtomicTest T1204.002 -TestNumbers 9\n     T1106 - 1,Invoke-AtomicTest T1106 -TestNumbers 1\n     T1059.001 - 1,Invoke-AtomicTest T1059.001 -TestNumbers 1\n     T1059.001 - 2,Invoke-AtomicTest T1059.001 -TestNumbers 2\n     T1059.001 - 3,Invoke-AtomicTest T1059.001 -TestNumbers 3\n     T1059.001 - 4,Invoke-AtomicTest T1059.001 -TestNumbers 4\n     T1059.001 - 5,Invoke-AtomicTest T1059.001 -TestNumbers 5\n     T1059.001 - 6,Invoke-AtomicTest T1059.001 -TestNumbers 6\n     T1059.001 - 7,Invoke-AtomicTest T1059.001 -TestNumbers 7\n     T1059.001 - 8,Invoke-AtomicTest T1059.001 -TestNumbers 8\n     T1059.001 - 9,Invoke-AtomicTest T1059.001 -TestNumbers 9\n     T1059.001 - 10,Invoke-AtomicTest T1059.001 -TestNumbers 10\n     T1059.001 - 11,Invoke-AtomicTest T1059.001 -TestNumbers 11\n     T1059.001 - 12,Invoke-AtomicTest T1059.001 -TestNumbers 12\n     T1059.001 - 13,Invoke-AtomicTest T1059.001 -TestNumbers 13\n     T1059.001 - 14,Invoke-AtomicTest T1059.001 -TestNumbers 14\n     T1059.001 - 15,Invoke-AtomicTest T1059.001 -TestNumbers 15\n     T1059.001 - 16,Invoke-AtomicTest T1059.001 -TestNumbers 16\n     T1059.001 - 17,Invoke-AtomicTest T1059.001 -TestNumbers 17\n     T1059.001 - 18,Invoke-AtomicTest T1059.001 -TestNumbers 18\n     T1059.001 - 19,Invoke-AtomicTest T1059.001 -TestNumbers 19\n     T1059.001 - 20,Invoke-AtomicTest T1059.001 -TestNumbers 20\n     T1059.001 - 21,Invoke-AtomicTest T1059.001 -TestNumbers 21\n     T1053.005 - 1,Invoke-AtomicTest T1053.005 -TestNumbers 1\n     T1053.005 - 2,Invoke-AtomicTest T1053.005 -TestNumbers 2\n     T1053.005 - 3,Invoke-AtomicTest T1053.005 -TestNumbers 3\n     T1053.005 - 4,Invoke-AtomicTest T1053.005 -TestNumbers 4\n     T1053.005 - 5,Invoke-AtomicTest T1053.005 -TestNumbers 5\n     T1053.005 - 6,Invoke-AtomicTest T1053.005 -TestNumbers 6\n     T1569.002 - 1,Invoke-AtomicTest T1569.002 -TestNumbers 1\n     T1569.002 - 2,Invoke-AtomicTest T1569.002 -TestNumbers 2\n     T1072 - 1,Invoke-AtomicTest T1072 -TestNumbers 1\n     T1059.005 - 1,Invoke-AtomicTest T1059.005 -TestNumbers 1\n     T1059.005 - 2,Invoke-AtomicTest T1059.005 -TestNumbers 2\n     T1059.005 - 3,Invoke-AtomicTest T1059.005 -TestNumbers 3\n     T1059.003 - 1,Invoke-AtomicTest T1059.003 -TestNumbers 1\n     T1059.003 - 2,Invoke-AtomicTest T1059.003 -TestNumbers 2\n     T1059.003 - 3,Invoke-AtomicTest T1059.003 -TestNumbers 3\n     T1047 - 1,Invoke-AtomicTest T1047 -TestNumbers 1\n     T1047 - 2,Invoke-AtomicTest T1047 -TestNumbers 2\n     T1047 - 3,Invoke-AtomicTest T1047 -TestNumbers 3\n     T1047 - 4,Invoke-AtomicTest T1047 -TestNumbers 4\n     T1047 - 5,Invoke-AtomicTest T1047 -TestNumbers 5\n     T1047 - 6,Invoke-AtomicTest T1047 -TestNumbers 6\n     T1047 - 7,Invoke-AtomicTest T1047 -TestNumbers 7\n     T1047 - 8,Invoke-AtomicTest T1047 -TestNumbers 8\n     T1047 - 9,Invoke-AtomicTest T1047 -TestNumbers 9\n     T1020 - 1,Invoke-AtomicTest T1020 -TestNumbers 1\n     T1048 - 3,Invoke-AtomicTest T1048 -TestNumbers 3\n     T1041 - 1,Invoke-AtomicTest T1041 -TestNumbers 1\n     T1048.003 - 2,Invoke-AtomicTest T1048.003 -TestNumbers 2\n     T1048.003 - 4,Invoke-AtomicTest T1048.003 -TestNumbers 4\n     T1048.003 - 5,Invoke-AtomicTest T1048.003 -TestNumbers 5\n     T1567 - 1,Invoke-AtomicTest T1567 -TestNumbers 1\n     T1021.003 - 1,Invoke-AtomicTest T1021.003 -TestNumbers 1\n     T1550.002 - 1,Invoke-AtomicTest T1550.002 -TestNumbers 1\n     T1550.002 - 2,Invoke-AtomicTest T1550.002 -TestNumbers 2\n     T1550.003 - 1,Invoke-AtomicTest T1550.003 -TestNumbers 1\n     T1563.002 - 1,Invoke-AtomicTest T1563.002 -TestNumbers 1\n     T1021.001 - 1,Invoke-AtomicTest T1021.001 -TestNumbers 1\n     T1021.001 - 2,Invoke-AtomicTest T1021.001 -TestNumbers 2\n     T1021.001 - 3,Invoke-AtomicTest T1021.001 -TestNumbers 3\n     T1021.001 - 4,Invoke-AtomicTest T1021.001 -TestNumbers 4\n     T1021.002 - 1,Invoke-AtomicTest T1021.002 -TestNumbers 1\n     T1021.002 - 2,Invoke-AtomicTest T1021.002 -TestNumbers 2\n     T1021.002 - 3,Invoke-AtomicTest T1021.002 -TestNumbers 3\n     T1021.002 - 4,Invoke-AtomicTest T1021.002 -TestNumbers 4\n     T1072 - 1,Invoke-AtomicTest T1072 -TestNumbers 1\n     T1021.006 - 1,Invoke-AtomicTest T1021.006 -TestNumbers 1\n     T1021.006 - 2,Invoke-AtomicTest T1021.006 -TestNumbers 2\n     T1021.006 - 3,Invoke-AtomicTest T1021.006 -TestNumbers 3\n     T1078.001 - 1,Invoke-AtomicTest T1078.001 -TestNumbers 1\n     T1078.001 - 2,Invoke-AtomicTest T1078.001 -TestNumbers 2\n     T1133 - 1,Invoke-AtomicTest T1133 -TestNumbers 1\n     T1078.003 - 1,Invoke-AtomicTest T1078.003 -TestNumbers 1\n     T1566.001 - 1,Invoke-AtomicTest T1566.001 -TestNumbers 1\n     T1566.001 - 2,Invoke-AtomicTest T1566.001 -TestNumbers 2\n     ''')\n     LET CommandsToRun \u003c= if(condition=RunAll, then='''Invoke-AtomicTest All -Confirm:$false''', else={ SELECT Command FROM CommandTable WHERE get(field=Flag)})\n\n     LET RemoveLog \u003c= if(condition=RemoveExecLog, then={ SELECT * FROM execve(argv=[\"powershell.exe\", \"Remove-Item\", ExecutionLogFile])})\n\n     LET InstallART \u003c= if(condition=InstallART, then={ SELECT * FROM execve(argv=[   'powershell.exe', '-exec', 'bypass',\n                                                '-Command', \"IEX (IWR https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1 -UseBasicParsing); Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser; Install-AtomicRedTeam -getAtomics -F\"\n                                            ])})\n\n     LET JustDoIt \u003c= SELECT * FROM foreach(row=CommandsToRun, query={\n            SELECT * FROM execve(argv=[   'powershell.exe', '-exec', 'bypass',\n                                                '-Command', '''Import-Module \"C:\\AtomicRedTeam\\invoke-atomicredteam\\Invoke-AtomicRedTeam.psd1\" -Force; ''' + Command + ''' -GetPreReqs; ''' + Command + ''' -ExecutionLogPath ''' + ExecutionLogFile + ''';''' + if(condition=Cleanup, then=Command + ''' -Cleanup''', else='''''')\n                                            ])}\n\n     )\n\n     SELECT `Execution Time (UTC)`, `Execution Time (Local)`, '[' + Technique + '](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/' + Technique + '/' + Technique + '.md)' AS Technique, `Test Number`, `Test Name`, Hostname, Username, GUID FROM parse_csv(accessor=\"file\", filename=ExecutionLogFile)\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Audit.CISCat_Lite","op":"set","definition":"name: Exchange.Windows.Audit.CISCat_Lite\ndescription: |\n  This artifact runs the CISCat-Lite tool on the target machine and uploads the html output on the velociraptor server.\n  \n  CIS-CAT Lite is a free tool from the Center for Internet Security that helps in assessing and improving IT security configurations. \n  It enables unlimited system scans, provides compliance scores, and offers remediation steps based on CIS Benchmarks. \n  This tool is useful for organizations seeking to enhance their technology security.\n \n  The artifact has been configured to perform a standard scan of a Windows 10 Enterprise machine. \n  To select the baseline and profiles, execute the command \".\\Assessor-CLI.bat -i\"\ntype: CLIENT\n\nauthor: Antonio Blescia (TheThMando)\n\nparameters:\n  - name: BaselinePath\n    default: \"./benchmarks/CIS_Microsoft_Windows_10_Enterprise_Benchmark_v3.0.0-xccdf.xml\"\n  - name: ProfileName\n    default: \"Level 1 (L1) - Corporate/Enterprise Environment (general use)\"\n\ntools:\n  - name: CISCat_Lite\n    url: https://workbench.cisecurity.org/api/vendor/v1/cis-cat/lite/latest\n\nsources:\n  - precondition: SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- Generate the temp dir\n      LET TmpDir \u003c= tempdir(remove_last=true)\n      -- Upload the CISCat_Lite tool on the host\n      LET Toolzip \u003c= SELECT OSPath\n        FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"CISCat_Lite\",\n                                                IsExecutable=FALSE)\n      -- Extract the CISCat_Lite tool zip\n      LET _ \u003c= SELECT *\n        FROM unzip(filename=Toolzip.OSPath, output_directory=TmpDir, type=\"zip\")\n     \n      -- Generate the absolute path that points the the extracted tool location  \n      LET CISCatPath = path_join(\n          components=[TmpDir, 'Assessor', 'Assessor-CLI.bat'],\n          path_type='windows')\n          \n      -- Run the command     \n      LET _ \u003c= SELECT *\n        FROM execve(argv=[CISCatPath, \"-b\", BaselinePath, '-p', ProfileName])\n\n      SELECT * \n         FROM foreach( row={\n             SELECT OSPath\n             FROM glob(\n                 globs='/Assessor/reports/*.html', root=TmpDir)\n             WHERE NOT IsDir\n         }, query={\n              SELECT OSPath, upload(file=OSPath) AS Upload\n              FROM scope()\n         })","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.DeepBlueCLI","op":"set","definition":"name: Exchange.Windows.EventLogs.DeepBlueCLI\ndescription: DeepBlueCLI - a PowerShell Module for Threat Hunting via Windows Event Logs\n\nauthor: Anthony Hannouille - @AnthoLaMalice\ntools:\n - name: DeepBlueCLI\n   url: https://github.com/sans-blue-team/DeepBlueCLI/archive/refs/heads/master.zip\ntype: CLIENT\n\nprecondition:\n    SELECT OS From info() where OS = 'windows'\n\nsources:\n    - query: |\n        LET Toolzip \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"DeepBlueCLI\", IsExecutable=FALSE)\n        \n        LET TmpDir \u003c= tempdir()\n        \n        LET _ \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n        \n        LET DeepBlueCLILocation \u003c= TmpDir + '\\\\DeepBlueCLI-master'\n        \n        LET cmdline = 'powershell -executionpolicy bypass -command \"cd  '+ \"'\" + DeepBlueCLILocation + \"'\" + '; .\\\\DeepBlue.ps1 | ConvertTo-JSON\"'\n        \n        SELECT * FROM foreach(\n            row={\n                SELECT Stdout FROM execve(argv=[\"Powershell\", cmdline], length=104857600)\n                }, query={\n                    SELECT * FROM parse_json_array(data=Stdout) where log(message=Stdout) AND log(message=Stderr)\n                })\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.BruteRatel","op":"set","definition":"name: Exchange.Windows.Detection.BruteRatel\nauthor: Luke Fardell\ndescription: |\n  This hunt runts the Immersive Labs yara rule (https://github.com/Immersive-Labs-Sec/BruteRatel-DetectionTools/blob/main/BruteRatel.yar) across select files to identify the known Brute Ratel config strings. \n\n\ntype: CLIENT\nparameters:\n  - name: PathGlob\n    description: Only file names that match this glob will be scanned.\n    default: C:/**/*.{exe,dll,bin,0xH,Svc,PS1}\n  - name: UploadHits\n    type: bool\n  - name: YaraRule\n    type: yara\n    description: Yara Rule from https://github.com/Immersive-Labs-Sec/BruteRatel-DetectionTools/blob/main/BruteRatel.yar\n    default: |\n        rule BruteRatelConfig {\n        strings:\n        $config_block = { 50 48 b8 [8] 50 68}\n        $split_marker = { 50 48 b8 [8] 50 48 b8 }\n\n        condition:\n        filesize \u003c 400KB and $config_block and #split_marker \u003e 30\n        }\n\nsources:\n  - query: |\n      -- check which Yara to use\n      LET yara = SELECT * FROM if(condition=YaraUrl,\n            then= { SELECT Content FROM http_client( url=YaraUrl, method='GET') },\n            else= { SELECT YaraRule as Content FROM scope() })\n\n      -- first find all matching glob\n      LET files = SELECT FullPath, Name, Size, Mtime, Atime, Ctime, Btime\n        FROM glob(globs=PathGlob,nosymlink='True')\n        WHERE\n          NOT IsDir AND NOT IsLink\n          AND if(condition=SizeMin,\n            then= SizeMin \u003c Size,\n            else= True)\n          AND if(condition=SizeMax,\n            then=SizeMax \u003e Size,\n            else= True)\n          AND\n             ( time_test(stamp=Mtime)\n            OR time_test(stamp=Atime)\n            OR time_test(stamp=Ctime)\n            OR time_test(stamp=Btime))\n\n      -- scan files and only report a single hit.\n      LET hits = SELECT * FROM foreach(row=files,\n            query={\n                SELECT\n                    FileName as FullPath,\n                    File.Size AS Size,\n                    Mtime, Atime, Ctime, Btime,\n                    Rule, Tags, Meta,\n                    str(str=String.Data) AS HitContext,\n                    String.Offset AS HitOffset\n                FROM yara(rules=yara.Content[0],files=FullPath)\n                LIMIT 1\n            })\n\n      -- upload files that have hit\n      LET upload_hits=SELECT *,\n            upload(file=FullPath) AS Upload\n        FROM hits\n\n      -- return rows\n      SELECT * FROM if(condition=UploadHits,\n        then=upload_hits,\n        else=hits)\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.Honeyfiles","op":"set","definition":"name: Exchange.Windows.Detection.Honeyfiles\nauthor: Zane Gittins \u0026 Matt Green (@mgreen27).\ndescription: |\n    This artifact deploys honeyfiles according to the Honeyfiles CSV parameter. It then monitors access to these files using etw.  The process tracker must be enabled, we use this to enrich etw events. Honeyfiles created by this artifact are removed at exit.\n\n    * TargetPath - Location to create honeyfile.\n    * Enabled - Only generate the honeyfile if this is set to 'Y'\n    * MagicBytes - The starting magic bytes of the honeyfile.\n    * MinSize,MaxSize - The size of the honeyfile will be a random value between MinSize and MaxSize.\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: Honeyfiles\n    description: The honeyfiles to generate and monitor.\n    type: csv\n    default: |\n        TargetPath,Enabled,MagicBytes,MinSize,MaxSize\n        \"%USERPROFILE%\\Documents\\KeePass\\KeePass.kdbx\",Y,03D9A29A67FB4BB5,10249,20899\n        \"%USERPROFILE%\\AppData\\Local\\KeePass\\KeePass.config.xml\",Y,3C3F786D6C,512,1024\n        \"%USERPROFILE%\\AppData\\Local\\LastPass\\lastpass.conf\",Y,3C3F786D6C,512,1024\n        \"%USERPROFILE%\\AppData\\Roaming\\LastPass\\loginState.xml\",Y,3C3F786D6C,512,1024\n        \"%USERPROFILE%\\AppData\\Roaming\\WinSCP\\WinSCP.ini\",Y,5B436F6E66696775726174696F6E5D,512,1024\n        \"%USERPROFILE%\\.aws\\credentials\",Y,5B64656661756C745D,512,2048\n        \"%USERPROFILE%\\.aws\\config\",Y,5B64656661756C745D,512,2048\n        \"%USERPROFILE%\\.ssh\\my_id_rsa\",Y,2D2D2D2D2D424547494E205253412050524956415445204B45592D2D2D2D2D,1024,4096\n        \"%USERPROFILE%\\.gcloud\\credentials.db\",Y,53514c69746520666f726d6174203300,512,2048\n        \"%USERPROFILE%\\.azure\\azureProfile.json\",Y,7B0D0A,512,2048\n  - name: ProcessExceptionsRegex\n    description: Except these processes from detections when they access honeyfiles.\n    type: string\n    default: \"SearchProtocolHost.exe|Explorer.exe\"\n  - name: HoneyUserRegex\n    description: User name regex that will be used to host honeyfiles.\n    type: string\n    default: \".\"\nexport: |\n   LET RandomChars(size) = SELECT\n       format(format=\"%02x\", args=rand(range=256)) AS HexByte\n     FROM range(end=size)\n   \n   LET check_exist(path) = SELECT\n       OSPath,\n       Size,\n       IsDir,\n       if(condition=read_file(filename=OSPath)[-7:] =~ 'VRHoney',\n          then=True,\n          else=False) AS IsHoneyFile\n     FROM stat(filename=path)\n   \n   LET enumerate_path = SELECT\n       regex_replace(source=TargetPath,\n                     re='''\\%USERPROFILE\\%''',\n                     replace=Directory) AS TargetPath,\n       *,\n       check_exist(path=regex_replace(source=TargetPath,\n                                      re='''\\%USERPROFILE\\%''',\n                                      replace=Directory))[0] AS Exists,\n       MaxSize - rand(range=(MaxSize - MinSize)) - len(\n         list=unhex(string=MagicBytes)) - 7 AS _PaddingSize\n     FROM Honeyfiles\n   \n   LET target_users = SELECT Name,\n                             Directory,\n                             UUID\n     FROM Artifact.Windows.Sys.Users()\n     WHERE NOT UUID =~ '''^(S-1-5-18|S-1-5-19|S-1-5-20)$'''\n      AND Name =~ HoneyUserRegex\n   \n   LET show_honeyfiles = SELECT TargetPath,\n                                Enabled,\n                                MagicBytes,\n                                MinSize,\n                                MaxSize,\n                                _PaddingSize,\n                                Exists.Size AS Size,\n                                Exists.IsHoneyFile AS IsHoneyFile\n     FROM foreach(row=target_users, query=enumerate_path)\n   \n   LET copy_honeyfiles = SELECT\n       *,\n       if(condition=Enabled =~ \"^(Y|YES)$\"\n           AND (NOT Size OR IsHoneyFile),\n          then=log(message=\"Creating file %v\", dedup=-1, args=TargetPath)\n           \u0026\u0026 copy(dest=TargetPath,\n                   create_directories='y',\n                   accessor='data',\n                   filename=unhex(\n                     string=MagicBytes + join(\n                       array=RandomChars(size=_PaddingSize).HexByte) +\n                       format(format='%x', args='VRHoney'))),\n          else=\"File does not exist\") AS CreateHoneyFile\n     FROM show_honeyfiles\n   \n   LET remove_honeyfiles = SELECT\n       *, _PaddingSize,\n       if(condition=IsHoneyFile,\n          then=log(message=\"Removing %v\", args=TargetPath, dedup=-1)\n           \u0026\u0026 rm(filename=TargetPath),\n          else=\"File does not exist\") AS RemoveHoneyFile\n     FROM show_honeyfiles\n   \n   LET add_honeyfiles = SELECT\n       TargetPath,\n       Enabled,\n       MagicBytes,\n       MinSize,\n       MaxSize,\n       check_exist(path=TargetPath)[0].Size AS Size,\n       check_exist(path=TargetPath)[0].IsHoneyFile AS IsHoneyFile\n     FROM copy_honeyfiles\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' AND version(plugin=\"dedup\") \u003e= 0\n\n    query: |\n       LET _ \u003c= atexit(query={ SELECT * FROM remove_honeyfiles })\n       \n       LET WatchFiles \u003c= to_dict(item={\n           SELECT TargetPath AS _key,\n                  IsHoneyFile AS _value\n           FROM add_honeyfiles\n           WHERE IsHoneyFile\n         })\n       \n       LET Keyword \u003c= 5264\n       \n       LET CurrentPid \u003c= getpid()\n       \n       LET TargetEvents = SELECT *\n         FROM watch_etw(guid='{edd08927-9cc4-4e65-b970-c2560fb5c289}',\n                        description=\"Microsoft-Windows-Kernel-File\",\n                        any=Keyword)\n         WHERE System.ID = 12\n          AND System.ProcessID != CurrentPid\n       \n       LET AuditEvents = SELECT\n           timestamp(string=System.TimeStamp) AS Timestamp,\n           get(item=WatchFiles, field=EventData.FileName) AS IsHoneyFile,\n           *\n         FROM TargetEvents\n         WHERE IsHoneyFile != NULL\n       \n       LET Events = SELECT\n           Timestamp,\n           System.ProcessID AS Pid,\n           EventData.FileName AS TargetPath,\n           process_tracker_get(id=System.ProcessID).Data AS ProcInfo,\n           join(array=process_tracker_callchain(id=System.ProcessID).Data.Name,\n                sep=\"-\u003e\") AS CallChain,\n           (System.ProcessID + EventData.FileName) AS DedupKey\n         FROM AuditEvents\n         WHERE NOT ProcInfo.Exe =~ ProcessExceptionsRegex\n       \n       SELECT Timestamp,\n              Pid,\n              TargetPath,\n              ProcInfo,\n              CallChain\n       FROM dedup(query={\n           SELECT *\n           FROM delay(query=Events, delay=5)\n         },\n                  key=\"DedupKey\",\n                  timeout=2)\n\n   \n  - precondition:\n      SELECT OS From info() where OS = 'windows' AND version(plugin=\"dedup\") = NULL\n      \n    query: |\n       LET _ \u003c= atexit(query={ SELECT * FROM remove_honeyfiles })\n       \n       LET KernelVolumes \u003c= SELECT *,\n                                   regex_replace(source=Name,\n                                                 replace='',\n                                                 re=\"^\\\\\\\\GLOBAL\\\\?\\\\?\\\\\\\\\") AS UserDrive,\n                                   regex_replace(\n                                     source=SymlinkTarget,\n                                     replace='',\n                                     re=\"^\\\\\\\\Device\\\\\\\\\") AS KernelDrive\n         FROM winobj()\n         WHERE SymlinkTarget =~ \"Volume\"\n          AND Name =~ \"[a-z]:$\"\n       \n       LET WatchFiles \u003c= to_dict(\n           item={\n           SELECT\n           KernelPath AS _key,\n           IsHoneyFile AS _value\n           FROM foreach(\n             row=KernelVolumes,\n             query={\n           SELECT\n           *,\n           regex_replace(\n             source=TargetPath,\n             replace=SymlinkTarget,\n             re=\"[A-Z]+\\:\") AS KernelPath\n           FROM add_honeyfiles\n           WHERE TargetPath =~ UserDrive\n         })\n         })\n       \n       LET Keyword \u003c= 5264\n       \n       LET CurrentPid \u003c= getpid()\n       \n       LET TargetEvents = SELECT\n           *\n         FROM watch_etw(\n           guid='{edd08927-9cc4-4e65-b970-c2560fb5c289}',\n           description=\"Microsoft-Windows-Kernel-File\",\n           any=Keyword)\n         WHERE System.ID = 12\n          AND System.ProcessID != CurrentPid\n       \n       LET AuditEvents = SELECT\n           timestamp(\n             string=System.TimeStamp) AS Timestamp,\n           get(\n             item=WatchFiles,\n             field=EventData.FileName) AS IsHoneyFile,\n           *\n         FROM TargetEvents\n         WHERE IsHoneyFile != NULL\n       \n       LET Events = SELECT\n           Timestamp,\n           IsHoneyFile,\n           System.ProcessID AS Pid,\n           EventData.FileName AS TargetPath,\n           process_tracker_get(\n             id=System.ProcessID).Data AS ProcInfo,\n           join(\n             array=process_tracker_callchain(\n               id=System.ProcessID).Data.Name,\n             sep=\"-\u003e\") AS CallChain\n         FROM AuditEvents\n         WHERE NOT ProcInfo.Exe =~ ProcessExceptionsRegex\n       \n       SELECT\n           *\n       FROM delay(\n         query=Events,\n         delay=5)\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.ISOMount","op":"set","definition":"name: Exchange.Windows.Detection.ISOMount\nauthor: Conor Quinn - @ConorQuinn92, updated Matt Green - @mgreen27\ndescription: |\n   Following Microsoft's decision to block macros by default on MS\n   Office applications, threat actors are increasingly using container\n   files such as ISO files to distribute malware.  This artifact will\n   extract evidence of container files being mounted that may be\n   malicious from the Microsoft-Windows-VHDMP-Operational EventLog.\n   The artifact targets the string \".(iso|vhd|vhdx|img)$\" in event\n   IDs: 1 (mount), 2 (unmount) and 12 (type, path, handle).\n\nreference:\n  - https://nasbench.medium.com/finding-forensic-goodness-in-obscure-windows-event-logs-60e978ea45a3\n  - https://www.proofpoint.com/us/blog/threat-insight/how-threat-actors-are-adapting-post-macro-world\n\nparameters:\n   - name: TargetGlob\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\Microsoft-Windows-VHDMP-Operational.evtx'\n   - name: TargetImageRegex\n     default: 'C:\\\\Users\\\\.+\\.(iso|vhd|vhdx|img)$'\n     type: regex\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT EventTime,\n             Computer,\n             Username,\n             Channel,\n             EventID,\n             EventRecordID,\n             Message,\n             EventData,\n             regex_replace(source=EventData.VhdFileName, re='''\\\\\\\\\\?\\\\''', replace='') AS Filename,\n             FullPath\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n        EvtxGlob=TargetGlob,\n        IdRegex='^(1|2|12|22|23)$',\n        VSSAnalysisAge=VSSAnalysisAge)\n        WHERE EventData.VhdFileName =~ TargetImageRegex\n\n    notebook:\n      - type: vql_suggestion\n        name: ImageMount hunt summary\n        template: |\n          /*\n          # ImageMount hunt summary\n\n          This notebook stacks by Computer and Filename modify as required\n          */\n          SELECT\n            min(item=EventTime) as EarliestTime,\n            max(item=EventTime) as LatestTime,\n            Computer, Username, EventID,Message,\n            Filename,\n            count() as Total\n          FROM source(artifact=\"Exchange.Windows.Detection.ISOMount\")\n          GROUP BY Computer,Username, EventID, Filename\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.Keylogger","op":"set","definition":"name: Exchange.Windows.Detection.Keylogger\nauthor: Zane Gittins\ndescription: |\n   This artifact is my attempt at implementing keylogger detection based on research presented by [Asuka Nakajima at NULLCON](https://speakerdeck.com/asuna_jp/nullcon-goa-2025-windows-keylogger-detection-targeting-past-and-present-keylogging-techniques) using the Microsoft-Windows-Win32k ETW provider.\n   \n   * Polling based keyloggers - Event id 1003 (GetAsyncKeyState) with MsSinceLastKeyEvent \u003e 100 and BackgroundCallCount \u003e 400\n   * Hooking based keyloggers - Event id 1002 (SetWindowsHookEx) with FilterType = WH_KEYBOARD_LL\n   * RawInput based keyloggers - Event id 1001 (RegisterRawInputDevices) with Flags = RIDEV_INPUT_SINK\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT or NOTEBOOK\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ProcessExceptionsRegex\n    description: Except these processes.\n    type: string\n    default: \"Explorer.exe\"\nexport: |\n   LET SuspiciousEvents = SELECT *\n     FROM delay(query={\n       SELECT *\n       FROM watch_etw(guid=\"{8c416c79-d49b-4f01-a467-e56d3aa8234c}\",\n                      description=\"Microsoft-Windows-Win32k\",\n                      level=4,\n                      any=5120)\n       WHERE (System.ID = 1003\n          AND atoi(string=EventData.MsSinceLastKeyEvent) \u003e 100\n               AND atoi(string=EventData.BackgroundCallCount) \u003e 400) OR (\n           System.ID = 1002\n          AND EventData.FilterType = \"0xD\") OR (System.ID = 1001\n          AND EventData.Flags = \"256\")\n     },\n                delay=5)\n   \n   // On event id 1003 we must use EventData.PID as the process PID not System.ID.\n   LET EnrichEvents = SELECT *\n     FROM foreach(row=SuspiciousEvents,\n                  query={\n       SELECT *\n       FROM if(condition=System.ID = 1003,\n               then={\n       SELECT timestamp(string=System.TimeStamp) AS Timestamp,\n              System.ID AS EventID,\n              EventData.PID AS Pid,\n              process_tracker_get(id=atoi(string=EventData.PID)).Data AS ProcInfo,\n              join(array=process_tracker_callchain(\n                      id=atoi(string=EventData.PID)).Data.Name,\n                    sep=\"-\u003e\") AS CallChain\n       FROM scope()\n     },\n               else={\n       SELECT timestamp(string=System.TimeStamp) AS Timestamp,\n              System.ID AS EventID,\n              System.ProcessID AS Pid,\n              process_tracker_get(id=System.ProcessID).Data AS ProcInfo,\n              join(array=process_tracker_callchain(\n                      id=System.ProcessID).Data.Name,\n                    sep=\"-\u003e\") AS CallChain\n       FROM scope()\n     })\n     })\n     WHERE NOT ProcInfo.Exe =~ ProcessExceptionsRegex\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' AND version(plugin=\"dedup\") \u003e= 0\n\n    query: |\n       SELECT *\n       FROM dedup(query={ SELECT * FROM EnrichEvents }, timeout=5, key=\"Pid\")\n\n\n  - precondition:\n      SELECT OS From info() where OS = 'windows' AND version(plugin=\"dedup\") = NULL\n\n    query: |\n       SELECT *\n       FROM EnrichEvents\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.Network.Changed","op":"set","definition":"name: Exchange.Windows.Detection.Network.Changed\nauthor: Zane Gittins\ndescription: |\n   Detects when a new network is added or removed from the system via the NetworkList registry keys.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT_EVENT\n\n\nparameters:\n  - name: Period\n    default: 60\n    type: int64\n    description: The period to check the registry.\n  - name: Globs\n    type: string\n    default: \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\NetworkList\\\\Profiles\\\\**\\\\*\"\n    description: The registry path to search\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n\n    query: |\n      SELECT * FROM diff(key=\"NetworkName\", period=Period, query={\n          SELECT Data.value as NetworkName from glob(accessor=\"reg\",globs=Globs) WHERE Name=~\"ProfileName\" \n      })\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.PipeHunter","op":"set","definition":"name: Exchange.Windows.Detection.PipeHunter\nauthor: ACEResponder.com\ndescription: |\n   Takes a pipe name and returns the owning process and access rights. The primary\n   motivation for this artifact is a vulnerability in RemCom. RemCom is most \n   notably used by impacket psexec.py. It creates a null DACL for its \n   communication pipe. This means a low privileged user\n   could use a stale pipe to get remote execution as SYSTEM. If you uncover any\n   named pipes with the name RemCom_communication, investigate the owning proc\n   and remove it from the system.\n   #impacket\n\nreference:\n  - https://twitter.com/bugch3ck\n\nparameters:\n  - name: pipe_name\n    default: \"RemCom_communicaton\"\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET ps = '''Add-Type -TypeDefinition  @\"\n            using System;\n            using System.Diagnostics;\n            using System.Runtime.InteropServices;\n        \n            public static class Kernel32\n            {\n                [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n                public static extern IntPtr CreateFile(\n                      string filename,\n                      System.IO.FileAccess access,\n                      System.IO.FileShare share,\n                      IntPtr securityAttributes,\n                      System.IO.FileMode creationDisposition,\n                      uint flagsAndAttributes,\n                      IntPtr templateFile);\n                [DllImport(\"kernel32.dll\", SetLastError = true)]\n                public static extern bool GetNamedPipeServerProcessId(IntPtr hPipe, out int ClientProcessId);\n            \n                [DllImport(\"kernel32.dll\", SetLastError=true)]\n                public static extern bool CloseHandle(IntPtr hObject);\n            }\n        \"@\n        $remcom=$null\n        $pipeOwner=0\n\n        try {\n          #gci directly on the pipe does not work in some versions of posh for some reason\n          $remcom = Get-ChildItem -ErrorAction Stop \\\\.\\pipe\\ -Filter '''\n        LET ps2='''\n          $output = New-Object PSObject -Property @{\n            ProcessId         = $null;\n            ProcessName       = $null;\n            NamedPipe         = $remcom.FullName;\n            AccessControlType = $null;\n            IdentityReference = $null;\n          }\n          try {\n            $acl = $remcom.GetAccessControl();\n            $output.AccessControlType = $acl.Access.AccessControlType;\n            $output.IdentityReference = $acl.Access.IdentityReference.Value;\n          }\n          catch {\n          }\n          $hPipe = [Kernel32]::CreateFile($remcom.FullName, [System.IO.FileAccess]::Read, [System.IO.FileShare]::None, [System.IntPtr]::Zero, [System.IO.FileMode]::Open, [System.UInt32]::0x80, [System.IntPtr]::Zero);\n          $pipeOwnerFound = [Kernel32]::GetNamedPipeServerProcessId([System.IntPtr]$hPipe, [ref]$pipeOwner);\n          if ($pipeOwnerFound) {\n            # Now that we have the process id, Get process name\n            $processName = Get-WmiObject -Query \"SELECT Caption FROM Win32_Process WHERE ProcessID = $pipeOwner\" | select -ExpandProperty Caption;\n                    \n            # Add to the name and ID to output\n            $output.ProcessID = $pipeOwner;\n            $output.ProcessName = $processName;\n        \n          }\n          if($output.NamedPipe){\n            $output | ConvertTo-JSON\n          }\n          #close the handle to the pipe\n          $closed = [Kernel32]::CloseHandle($hPipe);\n        \n        }\n        catch {\n          write-host $_;\n        }\n        \n        '''\n\n        SELECT * FROM execve(argv=[\"Powershell\", \"-ExecutionPolicy\",\n            \"unrestricted\", \"-c\", ps+pipe_name+ps2])    \n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.ProxyLogon.ProxyShell","op":"set","definition":"name: Exchange.Windows.Detection.ProxyLogon.ProxyShell\ndescription: |\n  This artifact hunts for CVE-2021-27065 (Microsoft Exchange ProxyLogon RCE)\n  and CVE-2021-31207 (Microsoft Exchange ProxyShell RCE) exploitation by parsing \n  entries in the 'MSExchange Management.evtx' log.\n\n  This log file is unique to Exchange and can be useful when ECP logs are\n  no longer available. \n  \n  ProxyLogon webshell detection syntax is specific to \n  'China Chopper' via the PowerShell 'Set-OabVirtualDirectory' cmdlet.\n  \n  ProxyShell webshell detection syntax is specific to PowerShell \n  'New-MailboxExportRequest' and 'New-ExchangeCertificate' cmdlets.\n\nauthor: Deepak Sharma - @rxurien\n\ntype: CLIENT\n\nreference:\n  - https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/\n  - https://www.mandiant.com/resources/change-tactics-proxyshell-vulnerabilities\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: LogFile\n    default: C:/Windows/System32/Winevt/Logs/MSExchange Management.evtx\n    description: Default EVTX Path\n\nsources:\n  - queries:\n      - SELECT timestamp(epoch=int(int=System.TimeCreated.SystemTime)) as CreationTime,\n            System.Channel as Channel,\n            System.EventID.Value as EventID,\n            Message,\n            EventData.Data[0] as Cmdlet,\n            EventData.Data[1] as Payload,\n            EventData\n               \n        FROM parse_evtx(filename=LogFile)\n\n        WHERE (((Message =~ \"new-mailboxexportrequest\"or Message =~ \"new-exchangecertificate\") and Message =~ \"aspx\") or \n              ((Cmdlet =~ \"new-mailboxexportrequest\" or Cmdlet =~ \"new-exchangecertificate\") and Payload =~ \"aspx\") or \n              (Message =~ \"set-oabvirtualdirectory\" and Message =~ \"script\") or (Cmdlet =~ \"set-oabvirtualdirectory\" and Payload =~ \"script\"))\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.ScmanagerBackdoor","op":"set","definition":"name: Exchange.Windows.Detection.ScmanagerBackdoor\nauthor: ACEResponder.com\ndescription: |\n   Checks for overly permissive DACLs on scmanager. Low priv Users with\n   KA - SDDL_KEY_ALL could launch SYSTEM services. \n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET ps = '''\n        $sid_const_json = '{\"AA\":\"SDDL_ACCESS_CONTROL_ASSISTANCE_OPS\",\n        \"AC\":\"SDDL_ALL_APP_PACKAGES\",\n        \"AN\":\"SDDL_ANONYMOUS\",\n        \"AO\":\"SDDL_ACCOUNT_OPERATORS\",\n        \"AP\":\"SDDL_PROTECTED_USERS\",\n        \"AU\":\"SDDL_AUTHENTICATED_USERS\",\n        \"BA\":\"SDDL_BUILTIN_ADMINISTRATORS\",\n        \"BG\":\"SDDL_BUILTIN_GUESTS\",\n        \"BO\":\"SDDL_BACKUP_OPERATORS\",\n        \"BU\":\"SDDL_BUILTIN_USERS\",\n        \"CA\":\"SDDL_CERT_SERV_ADMINISTRATORS\",\n        \"CD\":\"SDDL_CERTSVC_DCOM_ACCESS\",\n        \"CG\":\"SDDL_CREATOR_GROUP\",\n        \"CN\":\"SDDL_CLONEABLE_CONTROLLERS\",\n        \"CO\":\"SDDL_CREATOR_OWNER\",\n        \"CY\":\"SDDL_CRYPTO_OPERATORS\",\n        \"DA\":\"SDDL_DOMAIN_ADMINISTRATORS\",\n        \"DC\":\"SDDL_DOMAIN_COMPUTERS\",\n        \"DD\":\"SDDL_DOMAIN_DOMAIN_CONTROLLERS\",\n        \"DG\":\"SDDL_DOMAIN_GUESTS\",\n        \"DU\":\"SDDL_DOMAIN_USERS\",\n        \"EA\":\"SDDL_ENTERPRISE_ADMINS\",\n        \"ED\":\"SDDL_ENTERPRISE_DOMAIN_CONTROLLERS\",\n        \"EK\":\"SDDL_ENTERPRISE_KEY_ADMINS\",\n        \"ER\":\"SDDL_EVENT_LOG_READERS\",\n        \"ES\":\"SDDL_RDS_ENDPOINT_SERVERS\",\n        \"HA\":\"SDDL_HYPER_V_ADMINS\",\n        \"HI\":\"SDDL_ML_HIGH\",\n        \"IS\":\"SDDL_IIS_USERS\",\n        \"IU\":\"SDDL_INTERACTIVE\",\n        \"KA\":\"SDDL_KEY_ADMINS\",\n        \"LA\":\"SDDL_LOCAL_ADMIN\",\n        \"LG\":\"SDDL_LOCAL_GUEST\",\n        \"LS\":\"SDDL_LOCAL_SERVICE\",\n        \"LU\":\"SDDL_PERFLOG_USERS\",\n        \"LW\":\"SDDL_ML_LOW\",\n        \"ME\":\"SDDL_ML_MEDIUM\",\n        \"MP\":\"SDDL_ML_MEDIUM_PLUS\",\n        \"MU\":\"SDDL_PERFMON_USERS\",\n        \"NO\":\"SDDL_NETWORK_CONFIGURATION_OPS\",\n        \"NS\":\"SDDL_NETWORK_SERVICE\",\n        \"NU\":\"SDDL_NETWORK\",\n        \"OW\":\"SDDL_OWNER_RIGHTS\",\n        \"PA\":\"SDDL_GROUP_POLICY_ADMINS\",\n        \"PO\":\"SDDL_PRINTER_OPERATORS\",\n        \"PS\":\"SDDL_PERSONAL_SELF\",\n        \"PU\":\"SDDL_POWER_USERS\",\n        \"RA\":\"SDDL_RDS_REMOTE_ACCESS_SERVERS\",\n        \"RC\":\"SDDL_RESTRICTED_CODE\",\n        \"RD\":\"SDDL_REMOTE_DESKTOP\",\n        \"RE\":\"SDDL_REPLICATOR\",\n        \"RM\":\"SDDL_RMS__SERVICE_OPERATORS\",\n        \"RO\":\"SDDL_ENTERPRISE_RO_DCs\",\n        \"RS\":\"SDDL_RAS_SERVERS\",\n        \"RU\":\"SDDL_ALIAS_PREW2KCOMPACC\",\n        \"SA\":\"SDDL_SCHEMA_ADMINISTRATORS\",\n        \"SI\":\"SDDL_ML_SYSTEM\",\n        \"SO\":\"SDDL_SERVER_OPERATORS\",\n        \"SS\":\"SDDL_SERVICE_ASSERTED\",\n        \"SU\":\"SDDL_SERVICE\",\n        \"SY\":\"SDDL_LOCAL_SYSTEM\",\n        \"UD\":\"SDDL_USER_MODE_DRIVERS\",\n        \"WD\":\"SDDL_EVERYONE\",\n        \"WR\":\"SDDL_WRITE_RESTRICTED_CODE\"}'\n        \n        $sid_const = ConvertFrom-Json $sid_const_json\n        \n        $ace = ((\u0026 (Get-Command \"$($env:SystemRoot)\\System32\\sc.exe\") @('sdshow', 'scmanager'))[1])\n        $dacl_string = [regex]::match($ace, '.*D:(.*)S:').Groups[1].value\n        $dacls = [regex]::match($dacl_string, '(?:\\(([^\\)]*?)\\))+').Groups[1].Captures\n        foreach ($dacl in $dacls) {\n          $descriptors = $dacl.Value.split(';')\n          $ace_type = $descriptors[0]\n          $rights = $descriptors[2] -split '(\\w{2})'\n          $acct_sid = $descriptors[5]\n          if ($ace_type -eq 'A' -and $rights -contains 'KA' -and $acct_sid -notin $('BA', 'DA', 'EA', 'LA', 'SY')) {\n            $output = New-Object PSObject -Property @{\n              dacl    = $dacl.Value;\n              sid     = $acct_sid;\n              message = '';\n            }\n            if ($acct_sid.Length -eq 2) {\n              $output.message = 'Suspicious scmanager DACL identified. Users with ' + ($sid_const | select -ExpandProperty $acct_sid) + ' can start SYSTEM services.'\n                    \n            }\n            else {\n              $output.message = 'Suspicious scmanager DACL identified. User with SID ' + $acct_sid + ' can start SYSTEM services.'\n            }\n            $output | ConvertTo-Json\n          }\n        \n        }\n        \n        '''\n\n        SELECT * FROM execve(argv=[\"Powershell\", \"-ExecutionPolicy\",\n            \"unrestricted\", \"-c\", ps])   \n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Detection.WonkaVision","op":"set","definition":"name: Exchange.Windows.Detection.WonkaVision\ndescription: |\n \n This artifact analyzes Kerberos tickets and attempts to determine if they are forged, using WonkaVision by @4ndr3w6s and @exploitph.\n \n After analysis, notable events are documented in the native Windows Application log, and are easily reviewable using the `Exhange.Windows.EventLogs.WonkaVision` artifact.\n \n https://github.com/0xe7/WonkaVision\n \nauthor: Wes Lambert -- @therealwlambert\nreference:\n  - https://github.com/0xe7/WonkaVision\ntools:\n  - name: WonkaVision\n    url: https://github.com/weslambert/WonkaVision/releases/download/testing/WonkaVision.exe\n\nsources:\n    - name: RunWonkaVison\n      query: |\n        LET WV \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"WonkaVision\", IsExecutable=FALSE)\n        LET KeyDir \u003c= tempdir(remove_last=true)\n        LET DumpDir \u003c= tempdir(remove_last=true)\n        LET CreateKeys = SELECT * FROM execve(argv=[WV.FullPath[0], '/createkeys', '/outdir:' + KeyDir])\n        LET DumpIt = SELECT * FROM execve(argv=[WV.FullPath[0], '/dump', '/publickey:' + KeyDir + '/public.key', '/dumpdir:' + DumpDir])\n        LET AnalyzeIt = SELECT * FROM execve(argv=[WV.FullPath[0], '/analyze', '/privatekey:' + KeyDir + '/private.key', '/dumpdir:' + DumpDir])\n        SELECT * FROM chain(\n          a=CreateKeys,\n          b=DumpIt,\n          c=AnalyzeIt\n        )\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.Scanner.Yara.Parsed","op":"set","definition":"name: Exchange.Windows.Scanner.Yara.Parsed\nauthor: Dennis Yarizadeh + Chris Jones - Check Point Incident Response Team\ndescription: |\n    Instructions: Upload a yara signature file (signature file must be named yara.yas) and yara64.exe in a single zip file called yara.zip.\n    This artifact is an alternative way to scan processes, or recursively scan the C:\\ with a yara file containing multiple yara rules, utilizing the official yara tool. \n    \n    This artifact will drop the yara.zip file onto the client in a temporary directory, unzip the binary and yara file, \n    and then iterate through every running process or file on disk. Finally, it will delete the temporary directory.  \n    \ntools:\n  - name: yaraexecutable\n    url: https://github.com/VirusTotal/yara/releases/download/v4.3.2/yara-4.3.2-2150-win64.zip\n    \nparameters:\n - name: ScanType\n   description: \"Are we scanning Processes?\"\n   type: bool\n   default: Y\n   \n - name: ThreadLimit\n   description: \"How many threads to utilise?\"\n   type: string\n   default: \"2\"\n    \nsources:\n  - query: |\n\n        LET processes = SELECT * FROM pslist()\n        \n        LET TmpDir \u003c= tempdir()\n\n        LET YaraExePath \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"yaraexecutable\", IsExecutable=FALSE, TemporaryOnly=TRUE)\n\n        LET FetchYara \u003c= SELECT * FROM unzip(filename=YaraExePath.FullPath, output_directory=TmpDir)\n\n        -- Set EXE\n        LET YaraExe \u003c= TmpDir + '\\\\yara64.exe'\n\n        -- Set Yara file\n        Let YaraFile \u003c= TmpDir + '\\\\yara.yas'\n        \n        -- Scan with Yara File\n        LET Execute \u003c= SELECT * FROM if (condition=ScanType, then={SELECT * FROM  foreach(row=processes,\n        query={\n            SELECT Name, Pid, Ppid, Stdout FROM execve(argv=[YaraExe, YaraFile, Pid, \"-p\", ThreadLimit])\n        })},\n        \n        else = { \n        SELECT Stdout FROM execve(argv=[YaraExe, YaraFile, \"-r\",  \"C:\\\\\", \"-g\", \"-p\", ThreadLimit])})\n        \n        --Read Data\n        LET Query = SELECT Stdout FROM Execute\n        \n        LET ParseLines = SELECT * FROM parse_lines(filename=Query.Stdout, accessor=\"data\")\n        \n        LET YaraGrok = \"%{WORD:category} \\\\[\\\\] %{GREEDYDATA:file_path}\"\n        \n        LET ParsedData = SELECT grok(grok=YaraGrok, data=Line) AS Parsed FROM ParseLines\n        \n        SELECT Parsed.category AS Category, Parsed.file_path AS `File Path` FROM ParsedData\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.ETW.DNSOfflineCollector","op":"set","definition":"name: Exchange.Windows.ETW.DNSOfflineCollector\nauthor: Jos Clephas - @DfirJos\ndescription: |\n  This artifact collects DNS queries for a specified duration. It can be used \n  with an Offline Collector (which is not the case with Windows.ETW.DNS).\n  It uses the artifact (Windows.ETW.DNS) that was built by Matt Green - @mgreen27\nparameters:\n  - name: duration\n    default: 60\n    type: int\n  - name: arg_ImageRegex\n    description: \"ImagePath regex filter for\"\n    default: .\n    type: regex\n  - name: arg_CommandLineRegex\n    description: \"Commandline to filter for.\"\n    default: .\n    type: regex\n  - name: arg_QueryRegex\n    description: \"DNS query request (domain) to filter for.\"\n    default: .\n    type: regex\n  - name: arg_AnswerRegex\n    description: \"DNS answer to filter for.\"\n    default: .\n    type: regex\n  - name: arg_CommandLineExclusion\n    description: \"Commandline to filter out. Typically we do not want Dnscache events.\"\n    default: svchost.exe -k NetworkService -p -s Dnscache$\n    type: regex\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT * FROM collect(artifacts='Windows.ETW.DNS', timeout=duration, args=dict(`Windows.ETW.DNS`=dict(\n            ImageRegex=arg_ImageRegex,\n            CommandLineRegex=arg_CommandLineRegex,\n            QueryRegex=arg_QueryRegex,\n            AnswerRegex=arg_AnswerRegex,\n            CommandLineExclusion=arg_CommandLineExclusion))) \n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.ETW.DetectProcessSpoofing","op":"set","definition":"name: Exchange.Windows.ETW.DetectProcessSpoofing\ndescription: |\n      Detects Process parent spoofing such as SelectMyParent.exe or\n      Cobalt Strike select PPID.\n\n      NOTE: for short lasting processes it is expected to report NULL\n      for CommandLine and Username fields as enrichment failed.\n\nreference:\n  - https://blog.f-secure.com/detecting-parent-pid-spoofing/\n  - https://www.youtube.com/watch?v=DOe7WTuJ1Ac\n\ntype: CLIENT_EVENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET RecentProcesses = SELECT * FROM fifo(query={\n            SELECT System.TimeStamp AS CreateTime,\n                   EventData.ImageName AS ImageName,\n                   int(int=EventData.ProcessID) AS Pid,\n                   EventData.MandatoryLabel AS MandatoryLabel,\n                   EventData.ProcessTokenElevationType AS ProcessTokenElevationType,\n                   EventData.ProcessTokenIsElevated AS TokenIsElevated\n            FROM watch_etw(guid=\"{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}\", any=0x10)\n            WHERE System.ID = 1\n        }, max_rows=1000, max_age=60)\n\n        -- Query it once to materialize the FIFO\n        LET _ \u003c= SELECT * FROM RecentProcesses\n\n        LET GetProcessInfo(TargetPid) = SELECT * FROM switch(\n        -- First try to get the pid directly\n        a={\n            SELECT\n                Name, Pid, CreateTime,\n                Exe as ImageName,\n                CommandLine,\n                Username,\n                TokenIsElevated\n            FROM pslist(pid=TargetPid)\n        },\n        -- Failing this look in the FIFO for a recently started process.\n        b={\n            SELECT\n                basename(path=ImageName) as Name,\n                Pid,\n                CreateTime,\n                ImageName,\n                Null as CommandLine,\n                Null as Username,\n                if(condition= TokenIsElevated=\"0\",\n                    then= false,\n                    else= true ) as TokenIsElevated\n            FROM RecentProcesses\n            WHERE Pid = TargetPid\n            LIMIT 1\n        })\n\n        -- Resolve parent pid from the fifo - this allows us to catch fast terminating processes.\n        SELECT System.TimeStamp AS EventTime,\n            GetProcessInfo(TargetPid=int(int=EventData.ProcessID))[0] AS SuspiciousProcess,\n            GetProcessInfo(TargetPid=System.ProcessID)[0] AS RealParent,\n            GetProcessInfo(TargetPid=int(int=EventData.ParentProcessID))[0] AS ClaimedParent,\n            System as _System, EventData as _EventData\n        FROM watch_etw(guid=\"{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}\", any=0x10)\n        WHERE System.ID = 1 AND str(str=System.ProcessID) != EventData.ParentProcessID\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.ETW.ScreenshotTaken","op":"set","definition":"name: Exchange.Windows.ETW.ScreenshotTaken\nauthor: Zane Gittins\ndescription: |\n   This artifact detects screen captures by correlating events from the Microsoft-Windows-Win32k ETW provider which are triggered by common Windows API calls made when taking a screenshot. This can be useful for detecting remote access trojans, infostealers, and data exfiltration. Tested against Sliver, Meterpreter, and Empire. This will also trigger on legitimate tools such as ZoomIt, Greenshot, MsTeams, etc. which can be excluded on a case by case basis via the ProcessExceptionsRegex parameter.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT or NOTEBOOK\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ProcessExceptionsRegex\n    description: Except these processes.\n    type: string\n    default: \"Explorer.exe\"\n  - name: ScreenshotMaxRows\n    description: Maximum number of screenshot events to store in internal fifo queue for correlation.\n    type: int\n    default: 500\n  - name: ScreenshotMaxAge\n    description: Maximum age in seconds to retain screenshot events to store in internal fifo queue for correlation.\n    type: int\n    default: 90\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' AND version(plugin=\"dedup\") \u003e= 0\n\n    query: |\n       // WindowUpdate(1) - Triggered by BitBlt() we delay this by 5 seconds due to a race condition in correlating with screenshot events.\n       LET WindowUpdateEvents = SELECT\n           *\n         FROM delay(\n           query={\n           SELECT\n           *\n           FROM dedup(\n             query={\n             SELECT\n             *, System.ProcessID AS FirstPid\n             FROM watch_etw(\n               guid=\"{8c416c79-d49b-4f01-a467-e56d3aa8234c}\",\n               level=4,\n               any=5120,\n               description=\"Microsoft-Windows-Win32k\")\n             WHERE System.ID = 1\n               AND EventData.Hwnd = \"0x0\"\n                 AND (EventData.Type = \"2147483654\" OR EventData.Type = \"2147483655\")\n         },\n             timeout=5,\n             key=\"FirstPid\")\n         },\n           delay=5)\n       \n       // GdiSysMemToken(33) - Created by EtwGdiSysMemToken() in win32kbase.sys\n       // PhysicalSurfCreate(52) - This is triggered by CreateCompatibleBitmap. Created by EtwPhysicalSurfCreateEvent() in win32kbase.sys\n       LET ScreenshotEvents = SELECT\n           *\n         FROM dedup(\n           query={\n           SELECT\n           *, System.ProcessID AS Pid\n           FROM watch_etw(\n             guid=\"{8c416c79-d49b-4f01-a467-e56d3aa8234c}\",\n             level=4,\n             any=5120,\n             description=\"Microsoft-Windows-Win32k\")\n           WHERE System.ID = 33 OR System.ID = 52\n         },\n           timeout=5,\n           key=\"Pid\")\n       \n       LET LastEvents = SELECT *, System.ProcessID AS ScreenshotPid\n         FROM fifo(query=ScreenshotEvents,\n                   max_rows=ScreenshotMaxRows,\n                   max_age=ScreenshotMaxAge)\n       \n       LET Track = SELECT *\n         FROM foreach(row=WindowUpdateEvents,\n                      query={\n           SELECT *, process_tracker_get(id=System.ProcessID).Data AS ProcInfo,\n                  count(items=Pid) AS Count\n           FROM LastEvents\n           WHERE ScreenshotPid = FirstPid\n           GROUP BY Pid\n         })\n         WHERE Count \u003e= 1\n       \n       SELECT timestamp(string=System.TimeStamp) AS Timestamp,\n              ProcInfo,\n              ScreenshotPid AS Pid,\n              Count\n       FROM Track\n       WHERE NOT ProcInfo.Exe =~ ProcessExceptionsRegex\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Aurora","op":"set","definition":"name: Exchange.Windows.EventLogs.Aurora\nauthor: Wes Lambert - @therealwlambert\ndescription: |\n   This artifact is a wrapper around the Windows.EventLogs.EvtxHunter artifact. It searches the Windows Application event log for logs being written by Nextron System's Aurora/Aurora Lite ('AuroraAgent' provider).\n\nreference:\n   - https://www.nextron-systems.com/aurora/\n\nparameters:\n   - name: MessageRegex\n     description: \"Message regex to enable filtering on message\"\n     default: .\n   - name: TargetGlob\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx'\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT EventTime,\n             Computer,\n             Channel,\n             Provider,\n             EventID,\n             EventRecordID,\n             EventData,\n             Message,\n             FullPath\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n        EvtxGlob=TargetGlob,\n        ProviderRegex=\"AuroraAgent\",\n        VSSAnalysisAge=VSSAnalysisAge)\n      WHERE Message =~ MessageRegex\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Chainsaw","op":"set","definition":"name: Exchange.Windows.EventLogs.Chainsaw\ndescription: |\n\n    This artifact leverages Chainsaw to enable usage of Sigma rules\n    (in addition to built-in rules) to faciliate detection within\n    Windows Event Logs.\n\n    From the project's description:\n\n    \"Chainsaw provides a powerful ‘first-response’ capability to\n    quickly identify threats within Windows event logs.  It offers a\n    generic and fast method of searching through event logs for\n    keywords, and by identifying threats using built-in detection\n    logic and via support for Sigma detection rules.\"\n\n    https://github.com/countercept/chainsaw\n\nauthor: Wes Lambert - @therealwlambert, James Dorgan - @FranticTyping, Alex Korntizer - @AlexKornitzer\ntools:\n  - name: Chainsaw\n    url: https://github.com/WithSecureLabs/chainsaw/releases/download/v2.9.0/chainsaw_all_platforms+rules+examples.zip\n    version: 2.9.0\n    expected_hash: 9f809ea14b71e7c53fde8ebef7f3a82881f4dcacec97566b29cc914324667eda\n     \nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: EVTXPath\n    default: 'C:\\Windows\\System32\\winevt\\Logs'\n  - name: ExecLength\n    description: Size (in bytes) of output that will be returned for a single row for execve().  This value may need to be adjusted depending on the size of your event logs.\n    type: int\n    default: \"100000000\"\n  - name: JSONLength\n    description: Size (in bytes) of output that will be returned for a single row for parse_json_array().  This value may need to be adjusted depending on the size of your event logs.\n    type: int\n    default: \"100000000\"\n\nsources:\n  - query: |\n        LET Toolzip \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Chainsaw\", IsExecutable=FALSE)\n        LET TmpDir \u003c= tempdir()\n        LET TmpResults \u003c= tempfile()\n        LET UnzipIt \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n        LET SigmaRules \u003c= TmpDir + '\\\\chainsaw\\\\sigma\\\\rules'\n        LET ChainsawRules \u003c= TmpDir + '\\\\chainsaw\\\\rules'\n        LET SigmaMapping \u003c= TmpDir + '\\\\chainsaw\\\\mappings\\\\sigma-event-logs-all.yml'\n        LET ExecCS \u003c= SELECT * FROM execve(argv=[\n                        TmpDir + '\\\\chainsaw\\\\chainsaw_x86_64-pc-windows-msvc.exe',\n                        'hunt', EVTXPath,\n                        \"-s\", SigmaRules,\n                        \"-r\", ChainsawRules,\n                        \"--mapping\", SigmaMapping,\n                        \"--json\",\n                        \"--output\", TmpResults], length=ExecLength)\n        SELECT  get(member=\"document.data.Event.System.TimeCreated_attributes.SystemTime\") AS EventTime,\n                get(member=\"name\") AS Detection,\n                get(member=\"level\") AS Severity,\n                get(member=\"status\") AS Status,\n                get(member=\"group\") AS `Rule Group`,\n                get(member=\"document.data.Event.System.Computer\") AS Computer,\n                get(member=\"document.data.Event.System.Channel\") AS Channel,\n                get(member=\"document.data.Event.System.EventID\") AS EventID,\n                get(member=\"document.data.Event.EventData.User\") AS _User,\n                get(member=\"document.data.Event.System\") AS SystemData,\n                get(member=\"document.data.Event.EventData\") AS EventData,\n                get(member=\"authors\") AS Authors\n        FROM parse_json_array(data=read_file(filename=TmpResults, length=JSONLength))\n","id":78560752944729352,"_ts":1757377138}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.EvtxHussar","op":"set","definition":"name: Exchange.Windows.EventLogs.EvtxHussar\ndescription: |\n   Grab important events from Windows logs (.evtx) using [EvtxHussar](https://github.com/yarox24/EvtxHussar).\n   Also upload PowerShell ScriptBlocks (reconstructed as files).\n\n   Following categories are supported:\u003cbr /\u003e\n   - Antivirus (Symantec, Windows Defender)\u003cbr /\u003e\n   - Accounts (Users related operations)\u003cbr /\u003e\n   - Audit (Log cleared, Policy changed)\u003cbr /\u003e\n   - Windows Firewall \u003cbr /\u003e\n   - Logons\u003cbr /\u003e\n   - Powershell events\u003cbr /\u003e\n   - Processes\u003cbr /\u003e\n   - RDP\u003cbr /\u003e\n   - ScheduledTasks (creation/modification/execution)\u003cbr /\u003e\n   - Services\u003cbr /\u003e\n   - WinRM\u003cbr /\u003e\n   - Boot up/Restart/Shutdown\u003cbr /\u003e\n   - SMB\n\n   Note: If no logs from specific category will be found, source will remain empty.\u003cbr /\u003e\n   Based on version 1.7 of EvtxHussar.\n\nauthor: Jarosław Oparka - @yarox24\n\ntype: CLIENT\n\nresources:\n  timeout: 3600 # 1 hour\n  max_rows: 10000000 # 10 million\n  max_upload_bytes: 5368709120 # 5 Gigabytes\n\ntools:\n  - name: EvtxHussar17\n    url: https://github.com/yarox24/EvtxHussar/releases/download/1.7/EvtxHussar1.7_windows_amd64.zip\n    serve_locally: true\n\nprecondition:\n      SELECT OS From info() where OS = 'windows' AND Architecture = \"amd64\"\n\nparameters:\n  - name: LogsPath\n    description: |\n      Windows Event logs path\n    default: \"C:\\\\Windows\\\\System32\\\\winevt\\\\Logs\"\n    type: hidden\n  - name: AntivirusSymantec\n    description: |\n      Include Symantec Network Protection (Application.evtx) events\n    default: Y\n    type: bool\n  - name: AntivirusWindowsDefender\n    description: |\n      Include Windows Defender (Microsoft-Windows-Windows Defender%4Operational.evtx) events\n    default: Y\n    type: bool\n  - name: AccountsUserRelatedOperations\n    description: |\n      Include events related to account manipulation (Security.evtx)\n    default: Y\n    type: bool\n  - name: AuditLogCleared\n    description: |\n      Include events related to Windows Event log clearing (Security.evtx, System.evtx)\n    default: Y\n    type: bool\n  - name: AuditPolicyChanges\n    description: |\n      Include events related to changes in audit policy (Security.evtx)\n    default: Y\n    type: bool\n  - name: BootupRestartShutdown\n    description: |\n      Include events related to boot up/restart/shutdown of OS (System.evtx, Security.evtx)\n    default: Y\n    type: bool\n  - name: Logons\n    description: |\n      Include events related to logon/logoff/sessions of Windows users (Security.evtx)\n    default: Y\n    type: bool\n  - name: PowerShellScriptBlocksReconstructAndUpload\n    description: |\n      Include EID 4104 - Creating Scriptblock text (Microsoft-Windows-PowerShell%4Operational.evtx), reconstruct and upload them as .ps1 files\n    default: Y\n    type: bool\n  - name: Option_PowerShellScriptBlocksXorApply\n    description: |\n      Should we apply XOR operation (Key: Y) on reconstructed PS ScriptBlocks when saving them temporarily on target system. May prevent them from deletion by AV.\n    default: Y\n    type: bool\n  - name: PowerShellEvents\n    description: |\n      Include events related to PowerShell activity on the system (Microsoft-Windows-PowerShell%4Operational.evtx, Windows PowerShell.evtx)\n    default: Y\n    type: bool\n  - name: Processes\n    description: |\n      Include events related to creation/termination of processess (Security.evtx, Microsoft-Windows-Sysmon%4Operational.evtxx)\n    default: Y\n    type: bool\n  - name: RDP\n    description: |\n      Include events related to RDP activity on the system (Microsoft-Windows-RemoteDesktopServices-RdpCoreTS%4Operational.evtx, Security.evtx, Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx, Microsoft-Windows-TerminalServices-RDPClient%254Operational.evtx, Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx)\n    default: Y\n    type: bool\n  - name: ScheduledTasksCreationModification\n    description: |\n      Include events related to creation and modification of Scheduled Tasks (Microsoft-Windows-TaskScheduler%4Operational.evtx, Security.evtx)\n    default: Y\n    type: bool\n  - name: ScheduledTasksExecution\n    description: |\n      Include events related to execution of Scheduled Tasks(Microsoft-Windows-TaskScheduler%4Operational.evtx)\n    default: Y\n    type: bool\n  - name: Services\n    description: |\n      Include events related to Windows services (System.evtx, Security.evtx)\n    default: Y\n    type: bool\n  - name: SMBClientDestinations\n    description: |\n      Include events related to usage of SMB Client (outgoing SMB connections)\n    default: Y\n    type: bool\n  - name: SMBServerAccessAudit\n    description: |\n      Include events related to access to SMB Server (incoming SMB connections)\n    default: Y\n    type: bool\n  - name: SMBServerModifications\n    description: |\n      Include events related to SMB Server configuration\n    default: Y\n    type: bool\n  - name: WindowsFirewall\n    description: |\n      Include Windows Firewall (Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx, Security.evtx) events\n    default: Y\n    type: bool\n  - name: WinRM\n    description: |\n      Include events related to Windows Remote Management (Microsoft-Windows-WinRM%4Operational.evtx)\n    default: Y\n    type: bool\n\n\nsources:\n  - name: Antivirus_Symantec\n    query: |\n      // Execute EvtxHussar\n      LET ZipInfo \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName= \"EvtxHussar17\", IsExecutable= False)\n\n      LET tmpdir \u003c= tempdir()\n\n      LET Unpack \u003c= SELECT * FROM unzip(filename=ZipInfo[0].FullPath, output_directory=tmpdir)\n\n      LET Binpath \u003c= tmpdir + \"\\\\EvtxHussar\\\\EvtxHussar.exe\"\n      LET CWDpath \u003c= tmpdir + \"\\\\EvtxHussar\\\\\"\n\n      LET outdir \u003c= tempdir()\n\n      LET cnt \u003c= int(int=0)\n      LET IncreaseCounter(c, cat_flag) = if(condition= cat_flag = \"Y\", then=c + 1, else=c)\n\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=AntivirusSymantec)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=AntivirusWindowsDefender)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=AccountsUserRelatedOperations)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=AuditLogCleared)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=AuditPolicyChanges)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=BootupRestartShutdown)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=Logons)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=PowerShellScriptBlocksReconstructAndUpload)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=PowerShellEvents)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=Processes)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=RDP)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=ScheduledTasksCreationModification)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=ScheduledTasksExecution)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=Services)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=SMBClientDestinations)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=SMBServerAccessAudit)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=SMBServerModifications)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=WinRM)\n      LET cnt \u003c= IncreaseCounter(c=cnt, cat_flag=WindowsFirewall)\n      LET cnt_max \u003c= int(int=19)\n\n\n      LET AppendIfEnabled(arr, cat_flag, l2propername) = if(condition= cat_flag = \"Y\", then= arr + l2propername, else= arr )\n\n      LET EnabledL2Maps \u003c= array(a=\"TO_DELETE\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=AntivirusSymantec, l2propername=\"AV_SymantecNetwork\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=AntivirusWindowsDefender, l2propername=\"AV_WindowsDefender\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=AccountsUserRelatedOperations, l2propername=\"AccountsUserRelatedOperations\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=AuditLogCleared, l2propername=\"AuditLogCleared\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=AuditPolicyChanges, l2propername=\"AuditPolicyChanged\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=BootupRestartShutdown, l2propername=\"General_BootupRestartShutdown\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=Logons, l2propername=\"LogonsUniversal\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=PowerShellScriptBlocksReconstructAndUpload, l2propername=\"PowerShellScriptBlock\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=PowerShellEvents, l2propername=\"PowerShellUniversal\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=Processes, l2propername=\"ProcessCreation\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=RDP, l2propername=\"RDPUniversal\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=ScheduledTasksCreationModification, l2propername=\"ScheduledTasks_CreationModification\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=ScheduledTasksExecution, l2propername=\"ScheduledTasks_Execution\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=Services, l2propername=\"ServicesUniversal\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=SMBClientDestinations, l2propername=\"SMB_ClientDestinations\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=SMBServerAccessAudit, l2propername=\"SMB_ServerAccessAudit\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=SMBServerModifications, l2propername=\"SMB_ServerModifications\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=WinRM, l2propername=\"WinRMUniversal\")\n      LET EnabledL2Maps \u003c= AppendIfEnabled(arr=EnabledL2Maps, cat_flag=WindowsFirewall, l2propername=\"FirewallUniversal\")\n\n\n      LET HussArgs \u003c= array(bin=Binpath,\n                      outdir_flag=\"-o\",\n                      outdir_path=outdir,\n                      format_flag=\"-f\",\n                      format_val=\"jsonl\"\n                      )\n      LET HussArgs \u003c= if(condition= cnt \u003c cnt_max, then= HussArgs + \"--includeonly\" + join(array=EnabledL2Maps[1:], sep=\",\"), else= HussArgs)\n      LET HussArgs \u003c= if(condition= Option_PowerShellScriptBlocksXorApply = \"Y\", then= HussArgs + \"--scriptblockxor\", else= HussArgs)\n      LET HussArgs \u003c= HussArgs + LogsPath\n\n      LET _ \u003c= log(message=\"EvtxHussar cmdline arguments: %v\", args=HussArgs)\n\n      LET ExecuteHussar = SELECT log(message=\"EvtxHussar stdout: %s\",\n         args=Stdout)\n      FROM execve(cwd=CWDpath, argv=HussArgs, sep=\"\\n\")\n\n      LET _ \u003c= if(condition= cnt \u003e 0, then= ExecuteHussar,\n         else= log(message=\"As no plugins were selected, nothing to do.\"))\n\n\n      // Helper functions for sources\n      LET GetOutputFiles(category, jsonl_filename) = SELECT OSPath, Size FROM glob(globs=outdir + format(format=\"\\\\*\\\\%s\\\\%s\", args=[category, jsonl_filename]))\n\n      LET PluginOutput(search_result) = SELECT * FROM foreach(\n         row= { SELECT * FROM search_result },\n         query= { SELECT * FROM parse_jsonl(filename=OSPath) ORDER BY EventTime DESC}\n      )\n\n      // Antivirus_Symantec\n      SELECT *, \"EvtxHussar.Antivirus_Symantec\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"av\", jsonl_filename=\"symantec_networkprotection.jsonl\"))\n\n  - name: Antivirus_WindowsDefender\n    query: |\n      SELECT *, \"EvtxHussar.Antivirus_WindowsDefender\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"av\", jsonl_filename=\"windows_defender.jsonl\"))\n\n  - name: Accounts_UsersRelatedOperations\n    query: |\n      SELECT *, \"EvtxHussar.Accounts_UsersRelatedOperations\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"accounts\", jsonl_filename=\"users_related_operations.jsonl\"))\n\n  - name: Audit_LogCleared\n    query: |\n      SELECT *, \"EvtxHussar.Audit_LogCleared\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"audit\", jsonl_filename=\"log_cleared.jsonl\"))\n\n  - name: Audit_PolicyChanges\n    query: |\n      SELECT *, \"EvtxHussar.Audit_PolicyChanges\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"audit\", jsonl_filename=\"policy_change.jsonl\"))\n\n  - name: BootupRestartShutdown\n    query: |\n      SELECT *, \"EvtxHussar.BootupRestartShutdown\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"general\", jsonl_filename=\"bootup_restart_shutdown.jsonl\"))\n\n  - name: Logons\n    query: |\n      SELECT *, \"EvtxHussar.Logons\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"logons\", jsonl_filename=\"logons.jsonl\"))\n\n  - name: Powershell_Events\n    query: |\n      SELECT *, \"EvtxHussar.Powershell_Events\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"powershell\", jsonl_filename=\"powershell_events.jsonl\"))\n\n  - name: Powershell_ScriptblocksSummary\n    query: |\n      SELECT *, \"EvtxHussar.Powershell_ScriptblocksSummary\" AS __Source FROM foreach(\n      row= { SELECT *, if(condition= Option_PowerShellScriptBlocksXorApply = \"Y\", then= Name[:-4], else=Name) AS FinalName, if(condition= Option_PowerShellScriptBlocksXorApply = \"Y\", then = xor(string=read_file(filename=OSPath), key='Y'), else = read_file(filename=OSPath)) AS Content FROM glob(globs=outdir + \"\\\\*\\\\powershell\\\\scriptblocks\\\\*\") },\n      query= { SELECT FinalName, upload(file=Content, accessor=\"data\", name=\"C:\\\\evtxhussar_virtual_scriptblocks_directory\\\\\" + FinalName).sha256 AS UploadSHA256, Size, humanize(bytes=Size) AS `Human Size`, Content[:100]  AS `First 100 characters of script` FROM scope() }\n      )\n\n  - name: Processes\n    query: |\n      SELECT *, \"EvtxHussar.Processes\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"processes\", jsonl_filename=\"processes.jsonl\"))\n\n  - name: RDP\n    query: |\n      SELECT *, \"EvtxHussar.RDP\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"rdp\", jsonl_filename=\"rdp.jsonl\"))\n\n  - name: ScheduledTasks_CreationModification\n    query: |\n      SELECT *, \"EvtxHussar.ScheduledTasks_CreationModification\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"scheduled_tasks\", jsonl_filename=\"creation_modification.jsonl\"))\n\n  - name: ScheduledTasks_Execution\n    query: |\n      SELECT *, \"EvtxHussar.ScheduledTasks_Execution\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"scheduled_tasks\", jsonl_filename=\"execution.jsonl\"))\n\n  - name: Services\n    query: |\n      SELECT *, \"EvtxHussar.Services\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"services\", jsonl_filename=\"services.jsonl\"))\n\n  - name: SMB_ClientDestinations\n    query: |\n      SELECT *, \"EvtxHussar.SMB_ClientDestinations\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"smb\", jsonl_filename=\"smb_client_destinations.jsonl\"))\n\n  - name: SMB_ServerAccessAudit\n    query: |\n      SELECT *, \"EvtxHussar.SMB_ServerAccessAudit\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"smb\", jsonl_filename=\"smb_server_access_audit.jsonl\"))\n\n  - name: SMB_ServerModifications\n    query: |\n      SELECT *, \"EvtxHussar.SMB_ServerModifications\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"smb\", jsonl_filename=\"smb_server_modifications.jsonl\"))\n\n  - name: WinRM\n    query: |\n      SELECT *, \"EvtxHussar.WinRM\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"winrm\", jsonl_filename=\"winrm.jsonl\"))\n\n  - name: WindowsFirewall\n    query: |\n      SELECT *, \"EvtxHussar.WindowsFirewall\" AS __Source FROM PluginOutput(search_result=GetOutputFiles(category=\"firewall\", jsonl_filename=\"windows_firewall.jsonl\"))\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Windows.Registry.Hunter","op":"set","definition":"name: Windows.Registry.Hunter\ndescription: |\n   This artifact parses and categorizes information for the registry.\n\n   Build time: 2025-07-10T03:42:37Z\n\n   Read more about this artifact here https://github.com/Velocidex/registry_hunter\n\n   ## Collecting only few rules\n\n   This artifact contains thousands of rules and by default performs\n   deep registry analysis. If you do not need to apply all the rules,\n   simply navigate to:\n\n     https://registry-hunter.velocidex.com/docs/rules/\n\n   Select the rule you want and add the description to the\n   `DescriptionFilter` parameter below.\n\n   ## RemappingStrategy\n\n   In order to present a unified view of all registry hives we remap various\n   hives we remap various hives into the \"registry\" accessor. There are a\n   number of strategies implemented for this:\n\n   1. API - This strategy uses the API for the majority of hives including\n      user hives. Therefore users who are not currently logged in will not\n      have their NTUser.dat hives mounted.\n   2. API And NTUser.dat - This strategy uses the API for most of the hives,\n      except for all the raw user hives will be mapped in HKEY_USERS.\n      Therefore all users will be visible.\n   3. Raw Hives - This stragegy is most suitable for working off an image or\n       acquired hive files. All raw hives will be mapped (include SYSTEM, SOFTWARE etc).\n\n   Using the API will result in faster collection times, but may be some\n   differences:\n\n   * Some registry keys are blocked with API access, even for the system\n     user - so we get permission denied for these. Therefore, even with the API\n     stragegy above we remap the raw files into the \"raw_registry\" accessor.\n     The rule may work around this by using this accessor directly.\n   * Some hive files are not accessible and can only be accessible using the\n     API (e.g. the BCD hives).\n\nparameters:\n- name: Categories\n  type: multichoice\n  default: |\n   [\"ASEP\",\"ASEP Classes\",\"Antivirus\",\"Autoruns\",\"Cloud Storage\",\"Devices\",\"Event Logs\",\"Executables\",\"Installed Software\",\"Microsoft Exchange\",\"Microsoft Office\",\"Network Shares\",\"Persistence\",\"Program Execution\",\"Services\",\"System Info\",\"Third Party Applications\",\"Threat Hunting\",\"User Accounts\",\"User Activity\",\"Volume Shadow Copies\",\"Web Browsers\"]\n  choices:\n    - \"ASEP\"\n    - \"ASEP Classes\"\n    - \"Antivirus\"\n    - \"Autoruns\"\n    - \"Cloud Storage\"\n    - \"Devices\"\n    - \"Event Logs\"\n    - \"Executables\"\n    - \"Installed Software\"\n    - \"Microsoft Exchange\"\n    - \"Microsoft Office\"\n    - \"Network Shares\"\n    - \"Persistence\"\n    - \"Program Execution\"\n    - \"Services\"\n    - \"System Info\"\n    - \"Third Party Applications\"\n    - \"Threat Hunting\"\n    - \"User Accounts\"\n    - \"User Activity\"\n    - \"Volume Shadow Copies\"\n    - \"Web Browsers\"\n- name: CategoryFilter\n  description: If this is set we use the regular expression instead of the choices above.\n  type: regex\n- name: CategoryExcludedFilter\n  description: Exclude any categories based on this regular expression\n  type: regex\n  default: XXXXXX\n- name: DescriptionFilter\n  type: regex\n  default: .\n- name: RootFilter\n  type: regex\n  default: .\n- name: RemappingStrategy\n  description: |\n     In order to present a unified view of all registry hives we remap various hives\n     into the \"registry\" accessor. This setting controls the strategy we use to do so.\n     See more information in the artifact description.\n  type: choices\n  default: \"API And NTUser.dat\"\n  choices:\n   - API\n   - API And NTUser.dat\n   - Raw Hives\n   - None\n\n- name: RootDrive\n  default: C:/\n  description: |\n     Path to the top level drive. If one of the PathTO* parameters are not\n     specified, then we use this to figure out the usual paths to the hives.\n\n- name: AlsoUploadHives\n  type: bool\n  description: If checked, we also upload all the hives.\n\n- name: PathTOSAM\n  description: \"By default, hive is at C:/Windows/System32/Config/SAM\"\n\n- name: PathTOAmcache\n  description: \"By default, hive is at C:/Windows/appcompat/Programs/Amcache.hve\"\n\n- name: PathTOSecurity\n  description: \"By default, hive is at C:/Windows/System32/Config/SECURITY\"\n\n- name: PathTOSystem\n  description: \"By default, hive is at C:/Windows/System32/Config/SYSTEM\"\n\n- name: PathTOSoftware\n  description: \"By default, hive is at C:/Windows/System32/Config/SOFTWARE\"\n\n- name: PathTOUsers\n  description: \"By default, directory is at C:/Users\"\n\n- name: NTFS_CACHE_TIME\n  type: int\n  description: How often to flush the NTFS cache. (Default is never).\n  default: \"1000000\"\n\n- name: DEBUG\n  type: bool\n  description: Add more logging.\n\nexport: |\n    LET _info \u003c= SELECT * FROM info()\n\n    -- On Non Windows systems we need to use case insensitive accessor or we might not find the right hives.\n    LET DefaultAccessor \u003c= if(condition=_info[0].OS =~ \"windows\", then=\"ntfs\", else=\"file_nocase\")\n    LET HKLM \u003c= pathspec(parse=\"HKEY_LOCAL_MACHINE\", path_type=\"registry\")\n    LET RootDrive \u003c= pathspec(Path=RootDrive)\n    LET PathTOSAM \u003c= PathTOSAM || RootDrive + \"Windows/System32/config/SAM\"\n    LET PathTOAmcache \u003c= PathTOAmcache || RootDrive + \"Windows/appcompat/Programs/Amcache.hve\"\n    LET PathTOSystem \u003c= PathTOSystem || RootDrive + \"Windows/System32/Config/System\"\n    LET PathTOSecurity \u003c= PathTOSecurity || RootDrive + \"Windows/System32/Config/Security\"\n    LET PathTOSoftware \u003c= PathTOSoftware || RootDrive + \"Windows/System32/Config/Software\"\n    LET PathTOUsers \u003c= PathTOUsers || RootDrive + \"Users/\"\n\n    -- HivePath: The path to the hive on disk\n    -- RegistryPath: The path in the registry to mount the hive\n    -- RegMountPoint: The path inside the hive to mount (usually /)\n    LET _map_file_to_reg_path(HivePath, RegistryPath, RegMountPoint, Accessor, Description) = dict(\n       type=\"mount\", description=Description,\n       `from`=dict(accessor='raw_reg',\n                   prefix=pathspec(\n                      Path=RegMountPoint,\n                      DelegateAccessor=Accessor,\n                      DelegatePath=HivePath),\n                   path_type='registry'),\n        `on`=dict(accessor='registry',\n                  prefix=RegistryPath,\n                  path_type='registry'))\n\n    LET _standard_mappings = (\n       _map_file_to_reg_path(\n          HivePath=PathTOSystem,\n          RegistryPath=\"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\",\n          RegMountPoint=\"/ControlSet001\",\n          Accessor=DefaultAccessor,\n          Description=\"Map SYSTEM Hive to CurrentControlSet\"),\n       _map_file_to_reg_path(\n          HivePath=PathTOSoftware,\n          RegistryPath=\"HKEY_LOCAL_MACHINE\\\\Software\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map Software hive to HKEY_LOCAL_MACHINE\"),\n       _map_file_to_reg_path(\n          HivePath=PathTOSystem,\n          RegistryPath=\"HKEY_LOCAL_MACHINE\\\\System\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map System hive to HKEY_LOCAL_MACHINE\"),\n       _map_file_to_reg_path(\n          HivePath=PathTOSecurity,\n          RegistryPath=\"HKEY_LOCAL_MACHINE\\\\Security\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map SECURITY Hive to HKEY_LOCAL_MACHINE\"),\n    )\n\n    // Map raw hives for hives that are not normally accessible via API\n    LET _unmounted_hive_mapping = (\n      _map_file_to_reg_path(\n          HivePath=PathTOSAM,\n          RegistryPath=\"SAM\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map SAM to /SAM/\"),\n      _map_file_to_reg_path(\n          HivePath=PathTOAmcache,\n          RegistryPath=\"Amcache\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map Amcache to /Amcache/\"),\n    )\n\n    LET _api_remapping \u003c= (\n        -- By default remap the entire \"registry\" accessor for API access.\n        dict(type=\"mount\",\n          `from`=dict(accessor=\"registry\", prefix='/', path_type='registry'),\n          on=dict(accessor=\"registry\", prefix='/', path_type=\"registry\")),\n\n       -- Always remap raw Security because the API stops us from reading the keys.\n       _map_file_to_reg_path(\n          HivePath=PathTOSecurity,\n          RegistryPath=\"HKEY_LOCAL_MACHINE\\\\Security\",\n          RegMountPoint=\"/\",\n          Accessor=DefaultAccessor,\n          Description=\"Map SECURITY Hive to HKEY_LOCAL_MACHINE\"),\n    )\n\n    -- In API mode we sometimes can not access the keys due to permissions.\n    -- These mapping ensure rules can specifically access the raw hives if they\n    -- need to.\n    LET _raw_hive_mapping_for_api \u003c= (\n      dict(type=\"mount\",\n        description=\"Map System Hive to raw_registry accessor\",\n        `from`=dict(accessor=\"raw_reg\",\n         prefix=pathspec(Path='/',\n           DelegatePath=PathTOSystem,\n           DelegateAccessor=DefaultAccessor),\n         path_type='registry'),\n       on=dict(accessor=\"raw_registry\",\n               prefix='/HKEY_LOCAL_MACHINE/System',\n               path_type=\"registry\")),\n      dict(type=\"mount\",\n        description=\"Map Software Hive to raw_registry accessor\",\n        `from`=dict(accessor=\"raw_reg\",\n         prefix=pathspec(Path='/',\n           DelegatePath=PathTOSoftware,\n           DelegateAccessor=DefaultAccessor),\n         path_type='registry'),\n       on=dict(accessor=\"raw_registry\",\n               prefix='/HKEY_LOCAL_MACHINE/Software',\n               path_type=\"registry\")),\n    )\n\n    // The BCD hive is normally located on an unmounted drive so we\n    // always map it with the API.\n    LET _bcd_map \u003c= (dict(\n       type=\"mount\",\n       `from`=dict(accessor=\"registry\", prefix='HKEY_LOCAL_MACHINE\\\\BCD00000000', path_type='registry'),\n       on=dict(accessor=\"registry\", prefix='HKEY_LOCAL_MACHINE\\\\BCD00000000', path_type=\"registry\")))\n\n    -- Map all the NTUser.dat files even in API mode because these are often not mounted.\n    LET _map_ntuser = SELECT\n    _map_file_to_reg_path(\n      HivePath=OSPath,\n      RegMountPoint=\"/\",\n      Accessor=DefaultAccessor,\n      Description=format(format=\"Map NTUser.dat from User %v to HKEY_USERS\",\n                         args=OSPath[-2]),\n\n      -- This is technically the SID but it is clearer to just use the username\n      RegistryPath=\"HKEY_USERS\\\\\" + OSPath[-2]) AS Mapping\n    FROM glob(globs=\"*/NTUser.dat\", root=PathTOUsers)\n\n    LET _map_userclass = SELECT\n    _map_file_to_reg_path(\n      HivePath=OSPath,\n      RegMountPoint=\"/\",\n      Accessor=DefaultAccessor,\n      Description=format(\n         format=\"Map UsrClass.dat from User %v to HKEY_USERS/%v/Software/Classes\",\n         args=[OSPath[2], OSPath[2]]),\n\n      -- This is technically the SID but it is clearer to just use the username\n      RegistryPath=\"HKEY_USERS\\\\\" + OSPath[2] + \"\\\\Software\\\\Classes\") AS Mapping\n    FROM glob(globs=\"*/AppData/Local/Microsoft/Windows/UsrClass.dat\",\n              root=PathTOUsers)\n\n\n    LET _log_array(Message) = if(condition=log(message=Message), then=[])\n\n    // Apply the mappings:\n    LET RemapRules = if(condition=RemappingStrategy =~ \"API.+NTUser\",\n       then=_api_remapping +\n            _map_ntuser.Mapping +\n            _map_userclass.Mapping +\n            _unmounted_hive_mapping +\n            _raw_hive_mapping_for_api  +\n            _log_array(Message=\"Using API And NTUser.dat Mapping\"),\n\n    else=if(condition=RemappingStrategy =~ \"API\",\n       then=_api_remapping +\n            _unmounted_hive_mapping +\n            _log_array(Message=\"Using API Mapping\"),\n\n    else=if(condition=RemappingStrategy =~ \"raw hive\",\n       then=_map_ntuser.Mapping +\n            _map_userclass.Mapping +\n            _unmounted_hive_mapping +\n            _standard_mappings +\n            _raw_hive_mapping_for_api +\n            _log_array(Message=\"Using Raw Hives Mapping\"),\n    else=log(message=\"Unsupported remapping strategy %v\", args=RemappingStrategy))))\n\n    LET AppCompatCacheParser \u003c= '''[\n    [\"HeaderWin10\", \"x=\u003ex.HeaderSize\", [\n      [\"HeaderSize\", 0, \"unsigned int\"],\n      [\"Entries\", \"x=\u003ex.HeaderSize\", Array, {\n          type: \"Entry\",\n          sentinel: \"x=\u003ex.Size = 0\",\n          count: 10000,\n          max_count: 10000,\n      }]\n    ]],\n    [\"HeaderWin8\", 128, [\n      [\"Entries\", 128, Array, {\n          type: \"EntryWin8\",\n          sentinel: \"x=\u003ex.EntrySize = 0\",\n          count: 10000,\n          max_count: 10000,\n      }]\n    ]],\n    \n    [\"EntryWin8\", \"x=\u003ex.EntrySize + 12\", [\n      [\"Signature\", 0, \"String\", {\n         length: 4,\n      }],\n      [\"EntrySize\", 8, \"unsigned int\"],\n      [\"PathSize\", 12, \"uint16\"],\n      [\"Path\", 14, \"String\", {\n          length: \"x=\u003ex.PathSize\",\n          encoding: \"utf16\",\n      }],\n      [\"LastMod\", \"x=\u003ex.PathSize + 14 + 10\", \"WinFileTime\"]\n    ]],\n    \n    [\"Entry\", \"x=\u003ex.Size + 12\", [\n      [\"Signature\", 0, \"String\", {\n         length: 4,\n      }],\n      [\"Size\", 8, \"unsigned int\"],\n      [\"PathSize\", 12, \"uint16\"],\n      [\"Path\", 14, \"String\", {\n          length: \"x=\u003ex.PathSize\",\n          encoding: \"utf16\",\n      }],\n      [\"LastMod\", \"x=\u003ex.PathSize + 14\", \"WinFileTime\"],\n      [\"DataSize\", \"x=\u003ex.PathSize + 14 + 8\", \"uint32\"],\n      [\"Data\", \"x=\u003ex.PathSize + 14 + 8 + 4\" , \"String\", {\n          length: \"x=\u003ex.DataSize\",\n      }],\n    \n      # The last byte of the Data block is 1 for execution\n      [\"Execution\", \"x=\u003ex.PathSize + 14 + 8 + 4 + x.DataSize - 4\", \"uint32\"]\n    ]],\n    \n    # This is the Win7 parser but we dont use it right now.\n    [\"HeaderWin7x64\", 128, [\n      [\"Signature\", 0, \"uint32\"],\n      [\"Entries\", 128, \"Array\", {\n          count: 10000,\n          sentinel: \"x=\u003ex.PathSize = 0\",\n          type: EntryWin7x64,\n      }]\n    ]],\n    [\"EntryWin7x64\", 48, [\n      [\"PathSize\", 0, \"uint16\"],\n      [\"PathOffset\", 8, \"uint32\"],\n      [\"Path\", \"x=\u003ex.PathOffset - x.StartOf\", \"String\", {\n          encoding: \"utf16\",\n          length: \"x=\u003ex.PathSize\",\n      }],\n      [\"LastMod\", 16, \"WinFileTime\"]\n    ]]\n    \n    ]'''\n    \n    LET AppCompatCacheWin10(Blob) = parse_binary(\n        accessor=\"data\",\n        filename=Blob,\n        profile=AppCompatCacheParser,\n        struct=\"HeaderWin10\")\n    \n    LET AppCompatCacheWin8(Blob) = parse_binary(\n        accessor=\"data\",\n        filename=Blob,\n        profile=AppCompatCacheParser,\n        struct=\"HeaderWin8\")\n    \n    LET AppCompatCache(Blob) = SELECT LastMod, Path, Execution\n    FROM foreach(\n      row=if(\n        condition=AppCompatCacheWin10(Blob=Blob).HeaderSize IN (52, 48),\n        then=AppCompatCacheWin10(Blob=Blob).Entries,\n        else=AppCompatCacheWin8(Blob=Blob).Entries))\n    \n    LET AppCompatFlagsPrograms(OSPath) = SELECT OSPath.Basename AS Program\n       FROM glob(globs='Compatibility Assistant/{Store,Persisted}/*',\n                 accessor=\"registry\", root=OSPath)\n    \n    LET FetchKeyValues(OSPath) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n    })\n    \n    LET GetDateFrom128Bit(x) = parse_binary(accessor=\"data\",\n      filename=x, profile='''\n      [[\"X\", 0, [\n         [\"year\", 0, \"uint16\"],\n         [\"month\", 2, \"uint16\"],\n         [\"day\", 6, \"uint16\"],\n         [\"hour\", 8, \"uint16\"],\n         [\"minute\", 10, \"uint16\"],\n         [\"seconds\", 12, \"uint16\"],\n         [\"Date\", 0, \"Value\", {\n            value: \"x=\u003eformat(format='%04d-%02d-%02dT%02d:%02d:%02d', args=[x.year, x.month, x.day, x.hour, x.minute, x.seconds])\"\n          }]\n      ]]]\n      ''', struct=\"X\").Date\n    \n    LET ExtractValueFromComment(x) = parse_string_with_regex(\n      string=x.Metadata.Comment, regex=format(format=\"%v [=-] ([^,]+)\", args=x.Data)).g1\n    \n    -- Map from binary integer to a winfiletime - handle both binary encoding and integers\n    LET FILETIME(t) = if(condition=format(format=\"%T\", args=[t,]) =~ \"\\\\[\\\\]uint8\",\n       then=timestamp(winfiletime=parse_binary(accessor=\"data\", filename=t, struct=\"uint64\") || 0),\n       else=timestamp(winfiletime=t || 0))\n    \n    -- Map from binary integer to a winfiletime - handle both binary encoding and integers\n    LET IP(t) = if(condition=format(format=\"%T\", args=[t,]) =~ \"\\\\[\\\\]uint8\",\n       then=ip(netaddr4_le=parse_binary(accessor=\"data\", filename=t, struct=\"uint32be\") || 0),\n       else=ip(netaddr4_le=t || 0))\n    \n    LET GetRawValue(OSPath) = stat(filename=OSPath, accessor=\"raw_registry\").Data.value\n    \n    LET GetAppPaths(OSPath) = SELECT OSPath, Mtime, FetchKeyValues(OSPath=OSPath) AS App\n      FROM glob(root=OSPath, globs=\"*\", accessor=\"registry\")\n      WHERE IsDir\n    \n    LET GetProviderDllForGUID(GUID) = GetValue(\n        OSPath=\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Classes\\\\CLSID\\\\\" + GUID + \"\\\\InProcServer32\\\\@\")\n    \n    LET _CharToString(X) = SELECT\n      format(format=\"%c\", args=_value) AS C FROM foreach(row=X)\n    \n    LET CharsToString(X) = join(array=_CharToString(X=X).C)\n    LET AppKeyExtract(OSPath) = SELECT Name,\n       get(item=AppKeyLookup, field=Name) AS Key, Mtime,\n       FetchKeyValuesWithRegex(OSPath=OSPath,\n          Regex=\"ShellExecute|Association|RegisteredApp\") AS Details\n    FROM glob(root=OSPath, globs=\"*\", accessor=\"registry\")\n    \n    LET AppKeyLookup \u003c= dict(\n      `20`=\"APPCOMMAND_BASS_BOOST\",\n      `19`=\"APPCOMMAND_BASS_DOWN\",\n      `21`=\"APPCOMMAND_BASS_UP\",\n      `1`=\"APPCOMMAND_BROWSER_BACKWARD\",\n      `6`=\"APPCOMMAND_BROWSER_FAVORITES\",\n      `2`=\"APPCOMMAND_BROWSER_FORWARD\",\n      `7`=\"APPCOMMAND_BROWSER_HOME\",\n      `3`=\"APPCOMMAND_BROWSER_REFRESH\",\n      `5`=\"APPCOMMAND_BROWSER_SEARCH\",\n      `4`=\"APPCOMMAND_BROWSER_STOP\",\n      `31`=\"APPCOMMAND_CLOSE\",\n      `36`=\"APPCOMMAND_COPY\",\n      `45`=\"APPCOMMAND_CORRECTION_LIST\",\n      `37`=\"APPCOMMAND_CUT\",\n      `43`=\"APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE\",\n      `28`=\"APPCOMMAND_FIND\",\n      `40`=\"APPCOMMAND_FORWARD_MAIL\",\n      `27`=\"APPCOMMAND_HELP\",\n      `17`=\"APPCOMMAND_LAUNCH_APP1\",\n      `18`=\"APPCOMMAND_LAUNCH_APP2\",\n      `15`=\"APPCOMMAND_LAUNCH_MAIL\",\n      `16`=\"APPCOMMAND_LAUNCH_MEDIA_SELECT\",\n      `52`=\"APPCOMMAND_MEDIA_CHANNEL_DOWN\",\n      `51`=\"APPCOMMAND_MEDIA_CHANNEL_UP\",\n      `49`=\"APPCOMMAND_MEDIA_FAST_FORWARD\",\n      `11`=\"APPCOMMAND_MEDIA_NEXTTRACK\",\n      `47`=\"APPCOMMAND_MEDIA_PAUSE\",\n      `46`=\"APPCOMMAND_MEDIA_PLAY\",\n      `14`=\"APPCOMMAND_MEDIA_PLAY_PAUSE\",\n      `12`=\"APPCOMMAND_MEDIA_PREVIOUSTRACK\",\n      `48`=\"APPCOMMAND_MEDIA_RECORD\",\n      `50`=\"APPCOMMAND_MEDIA_REWIND\",\n      `13`=\"APPCOMMAND_MEDIA_STOP\",\n      `44`=\"APPCOMMAND_MIC_ON_OFF_TOGGLE\",\n      `25`=\"APPCOMMAND_MICROPHONE_VOLUME_DOWN\",\n      `24`=\"APPCOMMAND_MICROPHONE_VOLUME_MUTE\",\n      `26`=\"APPCOMMAND_MICROPHONE_VOLUME_UP\",\n      `29`=\"APPCOMMAND_NEW\",\n      `30`=\"APPCOMMAND_OPEN\",\n      `38`=\"APPCOMMAND_PASTE\",\n      `33`=\"APPCOMMAND_PRINT\",\n      `35`=\"APPCOMMAND_REDO\",\n      `39`=\"APPCOMMAND_REPLY_TO_MAIL\",\n      `32`=\"APPCOMMAND_SAVE\",\n      `41`=\"APPCOMMAND_SEND_MAIL\",\n      `42`=\"APPCOMMAND_SPELL_CHECK\",\n      `22`=\"APPCOMMAND_TREBLE_DOWN\",\n      `23`=\"APPCOMMAND_TREBLE_UP\",\n      `34`=\"APPCOMMAND_UNDO\",\n      `9`=\"APPCOMMAND_VOLUME_DOWN\",\n      `8`=\"APPCOMMAND_VOLUME_MUTE\",\n      `10`=\"APPCOMMAND_VOLUME_UP\")\n    \n    LET _ParseFirewallRule(X) = to_dict(item={\n       SELECT split(string=_value, sep_string=\"=\")[0] AS _key,\n              split(string=_value, sep_string=\"=\")[1] AS _value\n       FROM foreach(row=split(string=X, sep_string='|'))\n       WHERE NOT _key =~ \"^v\"\n    })\n    \n    LET ParseFirewallRule(X) = _ParseFirewallRule(X=X) +\n       dict(Protocol=ProtocolLookup(X=_ParseFirewallRule(X=X).Protocol))\n    \n    LET MRUProfile \u003c= '''\n    [[\"Header\", 0, [\n       [\"Array\", 0, \"Array\", {\n          \"count\": 500,\n          \"sentinel\": \"x=\u003eNOT x\",\n          \"type\": \"int32\"\n        }]\n    ]]]\n    '''\n    \n    LET CalculateMRUEx(OSPath) = SELECT split(string=utf16(string=GetValue(OSPath=OSPath + str(str=_value))), sep='\\x00')[0] AS value\n    FROM foreach(row=parse_binary(\n           profile=MRUProfile,\n           accessor=\"data\",\n           filename=GetValue(OSPath=OSPath + \"MRUListEx\") || \"\",\n           struct=\"Header\").Array)\n    WHERE _value \u003e 0\n    \n    LET _BAMPrograms(Root) = SELECT OSPath.Basename AS Program,\n      timestamp(winfiletime=parse_binary(accessor=\"data\",\n          filename=Data.value, struct=\"uint64\")) AS Timestamp\n    FROM glob(accessor=\"registry\", globs=\"*\", root=Root)\n    WHERE NOT Program =~ \"^(Version|Sequence)\"\n    \n    LET userAssistProfile = '''\n      [\n        [\"Header\", 0, [\n          [\"NumberOfExecutions\", 4, \"uint32\"],\n          [\"LastExecution\", 60, \"WinFileTime\", {\"type\":\"uint64\"}]\n        ]]\n      ]\n    '''\n    \n    LET _ExtractUserAssist(Data) = parse_binary(accessor=\"data\",\n                      filename=Data,\n                      profile=userAssistProfile, struct=\"Header\")\n    \n    LET _RADAR(OSPath) = SELECT OSPath.Basename AS Program,\n       timestamp(winfiletime=GetValue(OSPath=OSPath + \"LastDetectionTime\")) AS LastDetectionTime\n    FROM glob(accessor=\"registry\", globs='*', root=OSPath)\n    \n    LET _RecentFileList(OSPath) = SELECT Data.value AS F\n    FROM glob(accessor=\"registry\", globs='*', root=OSPath)\n    WHERE OSPath.Basename =~ \"File\"\n    \n    LET _FeatureUsage(OSPath) = SELECT OSPath.Basename AS Application,\n        Data.value AS Number\n    FROM glob(accessor=\"registry\", globs='*', root=OSPath)\n    \n    LET RDPMRU(OSPath) = SELECT Data.value AS Server\n    FROM glob(accessor=\"registry\", globs='*', root=OSPath + \"Default\")\n    WHERE OSPath.Basename =~ \"MRU\"\n    \n    LET _ParseActions(Data)  = parse_binary(accessor=\"data\",\n                filename=Data, struct=\"Header\",\n                profile='''\n    [[\"Header\", 0, [\n     [\"__Ver\", 0, \"uint16\"],\n     [\"__UserLen\", 2, \"uint32\"],\n     [\"User\", 6, \"String\", {length: \"x=\u003ex.__UserLen\", encoding: \"utf16\"}],\n     [\"__ActionType\", \"x=\u003e6 + x.__UserLen\", \"uint16\"],\n     [\"ActionType\", \"x=\u003e6 + x.__UserLen\", \"Enumeration\", {\n        type: \"uint32\",\n        choices: {\n          \"26214\": \"BinaryAction\",\n          \"30583\": \"ComHanlder\",\n          \"34952\": \"Email\",\n          \"39321\": \"MessageBox\",\n        }\n     }],\n     [\"Action\", \"x=\u003e6 + x.__UserLen + 2\", \"Union\", {\n       selector: \"x=\u003ex.__ActionType\",\n       choices: {\n         \"26214\": BinaryAction,\n         \"30583\": ComHandler,\n       }\n     }],\n    ]],\n    [\"ComHandler\", 0, [\n     [\"ClassID\", 4, \"GUID\"],\n     [\"__DataLen\", 20, uint32],\n     [\"Data\", 24, \"String\", {\n       \"length\": \"x=\u003ex.__DataLen\",\n       \"encoding\": \"utf16\",\n     }]\n    ]],\n    [\"GUID\", 16, [\n     [\"__D1\", 0, \"uint32\"],\n     [\"__D2\", 4, \"uint16\"],\n     [\"__D3\", 6, \"uint16\"],\n     [\"__D4\", 8, \"String\", {\"term\": \"\", \"length\": 2}],\n     [\"__D5\", 10, \"String\", {\"term\": \"\", \"length\": 6}],\n     [\"Value\", 0, \"Value\", {\n        \"value\": \"x=\u003eformat(format='{%08x-%04x-%04x-%02x-%02x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])\"\n    }]\n    ]],\n    [\"BinaryAction\", 0, [\n     [\"__BinLen\", 4, \"uint32\"],\n     [\"Binary\", 8, \"String\", {length: \"x=\u003ex.__BinLen\", encoding: \"utf16\"}],\n    ]]]\n    ''')\n    \n    LET _ParseDynamicInfo(Data) = parse_binary(accessor=\"data\",\n                filename=Data, struct=\"Header\",\n                profile='''\n    [[\"Header\", 0, [\n     [\"__Ver\", 0, \"uint16\"],\n     [\"Created\", 4, \"WinFileTime\", {\"type\": \"uint64\"}],\n     [\"LastStart\", 12, \"WinFileTime\", {\"type\": \"uint64\"}],\n     [\"LastStop\", 20, \"WinFileTime\", {\"type\": \"uint64\"}],\n     [\"TaskState\", 28, \"uint32\"],\n     [\"LastErrorCode\", 32, \"uint32\"],\n     [\"LastSuccessfulRun\", 36, \"WinFileTime\", {\"type\": \"uint64\"}],\n    ]]]\n    ''')\n    \n    LET _TaskCache(OSPath) = SELECT to_dict(item={\n      SELECT OSPath.Basename AS _key,\n        if(condition= OSPath.Basename =~ \"DynamicInfo\",\n           then=_ParseDynamicInfo(Data=Data.value),\n        else= if(condition= OSPath.Basename =~ \"Actions\",\n           then=_ParseActions(Data=Data.value),\n        else=Data.value)) AS _value\n      FROM glob(accessor=\"registry\", globs='*', root=OSPath)\n    }) + dict(OSPath=OSPath) AS Details\n    FROM glob(accessor=\"registry\", globs='*', root=OSPath)\n    \n    LET _ServiceTypeLookup \u003c= dict(`1`=\"KernelDriver\", `2`=\"FileSystemDriver\", `4`=\"Adapter\", `8`=\"RecognizerDriver\", `16`=\"Win32OwnProcess\", `32`=\"Win32ShareProcess\", `256`=\"InteractiveProcess\", `96`=\"Win32ShareProcess\")\n    LET _ServiceStartModeLookup \u003c= dict(`0`=\"Boot\", `1`=\"System\", `2`=\"Automatic\", `3`=\"Manual\", `4`=\"Disabled\")\n    \n    LET _ServicesInfo(OSPath) =\n        FetchKeyValuesWithRegex(OSPath=OSPath, Regex=\"Description|DisplayName|ServiceDll|Group|ImagePath|RequiredPrivileges|Type|Parameters|SERVICEDLL\") +\n        dict(Mtime=Mtime, Service=OSPath.Basename,\n             TypeName=get(item=_ServiceTypeLookup, field=str(str=GetValue(OSPath=OSPath + \"Type\"))),\n             StartName=get(item=_ServiceStartModeLookup, field=str(str=GetValue(OSPath=OSPath + \"Start\")))\n        )\n    \n    LET ParseMitigationOptions(H) = RemoveNullDictValue(D=dict(\n     DEP=\n       (H[-1:] = \"1\" \u0026\u0026 \"Always On\") ||\n       (H[-1:] = \"2\" \u0026\u0026 \"Always On - enable ATL thunk emulation\"),\n     SEHOP=(H[-2:-1] = \"1\"),\n     ASLR=\n        (H[-3:-2] = \"1\" \u0026\u0026 \"Enable force relocate.\") ||\n        (H[-3:-2] = \"2\" \u0026\u0026 \"Force relocate off.\") ||\n        (H[-3:-2] = \"3\" \u0026\u0026 \"Force relocate always on.\"),\n     `Heap terminate`=\n        (H[-4:-3] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-4:-3] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `Bottom ASLR`=\n        (H[-5:-4] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-5:-4] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `HEASLR`=\n        (H[-6:-5] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-6:-5] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `Strict handle checks`=\n        (H[-7:-6] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-7:-6] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `Win32k system call disable policy`=\n        (H[-8:-7] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-8:-7] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `Extension point disable policy`=\n        (H[-9:-8] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-9:-8] = \"2\" \u0026\u0026 \"Always Off.\"),\n     `Dynamic code policy (probably).`=\n        (H[-10:-9] = \"1\" \u0026\u0026 \"Always On.\") ||\n        (H[-10:-9] = \"2\" \u0026\u0026 \"Always Off.\") ||\n        (H[-10:-9] = \"3\" \u0026\u0026 \"Always On with optout.\"),\n     `Control Flow Guard (CFG)`=\n        (H[-11:-10] = \"1\" \u0026\u0026 \"Enable\") ||\n        (H[-11:-10] = \"2\" \u0026\u0026 \"Disable\"),\n     `Binary signature policy.`=\n        (H[-12:-11] = \"1\" \u0026\u0026 \"Microsoft signed only.\") ||\n        (H[-12:-11] = \"2\" \u0026\u0026 \"Disable?\"),\n     `Font loading prevention.`=\n        (H[-13:-12] = \"1\" \u0026\u0026 \"Enable\") ||\n        (H[-13:-12] = \"2\" \u0026\u0026 \"Disable\") ||\n        (H[-13:-12] = \"3\" \u0026\u0026 \"Enable with Audit\"),\n     `Image load policy (remote images).`=\n        (H[-14:-13] = \"1\" \u0026\u0026 \"Always On\") ||\n        (H[-14:-13] = \"2\" \u0026\u0026 \"Always Off\") ||\n        (H[-14:-13] = \"3\" \u0026\u0026 \"Reserved\"),\n     `Image load policy (low mandatory label).`=\n        (H[-15:-14] = \"1\" \u0026\u0026 \"Always On\") ||\n        (H[-15:-14] = \"2\" \u0026\u0026 \"Always Off\") ||\n        (H[-15:-14] = \"3\" \u0026\u0026 \"Reserved\")))\n    \n    LET FetchKeyValuesWithRegex(OSPath, Regex) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n      WHERE Name =~ Regex\n    })\n    \n    LET _ProtocolLookup \u003c= dict(`6`=\"TCP\", `17`=\"UDP\")\n    LET ProtocolLookup(X) = get(item=_ProtocolLookup, field=X) || X\n    \n    LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n    \n    LET CalculateMRU(OSPath) = SELECT GetValue(OSPath=OSPath + g1) AS value\n        FROM parse_records_with_regex(accessor=\"data\",\n        file=GetValue(OSPath=OSPath + \"MRUList\") || \"\", regex=\"(.)\")\n    \n    LET ResolveSID(SID) = pathspec(parse=stat(accessor=\"registry\",\n        filename=\"HKEY_LOCAL_MACHINE/Software/Microsoft/Windows NT/CurrentVersion/ProfileList/\" + SID + \"/ProfileImagePath\").Data.value).Basename\n    \n    LET FormatMAC(x) = parse_binary(accessor=\"data\",\n      filename=x, profile='''\n      [[\"X\", 0, [\n        [\"x0\", 0, \"uint8\"],\n        [\"x1\", 1, \"uint8\"],\n        [\"x2\", 2, \"uint8\"],\n        [\"x3\", 3, \"uint8\"],\n        [\"x4\", 4, \"uint8\"],\n        [\"x5\", 5, \"uint8\"],\n        [\"mac\", 0, Value, {\"value\": \"x=\u003eformat(format='%02x:%02x:%02x:%02x:%02x:%02x', args=[x.x0, x.x1, x.x2, x.x3, x.x4, x.x5])\"}]\n      ]]]\n      ''', struct=\"X\").mac\n    \n    LET RemoveNullDictValue(D) = to_dict(item={\n       SELECT * FROM items(item=D)\n       WHERE _value\n    })\n    \n    \n\n    -- This contains the queries for Full Query Rules - they skip the glob and just run arbitrary VQL.\n    LET FullQueries \u003c= parse_json_array(data=gunzip(string=base64decode(string=\"H4sIAAAAAAAA/6RT34vjNhD+Vwa95AduKIW+BPLgdZzmevmxtb23lNMRZHtii9oaI423Dbf7vxc5yWV7bGHh9CC+QRppvvm++fxVLNEVVnesyYi5SIqGDIpARIqxInsSc5HVFhXDujesTSUCEfZckxVzcdc7Rnun/mG0v/okals0LObiEaFExoIhJ66Ba4SCzFFXcNQNgjIlWKy0Y3sCZVkfVcEOjpZaCLsuorZTvGpU5UQgfmsoF3MhApEQ8Rn90eNQWxpv4iiDKayS/RaKWmkzVouv0gBcjl7xC+DKKoB9eq+4DmDLusXA3x9WqQseP3QNqRLLRT+AsS/ZqBYX56RJANmpw4UU0ZnSSjcoxQTCFJbISjfOvzdUVDWUj/3m/PW5lFI+OLTOg6nfwq5bKlYeJqRabSoP7SDDDc1886SYSPMSQP6j/PzJhcvsTrmBWwC+jIXfZk+q6fH/6aiiQOfILqS4aijF7YthXSmvP8Z/Hh7SOEm/MU73q+wxTGKPt7qw5OjIPnjUpqS/HewyH0W9tWj4E1qnyVxa9coYw50h1LluNJ8gdE47VmZ4LGWyQwOn5w5Oz92bSCNegu9dvyTeIaesLPfdmugv994JiGqrHfxOBh38BNH9hySDZ1ipfKUwh2cIDZPRBHcNukIrGGc1ZvVWmZIm8Ax5W5Rof/7lP7OT1QizXZzBcrNx0GjHWII2wxAt99kuzg5pFibZw/1hvd9/TAHNk7ZkfLo0T8pqlfsZswhnH4M2TOcnO0tePHSgGKzn0+JMmvdN2dVTN5N4j3zyQJrv7f5ZmtFoNOi/2Ufh5rANo/WHXSxlenKMrVfPsKUmRZ5+C6RM0XnBYauMqtBKGb9iJ9/iPxqNgttnF7NN35f4JYA37TyR5nEdJ/GVnXj58m8AAAD//93iX7MsBQAA\")))\n\n    LET AllFullQueries \u003c=\n        SELECT * FROM FullQueries\n        WHERE Category =~ CategoryFilter\n          AND Description =~ DescriptionFilter\n\n    -- This contains the metadata for Glob rules.\n    LET _MD \u003c= parse_json_array(data=gunzip(string=base64decode(string=\"\")))\n    LET MD(DescriptionFilter, RootFilter, CategoryFilter, CategoryExcludedFilter) =\n     SELECT Glob, Category, Description,\n            get(field=\"Details\") AS Details,\n            get(field=\"Comment\") AS Comment,\n            get(field=\"Filter\") AS Filter, Root\n     FROM _MD\n     WHERE Description =~ DescriptionFilter\n       AND Root =~ RootFilter\n       AND Category =~ CategoryFilter\n       AND NOT Category =~ CategoryExcludedFilter\n\n    LET AllRules \u003c=\n      SELECT * FROM MD(DescriptionFilter=DescriptionFilter, RootFilter=RootFilter,\n        CategoryFilter=CategoryFilter, CategoryExcludedFilter=CategoryExcludedFilter)\n\n    LET AllGlobs \u003c=\n      SELECT Root, enumerate(items=Glob) AS Globs\n      FROM AllRules\n      GROUP BY Root\n\nsources:\n- name: Remapping\n  query: |\n    SELECT * FROM RemapRules\n\n  notebook:\n  - type: none\n\n- name: Rules\n  query: |\n    SELECT * FROM chain(a=AllRules, b=AllFullQueries)\n  notebook:\n  - type: none\n\n- name: Globs\n  notebook:\n  - type: none\n\n  query: |\n    SELECT * FROM AllGlobs\n\n- name: Uploads\n  notebook:\n  - type: none\n\n  query: |\n   LET UploadFiles = SELECT OSPath AS SourceFile, Size,\n       Btime AS Created,\n       Ctime AS Changed,\n       Mtime AS Modified,\n       Atime AS LastAccessed,\n       upload(file=OSPath, accessor=DefaultAccessor, mtime=Mtime) AS Upload\n    FROM glob(accessor=DefaultAccessor, globs=[\n       PathTOSAM, PathTOAmcache, PathTOSystem,\n       PathTOSecurity, PathTOSoftware, PathTOUsers + \"*/ntuser.dat*\"\n    ])\n\n   SELECT * FROM if(condition=AlsoUploadHives, then=UploadFiles)\n\n- name: Results\n  notebook:\n    - type: vql\n      output: \"\u003ch1\u003eAll Results\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         SELECT * FROM source(source=\"Results\")\n    - type: vql\n      output: \"\u003ch1\u003eCategory ASEP\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category ASEP\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''ASEP''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory ASEP Classes\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category ASEP Classes\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''ASEP Classes''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Antivirus\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Antivirus\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Antivirus''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Autoruns\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Autoruns\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Autoruns''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Cloud Storage\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Cloud Storage\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Cloud Storage''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Devices\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Devices\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Devices''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Event Logs\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Event Logs\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Event Logs''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Executables\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Executables\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Executables''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Installed Software\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Installed Software\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Installed Software''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Microsoft Exchange\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Microsoft Exchange\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Microsoft Exchange''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Microsoft Office\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Microsoft Office\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Microsoft Office''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Network Shares\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Network Shares\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Network Shares''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Persistence\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Persistence\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Persistence''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Program Execution\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Program Execution\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Program Execution''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Services\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Services\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Services''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory System Info\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category System Info\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''System Info''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Third Party Applications\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Third Party Applications\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Third Party Applications''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Threat Hunting\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Threat Hunting\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Threat Hunting''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory User Accounts\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category User Accounts\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''User Accounts''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory User Activity\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category User Activity\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''User Activity''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Volume Shadow Copies\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Volume Shadow Copies\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Volume Shadow Copies''' AND Description =~ \".\"\n         GROUP BY Description\n    - type: vql\n      output: \"\u003ch1\u003eCategory Web Browsers\u003c/h1\u003ePress recalculate to View\"\n      template: |\n         /*\n         # Category Web Browsers\n         */\n\n         -- Adjust the Description Regex to focus on specific rules.\n         SELECT Description, count() AS Count,\n                OSPath AS Key, Mtime, Details FROM source()\n         WHERE Category = '''Web Browsers''' AND Description =~ \".\"\n         GROUP BY Description\n  query: |\n    LET GlobsMD \u003c= to_dict(item={\n      SELECT Root AS _key, Globs AS _value FROM AllGlobs\n    })\n\n    LET ShouldLog \u003c= NOT DEBUG\n\n    LET Cache \u003c= memoize(query={\n       SELECT Glob, Category, Description,\n              Details, Filter, Comment\n       FROM AllRules\n       WHERE ShouldLog || log(\n           message=\"Add to cache %v %v\", args=[Glob, Description], dedup=-1)\n    }, key=\"Glob\", period=100000)\n\n    LET _ \u003c= RemappingStrategy =~ \"none\" ||\n                remap(config=dict(remappings=RemapRules))\n\n    LET Result = SELECT OSPath, Mtime,\n       Data.value AS Data,\n       get(item=Cache, field=Globs[0]) AS Metadata,\n       Globs[0] AS _Glob,\n       IsDir\n    FROM foreach(row={\n       SELECT _key AS Root, _value AS GlobsToSearch\n       FROM items(item=GlobsMD)\n       WHERE Root =~ RootFilter\n         AND log(message=\"Will search with globs %v at Root point %v\",\n             dedup=-1, args=[GlobsToSearch, Root])\n\n    }, query={\n       SELECT * FROM glob(globs=GlobsToSearch, root=Root, accessor=\"registry\")\n    })\n    WHERE ShouldLog || log(\n          message=\"Glob %v OSPath %v Metadata %v\",\n          args=[Globs[0], OSPath, Metadata], dedup=-1)\n\n    LET GlobRules = SELECT Metadata.Description AS Description,\n           Metadata.Category AS Category,\n           OSPath, Mtime, Data AS _RawData,\n           eval(func=Metadata.Details || \"x=\u003ex.Data\") || Data AS Details,\n           Metadata AS _Metadata\n    FROM Result\n    WHERE eval(func=Metadata.Filter || \"x=\u003eNOT IsDir\")\n\n    SELECT * FROM chain(\n    a=GlobRules,\n    b={\n      SELECT * FROM foreach(row=AllFullQueries, query={\n        SELECT * FROM query(query=Query, inherit=TRUE)\n      })\n    })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Hayabusa","op":"set","definition":"name: Exchange.Windows.EventLogs.Hayabusa\ndescription: |\n   [Hayabusa](https://github.com/Yamato-Security/hayabusa) is a\n   Windows event log fast forensics timeline generator and threat\n   hunting tool.\n\n   This artifact runs Hayabusa on the endpoint against the specified\n   Windows event log directory, and generates and uploads a single CSV/JSONL\n   file for further analysis with excel, timeline explorer, elastic\n   stack, jq, etc.\n\nauthor: Eric Capuano - @eric_capuano, Whitney Champion - @shortxstack, Zach Mathis - @yamatosecurity, Fukusuke Takahashi - @fukusuket\n\ntools:\n - name: Hayabusa-3.5.0\n   url: https://github.com/Yamato-Security/hayabusa/releases/download/v3.5.0/hayabusa-3.5.0-win-x64-live-response.zip\n   expected_hash: 08b95e108ab93e6dd8c3fb78ab62d629fbb3f23d1057de7658385c52059f19cc\n   version: 3.5.0\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n - name: EvtxDirectory\n   description: \"Directory of .evtx files\"\n   default: C:/Windows/System32/winevt/Logs\n - name: MinimalLevel\n   description: \"Minimum level for rules\"\n   default: medium\n   type: choices\n   choices:\n     - informational\n     - low\n     - medium\n     - high\n     - critical\n - name: OutputFormat\n   description: \"Choose the format of the result file\"\n   default: csv\n   type: choices\n   choices:\n     - csv\n     - jsonl\n - name: OutputProfile\n   description: \"Decide how much data you want back\"\n   default: standard\n   type: choices\n   choices:\n     - minimal\n     - standard\n     - verbose\n     - all-field-info\n     - all-field-info-verbose\n     - super-verbose\n     - timesketch-minimal\n     - timesketch-verbose\n - name: OutputTimeFormat\n   description: \"Choose the format of timestamp\"\n   default: ISO-8601\n   type: choices\n   choices:\n     - European-time\n     - ISO-8601\n     - RFC-2822\n     - RFC-3339\n     - US-military-time\n     - US-time\n     - UTC\n - name: Threads\n   description: \"Number of threads\"\n   type: int\n   default: 4\n - name: UpdateRules\n   description: \"Update rules before scanning\"\n   type: bool\n   default: Y\n - name: Sort\n   description: \"Sort events before saving the file\"\n   type: bool\n   default: N\n - name: NoisyRules\n   description: \"Enable rules marked as noisy\"\n   type: bool\n   default: N\n - name: EIDFilter\n   description: \"Scan only common Event IDs for quicker scans\"\n   type: bool\n   default: N\n - name: TimeOffset\n   description: \"Scan recent events based on an offset (ex: 1y, 3M, 30d, 24h, 30m)\"\n - name: TimelineStart\n   description: \"Start time of the event logs to load (ex: '2020-02-22 00:00:00 +09:00')\"\n - name: TimelineEnd\n   description: \"End time of the event logs to load (ex: '2022-02-22 23:59:59 +09:00')\"\n - name: ExcludeCategory\n   description: \"Do not load rules with specified logsource categories (ex: process_creation,pipe_created)\"\n - name: ExcludeEID\n   description: \"Do not scan specific EIDs for faster speed (ex: 1) (ex: 1,4688)\"\n - name: ExcludeStatus\n   description: \"Do not load rules according to status (ex: experimental) (ex: stable,test)\"\n - name: ExcludeTag\n   description: \"Do not load rules with specific tags (ex: sysmon)\"\n - name: IncludeCategory\n   description: \"Only load rules with specified logsource categories (ex: process_creation,pipe_created)\"\n - name: IncludeEID\n   description: \"Scan only specified EIDs for faster speed (ex: 1) (ex: 1,4688)\"\n - name: IncludeTag\n   description: \"Only load rules with specific tags (ex: attack.execution,attack.discovery)\"\n\nsources:\n - name: Upload\n   query: |\n        -- Fetch the binary\n        LET Toolzip \u003c= SELECT FullPath\n        FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Hayabusa-3.5.0\", IsExecutable=FALSE)\n\n        LET TmpDir \u003c= tempdir()\n\n        -- Unzip the binary\n        LET _ \u003c= SELECT *\n        FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n\n        LET HayabusaExe \u003c= TmpDir + '\\\\hayabusa-3.5.0-win-x64.exe'\n\n        -- Optionally update the rules\n        LET _ \u003c= if(condition=UpdateRules, then={\n        SELECT * FROM execve(argv=[HayabusaExe, 'update-rules'], cwd=TmpDir) })\n\n        LET HayabusaCmd \u003c= if(condition=OutputFormat = \"csv\", then=\"csv-timeline\", else=\"json-timeline\")\n        LET ResultFile \u003c= TmpDir + '\\\\hayabusa_results.' + OutputFormat\n\n        -- Build the command line considering all options\n        -- If it does not match if(condition...), it returns Null, so remove Null with filter(....regex=\".+\")\n        LET cmdline \u003c= filter(list=(\n          HayabusaExe, HayabusaCmd,\n          \"--no-wizard\", \n          \"--quiet\", \"--no-summary\",\n          \"--directory\", EvtxDirectory, \n          \"--output\", ResultFile,\n          \"--min-level\", MinimalLevel,\n          \"--profile\", OutputProfile,\n          \"--\" + OutputTimeFormat,\n          \"--threads\", str(str=Threads),\n          if(condition=OutputFormat = \"jsonl\", then=\"-L\"),\n          if(condition=Sort, then=\"--sort\"),\n          if(condition=NoisyRules, then=\"--enable-noisy-rules\"),\n          if(condition=EIDFilter, then=\"--eid-filter\"),\n          if(condition=TimeOffset, then=\"--time-offset\"),           if(condition=TimeOffset, then=TimeOffset),\n          if(condition=TimelineStart, then=\"--timeline-start\"),     if(condition=TimelineStart, then=TimelineStart),\n          if(condition=TimelineEnd, then=\"--timeline-end\"),         if(condition=TimelineEnd, then=TimelineEnd),\n          if(condition=ExcludeCategory, then=\"--exclude-category\"), if(condition=ExcludeCategory, then=ExcludeCategory),\n          if(condition=ExcludeEID, then=\"--exclude-eid\"),           if(condition=ExcludeEID, then=ExcludeEID),\n          if(condition=ExcludeStatus, then=\"--exclude-status\"),     if(condition=ExcludeStatus, then=ExcludeStatus),\n          if(condition=ExcludeTag, then=\"--exclude-tag\"),           if(condition=ExcludeTag, then=ExcludeTag),\n          if(condition=IncludeCategory, then=\"--include-category\"), if(condition=IncludeCategory, then=IncludeCategory),\n          if(condition=IncludeEID, then=\"--include-eid\"),           if(condition=IncludeEID, then=IncludeEID),\n          if(condition=IncludeTag, then=\"--include-tag\"),           if(condition=IncludeTag, then=IncludeTag),\n        ), regex=\".+\")\n\n        -- Run the tool and divert messages to logs.\n        LET ExecHB \u003c= SELECT *\n        FROM execve(argv=cmdline, cwd=TmpDir, sep=\"\\n\", length=9999999)\n        WHERE log(message=Stdout)\n\n        -- Upload the raw file.\n        SELECT upload(file=ResultFile) AS Uploads FROM scope()\n\n - name: Results\n   query: |\n        LET CSV_RESULT  = SELECT * FROM parse_csv(filename=ResultFile)\n        LET JSONL_RESULT = SELECT * FROM parse_jsonl(filename=ResultFile)\n        LET s = scope()\n        \n        SELECT *, timestamp(string=s.Timestamp || s.datetime) AS EventTime\n        FROM if(condition= OutputFormat = \"csv\", then=CSV_RESULT, else=JSONL_RESULT)\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.LogonSessions","op":"set","definition":"name: Exchange.Windows.EventLogs.LogonSessions\ndescription: |\n    This artifact searches for logon and logoff events within Security event logs identified\n    by Event ID 4624 and 4634. These logon/logoff events are grouped by \"TargetLogonId\" field\n    into \"logon sessions\". For each of these logon sessions, start, end and duration\n    are derived\n\n\nauthor: \"Marinus Boekelo - Northwave\"\n\ntype: CLIENT\n\nparameters:\n  - name: EvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx'\n  - name: UsernameRegex\n    description: \"Target username Regex\"\n    default: .\n    type: regex\n  - name: UsernameWhitelist\n    description: \"Target username witelist Regex\"\n    default: '\\\\$$'\n    type: regex\n  - name: ServerRegex\n    description: \"Target server regex\"\n    default: .\n    type: regex\n  - name: ProcessNameRegex\n    description: \"Target process Regex\"\n    default: .\n  - name: ProcessNameWhitelist\n    description: \"Target process whitelist Regex\"\n    type: regex\n  - name: SearchVSS\n    description: \"Add VSS into query.\"\n    type: bool\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n\nsources:\n  - query: |\n\n      -- firstly set timebounds for performance\n      LET DateAfterTime \u003c= if(condition=DateAfter,\n          then=timestamp(epoch=DateAfter),\n          else=timestamp(epoch=\"1600-01-01\")\n      )\n      LET DateBeforeTime \u003c= if(condition=DateBefore,\n          then=timestamp(epoch=DateBefore),\n          else=timestamp(epoch=\"2200-01-01\")\n      )\n\n      -- expand provided glob into a list of paths on the file system (fs)\n      LET fspaths \u003c= SELECT FullPath\n      FROM glob(globs=expand(path=EvtxGlob))\n\n      -- function returning list of VSS paths corresponding to path\n      LET vsspaths(path) = SELECT FullPath\n      FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)\n\n      -- function to search evtx files\n      LET logonSearchAndGroup(PathList) =\n        SELECT\n          TargetLogonId,\n          min(item=EventTime) as Start,\n          max(item=EventTime) as End,\n          max(item=System.TimeCreated.SystemTime)-min(item=System.TimeCreated.SystemTime) as Duration,\n          System.Computer as SourceHost,\n          enumerate(items=EventData) as EventDataList\n        FROM foreach(\n          row=PathList,\n          query={\n            SELECT\n              timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,\n              EventData.TargetLogonId as TargetLogonId, EventData, System\n            FROM\n              parse_evtx(filename=FullPath)\n            WHERE System.EventID.Value IN (4624,4634)\n            AND EventData.TargetLogonId != 999\n            AND EventTime \u003c DateBeforeTime\n            AND EventTime \u003e DateAfterTime\n          }\n        ) GROUP BY TargetLogonId\n\n\n      LET evtxsearch(PathList) =\n      SELECT\n        Start, End, Duration, SourceHost,\n        EventDataList.SubjectUserSid AS SubjectUserSid,\n        EventDataList.SubjectUserName AS SubjectUserName,\n        EventDataList.SubjectDomainName AS SubjectDomainName,\n        EventDataList.TargetLogonId AS TargetLogonId,\n        EventDataList.TargetUserName AS TargetUserName,\n        EventDataList.TargetDomainName AS TargetDomainName,\n        EventDataList.TargetLogonId AS TargetLogonId,\n        EventDataList.LogonType AS LogonType,\n        EventDataList.LogonProcessName AS LogonProcessName,\n        EventDataList.ProcessName AS ProcessName,\n        EventDataList.IpAddress AS IpAddress\n      FROM logonSearchAndGroup(PathList=PathList)\n      WHERE TargetUserName =~ UsernameRegex\n      AND NOT if(condition=UsernameWhitelist,\n          then= TargetUserName =~ UsernameWhitelist,\n          else= FALSE)\n      AND ProcessName =~ ProcessNameRegex\n      AND NOT if(condition=ProcessNameWhitelist,\n          then= ProcessName =~ ProcessNameWhitelist,\n          else= FALSE)\n      ORDER BY Start\n\n\n      -- include VSS in calculation and deduplicate with GROUP BY by file\n      LET include_vss =\n        SELECT * FROM foreach(\n          row=fspaths,\n          query={ SELECT * FROM evtxsearch(PathList={ SELECT FullPath FROM vsspaths(path=FullPath) }) }\n        )\n\n      -- exclude VSS in EvtxHunt`\n      LET exclude_vss = SELECT *\n        FROM evtxsearch(PathList={SELECT FullPath FROM fspaths})\n\n      -- return rows\n      SELECT * FROM if(condition=SearchVSS,\n        then={ SELECT * FROM include_vss },\n        else={ SELECT * FROM exclude_vss })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.RDPClientActivity","op":"set","definition":"name: Exchange.Windows.EventLogs.RDPClientActivity\nauthor: \"Marinus Boekelo - Northwave\"\ndescription: |\n    This artifact retrieves outgoing RDP session activity from the\n    Microsoft-Windows-TerminalServices-RDPClient event logs. It aggregates\n    sessions based on ActivityID and outputs hostname, timeframe and disconnect reasons.\n    The latter is filled using a dict that was taken from MS Docs (see references)\n\ntype: CLIENT\n\nreference:\n  - https://social.technet.microsoft.com/wiki/contents/articles/37870.remote-desktop-client-troubleshooting-disconnect-codes-and-reasons.aspx\n\nparameters:\n  - name: EvtxGlob\n    default: '%SystemRoot%\\System32\\winevt\\Logs\\Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx'\n  - name: SearchVSS\n    description: \"Add VSS into query.\"\n    type: bool\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n\nsources:\n    - query: |\n\n        -- Definitions of disconnect reasons (see references)\n        LET DisconnectReasonLookup \u003c= dict(\n            `0` = \"No error\",\n            `1` = \"User-initiated client disconnect.\",\n            `2` = \"User-initiated client logoff.\",\n            `3` = \"Your Remote Desktop Services session has ended, possibly for one of the following reasons: The administrator has ended the session. An error occurred while the connection was being established. A network problem occurred. For help solving the problem, see Remote Desktop in Help and Support.\",\n            `4` = \"Extended Reason: The remote session ended because the total login time limit was reached. This limit is set by the server administrator or by network policies.\",\n            `5` = \"Extended Reason: Your Remote Desktop Services session has ended. Another user connected to the remote computer, so your connection was lost. Try connecting again, or contact your network administrator or technical support  group.\",\n            `6` = \"Extended Reason: The connection was disconnected because the remote computer is low on memory.\",\n            `7` = \"Extended Reason: This computer can't connect to the remote computer. Try connecting again. If the problem continues, contact the owner of the remote computer or your network administrator.\",\n            `8` = \"Extended Reason: The client could not establish a connection to the remote computer. The most likely causes for this error are: 1) Remote connections might not be enabled at the remote computer. 2) The maximum number of  connections was exceeded at the remote computer. 3) A network error occurred while establishing a connection. 4) The remote computer might not support the required FIPS security level. Please lower the client side required security level Policy, or contact  your network administrator for assistance.\",\n            `9` = \"Extended Reason: The connection was denied because the user account is not authorized for remote login.\",\n            `256` = \"Extended Reason: The remote session was disconnected because there was an internal error in the remote computer's licensing protocol.\",\n            `257` = \"Extended Reason: The remote session was disconnected because there are no Remote Desktop License Servers available to provide a license. Please contact the server administrator.\",\n            `258` = \"Extended Reason: The remote session was disconnected because there are no Remote Desktop client access licenses available for this computer. Please contact the server administrator.\",\n            `259` = \"Extended Reason: The remote session was disconnected because the remote computer received an invalid licensing message from this computer.\",\n            `260` = \"Remote Desktop can't find the computer. This might mean that it does not belong to the specified network. Verify the computer name and domain that you are trying to connect to.\",\n            `261` = \"Extended Reason: The remote session was disconnected because the Remote Desktop client access license stored on this computer is in an invalid format.\",\n            `262` = \"This computer can't connect to the remote computer. Your computer does not have enough virtual memory available. Close your other programs, and then try connecting again. If the problem continues, contact your network administrator  or technical support.\",\n            `263` = \"Extended Reason: The remote session was disconnected because the client prematurely ended the licensing protocol.\",\n            `264` = \"This computer can't connect to the remote computer. The two computers couldn't connect in the amount of time allotted. Try connecting again. If the problem continues, contact your network administrator or technical support.\",\n            `265` = \"Extended Reason: The remote session was disconnected because the local computer's client access license could not be upgraded or renewed. Please contact the server administrator.\",\n            `266` = \"The smart card service is not running. Please start the smart card service and try again.\",\n            `267` = \"Extended Reason: The remote session was disconnected because license store creation failed with access denied. Please run the remote desktop client with elevated privileges.\",\n            `516` = \"Remote Desktop can't connect to the remote computer for one of these reasons: 1) Remote access to the server is not enabled 2) The remote computer is turned off 3) The remote computer is not available on the network Make  sure the remote computer is turned on and connected to the network, and that remote access is enabled.\",\n            `522` = \"A smart card reader was not detected. Please attach a smart card reader and try again.\",\n            `772` = \"This computer can't connect to the remote computer. The connection was lost due to a network error. Try connecting again. If the problem continues, contact your network administrator or technical support.\",\n            `778` = \"There is no card inserted in the smart card reader. Please insert your smart card and try again.\",\n            `1024` = \"Extended Reason: Remote Desktop Connection could not find the destination computer. This can happen if the computer name is incorrect or the computer is not yet registered with RD Connection Broker. Try connecting again,  or contact your network administrator.\",\n            `1026` = \"Extended Reason: An error occurred while Remote Desktop Connection was loading the destination computer. Try connecting again, or contact your network administrator.\",\n            `1028` = \"Extended Reason: An error occurred while Remote Desktop Connection was redirecting to the destination computer. Try connecting again, or contact your network administrator.\",\n            `1029` = \"Extended Reason: Couldn't connect to the remote computer (there was a problem setting up the virtual machine). Try connecting again, or contact your network administrator for help.\",\n            `1030` = \"Because of a security error, the client could not connect to the remote computer. Verify that you are logged on to the network, and then try connecting again.\",\n            `1031` = \"Extended Reason: Windows can't find the IP address of the destination virtual machine. This can happen if the virtual machine doesn't have Hyper-V enlightenments and the name of the virtual machine doesn't match the computer  name in Windows. Contact your network administrator for assistance.\",\n            `1032` = \"The specified computer name contains invalid characters. Please verify the name and try again.\",\n            `1033` = \"Extended Reason: Connection processing has been canceled. Try connecting again, or contact your network administrator.\",\n            `1034` = \"An error has occurred in the smart card subsystem. Please contact your helpdesk about this error.\",\n            `1040` = \"Extended Reason: Your computer can't connect to the remote computer because the Connection Broker couldn't validate the settings specified in your RDP file. Contact your network administrator for assistance.\",\n            `1041` = \"Extended Reason: A timeout error occurred while Remote Desktop Connection was starting the virtual machine. Try connecting again, or contact your network administrator.\",\n            `1042` = \"Extended Reason: A session monitoring error occurred while Remote Desktop Connection was starting the virtual machine. Try connecting again, or contact your network administrator.\",\n            `1796` = \"This computer can't connect to the remote computer. Try connecting again. If the problem continues, contact the owner of the remote computer or your network administrator.\",\n            `1800` = \"Your computer could not connect to another console session on the remote computer because you already have a console session in progress.\",\n            `2056` = \"The remote computer disconnected the session because of an error in the licensing protocol. Please try connecting to the remote computer again or contact your server administrator.\",\n            `2308` = \"Your Remote Desktop Services session has ended. The connection to the remote computer was lost, possibly due to network connectivity problems. Try connecting to the remote computer again. If the problem continues, contact  your network administrator or technical support.\",\n            `2311` = \"The connection has been terminated because an unexpected server authentication certificate was received from the remote computer. Try connecting again. If the problem continues, contact the owner of the remote computer or  your network administrator.\",\n            `2312` = \"A licensing error occurred while the client was attempting to connect (Licensing timed out). Please try connecting to the remote computer again.\",\n            `2567` = \"The specified username does not exist. Verify the username and try logging in again. If the problem continues, contact your system administrator or technical support.\",\n            `2820` = \"This computer can't connect to the remote computer. An error occurred that prevented the connection. Try connecting again. If the problem continues, contact the owner of the remote computer or your network administrator.\",\n            `2822` = \"Because of an error in data encryption, this session will end. Please try connecting to the remote computer again.\",\n            `2823` = \"The user account is currently disabled and cannot be used. For assistance, contact your system administrator or technical support.\",\n            `2825` = \"The remote computer requires Network Level Authentication, which your computer does not support. For assistance, contact your system administrator or technical support.\",\n            `3079` = \"A user account restriction (for example, a time-of-day restriction) is preventing you from logging on. For assistance, contact your system administrator or technical support.\",\n            `3080` = \"The remote session was disconnected because of a decompression failure at the client side. Please try connecting to the remote computer again.\",\n            `3335` = \"As a security precaution, the user account has been locked because there were too many logon attempts or password change attempts. Wait a while before trying again, or contact your system administrator or technical support.\",\n            `3337` = \"The security policy of your computer requires you to type a password on the Windows Security dialog box. However, the remote computer you want to connect to cannot recognize credentials supplied using the Windows Security  dialog box. For assistance, contact your system administrator or technical support.\",\n            `3590` = \"The client can't connect because it doesn't support FIPS encryption level. Please lower the server side required security level Policy, or contact your network administrator for assistance\",\n            `3591` = \"This user account has expired. For assistance, contact your system administrator or technical support.\",\n            `3592` = \"Failed to reconnect to your remote session. Please try to connect again.\",\n            `3593` = \"The remote PC doesn't support Restricted Administration mode.\",\n            `3847` = \"This user account's password has expired. The password must change in order to logon. Please update the password or contact your system administrator or technical support.\",\n            `3848` = \"A connection will not be made because credentials may not be sent to the remote computer. For assistance, contact your system administrator.\",\n            `4103` = \"The system administrator has restricted the times during which you may log in. Try logging in later. If the problem continues, contact your system administrator or technical support.\",\n            `4104` = \"The remote session was disconnected because your computer is running low on video resources. Close your other programs, and then try connecting again. If the problem continues, contact your network administrator or technical  support.\",\n            `4339` = \"Extended Reason: The remote computer does not support RemoteApp. For assistance, contact your system administrator.\",\n            `4359` = \"The system administrator has limited the computers you can log on with. Try logging on at a different computer. If the problem continues, contact your system administrator or technical support.\",\n            `4498` = \"Extended Reason: The remote session was disconnected because of a decryption error at the server. Please try connecting to the remote computer again.\",\n            `4615` = \"You must change your password before logging on the first time. Please update your password or contact your system administrator or technical support.\",\n            `4871` = \"The system administrator has restricted the types of logon (network or interactive) that you may use. For assistance, contact your system administrator or technical support.\",\n            `5127` = \"The Kerberos sub-protocol User2User is required. For assistance, contact your system administrator or technical support.\",\n            `6919` = \"Remote Desktop cannot connect to the remote computer because the authentication certificate received from the remote computer is expired or invalid. In some cases, this error might also be caused by a large time discrepancy  between the client and server computers.\",\n            `7431` = \"Remote Desktop cannot verify the identity of the remote computer because there is a time or date difference between your computer and the remote computer. Make sure your computer's clock is set to the correct time, and then  try connecting again. If the problem occurs again, contact your network administrator or the owner of the remote computer.\",\n            `8711` = \"Your computer can't connect to the remote computer because your smart card is locked out. Contact your network administrator about unlocking your smart card or resetting your PIN.\",\n            `9479` = \"Could not auto-reconnect to your applications,please re-launch your applications\",\n            `9732` = \"Client and server versions do not match. Please upgrade your client software and then try connecting again.\",\n            `33554433` = \"Failed to reconnect to the remote program. Please restart the remote program.\",\n            `33554434` = \"The remote computer does not support RemoteApp. For assistance, contact your system administrator.\",\n            `50331649` = \"Your computer can't connect to the remote computer because the username or password is not valid. Type a valid user name and password.\",\n            `50331650` = \"Your computer can't connect to the remote computer because it can't verify the certificate revocation list. Contact your network administrator for assistance.\",\n            `50331651` = \"Your computer can't connect to the remote computer due to one of the following reasons: 1) The requested Remote Desktop Gateway server address and the server SSL certificate subject name do not match. 2) The certificate  is expired or revoked. 3) The certificate root authority does not trust the certificate. Contact your network administrator for assistance.\",\n            `50331652` = \"Your computer can't connect to the remote computer because the SSL certificate was revoked by the certification authority. Contact your network administrator for assistance.\",\n            `50331653` = \"This computer can't verify the identity of the RD Gateway. It's not safe to connect to servers that can't be identified. Contact your network administrator for assistance.\",\n            `50331654` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server address requested and the certificate subject name do not match. Contact your network administrator for assistance.\",\n            `50331655` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server's certificate has expired or has been revoked. Contact your network administrator for assistance.\",\n            `50331656` = \"Your computer can't connect to the remote computer because an error occurred on the remote computer that you want to connect to. Contact your network administrator for assistance.\",\n            `50331657` = \"An error occurred while sending data to the Remote Desktop Gateway server. The server is temporarily unavailable or a network connection is down. Try again later, or contact your network administrator for assistance.\",\n            `50331658` = \"An error occurred while receiving data from the Remote Desktop Gateway server. Either the server is temporarily unavailable or a network connection is down. Try again later, or contact your network administrator for assistance.\",\n            `50331659` = \"Your computer can't connect to the remote computer because an alternate logon method is required. Contact your network administrator for assistance.\",\n            `50331660` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server address is unreachable or incorrect. Type a valid Remote Desktop Gateway server address.\",\n            `50331661` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server is temporarily unavailable. Try reconnecting later or contact your network administrator for assistance.\",\n            `50331662` = \"Your computer can't connect to the remote computer because the Remote Desktop Services client component is missing or is an incorrect version. Verify that setup was completed successfully, and then try reconnecting later.\",\n            `50331663` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server is running low on server resources and is temporarily unavailable. Try reconnecting later or contact your network administrator  for assistance.\",\n            `50331664` = \"Your computer can't connect to the remote computer because an incorrect version of rpcrt4.dll has been detected. Verify that all components for Remote Desktop Gateway client were installed correctly.\",\n            `50331665` = \"Your computer can't connect to the remote computer because no smart card service is installed. Install a smart card service and then try again, or contact your network administrator for assistance.\",\n            `50331666` = \"Your computer can't stay connected to the remote computer because the smart card has been removed. Try again using a valid smart card, or contact your network administrator for assistance.\",\n            `50331667` = \"Your computer can't connect to the remote computer because no smart card is available. Try again using a smart card.\",\n            `50331668` = \"Your computer can't stay connected to the remote computer because the smart card has been removed. Reinsert the smart card and then try again.\",\n            `50331669` = \"Your computer can't connect to the remote computer because the user name or password is not valid. Please type a valid user name and password.\",\n            `50331671` = \"Your computer can't connect to the remote computer because a security package error occurred in the transport layer. Retry the connection or contact your network administrator for assistance.\",\n            `50331672` = \"The Remote Desktop Gateway server has ended the connection. Try reconnecting later or contact your network administrator for assistance.\",\n            `50331673` = \"The Remote Desktop Gateway server administrator has ended the connection. Try reconnecting later or contact your network administrator for assistance.\",\n            `50331674` = \"Your computer can't connect to the remote computer due to one of the following reasons: 1) Your credentials (the combination of user name, domain, and password) were incorrect. 2) Your smart card was not recognized.\",\n            `50331675` = \"Remote Desktop can't connect to the remote computer for one of these reasons: 1) Your user account is not listed in the RD Gateway's permission list 2) You might have specified the remote computer in NetBIOS format (for  example, computer1), but the RD Gateway is expecting an FQDN or IP address format (for example, computer1.fabrikam.com or 157.60.0.1). Contact your network administrator for assistance.\",\n            `50331676` = \"Remote Desktop can't connect to the remote computer for one of these reasons: 1) Your user account is not authorized to access the RD Gateway 2) Your computer is not authorized to access the RD Gateway 3) You are  using an incompatible authentication method (for example, the RD Gateway might be expecting a smart card but you provided a password) Contact your network administrator for assistance.\",\n            `50331679` = \"Your computer can't connect to the remote computer because your network administrator has restricted access to this RD Gateway server. Contact your network administrator for assistance.\",\n            `50331680` = \"Your computer can't connect to the remote computer because the web proxy server requires authentication. To allow unauthenticated traffic to an RD Gateway server through your web proxy server, contact your network administrator.\",\n            `50331681` = \"Your computer can't connect to the remote computer because your password has expired or you must change the password. Please change the password or contact your network administrator or technical support for assistance.\",\n            `50331682` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server reached its maximum allowed connections. Try reconnecting later or contact your network administrator for assistance.\",\n            `50331683` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server does not support the request. Contact your network administrator for assistance.\",\n            `50331684` = \"Your computer can't connect to the remote computer because the client does not support one of the Remote Desktop Gateway's capabilities. Contact your network administrator for assistance.\",\n            `50331685` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server and this computer are incompatible. Contact your network administrator for assistance.\",\n            `50331686` = \"Your computer can't connect to the remote computer because the credentials used are not valid. Insert a valid smart card and type a PIN or password, and then try connecting again.\",\n            `50331687` = \"Your computer can't connect to the remote computer because your computer or device did not pass the Network Access Protection requirements set by your network administrator. Contact your network administrator for assistance.\",\n            `50331688` = \"Your computer can't connect to the remote computer because no certificate was configured to use at the Remote Desktop Gateway server. Contact your network administrator for assistance.\",\n            `50331689` = \"Your computer can't connect to the remote computer because the RD Gateway server that you are trying to connect to is not allowed by your computer administrator. If you are the administrator, add this Remote Desktop Gateway  server name to the trusted Remote Desktop Gateway server list on your computer and then try connecting again.\",\n            `50331690` = \"Your computer can't connect to the remote computer because your computer or device did not meet the Network Access Protection requirements set by your network administrator, for one of the following reasons: 1) The Remote  Desktop Gateway server name and the server's public key certificate subject name do not match. 2) The certificate has expired or has been revoked. 3) The certificate root authority does not trust the certificate. 4) The certificate key extension does not support  encryption. 5) Your computer cannot verify the certificate revocation list. Contact your network administrator for assistance.\",\n            `50331691` = \"Your computer can't connect to the remote computer because a user name and password are required to authenticate to the Remote Desktop Gateway server instead of smart card credentials.\",\n            `50331692` = \"Your computer can't connect to the remote computer because smart card credentials are required to authenticate to the Remote Desktop Gateway server instead of a user name and password.\",\n            `50331693` = \"Your computer can't connect to the remote computer because no smart card reader is detected. Connect a smart card reader and then try again, or contact your network administrator for assistance.\",\n            `50331695` = \"Your computer can't connect to the remote computer because authentication to the firewall failed due to missing firewall credentials. To resolve the issue, go to the firewall website that your network administrator recommends,  and then try the connection again, or contact your network administrator for assistance.\",\n            `50331696` = \"Your computer can't connect to the remote computer because authentication to the firewall failed due to invalid firewall credentials. To resolve the issue, go to the firewall website that your network administrator recommends,  and then try the connection again, or contact your network administrator for assistance.\",\n            `50331698` = \"Your Remote Desktop Services session ended because the remote computer didn't receive any input from you.\",\n            `50331699` = \"The connection has been disconnected because the session timeout limit was reached.\",\n            `50331700` = \"Your computer can't connect to the remote computer because an invalid cookie was sent to the Remote Desktop Gateway server. Contact your network administrator for assistance.\",\n            `50331701` = \"Your computer can't connect to the remote computer because the cookie was rejected by the Remote Desktop Gateway server. Contact your network administrator for assistance.\",\n            `50331703` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway server is expecting an authentication method different from the one attempted. Contact your network administrator for assistance.\",\n            `50331704` = \"The RD Gateway connection ended because periodic user authentication failed. Try reconnecting with a correct user name and password. If the reconnection fails, contact your network administrator for further assistance.\",\n            `50331705` = \"The RD Gateway connection ended because periodic user authorization failed. Try reconnecting with a correct user name and password. If the reconnection fails, contact your network administrator for further assistance.\",\n            `50331707` = \"Your computer can't connect to the remote computer because the Remote Desktop Gateway and the remote computer are unable to exchange policies. This could happen due to one of the following reasons: 1. The remote computer  is not capable of exchanging policies with the Remote Desktop Gateway. 2. The remote computer's configuration does not permit a new connection. 3. The connection between the Remote Desktop Gateway and the remote computer ended. Contact your network  administrator for assistance.\",\n            `50331708` = \"Your computer can't connect to the remote computer, possibly because the smart card is not valid, the smart card certificate was not found in the certificate store, or the Certificate Propagation service is not running.  Contact your network administrator for assistance.\",\n            `50331709` = \"To use this program or computer, first log on to the following website\",\n            `50331710` = \"To use this program or computer, you must first log on to an authentication website. Contact your network administrator for assistance.\",\n            `50331711` = \"Your session has ended. To continue using the program or computer, first log on to the following website:.\",\n            `50331712` = \"Your session has ended. To continue using the program or computer, you must first log on to an authentication website. Contact your network administrator for assistance.\",\n            `50331713` = \"The RD Gateway connection ended because periodic user authorization failed. Your computer or device didn't pass the Network Access Protection (NAP) requirements set by your network administrator. Contact your network administrator  for assistance.\",\n            `50331714` = \"Your computer can't connect to the remote computer because the size of the cookie exceeded the supported size. Contact your network administrator for assistance.\",\n            `50331716` = \"Your computer can't connect to the remote computer using the specified forward proxy configuration. Contact your network administrator for assistance.\",\n            `50331717` = \"This computer cannot connect to the remote resource because you do not have permission to this resource. Contact your network administrator for assistance.\",\n            `50331718` = \"There are currently no resources available to connect to. Retry the connection or contact your network administrator.\",\n            `50331719` = \"An error occurred while Remote Desktop Connection was accessing this resource. Retry the connection or contact your system administrator.\",\n            `50331721` = \"Your Remote Desktop Client needs to be updated to the newest version. Contact your system administrator for help installing the update, and then try again.\",\n            `50331722` = \"Your network configuration doesn't allow the necessary HTTPS ports. Contact your network administrator for help allowing those ports or disabling the web proxy, and then try connecting again.\",\n            `50331723` = \"We're setting up more resources, and it might take a few minutes. Please try again later.\",\n            `50331724` = \"The user name you entered does not match the user name used to subscribe to your applications. If you wish to sign in as a different user please choose Sign Out from the Home menu.\",\n            `50331725` = \"Looks like there are too many users trying out the Azure RemoteApp service at the moment. Please wait a few minutes and then try again.\",\n            `50331726` = \"Maximum user limit has been reached. Please contact your administrator for further assistance.\",\n            `50331727` = \"Your trial period for Azure RemoteApp has expired. Ask your admin or tech support for help.\",\n            `50331728` = \"You no longer have access to Azure RemoteApp. Ask your admin or tech support for help.\"\n        )\n\n        -- firstly set timebounds for performance\n        LET DateAfterTime \u003c= if(condition=DateAfter,\n            then=timestamp(epoch=DateAfter),\n            else=timestamp(epoch=\"1600-01-01\")\n        )\n        LET DateBeforeTime \u003c= if(condition=DateBefore,\n            then=timestamp(epoch=DateBefore),\n            else=timestamp(epoch=\"2200-01-01\")\n        )\n        \n        -- expand provided glob into a list of paths on the file system (fs)\n        LET fspaths \u003c= SELECT FullPath\n        FROM glob(globs=expand(path=EvtxGlob))\n        \n        -- function returning list of VSS paths corresponding to path\n        LET vsspaths(path) = SELECT FullPath\n        FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)\n      \n        LET retrieveRecords(PathList) =\n          SELECT * \n          FROM\n            foreach(\n              row=PathList,\n              query={\n                SELECT\n                  System.EventRecordID as EventRecordID,\n                  timestamp(epoch=int(int=System.TimeCreated.SystemTime)) as EventTime,\n                  System.TimeCreated.SystemTime as EventTimeFloat,\n                  System.EventID.Value as EventID,\n                  System.Correlation.ActivityID as ActivityID,\n                  System.Computer as SourceHost,\n                  System.Security.UserID as SourceUserSID,\n                  if(condition=System.EventID.Value=1026, then=EventData.Value, else=null) as DisconnectReasonID,\n                  if(condition=System.EventID.Value=1026, then=get(item=DisconnectReasonLookup,member=str(str=EventData.Value),default='Unknown'), else=null) as DisconnectReason,\n                  if(condition=System.EventID.Value=1024, then=EventData.Value, else=null) as DestinationHost,\n                  if(condition=System.EventID.Value=1027, then=EventData.DomainName, else=null) as ConnectedDomain,\n                  if(condition=System.EventID.Value=1029, then=EventData.Data.Value, else=null) as DestinationUsernameHash\n                FROM parse_evtx(filename=FullPath)\n                WHERE EventID IN (1024,1026,1027,1029)\n                AND EventTime \u003c DateBeforeTime\n                AND EventTime \u003e DateAfterTime\n              }\n            )\n          GROUP BY EventRecordID\n        \n        LET evtxsearch(PathList) = \n          SELECT \n            min(item=EventTime) as Start,\n            max(item=EventTime) as End,\n            max(item=EventTimeFloat)-min(item=EventTimeFloat) as Duration,\n            SourceUserSID,\n            lookupSID(sid=SourceUserSID) as SourceUser,\n            SourceHost,\n            { SELECT _value FROM foreach(row=enumerate(items=DestinationHost)) WHERE _value != NULL LIMIT 1 } as DestinationHost,\n            { SELECT _value FROM foreach(row=enumerate(items=ConnectedDomain)) WHERE _value != NULL LIMIT 1 } as ConnectedDomain,\n            { SELECT _value FROM foreach(row=enumerate(items=DestinationUsernameHash)) WHERE _value!= NULL LIMIT 1 } as DestinationUsernameHash,\n            join(array=array(a1={ SELECT _value FROM foreach(row=enumerate(items=DisconnectReasonID)) WHERE _value!= NULL }), sep=' | ') as DisconnectReasonID,\n            join(array=array(a1={ SELECT _value FROM foreach(row=enumerate(items=DisconnectReason)) WHERE _value!= NULL }), sep=' | ') as DisconnectReason\n          FROM retrieveRecords(PathList=PathList)\n          GROUP BY ActivityID\n\n        -- include VSS in calculation and deduplicate with GROUP BY by file\n        LET include_vss =\n          SELECT * FROM foreach(\n            row=fspaths,\n            query={ SELECT * FROM evtxsearch(PathList={ SELECT FullPath FROM vsspaths(path=FullPath) }) }\n          )\n\n        -- exclude VSS in EvtxHunt`\n        LET exclude_vss = SELECT *\n          FROM evtxsearch(PathList={SELECT FullPath FROM fspaths})\n\n        -- return rows\n        SELECT * FROM if(condition=SearchVSS,\n          then={ SELECT * FROM include_vss },\n          else={ SELECT * FROM exclude_vss })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.RPCFirewall","op":"set","definition":"name: Exchange.Windows.EventLogs.RPCFirewall\ndescription: |\n   Collect RPC Firewall logs from Windows hosts\n\nreference:\n  - https://github.com/zeronetworks/rpcfirewall\n\nauthor: Wes Lambert - @therealwlambert\nparameters:\n   - name: TargetGlob\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\RPCFW.evtx'\n   - name: IdRegex\n     default: .\n     type: regex\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET EventDescriptionTable \u003c= SELECT * FROM parse_csv(accessor=\"data\", filename='''\n          ID,Description\n          1,RPC Firewall Protection Added\n          2,RPC Firewall Protection Removed\n          3,RPC Server Function Called\n          ''')\n        SELECT EventTime,\n            Computer,\n            Channel,\n            EventID,\n            EventRecordID,\n            { SELECT Description FROM EventDescriptionTable WHERE ID = EventID} AS Description,\n            EventData,\n            if(condition=EventID=3,\n              then=dict(\n                Function=EventData.Data[0],\n                ProcessID=EventData.Data[1],\n                ImagePath=EventData.Data[2],\n                Protocol=EventData.Data[3],\n                Endpoint=EventData.Data[4],\n                ClientNetworkAddress=EventData.Data[5],\n                InterfaceUUID=EventData.Data[6],\n                OpNum=EventData.Data[7],\n                SID=EventData.Data[8],\n                AuthenticationLevel=EventData.Data[9],\n                AuthenticationService=EventData.Data[10],\n                ClientPort=EventData.Data[11],\n                ServerNetworkAddress=EventData.Data[12],\n                ServerPort=EventData.Data[13]),\n              else=dict(\n                ImagePath=EventData.Data[0],\n                ProcessID=EventData.Data[1]\n              )\n            ) AS EventDataDetails,\n            Message\n        FROM Artifact.Windows.EventLogs.EvtxHunter(\n            EvtxGlob=TargetGlob,\n            VSSAnalysisAge=VSSAnalysisAge,\n            IdRegex=IdRegex)\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.RemoteAccessVPN","op":"set","definition":"name: Exchange.Windows.EventLogs.RemoteAccessVPN\nauthor: Théo Letailleur, Synacktiv\ndescription: |\n  This Artifact enables scoping EventLogs from Microsoft VPN, served by\n  Remote Access Service server role.\n  It is designed to assist in identifying VPN connections on organizations that\n  are using Microsoft VPN service. It targets both server and client side logs.\n\n  This artifact parses EvtxHunter output and returns a set of fields in results.\n  An unparsed data field is availible in the hidden _RawData field.\n\n  There are several parameter's available for search leveraging regex.\n\n    - ClientEvtxGlob glob of VPN Client EventLogs to target. Default to Application.evtx.\n    - ServerEvtxGlob glob of VPN Server EventLogs to target. Default to System.evtx.\n    - NPSLogsGlob glob of NPS Server Text Logs to target.\n    - dateAfter enables search for events after this date.\n    - dateBefore enables search for events before this date.\n    - IocRegex enables regex search over the message field.\n    - IgnoreRegex enables a regex whitelist for the Message field.\n    - VSSAnalysisAge enables searching over VSS.\n\n\nreference:\n    - https://www.synacktiv.com/publications/forensic-aspects-of-microsoft-remote-access-vpn.html\n    - https://learn.microsoft.com/en-us/windows-server/remote/remote-access/remote-access\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: ClientEvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx'\n    description: \"EVTX file path glob where RAS Client logs are stored\"\n  - name: ServerEvtxGlob\n    default: '%SystemRoot%\\System32\\Winevt\\Logs\\System.evtx'\n    description: \"EVTX file path glob where RAS Server logs are stored\"\n  - name: NPSLogsGlob\n    default: '%SystemRoot%\\System32\\LogFiles\\IN*'\n  - name: IocRegex\n    default: .\n    type: regex\n  - name: IgnoreRegex\n    description: \"Regex of string to whitelist\"\n    type: regex\n  - name: VSSAnalysisAge\n    type: int\n    default: 0\n    description: |\n       If larger than zero we analyze VSS within this many days\n       ago. (e.g 7 will analyze all VSS within the last week).  Note\n       that when using VSS analysis we have to use the ntfs accessor\n       for everything which will be much slower.\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n\nsources:\n  - name: VPN Server\n    description: VPN Server event logs\n    query: |\n      LET VPNServerIdRegex = '^(20250|20253|20255|20271|20272|20274|20275)$'\n\n       -- User\n      LET extract_user(eventid, eventdata) =\n                if(condition=eventid=20271,then=format(format='''%v''', args=[eventdata[1]]), else=\n                if(condition=(eventid=20250 OR eventid=20253 OR eventid=20255 OR eventid=20272 OR eventid=20274),then=format(format='''%v''', args=[eventdata[2]]), else=\n                if(condition=eventid=20275,then=\"N/A\")\n            ))\n\n      -- TunnelIP\n      LET extract_tunnelip(eventid, eventdata) =\n                if(condition=eventid=20274,then=format(format='''%v''', args=[eventdata[4]]), else=\n                if(condition=eventid=20275,then=format(format='''%v''', args=[eventdata[2]])\n            ))\n\n      -- ExternalIP\n      LET extract_externalip(eventid, eventdata) =\n                if(condition=eventid=20271,then=format(format='''%v''', args=[eventdata[2]]))\n\n      SELECT EventTime,Computer,Channel,Provider,EventID,extract_user(eventid=EventID,eventdata=EventData.Data) as User, extract_tunnelip(eventid=EventID, eventdata=EventData.Data) as TunnelIP, extract_externalip(eventid=EventID, eventdata=EventData.Data) as ExternalIP, EventData.Data[1:] as ExtraInfo,Message,EventData.Data as _RawData\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n                        EvtxGlob=ServerEvtxGlob,\n                        IocRegex=IocRegex,\n                        IdRegex=VPNServerIdRegex,\n                        WhitelistRegex=IgnoreRegex,\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore,\n                        VSSAnalysisAge=VSSAnalysisAge )\n\n  - name: VPN Clients\n    description: VPN Client event logs\n    query: |\n      LET VPNClientIdRegex = '^(20220|20221|20222|20223|20224|20225|20226|20227)$'\n\n      SELECT EventTime,Computer,Channel,Provider,EventID,EventData.Data[1] as User, EventData.Data[2:] as ExtraInfo,Message,EventData.Data as _RawData\n      FROM Artifact.Windows.EventLogs.EvtxHunter(\n                        EvtxGlob=ClientEvtxGlob,\n                        IocRegex=IocRegex,\n                        IdRegex=VPNClientIdRegex,\n                        WhitelistRegex=IgnoreRegex,\n                        DateAfter=DateAfter,\n                        DateBefore=DateBefore,\n                        VSSAnalysisAge=VSSAnalysisAge )\n\n  - name: NPS Server\n    description: Retrieve NPS Server logs (also available in the Microsoft VPN server)\n    query: |\n        SELECT * FROM foreach(\n           row={\n              SELECT FullPath FROM glob(globs=expand(path=NPSLogsGlob))\n           },\n           query={\n               SELECT * from parse_csv(filename=FullPath, columns=[\"ComputerName\",\"ServiceName\",\"Record-Date\",\"Record-Time\",\"Packet-Type\",\"User-Name\",\"Fully-Qualified-Distinguished-Name\",\"Called-Station-ID\",\"Calling-Station-ID\",\"Callback-Number\",\"Framed-IP-Address\",\"NAS-Identifier\",\"NAS-IP-Address\",\"NAS-Port\",\"Client-Vendor\",\"Client-IP-Address\",\"Client-Friendly-Name\",\"Event-Timestamp\",\"Port-Limit\",\"NAS-Port-Type\",\"Connect-Info\",\"Framed-Protocol\",\"Service-Type\",\"Authentication-Type\",\"Policy-Name\",\"Reason-Code\",\"Class\",\"Session-Timeout\",\"Idle-Timeout\",\"Termination-Action\",\"EAP-Friendly-Name\",\"Acct-Status-Type\",\"Acct-Delay-Time\",\"Acct-Input-Octets\",\"Acct-Output-Octets\",\"Acct-Session-Id\",\"Acct-Authentic\",\"Acct-Session-Time\",\"Acct-Input-Packets\",\"Acct-Output-Packets\",\"Acct-Terminate-Cause\",\"Acct-Multi-Ssn-ID\",\"Acct-Link-Count\",\"Acct-Interim-Interval\",\"Tunnel-Type\",\"Tunnel-Medium-Type\",\"Tunnel-Client-Endpt\",\"Tunnel-Server-Endpt\",\"Acct-Tunnel-Conn\",\"Tunnel-Pvt-Group-ID\",\"Tunnel-Assignment-ID\",\"Tunnel-Preference\",\"MS-Acct-Auth-Type\",\"MS-Acct-EAP-Type\",\"MS-RAS-Version\",\"MS-RAS-Vendor\",\"MS-CHAP-Error\",\"MS-CHAP-Domain\",\"MS-MPPE-Encryption-Types\",\"MS-MPPE-Encryption-Policy\",\"Proxy-Policy-Name\",\"Provider-Type\",\"Provider-Name\",\"Remote-Server-Address\",\"MS-RAS-Client-Name\",\"MS-RAS-Client-Version\"])\n           })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.SysmonProcessEnriched.yaml","op":"set","definition":"name: Exchange.Windows.EventLogs.SysmonProcessEnriched.yaml\nauthor: \"Zane Gittins\"\ndescription: |\n   Gather sysmon process creation events from the sysmon operational event log. Enrich with authenticode signature of image and call chain.\n   Caches authenticode signature by the hash of the image for an hour to reduce number of times it fetches the authenticode signature.\n   Prerequisites: Sysmon, and the process tracker artifact.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ClearCacheSeconds\n    default: 3600\n    description: Clear cache at this interval of seconds.\n    type: int64\n  - name: TLSHImageRegex\n    default: \"AppData|Downloads|Desktop|Public|Temp\"\n    description: If an image matches this regex, calculate the TLSH hash.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n       LET get_auth_cache(Image) = SELECT authenticode(filename=Image) AS Authenticode\n         FROM scope()\n       LET get_tlsh_cache(Image) = SELECT tlsh_hash(path=Image) AS TLSH\n         FROM scope()\n         WHERE Image =~ TLSHImageRegex\n       SELECT *\n       FROM delay(\n         query={\n           SELECT *,\n                  cache(\n                    period=ClearCacheSeconds,\n                    func=get_auth_cache(\n                      Image=EventData.Image),\n                    key=str(\n                      str=EventData.Hashes),\n                    name=\"auth\")[0].Authenticode AS Authenticode,\n                  cache(\n                    period=ClearCacheSeconds,\n                    func=get_tlsh_cache(\n                      Image=EventData.Image),\n                    key=str(\n                      str=EventData.Hashes),\n                    name=\"tlsh\")[0].TLSH AS TLSH,\n                  join(\n                    array=process_tracker_callchain(\n                      id=EventData.ProcessId).Data.Name,\n                    sep=\"-\u003e\") AS CallChain\n           FROM watch_evtx(\n             filename=\"C:\\\\Windows\\\\system32\\\\winevt\\\\Logs\\\\Microsoft-Windows-Sysmon%4Operational.evtx\")\n           WHERE System.EventID.Value = 1\n         },\n         delay=1)\n\nresources:\n  max_rows: 1000\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.WonkaVision","op":"set","definition":"name: Exchange.Windows.EventLogs.WonkaVision\ndescription: |\n   Collect WonkaVision logs from Windows hosts.\n\n   WonkaVision is a utility developed by @4ndr3w6S and @exploitph that is used to detect forged Kerberos tickets.\n\n   This artifact allows users to run the utility (if desired) and collect the relevant logs from the Windows Application log.\n\nreference:\n  - https://github.com/0xe7/WonkaVision\n\nauthor: Wes Lambert - @therealwlambert\nparameters:\n   - name: TargetGlob\n     default: '%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx'\n   - name: VSSAnalysisAge\n     type: int\n     default: 0\n     description: |\n      If larger than zero we analyze VSS within this many days\n      ago. (e.g 7 will analyze all VSS within the last week).  Note\n      that when using VSS analysis we have to use the ntfs accessor\n      for everything which will be much slower.\n   - name: IdRegex\n     default: .\n     type: regex\n   - name: RunWonkaVision\n     type: bool\n     default: F\n     description: Run WonkaVision.exe\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET RunWV \u003c= if(condition=RunWonkaVision, then={\n           SELECT * FROM chain(a={\n               SELECT * FROM Artifact.Windows.Detection.WonkaVision()\n           }, b=sleep(time=10))\n        })\n        LET EventDescriptionTable \u003c= SELECT * FROM parse_csv(accessor=\"data\", filename='''\n          ID,Description\n          9988,Possible compromised session\n          9989,Possible forged ticket\n          ''')\n        SELECT EventTime,\n            Computer,\n            Channel,\n            Provider,\n            EventID,\n            EventRecordID,\n            { SELECT Description FROM EventDescriptionTable WHERE ID = EventID} AS Description,\n            if(condition = EventID =~ \"9988\",\n                then=grok(data=EventData, grok='''Possible compromised session\\\\nTotal Score: %{DATA:total_score}\\\\nSession: %{DATA:session}\\\\nMachine Name: %{DATA:machine_name}\\\\nUsername: %{DATA:user}\\\\n\\\\nIOAs:\\\\n\\\\n\\\\tUsernameMismatch: %{DATA:username_mismatch}\\\\n\\\\n\\\\nIOA Reasons: %{DATA:ioa_reasons}.  '''),\n                else=grok(data=EventData, grok='''Possible forged ticket\\\\nTotal Score: %{DATA:total_score}\\\\nSession: %{DATA:session}\\\\nMachine Name: %{DATA:machine_name}\\\\nUser: %{DATA:user}\\\\nService Principal Name: %{DATA:service_principal_name}\\\\n\\\\nIOAs:%{DATA:ioa}\\\\n\\\\n\\\\tPasswordMustChange: %{DATA:password_must_change}\\\\n\\\\n\\\\nTool Scores:\\\\n\\\\tMimikatz Score: %{NUMBER:mimikatz_score}\\\\n\\\\tImpacket Score: %{NUMBER:impacket_score}\\\\n\\\\tRubeus Score: %{NUMBER:rubeus_score}\\\\n\\\\tCobalt Strike Score: %{NUMBER:cobalt_strike_score}\\\\n\\\\n\\\\nIOA Reasons: %{DATA:ioa_reasons}.  ''',patterns=[\"Possible forged ticket\\\\nTotal Score: %{DATA:total_score}\\\\nSession: %{DATA:session}\\\\nMachine Name: %{DATA:machine_name}\\\\nUser: %{DATA:user}\\\\nService Principal Name: %{DATA:service_principal_name}\\\\n\\\\nIOAs:%{DATA:ioa}\\\\n\\\\n\\\\nTool Scores:\\\\n\\\\tMimikatz Score: %{NUMBER:mimikatz_score}\\\\n\\\\tImpacket Score: %{NUMBER:impacket_score}\\\\n\\\\tRubeus Score: %{NUMBER:rubeus_score}\\\\n\\\\tCobalt Strike Score: %{NUMBER:cobalt_strike_score}\\\\n\\\\n\\\\nIOA Reasons: %{GREEDYDATA:ioa_reasons}\"])) AS EventDetails,\n            EventData.Data[0] AS EventDataOriginal\n        FROM Artifact.Windows.EventLogs.EvtxHunter(\n            EvtxGlob=TargetGlob,\n            VSSAnalysisAge=VSSAnalysisAge,\n            IdRegex=IdRegex)\n        WHERE Provider =~ \"Wonka\"\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.EventLogs.Zircolite","op":"set","definition":"name: Exchange.Windows.EventLogs.Zircolite\ndescription: |\n    Zircolite is a standalone tool that can be used to apply Sigma rules to EVTX files on endpoints in an effort to quickly parse large datasets and surface detections.\n                \n    You can read more about Zircolite below:\n        \n    https://github.com/wagga40/Zircolite\n        \n    NOTE: This artifact may take several minutes to run, depending on the size of EVTX files being analyzed.\n    \nauthor: Wes Lambert -- @therealwlambert\ntools:\n  - name: Zircolite\n    url: https://github.com/wagga40/Zircolite/releases/download/2.8.1/zircolite_win10.exe\nparameters:\n  - name: EVTXPath\n    default: 'C:\\Windows\\System32\\winevt\\Logs'\n  - name: Rules\n    type: upload\n    description: Ruleset to be used (defaults to Zircolite generic ruleset)\n    default: https://raw.githubusercontent.com/wagga40/Zircolite/master/rules/rules_windows_generic.json\n  - name: Mappings\n    type: upload\n    default: https://raw.githubusercontent.com/wagga40/Zircolite/master/config/fieldMappings.json\n    description: Mappings for ruleset (defaults to Zircolite field mappings)\n    \nsources:\n  - query: |\n        LET TmpResults \u003c= tempfile(remove_last=True)\n        LET Results =  SELECT * FROM read_file(filenames=TmpResults)\n        LET Zlite \u003c= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"Zircolite\", IsExecutable=FALSE)\n        LET RulesFile \u003c= tempfile(data=Rules, remove_last=True, extension=\".json\")\n        Let MappingsFile \u003c= tempfile(data=Mappings, remove_last=True, extension=\".json\")\n        LET ExecZlite \u003c= SELECT * FROM execve(argv=[\n                        Zlite.FullPath[0], \n                        \"--evtx\", EVTXPath, \n                        \"--ruleset\", RulesFile,\n                        \"--config\", MappingsFile,\n                        \"--noexternal\",\n                        \"--outfile\", TmpResults])\n        LET Data = SELECT * FROM foreach(row=Results, query={SELECT parse_json_array(data=Data) AS Content FROM scope()})\n        SELECT * FROM foreach(row=Data, query={\n            SELECT\n                get(member=\"title\") AS Detection,\n                get(member=\"description\") AS Description, \n                get(member=\"rule_level\") AS Severity,\n                get(member=\"count\") AS Count,\n                get(member=\"tags\") AS Tags,\n                get(member=\"matches\") AS Matches,\n                get(member=\"sigma\") AS _Sigma\n            FROM Content    \n        })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Events.TrackProcesses.UseExistingSysmonOnly","op":"set","definition":"name: Exchange.Windows.Events.TrackProcesses.UseExistingSysmonOnly\ndescription: |\n  **This is a modified version of Windows.Events.TrackProcesses for servers\n  that do not use the Inventory service.  It assumes that Sysmon\n  is already installed and running. The option to forward updates to the server\n  is also removed.**\n  \n  This artifact uses sysmon and pslist to keep track of running\n  processes using the Velociraptor process tracker.\n\n  The Process Tracker keeps track of exited processes, and resolves\n  process callchains from it in memory cache.\n\n  This event artifact enables the global process tracker and makes it\n  possible to run many other artifacts that depend on the process\n  tracker.\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: MaxSize\n    type: int64\n    description: Maximum size of the in memory process cache (default 10k)\n\n  - name: AddEnrichments\n    type: bool\n    description: Add process information enrichments (can use more resources)\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      LET UpdateQuery =\n            SELECT * FROM foreach(row={\n              SELECT *,\n                     get(member='EventData') AS EventData\n              FROM watch_etw(guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}')\n            }, query={\n              SELECT * FROM switch(\n              start={\n                SELECT EventData.ProcessId AS id,\n                       EventData.ParentProcessId AS parent_id,\n                       \"start\" AS update_type,\n\n                       -- We need to manually build the dict here so\n                       -- we can maintain column ordering.\n                       dict(\n                           Pid=EventData.ProcessId,\n                           Ppid=EventData.ParentProcessId,\n                           Name=split(sep_string=\"\\\\\", string=EventData.Image)[-1],\n                           StartTime=EventData.UtcTime,\n                           EndTime=NULL,\n                           Username=EventData.User,\n                           Exe=EventData.Image,\n                           CommandLine= EventData.CommandLine,\n                           CurrentDirectory= EventData.CurrentDirectory,\n                           FileVersion=EventData.FileVersion,\n                           Description= EventData.Description,\n                           Company= EventData.Company,\n                           Product= EventData.Product,\n                           ParentImage= EventData.ParentImage,\n                           ParentCommandLine= EventData.ParentCommandLine,\n                           TerminalSessionId= EventData.TerminalSessionId,\n                           IntegrityLevel= EventData.IntegrityLevel,\n                           Hashes=parse_string_with_regex(regex=[\n                             \"SHA256=(?P\u003cSHA256\u003e[^,]+)\",\n                             \"MD5=(?P\u003cMD5\u003e[^,]+)\",\n                             \"IMPHASH=(?P\u003cIMPHASH\u003e[^,]+)\"],\n                           string=EventData.Hashes)\n                       ) AS data,\n                       EventData.UtcTime AS start_time,\n                       NULL AS end_time\n                FROM scope()\n                WHERE System.ID = 1\n              },\n              end={\n                SELECT EventData.ProcessId AS id,\n                       NULL AS parent_id,\n                       \"exit\" AS update_type,\n                       dict() AS data,\n                       NULL AS start_time,\n                       EventData.UtcTime AS end_time\n                FROM scope()\n                WHERE System.ID = 5\n              })\n            })\n\n      LET SyncQuery =\n              SELECT Pid AS id,\n                 Ppid AS parent_id,\n                 CreateTime AS start_time,\n                 dict(\n                   Name=Name,\n                   Username=Username,\n                   Exe=Exe,\n                   CommandLine=CommandLine) AS data\n              FROM pslist()\n\n      LET Tracker \u003c= process_tracker(\n         enrichments=if(condition=AddEnrichments, then=[\n           '''x=\u003eif(\n                condition=NOT x.Data.VersionInformation AND x.Data.Image,\n                then=dict(VersionInformation=parse_pe(file=x.Data.Image).VersionInformation))\n           ''',\n           '''x=\u003eif(\n                condition=NOT x.Data.OriginalFilename OR x.Data.OriginalFilename = '-',\n                then=dict(OriginalFilename=x.Data.VersionInformation.OriginalFilename))\n           '''], else=[]),\n        sync_query=SyncQuery, update_query=UpdateQuery, sync_period=60000)\n\n      SELECT * FROM process_tracker_updates()\n      WHERE update_type = \"stats\"\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.AdvancedPortScanner","op":"set","definition":"name: Exchange.Windows.Forensics.AdvancedPortScanner\n\ndescription: |\n This Velociraptor artifact is tailored for forensics analysis of Angry IP Scanner usage on Windows platforms. This facilitates the identification of how Angry IP Scanner was configured and used, aiding in DFIR investigations. It examines registry keys HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner and HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner\\\\State for retrieve some informations about:\n    \n - run: Displays the version of Advanced Port Scanner\n - locale_timestamp: Indicates the time in EPOCH (UTC +0) at which the application was first launched\n - locale: Displays the language chosen for the graphical interface, may prove useful to have an idea of the native language of a threat actor (it is necessary to correlate with a modus operandi in order not to fall into the trap of a false flag)\n - LastPortsUsed: Displays the last ports used in the last scan\n - LastRangeUsed: Displays the last IP range used in the last scan\n - IpRangesMruList: Displays all the IP ranges scanned by the tool, the first digit of each prefix in this list indicates the frequency of scans for each range\n - PortsMruList: Displays all the ports that have been scanned by the tool, the first digit of each prefix in this list indicates the frequency of scans for each port\n - SearchMruList: Displays all the IP addresses or hostnames that have been searched using the GUI's \"search\" feature\n\nauthor: Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect)\n\nreference:\n \n - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-a-forensic-deep-dive-into-netscan-angry-ip-scanner-and-advanced-port-scanner/\n - https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-136a\n - https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer/\n\ntype: CLIENT\n\nparameters:\n    - name: RegistryPath_APS\n      default: HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner\n      type: hidden\n    - name: RegistryPath_State\n      default: HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner\\\\State\n      type: hidden\n    - name: RegistryData\n      type: regex\n      default: .\n\nsources:\n\n- name: AdvancedPortScanner\n  query: | \n    SELECT Key.FileInfo.FullPath AS FullPath, Key.FileInfo.ModTime AS ModificationTime, run, locale, locale_timestamp\n    FROM read_reg_key(globs=RegistryPath_APS, accessor=\"registry\") WHERE Key.FileInfo.FullPath =~ RegistryData\n    \n- name: State\n  query: |\n     SELECT Key.FileInfo.FullPath AS FullPath, Key.FileInfo.ModTime AS ModificationTime, LastPortsUsed, LastRangeUsed, IpRangesMruList, PortsMruList, SearchMruList\n      FROM read_reg_key(globs=RegistryPath_State, accessor=\"registry\") WHERE Key.FileInfo.FullPath =~ RegistryData\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.AngryIPScanner","op":"set","definition":"name: Exchange.Windows.Forensics.AngryIPScanner\n\ndescription: |\n This Velociraptor artifact is tailored for forensic analysis of Angry IP Scanner usage on Windows platforms. This facilitates the identification of how Angry IP Scanner was configured and used, aiding in DFIR investigations. It examines HKEY_USERS\\\\*\\\\SOFTWARE\\\\JavaSoft\\\\Prefs\\\\ipscan from the registry for retrieve some informations about:\n   \n   - language: Displays the language used in the GUI, may prove useful to have an idea of the language used by a threat actor (it is necessary to correlate with a modus operandi in order not to fall into the trap of a false flag)\n   - Version: Displays the version of Angry IP Scanner\n   - LastVersionCheck: Captures the last time (EPOCH format in UTC +0) when the application checked for an update\n   - PortScanConfiguration: Displays the selected ports for scanning\n\n\nauthor: Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect)\n\nreference:\n\n - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-a-forensic-deep-dive-into-netscan-angry-ip-scanner-and-advanced-port-scanner/\n - https://www.cisa.gov/news-events/cybersecurity-advisories/aa20-259a\n - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-060a\n\ntype: CLIENT\n\nprecondition: SELECT OS FROM info() where OS = 'windows'\n\nparameters:\n    - name: RegistryPath\n      type: hidden\n      default: HKEY_USERS\\\\*\\\\SOFTWARE\\\\JavaSoft\\\\Prefs\\\\ipscan\n    - name: RegistryData\n      type: regex\n      default: .\n\nsources:\n    - query: |\n        SELECT Key.FileInfo.FullPath AS FullPath, Key.FileInfo.ModTime AS ModificationTime, language, get(field=\"last/Run/Version\", default=\"Unknown\") AS Version, get(field=\"port/String\", default=\"Unknown\") AS PortScanConfiguration, get(field=\"last/Version/Check\", default=\"Unknown\") AS LastVersionCheck FROM read_reg_key(globs=RegistryPath, accessor=\"registry\") WHERE Key.FileInfo.FullPath =~ RegistryData\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.Clipboard","op":"set","definition":"name: Exchange.Windows.Forensics.Clipboard\nauthor: Hisham Adwan with the help of Velo Community\ndescription: |\n    This artifact will show the Clipboard activity.\n    \n    The artefact ActivitiesCache.db has started to log clipboard activity since Windows 10 version 1803.\n    \n    The prerequisite for clipboard data to be logged by this artefact relies on the system having two settings checked:\n        Clipboard history enabled \n        Clipboard sync across devices \n\n    StartTime (epoch time) – When the data was first copied to the clipboard \n\n    ExpirationTime (epoch time) – When the data will be deleted from the ActivitiesCache.db (roughly 12 hours) \n\n    ClipboardPayload – Base64 encoded string of the clipboard contents, but here it is decoded, and the clipboard content is shown  \n\n    Payload – This field tells you where the clipboard data was copied from! \n\n    ActivityType – Type 10 means data resides in clipboard, Type 16 shows if data was copied or pasted\n\nreference:\n  - https://www.youtube.com/watch?v=6Q3vEO69AkQ\u0026ab_channel=JohnHammond\n  - https://www.inversecos.com/2022/05/how-to-perform-clipboard-forensics.html\n  \nparameters:\n - name: FileGlob\n   default: C:\\Users\\*\\AppData\\Local\\ConnectedDevicesPlatform\\*\\ActivitiesCache.db\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT\n        CreatedTime,\n        LastModifiedTime,\n        LastModifiedOnClient,\n        StartTime,\n        EndTime,\n        Payload,\n        split(sep='''\\\\''', string=dirname(path=OSPath))[2] AS User,\n        base64decode(string=parse_json_array(data=ClipboardPayload)[0].content) AS ClipboardPayload,\n        OSPath AS Path,\n        Mtime\n        FROM foreach(row={\n             SELECT Mtime, OSPath from glob(globs=FileGlob)}, query={\n                 SELECT *, Mtime, OSPath FROM sqlite(file=OSPath, query=\"SELECT * FROM ActivityOperation\")})\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.Jumplists_JLECmd","op":"set","definition":"name: Exchange.Windows.Forensics.Jumplists_JLECmd\ndescription: |\n    * Execute Eric Zimmerman's JLECmd to parse AUTOMATICDESTINATIONS-MS and CUSTOMDESTINATIONS-MS files in C:\\ drive recursively and return output for analysis. (jlecmd.exe -d C:/ --csvf -csv tmpdir results.csv).\n    * JLECmd.zip is downloaded from the URL to 'C:\\Program Files\\Velociraptor\\Tools' folder.\n    * JLECmd.zip can be uploaded to Velociraptor Server in order to copy it to the clients in case there is no internet connection.\n    * Created using @carlos_cajigas LECmd VQL as a quide.\n    * JLECmd is a CLI tool for analyzing Custom Destinations jump list data. Learn more - https://github.com/EricZimmerman/JLECmd\n\nauthor: Orhan Emre @orhan_emre\n\ntype: CLIENT\n\ntools:\n  - name: JLECmd\n    url: https://download.mikestammer.com/net6/JLECmd.zip\n    version: 1.5.0\n\n\nparameters:\n  - name: sourceFile\n    default: .\n    type: regex\n    description: \"RegEx pattern for the name or path of the Automatic and Custom Destinations jump list files. Example 'recent' folder\"\n  - name: localPath\n    default: .\n    type: regex\n    description: \"RegEx pattern for the name or path of the target of the Automatic and Custom Destinations jump list files. Example 'powershell_ise.exe'\"\n  - name: arguments\n    default: .\n    type: regex\n    description: \"Arguments of the Automatic and Custom Destinations jump list files. Example '/c powershell Invoke-Command'\"\n  - name: dateAfter\n    description: \"search for Automatic and Custom Destinations jump list files with a SourceCreated after this date. YYYY-MM-DD\"\n  - name: dateBefore\n    description: \"search for Automatic and Custom Destinations jump list files with a SourceCreated before this date. YYYY-MM-DD\"\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n      -- get context on target binary\n      LET jlecmdpackage \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n                    ToolName=\"JLECmd\", IsExecutable=FALSE)\n\n      -- build tempfolder for output\n      LET tmpdir \u003c= tempdir()\n\n      -- decompress utility\n      LET payload = SELECT *\n        FROM unzip(filename=jlecmdpackage[0].FullPath,\n            output_directory=tmpdir) WHERE OriginalPath =~ \"JLECmd.exe\"\n\n      -- execute payload\n      LET deploy \u003c= SELECT *\n        FROM execve(argv=[payload.NewPath[0],\n        \"-d\",\n        \"c:/\",\n        \"--csv\",\n        tmpdir,\n        \"--csvf\",\n        \"results.csv\"])\n\n      LET x = scope()\n\n      SELECT * FROM foreach(row={\n          SELECT OSPath, upload(file=OSPath)\n          FROM glob(globs=\"results_*.csv\", root=tmpdir)\n      }, query={\n          SELECT x.SourceFile AS SourceFile,\n             x.SourceCreated AS SourceCreated,\n             x.SourceModified AS SourceModified,\n             x.LocalPath AS LocalPath,\n             x.Arguments AS Arguments,\n             x.TargetCreated AS TargetCreated,\n             x.TargetModified AS TargetModified,\n             x.VolumeLabel AS VolumeLabel,\n             x.DriveType AS DriveType,\n             x.AppIdDescription AS AppIdDescription,\n             x.CommonPath AS CommonPath,\n             x.VolumeSerialNumber AS VolumeSerialNumber,\n             x.MachineID AS MachineID,\n             x.MachineMACAddress AS MachineMACAddress,\n             x.TargetMFTEntryNumber AS TargetMFTEntryNumber,\n             x.TargetSequenceNumber AS TargetSequenceNumber,\n             x.TargetIDAbsolutePath AS TargetIDAbsolutePath,\n             x.TrackerCreatedOn AS TrackerCreatedOn,\n             x.ExtraBlocksPresent AS ExtraBlocksPresent,\n             x.HeaderFlags AS HeaderFlags,\n             x.FileAttributes AS FileAttributes,\n             x.FileSize AS FileSize\n         FROM parse_csv(filename=OSPath)\n         WHERE\n           (if(condition=dateAfter, then=SourceCreated \u003e dateAfter,\n             else=TRUE) AND\n           if(condition=dateBefore, then=SourceCreated \u003c dateBefore,\n             else=TRUE))\n         AND SourceFile =~ sourceFile\n         AND LocalPath =~ localPath\n         AND Arguments =~ arguments\n      })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.NotificationsDatabase","op":"set","definition":"name: Exchange.Windows.Forensics.NotificationsDatabase\nauthor: Zane Gittins\ndescription: |\n   Parses the Win10/11 notifications database, which contains events for badges, tiles, and toasts shown to each user.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT or NOTEBOOK\ntype: CLIENT\n\nparameters:\n   - name: UserRegex\n     default: .\n   - name: SearchGlob\n     default: \"C:/Users/*/AppData/Local/Microsoft/Windows/Notifications/wpndatabase.db\"\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n       LET Files \u003c= SELECT *\n         FROM glob(globs=SearchGlob)\n         WHERE OSPath =~ UserRegex\n       LET Notifications \u003c= SELECT *\n         FROM foreach(\n           row=Files,\n           query={\n             SELECT *\n             FROM sqlite(file=OSPath,\n                         accessor=\"auto\",\n                         query=\"SELECT * FROM Notification\")\n           })\n       LET Handlers \u003c= SELECT *\n         FROM foreach(\n           row=Files,\n           query={\n             SELECT *\n             FROM sqlite(file=OSPath,\n                         accessor=\"auto\",\n                         query=\"SELECT * FROM NotificationHandler\")\n           })\n       LET Results = SELECT *, {\n                              SELECT *\n                              FROM Handlers\n                              WHERE RecordId = HandlerId\n                            } AS HandlerInfo\n         FROM Notifications\n       SELECT Id,\n              HandlerInfo.PrimaryId AS Application,\n              HandlerId,\n              Type,\n              timestamp(winfiletime=ExpiryTime) AS ExpiryTime,\n              timestamp(winfiletime=ArrivalTime) AS ArrivalTime,\n              Payload AS PayloadRaw,\n              Tag,\n              Group,\n              DataVersion,\n              PayloadType,\n              HandlerInfo\n       FROM Results\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.PersistenceSniper","op":"set","definition":"name: Exchange.Windows.Forensics.PersistenceSniper\ndescription: |\n  PersistenceSniper is a Powershell module that can be used by Blue Teams, Incident\n  Responders and System Administrators to hunt persistences implanted in Windows machines.\n  It is also available on Powershell Gallery and it is digitally signed with a valid code\n  signing certificate. The tool is under active development with new releases coming out\n  regularly, so make sure to use the up-to-date version.\n  https://github.com/last-byte/PersistenceSniper\n\n  NOTE: the Rapid7 team has observed this artifact fail with some EDR/EPP tools deployed\n  with Powershell prevention capabilities. Please ensure the Velociraptor binary (and\n  child powershell) are excluded in these tools.\n  Now DiffCSVUrl is downloaded during generation of the \n  collector, not during execution.\n\nauthor: Chris Jones - CPIRT | FabFaeb | Antonio Blescia (TheThMando) | 0xdeadcell\n\nparameters:\n  - name: IncludeHighFalsePositivesChecks\n    default: true\n    type: bool\n  - name: UploadHits\n    type: bool\n    default: false\n\ntools:\n  - name: PSniper\n    url: https://github.com/last-byte/PersistenceSniper/releases/download/v1.16.1/PersistenceSniper.zip\n  - name: DiffCSVUrl\n    url: https://raw.githubusercontent.com/ablescia/Windows.PersistenceSniper/main/false_positives.csv\n\n\ntype: Client\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n       LET TmpDir \u003c= tempdir(remove_last='Y')\n\n       LET Toolzip \u003c= SELECT FullPath\n         FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"PSniper\",\n                                                 IsExecutable=FALSE)\n       \n       LET CSVPath \u003c= SELECT FullPath\n         FROM Artifact.Generic.Utils.FetchBinary(ToolName=\"DiffCSVUrl\",\n                                                 IsExecutable=FALSE)\n\n       LET _ \u003c= SELECT *\n         FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n\n       LET PSniperLocation = path_join(\n           components=[TmpDir, 'PersistenceSniper', 'PersistenceSniper.psm1'],\n           path_type='windows')\n\n       LET FalsePositivesFile \u003c= path_join(\n           components=[TmpDir, '\\\\false_positives.csv'],\n           path_type='windows')\n\n       LET CSVFile \u003c= path_join(\n           components=[TmpDir + '\\\\psniper_results.csv'],\n           path_type='windows')\n       LET csvpath = '\"' + CSVFile.Path + '\"'\n\n       LET arg_diffcsv \u003c= if(\n           condition=CSVFile != \"\",\n           then=\"-DiffCSV \" + '\"' + FalsePositivesFile.Path + '\"',\n           else=\"\")\n\n       LET arg_includehighfalsepositiveschecks \u003c= if(\n           condition=IncludeHighFalsePositivesChecks,\n           then=\"-IncludeHighFalsePositivesChecks\",\n           else=\"\")\n\n       LET cmdline \u003c= join(\n           array=['import-module', '\"' + PSniperLocation.Path + '\";', 'Find-AllPersistence', arg_includehighfalsepositiveschecks, arg_diffcsv, '| ConvertTo-CSV -NoTypeInformation | Out-File -encoding ASCII',csvpath],\n           sep=' ')\n\n       LET _ \u003c= SELECT *\n         FROM execve(\n           argv=[\"powershell\", \"-ExecutionPolicy\", \"bypass\", \"-command\", cmdline])\n\n       LET hits = SELECT *\n         FROM parse_csv(filename=CSVFile)\n\n       -- upload files if selected\n       LET upload_hits = SELECT *, upload(file=CSVFile) AS Upload\n                         FROM hits\n\n       -- return rows\n       SELECT *\n       FROM if(\n         condition=UploadHits,\n         then=upload_hits,\n         else=hits)\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.RecentFileCache","op":"set","definition":"name: Exchange.Windows.Forensics.RecentFileCache\nauthor: Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult)\ndescription: |\n   Parses the RecentFileCache as evidence of execution artifact existing on older Windows systems (\u003c= Win 7).\n   \n   Full path, Drive letter and the binary name will be parsed. The order represents the timeline of the execution flow. However, there are no timestamps included in this artifact.\n\ntype: CLIENT\nparameters:\n    - name: FileGlob\n      description: Glob to RecentFileCache.\n      default: C:/Windows/appcompat/Programs/RecentFileCache.bcf\n    - name: FullPathRegex\n      description: Regex to filter in the full path of the entry.\n      default: .\n    - name: BinaryRegex\n      description: Regex to filter for binary names.\n      default: .\n\nsources:\n    - query: |\n\n        LET entries = SELECT utf16(string=Entry) as FullPath\n                      FROM parse_records_with_regex(\n                            file=\"C:/Windows/appcompat/Programs/RecentFileCache.bcf\",\n                            regex='''[\\x00]{3}(?P\u003cEntry\u003e[a-z]\\x00:.+?\\x00)[\\x00]{2}''')\n               \n        SELECT parse_string_with_regex(string=FullPath,regex='''(?P\u003cDrive\u003e^[a-z]:)''').Drive as Drive,\n               FullPath,\n               parse_string_with_regex(string=FullPath,regex='''\\\\(?P\u003cBinary\u003e[^\\\\]+$)''').Binary as Binary\n        FROM entries\n        WHERE FullPath =~ FullPathRegex\n            AND Binary =~ BinaryRegex\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.SoftPerfectNetworkScanner","op":"set","definition":"name: Exchange.Windows.Forensics.SoftPerfectNetworkScanner\ndescription: |\n   This Velociraptor artifact is tailored for forensic analysis of SoftPerfect Network Scanner (NetScan) usage on Windows platforms. This facilitates the identification of how SoftPerfect Network Scanner was configured and used, aiding in DFIR investigations. It parse the MFT to search and retrieve the content of two files:\n   \n   - netscan.lic: display information related to the program's graphical user interface language configuration and license details, including the license name for example\n   - netscan.xml: display information regarding the tool's configuration (selected scan ports, history of scanned IP ranges...)\nauthor: Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect), Matt Green - @mgreen27 (ntfs performance update)\n\nparameters:\n  - name: AllDrives\n    type: bool\n    description: \"Select MFT search on all attached ntfs drives.\"\n    \nreference:\n - https://www.protect.airbus.com/blog/uncovering-cyber-intruders-a-forensic-deep-dive-into-netscan-angry-ip-scanner-and-advanced-port-scanner/\n - https://www.cisa.gov/news-events/cybersecurity-advisories/aa20-259a\n - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-060a\n\ntype: CLIENT\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n      SELECT \n        FileName,\n        OSPath,\n        Created0x10 as Btime,\n        LastModified0x10 as Mtime,\n        parse_xml(file=OSPath) AS ParsedXML \n      FROM Artifact.Windows.NTFS.MFT(FileRegex='^netscan\\.(lic|xml)$',AllDrives=AllDrives)\n      WHERE NOT OSPath =~ '''\\\\\u003cErr\u003e\\\\'''\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Forensics.WindowsNotepadParser","op":"set","definition":"name: Exchange.Windows.Forensics.WindowsNotepadParser\ndescription: |\n    Runs the WindowsNotepadParser (https://github.com/ogmini/Notepad-State-Library) tool to collect and parse \n    forensic artifacts related to Windows Notepad on Windows 11. \n    \n    Documentation and details about the artifacts can be found at - https://github.com/ogmini/Notepad-State-Library\n    \n    ### History\n    \n    - 1.0 - Creation\n    \nreference: \n  - https://github.com/ogmini/Notepad-State-Library\n  - https://ogmini.github.io/tags.html#Windows-Notepad\n\nauthor: ogmini https://ogmini.github.io/\n\nrequired_permissions:\n  - EXECVE\n  - FILESYSTEM_WRITE\n\ntype: CLIENT\n\ntools:\n  - name: WindowsNotepadParser\n    url: https://github.com/ogmini/Notepad-State-Library/releases/download/v1.0.4/WindowsNotepadParser-Minimal-v1.0.4-standalone.zip\n    version: 1.0.4\n    expected_hash: 4ac5a26bec26bf5f4c62354113d82dd34205c0b0ff3de71f18d2de1d09c03927\n\nparameters:\n  - name: outputDirectory\n    default: \"C:\\\\Velociraptor\\\\WindowsNotepadParser\\\\\"\n    description: Output directory for the csv files generated by the tool.\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - name: FileTabs\n    description: These tabs have been saved to disk or have been opened from a file on disk.\n    query: |\n      -- get context on target binary\n      LET windowsnotepadparserpackage \u003c= SELECT * FROM Artifact.Generic.Utils.FetchBinary(\n                    ToolName=\"WindowsNotepadParser\", IsExecutable=FALSE)\n\n      -- build tempfolder for output\n      LET tmpdir \u003c= tempdir()\n\n      -- decompress utility\n      LET payload = SELECT *\n        FROM unzip(filename=windowsnotepadparserpackage[0].FullPath,\n            output_directory=tmpdir) WHERE OriginalPath =~ \"WindowsNotepadParser-Minimal.exe\"\n\n      -- execute payload\n      LET deploy \u003c= SELECT *\n        FROM execve(argv=[payload.NewPath[0], \"-o\", outputDirectory])\n        \n      SELECT *\n      FROM parse_csv(filename=outputDirectory + \"NoFileTabs.csv\")\n\n  - name: NoFileTabs\n    description: These tabs have not been saved to disk and have not been opened from a file on disk. They only exist in the *.bin files.\n    query: |\n      SELECT *\n      FROM parse_csv(filename=outputDirectory + \"NoFileTabs.csv\")\n      \n  - name: StateTabs\n    description: These are the *.0.bin and *.1.bin files and store extra information about the related matching GUID *.bin.\n    query: |\n      SELECT *\n      FROM parse_csv(filename=outputDirectory + \"StateTabs.csv\")\n      \n  - name: WindowStateTabs\n    description: The windowstate files store information about opened windows of Windows Notepad and files are created for each opened window. \n    query: |\n      SELECT *\n      FROM parse_csv(filename=outputDirectory + \"WindowStateTabs.csv\")\n      \n  - name: UnsavedBufferChunks\n    description: Unsaved changes to a tab. Will only exist while Windows Notepad is open.\n    query: |\n      SELECT * FROM foreach(row={\n          SELECT OSPath\n          FROM glob(globs=\"*-UnsavedBufferChunks.csv\", root=outputDirectory)\n      }, query={\n          SELECT *\n         FROM parse_csv(filename=OSPath)\n         \n      })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Generic.Internet.BlockAccess","op":"set","definition":"name: Exchange.Windows.Generic.Internet.BlockAccess\ndescription: |\n      Simply adds a new inbound or outbound firewall rule that filters traffic by allowing or blocking network packets that match the specified criteria via `netsh advfirewall add rule` command. Applicable in case of blocking Internet access.\n      \n      HOW it does:\n      \n      - Use a configurable lookup table to generate additional entries.\n        - Using `nslookup` command first to get IP from specific domain\n      - An optional `MessageBox` may also be configured to alert all logged in users.\n        - The message will be truncated to 256 characters.\n      - After advfirewall rules application, connection back to the Velociraptor\n      frontend is tested and the rule removed if connection unavailable.\n      - To remove rule, select the `RemoveRule` checkbox.\n      - To update rule, simply rerun the artifact.\n      \n      WHY advfirewall?\n      \n      - The `netsh ipsec` and `netsh firewall` contexts are provided for backwards-compatibility with Windows 2000/XP/2003 (Now they are all **EOL**). \n      - `Netsh AdvFirewall` applies to: Windows 7, Windows Server 2008, Windows Server 2008 R2, Windows Vista.\n      - If you are new to advfirewall, please check reference link from MS first for more information.\n      \n      NOTE: Test carefully before running at scale in production environment\n      \n      Inspired by `Windows.Remediation.Quarantine` from Matt Green - @mgreen27 (use netsh IPsec)\n\nauthor: TueDenn - @tuedenn\n\nreference:\n  - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/dd734783(v=ws.10)\n  - https://serverfault.com/questions/851922/blocking-ip-address-with-netsh-filter\n  - https://docs.velociraptor.app/artifact_references/pages/windows.remediation.quarantine/\n\nrequired_permissions:\n  - EXECVE\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: RuleName\n    default: \"VeloBlockAccess\"\n  - name: RuleLookupTable\n    type: csv\n    default: |\n        dir,remoteip,protocol,interface,action,enable,description\n        out,13.107.237.39,any,any,block,yes,block openai.com 1\n        out,13.107.238.39,any,any,block,yes,block openai.com 2\n        out,157.240.199.35,any,any,block,yes,block facbook.com\n  - name: MessageBox\n    description: |\n        Optional message box notification to send to logged in users. 256\n        character limit.\n  - name: RemoveRule\n    type: bool\n    description: Tickbox to remove advfirewall rule.\n\nsources:\n    - query: |\n\n        // If a MessageBox configured truncate to 256 character limit\n        LET MessageBox \u003c= parse_string_with_regex(\n                  regex='^(?P\u003cMessage\u003e.{0,255}).*',\n                  string=MessageBox).Message\n\n        // extract configurable policy from lookuptable\n        LET configurable_rule \u003c= SELECT\n                  dir,remoteip,protocol,interface,action,enable,description\n              FROM RuleLookupTable\n        \n        // Emit the message if no output is emitted, otherwise emit the output.\n        LET combine_results(Stdout, Stderr, ReturnCode, Message) = if(\n              condition=Stdout =~ \"[^\\\\s]\", then=Stdout,\n              else= if(condition=Stderr =~ \"[^\\\\s]\", then=Stderr,\n              else= if(condition= ReturnCode=0,\n                    then=Message )))\n\n        // Removes empty options from the command line\n        LET clean_cmdline(CMD) = filter(list=CMD, regex='^(\\\\w+|\\\\w+=.+)$')\n\n        LET delete_cmdline = clean_cmdline(\n             CMD=('netsh','advfirewall','firewall','delete','rule', 'name=' + RuleName))\n\n        LET entry_cmdline(RuleName, dir,interface,action,remoteip,protocol,enable) = clean_cmdline(\n             CMD=('netsh','advfirewall','firewall','add','rule',\n               format(format='name=%s', args=RuleName),\n               format(format='dir=%s', args=dir),\n               format(format='interface=%s', args=interface),\n               format(format='action=%s', args=action),\n               format(format='remoteip=%s', args=remoteip),\n               format(format='protocol=%s', args=protocol),\n               format(format='enable=%s', args=enable)))\n        \n        \n        // delete old or unwanted policy\n        LET delete_rule = SELECT\n              timestamp(epoch=now()) as Time,\n              RuleName + ' firewall rule deleted.' AS Result\n          FROM execve(argv=delete_cmdline, length=10000)\n\n        // loop over configurable_rule to create advfirewall rule\n        LET create_rule = SELECT * FROM foreach(\n            row=configurable_rule,\n            query= {\n                  SELECT\n                      timestamp(epoch=now()) as Time,\n                      combine_results(Stdout=Stdout, Stderr=Stderr,\n                          ReturnCode=ReturnCode,\n                          Message='Rule added: ' +\n                                 join(array=entry_cmdline(RuleName=RuleName, \n                                                dir=dir,\n                                                interface=interface,\n                                                action=action,\n                                                remoteip=remoteip,\n                                                protocol=protocol,\n                                                enable=enable), sep=\" \")) AS Result\n                  FROM execve(argv=entry_cmdline(RuleName=RuleName, \n                                                dir=dir,\n                                                interface=interface,\n                                                action=action,\n                                                remoteip=remoteip,\n                                                protocol=protocol,\n                                                enable=enable), length=10000)\n            })\n        \n        // Parse a URL to get domain name.\n        LET get_domain(URL) = parse_string_with_regex(\n             string=URL, regex='^https?://(?P\u003cDomain\u003e[^:/]+)').Domain\n\n        // Parse a URL to get the port\n        LET get_port(URL) = if(condition= URL=~\"https://[^:]+/\", then=\"443\",\n              else=if(condition= URL=~\"http://[^:]+/\", then=\"80\",\n              else=parse_string_with_regex(string=URL,\n                  regex='^https?://[^:/]+(:(?P\u003cPort\u003e[0-9]*))?/').Port))\n\n        // extract Velociraptor config to get domain and port information\n        LET extracted_config \u003c= SELECT * FROM foreach(\n                  row=config.server_urls,\n                  query={\n                      SELECT\n                          get_domain(URL=_value) AS DstAddr,\n                          get_port(URL=_value) AS DstPort,\n                          'VelociraptorFrontEnd' AS Description,\n                          _value AS URL\n                      FROM scope()\n                  })\n        \n        // Check connection to Velociraptor frontend server\n        LET test_connection = SELECT * FROM foreach(\n                  row={\n                      SELECT * FROM extracted_config\n                      WHERE Description = 'VelociraptorFrontEnd'\n                  },\n                  query={\n                      SELECT *\n                          Url,\n                          response\n                      FROM\n                          http_client(url='https://' + DstAddr + ':' + DstPort + '/server.pem',\n                              disable_ssl_security='TRUE')\n                      WHERE Response = 200\n                      LIMIT 1\n                  })\n        \n        // final check to keep or remove policy\n        LET final_check = SELECT * FROM if(condition= test_connection,\n                  then={\n                      SELECT\n                          timestamp(epoch=now()) as Time,\n                          if(condition=MessageBox,\n                              then= RuleName + ' connection test successful. MessageBox sent.',\n                              else= RuleName + ' connection test successful.'\n                              ) AS Result\n                      FROM if(condition=MessageBox,\n                          then= {\n                              SELECT * FROM execve(argv=['msg','*',MessageBox])\n                          },\n                          else={\n                              SELECT * FROM scope()\n                          })\n                  },\n                  else={\n                      SELECT\n                          timestamp(epoch=now()) as Time,\n                          RuleName + ' failed connection test. Removing advfirewall rule.' AS Result\n                      FROM delete_rule\n                  })\n\n        // Execute content\n        SELECT * FROM if(condition=RemoveRule,\n                  then=delete_rule,\n                  else={\n                      SELECT * FROM chain(\n                          a=delete_rule,\n                          b=create_rule,\n                          c=final_check)\n                  })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Hunter.Yara.LOLDrivers","op":"set","definition":"name: Exchange.Windows.Hunter.Yara.LOLDrivers\nauthor: Kaizar Lehri and Blake McDermott\ndescription: |\n  This artifact scans system driver directories using two user-supplied YARA rules:\n  \n  One for malware detection and another for vulnerability detection. If no rules are supplied the artifact runs its encoded rule sets by default, which are these one's from Florian Roth: https://github.com/magicsword-io/LOLDrivers/tree/main/detections/yara \n  \n  Matching files will show the match type as either \"malware\" or \"vulnerability\".\n  \n  Matching files can also be optionally uploaded.\n  \n  This artifact is modeled after `Custom.Generic.Detection.Yara.Glob`.\n  \ntype: CLIENT\n\nparameters:\n  - name: ScanMalwareYaraRule\n    description: Whether to scan with the malware YARA rule.\n    type: bool\n    default: true\n\n  - name: MalwareYaraRule\n    description: YARA rule used to detect malware. If provided, we use these rules instead of the built-in set.\n    type: yara\n\n  - name: ScanVulnerabilityYaraRule\n    description: Whether to scan with the vulnerability YARA rule.\n    type: bool\n    default: true\n\n  - name: VulnerabilityYaraRule\n    description: YARA rule used to detect vulnerabilities. If provided, we use these rules instead of the built-in set.\n    type: yara\n\n  - name: UploadMatches\n    description: Whether to upload matching files.\n    type: bool\n    default: false\n\n  - name: NumberOfHits\n    description: Maximum number of matches per file.\n    type: int\n    default: 1\n\n  - name: SizeMin\n    description: Minimum file size in bytes to scan.\n    type: int64\n\n  - name: SizeMax\n    description: Maximum file size in bytes to scan.\n    type: int64\n\nexport:\n  LET Scan(YaraRules, Type, NumberOfHits) =\n    SELECT * FROM foreach(row=files, query={\n      SELECT \n        OSPath, Rule, Tags, Meta,\n        String.Name AS YaraString,\n        String.Offset AS HitOffset,\n        Type AS MatchType\n      FROM yara(rules=YaraRules, files=OSPath, number=NumberOfHits)\n    })\n\nsources:\n  - name: MalwareYaraRule\n    query: |\n      LET decoded_malware_rule \u003c= MalwareYaraRule || gunzip(string=base64decode(string=\"H4sIAKU4QWgAA+1dW2+sOBJ+P7+Ch31diaa5NCvtQ99YjTQzGs3ZnXlYrVqkm5Ow6UAEJDlnR/PfF7ATf8bQh+5gTEd+6RAwdrlcrq+q7DKfsqdjZPy0/HG3yeLnKNuts/TlkBdZfB/FyX63zsPbKCnybzk++RIe92mSR0meZjvfXi2MPz4ZRvUsuc3/Vl4axl+Mvxt/GKZp2G716/r177r+der7Nrv25vV1/etZrLxn1r821BDUv1vj37O/Lv5T14Nv1U89r76u33LmrAas2V2x1i0T6JwBnXOuxbeSpE7yLrnvQUnSCq1TaNdzodeW8WeDV9jihnGAUkXaquuxt3B/Q+sckidr6IXPWic8sbYC5R2j7PD9ZbzqGM25S+uvruuScxvuzNid+aL+NYW3zCZtjtnkBuGD54DU2VOhFrnt2U16XBz3dV9JICNukzKeIL1AM+kvkbHy+mJOSpfPoedscxQCoXUPrsVR6JB/d8TRsbFdT6AQ+2tCPWIfF7TdNzqtBeOt5QP/5esZ9hRHGd46Qf8bx7iSiDg402Huu688rzhcIt0hLuI0IcAWHo9G+sUo7qKHT39++tTEz5/ifZbm6Zdin2aPaRZWL+5+j5PDzW0Fom+PX8pb6UuePkZVmaR6WEQPO9f3bYVg6ohCbjcHF1lq13cchw0fZTUIKhV7VBpraAVqc6EXpLyHwgxTQyJ0bpq0ceKNrbgwPc0mDVSozOYd0m7rKMiCVAJDJptQ3DV56rP7FLBmUKZukUIYqF+iFkSZsXHskH4RHF1od9a8Rmo5ACWt+yMC/dA8lAr6Xtcsttg8GhXuL5pT84BJWn+9hG/ZAHYcP8U5uAXOgMHwxpnGuJR9VGIwDDWy8kwFjv/qdKl5lcbDP0pXOz7exy/xTZT8N3wobYTo+PittBoe4kP2/Pr3ofxzHxb/2y2XganQWnBxfPHabnKG4rvbHMFzZzfiTmfrq6ZseMv6LQEvhrIZuox2jvMr4C30F3tkW8163KXQLnAJgww2Gdm6LaK3Hb+j10PZFRabZdw1j5LjYfRF9AyLvD1nhCScPXc+DjaPRsG+M3qnFAEveLc5IoKjTeQZrd852CrWpqMkXFMNPH1NJRcxN5tApX+tEVMjJvqME0LM3vRoxNSI+WERE6JSGjFrxDQDR+XyrkZMjZitqGQqR8ze9GjE1Ij5wRET6r8CTSUXMT3XtTRiNq81Yqr1MXn/Tr2PeZIejZgaMT84YkLJK9BUchFzpnYLsUZMjZg6KqsRUyOmRswrQUx7ttxoxGxea8QcHzH1zh+NmBoxp4mYUM8VaKrzEPNzlORRlWSzs62VynhrZ2pZfQfzJVSlg55BIUlFq1t0LDpOY6CIA9dTQJHe9ExZm9intYlFf8+fez9Gt1UGeDn3ftnH0dfHLMrz5/gQpfvwsXjKol2wsZROSRRmn9VJjU5sHVp0MXVhzoYSW/TQRBDTeIZKQjspVKcTJCTmZncHI9j1jE6fkVOzZFP1HQUryBsdI9KLBUgRwCc1U8C9kSiZoxhqhA8ujpfDaKZcRQPCZmOkLGHp5PavE+2erzZ/Jzm/WZX7e7h/zNJKZ2a7n6PiS3wsoqxKEObLHMiLlumqzPOhwu/AdBBaFD0ozKOj9t8K7nusHiI2PW0kk8c4Ug+1Jsl9ad7+ZdEKYkchCov1WIJlTzkm8M0TVJbXoTRa7EkZQICHWaDV5Ck6hgOtOJ/d4TKHt8J9sIRFygeOFAizye0xm7Bf42TtTkHa3e9pAzXxCMkjOE2fYomGzUWI0IIFWyaTb/r5fGD9JU72d3GSF9H+LkmP6e23fXosDrtfX4r77FjB6q9hkqcPL2EWlTj7ECdhkWa72dJTetiGxaaHA0yh9aylwZgpTIk5G3K8z9mmaI9i+S1QtYZrj9Ejeiw0OXvNxJ3y6tUiVO/DYMjtHYHbd1IoFYq+K4HmyJBjCfIsyjwoRPSmHJEbQjCSOzDgFSrUeEoDcX6aUNEr/CT4Wlejl85c2n2gPxUO1f+YpqMyOkYObSKHc5AIhQNuVX8HjDsqw2atz8liUcB+qbEIvxT4PW52sPq3MIKvRoasWFsbN+SGvCGKR3EH75CDgojrQo4LAmnnjsUSjC2ujA9j0WGIN8zusUPt5/NBrmPWIY2Ukt6xqsGOTeojmeM4PANx5rrQ6rSebFmYJTVshKczkN5RHBt/bqrcHaQdm4k6NniG3kK7NGwctUujXRrt0pxxyG37rlQrWAYncEfnZesdgHoH4Kg7AGHby4fbAXhp1N8ue6mN48lCkQzjWIjut8CDxSZMWWY845g30LVx3JR2bRxfCXRp4/iiVC4r2OgjKYVrncolmkf6gC3tyGlH7krQUDty7/tm0s/FTZxyn0zK6DeTsqRofjZpbW6UHiCCo2A1SyLqnb2hcahVbhxN7CNQSFsZ+lMcspCLzIjTa8jiOvOYnt1AFMrYftwlq2N6f1S6LpPM3puNL9u0TCh3cBYAFnD8FyUf9rZgEsTUPibUS2upQ+GygL2oHpU1lOTZpJiIYn1w9pK1964v+RXhY/y1z7f8Fo6nEpTO/pYffJaRUy0Oo1BMa0NH3HOaVCG4cdNdVBuvHNAAyFo5DS+Y9QKTlW6ZcpuToOW7e/VbdFeAYMC2fGsMglV01AjlyBmb8Z9rcQ70LGCaknDsRqDNgn6N+aW/obkqN6ArjBENj0F6KJ2JC0btSNvXLppxS3A1+mswfOvjAbWMUZbnOnN5Quq07hsfaG3QO8Sy0w494iMuPuD5GRi0oPx8z86KFqPjX/nN17t93MfmsHxT6eKmw2aRjcFhYqqBwcalyWunWIZNgKFUn93pzITFpz77PW0TEJxzcNkFRpNDRw/qB+yndG7gqYiyqiyAIXgo1QLwcM6S3hG7HIKQNPSnsf8KsX/Y8dWoP0nUX4V5fKyP/qj+LV7PAan/oUeALDZLlUeAUIMTXP7TOUWtMN4Y6pZjG/vFyFnrdcjCgdwMIuCY9dSVpUa40ZKrhgMOu048gVcW7Digb3lQT5cCO82ZbZNmqhLISgusEZG+28glm40vHUEEauAJAV4y1UiUmtDj1GUIYDqgcmj95CkoV1KemAAerOMRaSErQqQvZIzo3gEC9TYbLxsMAUI/gRfCQ9pHlz3lahYV81DmISobNBnEPXpyDlZVdYDqyCGLXhpjzF1pKnTaRAILQ43FNFfmOSOle3Y3RpNbh8dwJT59Nf+HWmcIk+LQx+HfeidTLsZZZCD620bzHeVd2N8pmnScCajDATLCAbjv2WNPO4PZ6LSPiUXSaB7Y8UathnWOjlfvkduzFwk/noP97nGUiHXakT4PS9d3JQaG+7vbp/tDlNxG2f3ut6f85uYpr7D0tzgrnsIjuUH96pUdzFXiJ9SPSEh1AHCdzqGOADueCzKJ/WZzJguiPqBvYRkPeg0HAFp4FitqC6wN5Ij6kMJZJhIziQT+YytXdi4L3zu5+Ok2JZbGGkRJHtP3m9p8HAcDBx2Lafp+4m6xln1iiJ8wWzlEVavT5OYizc2tyiizzkXSuUg6F+mCfBmdi9QqgToXSUouEtoz09dUoxwqYfr6xLUto39yKdxTOHFtzC8i8LTpQyWa0q4PlbgS6NKHSgywSOj6pvpMJL1I+KEWCUkIhWwhGvMsUQnU6oVBvTCoFwY/9MLgP9Mk2peu3e6Hw0NxqFNpfkhK/y2JihIwk2MaHh7CJLytPra3nqlMoemljBxhUIXJSUui0TIDJpogRiDi9FqIQSNgU6/bb7Y+Phg70GsuWRkVk2AKSnQJheRRLoYIKyhvjqHCxNZO2mSfQAFRNjr6oFhpbGhMmJzejFMTDx1oXKbpTuLeT+o2+s3fXtHPBXv6Lv1zHoBtXsJDHn6JKqSq0Gs7myn7hpCzMpZWtThcGt3e0tgGVSRiaRqLwPA2hr+s8iaqO6KhPYTeL4uVuq+0GWdeBTPB1vBKAmavv1tjs64q2cwqChcmPTXEdyt9URYouVG+G4i0DbqK1dgVbJptLgsGL/COyf2OvN4lj/KBUYT0GvULmJb0DhqPXXp5LKRBWS2LzVd0jpSSWfLZCYxlKb1rI1jVMhwowoARuTpNnOgVdnydHResL4WlBj8WpTtSvKTZfV75JOtvz9nxcV+p9XWaFdHXr4csPDyHyT46RMnhMY2T4jFLi2hfh/2s9cZT6aCI/iPWjPC4YO1yn5iDpToboVKVG4FvgUCLHi5G/fGgMDQP6eTB6bpiPMej3kZ1TeBkkJYkJXJd008NIszWHzO+NyidA0MOqjMX6lmD7I2+ZfHi+WjNDAtnJap7tzmPXIjMcA4NgooNfAhglIH/uErDxayEFZheMfBxQHHQcR8nB39SOq213RGihQOts33Onku47rPQFrhrpdkEJxmCkbz+Q6w4j+DjLbeBp9SyYQRiDDRKB8fh0TLkDixpoeXakk1AqBJyE9BS5w6wM5t0iltduI0tpPUxj+gZmodyN8jUNNDNGi4rb8OWE6SNlvfp9aQWB/URPbLHVx/RM8kFxPdtwFnM1ipddr0BZ9IWgcPmhLgmRx1cglRT2IAjgVq9AUdvwNEbcD40fnre/JJdNe/K2RJWrBTnkPWmZ8orIwPnEr2WPF+iPkdJHlXW2M4LSlN7GlEXLuGgvoNfblK2wNGfwvo+0e/UoxGlU8ZcxbVk3q9XM1d70zPluSptFbP9i12HOD+GSR9/aGVule6x3LBZgUuSooekvZxJnEUGMZRRv+AljWYZ3/Tizpedw3iB7E3f+9ERRtnjqyOMU/CQ/g+/nir3euMAAA==\"))\n\n      LET driver_dirs = SELECT\n      lowcase(string=pathspec(parse=PathName).Dirname) AS Folder\n      FROM wmi(\n      query=\"SELECT PathName FROM Win32_SystemDriver\"\n      )\n      GROUP BY Folder\n\n      LET files = SELECT * FROM foreach(row=driver_dirs, query={\n      SELECT OSPath, Name, Size\n      FROM glob(globs=\"*\", root=Folder, nosymlink=\"True\")\n      WHERE NOT IsDir AND NOT IsLink\n          AND if(condition=SizeMin, then=Size \u003e= SizeMin, else=True)\n          AND if(condition=SizeMax, then=Size \u003c= SizeMax, else=True)\n      })\n\n      LET malware_results = SELECT * FROM if(condition=ScanMalwareYaraRule,\n        then={\n          SELECT * FROM Scan(\n            YaraRules=decoded_malware_rule,\n            Type=\"malware\",\n            NumberOfHits=NumberOfHits\n          )\n        })\n\n      LET malware_uploads = SELECT *, upload(file=OSPath, name=OSPath) AS Upload FROM malware_results\n\n      SELECT * FROM if(condition=UploadMatches,\n        then=malware_uploads,\n        else=malware_results)\n\n  - name: VulnerabilityYaraRule\n    query: |\n      LET decoded_vuln_rule \u003c= VulnerabilityYaraRule || gunzip(string=base64decode(string=\"\"))\n\n      LET driver_dirs = SELECT\n      lowcase(string=pathspec(parse=PathName).Dirname) AS Folder\n      FROM wmi(\n      query=\"SELECT PathName FROM Win32_SystemDriver\"\n       )\n      GROUP BY Folder\n\n      LET files = SELECT * FROM foreach(row=driver_dirs, query={\n      SELECT OSPath, Name, Size\n      FROM glob(globs=\"*\", root=Folder, nosymlink=\"True\")\n      WHERE NOT IsDir AND NOT IsLink\n          AND if(condition=SizeMin, then=Size \u003e= SizeMin, else=True)\n          AND if(condition=SizeMax, then=Size \u003c= SizeMax, else=True)\n      })\n\n      LET vuln_results = SELECT * FROM if(condition=ScanVulnerabilityYaraRule,\n        then={\n          SELECT * FROM Scan(\n            YaraRules=decoded_vuln_rule,\n            Type=\"vulnerability\",\n            NumberOfHits=NumberOfHits\n          )\n        })\n\n      LET vuln_uploads = SELECT *, upload(file=OSPath, name=OSPath) AS Upload FROM vuln_results\n\n      SELECT * FROM if(condition=UploadMatches,\n        then=vuln_uploads,\n        else=vuln_results)\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.LastDomainUsers","op":"set","definition":"name: Exchange.Windows.LastDomainUsers\ndescription: Enumerate Domain Users by creation date. This artifact can be used to quickly detect new domain accounts that may have been created by attackers. This artifact must be run on Domain Joined systems with the PowerShell Active Directory module installed.\n\nauthor: AnthoLaMalice - Anthony Hannouille\n\nprecondition:\n    SELECT OS From info() where OS = 'windows'\n\nsources:\n    - query: |         \n        LET cmdline = 'Get-ADUser -Filter {Enabled -eq $True} -Property Created, LastLogon | Select-Object Name, SAMAccountName, @{Name=\"Created\";Expression={$_.Created.ToString(\"yyyy-MM-dd HH:mm:ss\")}}, @{Name=\"LastLogon\";Expression={if ($_.LastLogon) { [datetime]::FromFileTime($_.LastLogon).ToString(\"yyyy-MM-dd HH:mm:ss\") } else { \"Never Logged In\" }}} | Sort-Object Created | ConvertTo-Json'\n        SELECT * FROM foreach(\n            row={\n                SELECT Stdout FROM execve(argv=[\"Powershell\", cmdline], length=104857600)\n                }, query={\n                    SELECT * FROM parse_json_array(data=Stdout) where log(message=Stdout) AND log(message=Stderr)\n                })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Mounted.Mass.Storage","op":"set","definition":"name: Exchange.Windows.Mounted.Mass.Storage\nauthor: \"Yaniv Radunsky \u0026 Kobi Arami @ 10root cyber security\"\ndescription: |\n   Find drives/usb mass storage that were mounted\n\n\nparameters:\n  - name: programKeys\n    default: \u003e-\n      HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\USBSTOR\\*\\*\n\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n    queries:\n      - |\n        SELECT Key.Name as KeyName,\n               Key.Mtime AS KeyLastWriteTimestamp,\n               FriendlyName,\n               HardwareID\n        FROM read_reg_key(globs=split(string=programKeys, sep=',[\\\\s]*'),\n                          accessor=\"registry\")\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.NTFS.MFT.HiveNightmare","op":"set","definition":"name: Exchange.Windows.NTFS.MFT.HiveNightmare\ndescription: |\n  This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to\n  find several files created as part of the POC tooling for\n  HiveNightmare (CVE-2021-36934):\n\n    - \\hive_sam_ - https://github.com/FireFart/hivenightmare\n    - \\SAM-20 - https://github.com/GossiTheDog/HiveNightmare\n    - \\SAM-haxx - https://github.com/GossiTheDog/HiveNightmare\n    - \\Sam.save - PowerShell version\n    - \\Sam.hive - https://github.com/WiredPulse/Invoke-HiveNightmare\n    - C:\\windows\\temp\\sam - https://github.com/cube0x0/CVE-2021-36934\n\n  See Florian Roth's rule here:\n  - https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/win_hivenightmare_file_exports.yml\n\nauthor: \"Zach Stanford - @svch0st\"\n\nparameters:\n  - name: MFTFilename\n    default: \"C:/$MFT\"\n  - name: Accessor\n    default: ntfs\n  - name: PathRegex\n    description: \"Regex search over FullPath.\"\n    default: \"Windows/Temp/sam$\"\n  - name: FileRegex\n    description: \"Regex search over File Name\"\n    default: \"^(hive_sam_|SAM-2021-|SAM-2022-|SAM-haxx$|Sam.save$|Sam.hive$)\"\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: SizeMax\n    type: int64\n    description: \"Entries in the MFT under this size in bytes.\"\n  - name: SizeMin\n    type: int64\n    description: \"Entries in the MFT over this size in bytes.\"\n  - name: AllDrives\n    type: bool\n    description: \"Select MFT search on all attached ntfs drives.\"\n\n\nsources:\n  - query: |\n      -- firstly set timebounds for performance\n      LET DateAfterTime \u003c= if(condition=DateAfter,\n            then=DateAfter, else=\"1600-01-01\")\n      LET DateBeforeTime \u003c= if(condition=DateBefore,\n            then=DateBefore, else=\"2200-01-01\")\n      -- find all ntfs drives\n      LET ntfs_drives = SELECT FullPath + '/$MFT'as Path\n        FROM glob(globs=\"/*\", accessor=\"ntfs\")\n      -- function returning MFT entries\n      LET mftsearch(MFTPath) = SELECT EntryNumber,InUse,ParentEntryNumber,\n            MFTPath,FullPath,FileName,FileSize,ReferenceCount,IsDir,\n            Created0x10,Created0x30,LastModified0x10,LastModified0x30,\n            LastRecordChange0x10,LastRecordChange0x30,LastAccess0x10,LastAccess0x30\n        FROM parse_mft(filename=MFTPath, accessor=Accessor)\n        WHERE FullPath =~ PathRegex  OR FileName =~ FileRegex\n            AND Created0x10 \u003c DateBeforeTime\n            AND Created0x10 \u003e DateAfterTime\n            AND Created0x30 \u003c DateBeforeTime\n            AND Created0x30 \u003e DateAfterTime\n            AND LastModified0x10 \u003c DateBeforeTime\n            AND LastModified0x10 \u003e DateAfterTime\n            AND LastModified0x30 \u003c DateBeforeTime\n            AND LastModified0x30 \u003e DateAfterTime\n            AND LastRecordChange0x10 \u003c DateBeforeTime\n            AND LastRecordChange0x10 \u003e DateAfterTime\n            AND LastRecordChange0x30 \u003c DateBeforeTime\n            AND LastRecordChange0x30 \u003e DateAfterTime\n            AND LastAccess0x10 \u003c DateBeforeTime\n            AND LastAccess0x10 \u003e DateAfterTime\n            AND LastAccess0x30 \u003c DateBeforeTime\n            AND LastAccess0x30 \u003e DateAfterTime\n            AND if(condition=SizeMax,\n                then=FileSize \u003c atoi(string=SizeMax),\n                else=TRUE)\n            AND if(condition=SizeMin,\n                then=FileSize \u003e atoi(string=SizeMin),\n                else=TRUE)\n      -- include all attached drives\n      LET all_drives = SELECT * FROM foreach(row=ntfs_drives,\n            query={\n                SELECT *\n                FROM mftsearch(MFTPath=Path)\n                WHERE log(message=\"Processing \" + Path)\n              })\n      -- return rows\n      SELECT * FROM if(condition=AllDrives,\n        then= all_drives,\n        else= {\n           SELECT * FROM mftsearch(MFTPath=MFTFilename)\n        })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Nirsoft.LastActivityView","op":"set","definition":"name: Exchange.Windows.Nirsoft.LastActivityView\ndescription: |\n  LastActivityView is a tool for Windows operating system that\n  collects information from various sources on a running system, and\n  displays a log of actions made by the user and events occurred on\n  this computer. The activity displayed by LastActivityView includes:\n  Running .exe file, Opening open/save dialog-box, Opening file/folder\n  from Explorer or other software, software installation, system\n  shutdown/start, application or system crash, network\n  connection/disconnection and more...\n\nauthor: Yaniv Radunsky @ 10rootCyberSecurity\n\ntools:\n - name: lastactivityview\n   url: https://www.nirsoft.net/utils/lastactivityview.zip\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n - name: Upload\n   query: |\n\n        LET Hostname \u003c= SELECT Hostname as Host FROM info()\n\n        -- Fetch the binary\n        LET Toolzip \u003c= SELECT FullPath\n        FROM Artifact.Generic.Utils.FetchBinary(\n           ToolName=\"lastactivityview\", IsExecutable=FALSE)\n\n        LET TmpDir \u003c= tempdir()\n\n        -- Unzip the binary\n        LET _ \u003c= SELECT * FROM unzip(filename=Toolzip.FullPath, output_directory=TmpDir)\n\n        -- Set EXE\n        LET LastActivityViewExe \u003c= TmpDir + '\\\\LastActivityView.exe'\n\n        -- Build the exec command\n        LET LastActivityViewCmd \u003c= filter(list=(LastActivityViewExe, \"/scomma\", TmpDir + \"\\\\\" + Hostname.Host[0] + \"-LastActivityView.csv\" )\n        ,  regex=\".+\")\n\n        -- Run the tool.\n        LET ExecLastActivityView \u003c= SELECT *\n        FROM execve(argv=LastActivityViewCmd,sep=\"\\n\", length=10000)\n\n        -- Upload CSV to the hunt\n        LET Upload \u003c= SELECT Name, upload(file=FullPath,name=relpath(base=TmpDir + Hostname.Host[0] + \"-LastActivityView.csv\", path=FullPath)) as FileDetails\n        FROM glob(globs=\"/**\", root=TmpDir)\n        WHERE Name =~ \"(csv)$\"\n\n        -- Parse CSV to Notebook\n        SELECT * FROM parse_csv(filename= TmpDir + \"\\\\\" + Hostname.Host[0] + \"-LastActivityView.csv\")\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Office.MRU","op":"set","definition":"name: Exchange.Windows.Office.MRU\nauthor: \"Yaron King - @Sam0rai\"\ndescription: |\n   This artifact enables hunting for recently used Office Documents.\n\n   The artifact takes a Registry path, and extracts the Most Recently Used (= MRU) files list from Microsoft Office products (i.e.: Word, Excel, Powerpoint).\n\ntype: CLIENT\n\nprecondition:\n  SELECT * FROM info() where OS = 'windows'\n\nparameters:\n  - name: OfficeMRU_RegistryGlob\n    description: Registry path glob for Microsoft Office's MRU list.\n    default: HKEY_USERS\\S-1-5-21-*\\Software\\Microsoft\\Office\\1{4,5,6}.0\\{Word,Excel,PowerPoint}\\User MRU\\*\\File MRU\\Item*\n\nsources:\n  - query: |\n        Let OfficeMRU_RegistryGlob = '''HKEY_USERS\\S-1-5-21-*\\Software\\Microsoft\\Office\\1{4,5,6}.0\\{Word,Excel,PowerPoint}\\User MRU\\*\\File MRU\\Item*'''\n\n        SELECT\n            timestamp(winfiletime=int(int=\"0x\" + parse_string_with_regex(string=Data.value, regex=['\\\\[T(?P\u003ctimestamp\u003e\\\\w\\+)']).timestamp)) as Timestamp,\n            lookupSID(sid=(split(string=FullPath, sep='\\\\\\\\'))[2]) as SAMaccountname,\n            (split(string=FullPath, sep='\\\\\\\\'))[7] as FileType, (split(string=Data.value, sep='\\\\*'))[1] as Path\n        FROM\n            glob(globs=OfficeMRU_RegistryGlob, accessor='reg')\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.Bulk.ComputerName","op":"set","definition":"name: Exchange.Windows.Registry.Bulk.ComputerName\ndescription: |\n  This looks through registry on all disks to determine the hostname for cases where multiple disks are mounted\nauthor: Angry-bender\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: TargetDrive\n    description: |\n      The path to to the drive that holds the SYSTEM registry hive. \n    default: \"C:\"\n  - name: HiveLocation\n    default: '\\\\windows\\\\system32\\\\config\\\\system'\n    description: \"Loction of target hive\"\n  - name: KeyValue\n    default: \"/*/Control/ComputerName/ComputerName/ComputerName\"\n    description: \"Loction of target key\"\n  - name: AllDrives\n    description: Search all drives?\n    type: bool\n    default: Y\n\nsources:\n - query: |\n    LET Drive \u003c= pathspec(parse=TargetDrive, path_type=\"ntfs\")\n    \n    -- get all drives\n    LET ntfs_drives = SELECT\n    OSPath AS Drive,\n    OSPath + HiveLocation AS SystemHive\n    FROM glob(globs=\"/*\", accessor=\"ntfs\")\n    WHERE log(message=\"Processing \" + SystemHive)\n    \n    LET RegParse(Drive,SysHivePth) = \n    SELECT Drive, Name, FullPath, url(parse=FullPath).Fragment AS Value, Mtime, Data.value AS Key FROM foreach(\n            row={\n                SELECT * FROM Drive\n            },\n            query={\n                SELECT *\n                FROM glob(\n                globs=url(scheme=\"file\",\n                path=SysHivePth,\n                fragment=KeyValue),\n                accessor=\"raw_reg\")\n            })\n\n    SELECT * FROM if(condition=AllDrives,\n        then={\n             SELECT * FROM foreach(\n                row={\n                    SELECT * FROM ntfs_drives\n                },\n                query={\n                    SELECT *\n                    FROM RegParse(\n                        Drive=Drive,\n                        SysHivePth=SystemHive)\n                })\n        },\n        else={\n            SELECT *\n            FROM RegParse(\n                Drive=Drive,\n                SysHivePth = Drive + HiveLocation)\n        })\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.COMAutoApprovalList","op":"set","definition":"name: Exchange.Windows.Registry.COMAutoApprovalList\nauthor: Wes Lambert - @therealwlambert\ndescription: |\n    This artifact will return COM objects that auto-elevate and bypass UAC (these could potentially be used by adversaries/malware to elevate privileges), and cross-reference the class ID with a name where able.\n\nreference: \n    - https://twitter.com/d4rksystem/status/1562507028337131520?s=20\u0026t=3k45RhMaSRvLr6kNc0fdKg\n    - https://swapcontext.blogspot.com/2020/11/uac-bypasses-from-comautoapprovallist.html \n\nparameters:\n - name: KeyGlob\n   default:  HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\UAC\\COMAutoApprovalList\\**\n - name: ClsidGlob\n   default: HKLM\\SOFTWARE\\Classes\\CLSID\\\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT {\n               SELECT Data.value \n               FROM stat(filename=ClsidGlob + OSPath.Basename + \"\\\\@\",\n                   accessor=\"registry\")\n             } AS Name,\n             Data.value AS Enabled,\n             OSPath.Basename AS GUID,\n             OSPath AS ApprovalKey,\n             Mtime\n      FROM glob(globs=KeyGlob, accessor=\"registry\") ORDER BY Mtime DESC\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.CapabilityAccessManager","op":"set","definition":"name: Exchange.Windows.Registry.CapabilityAccessManager\ndescription: |\n    The ConsentStore in CapabilityAccessManager can provide insight to\n    what resources binaries have had access to, such as the microphone\n    and webcam. This artefact returns non-Microsoft executables (ie:\n    entries listed in the `NonPackaged` path).\n\n    Additional Resources:\n\n    * https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072\n    * https://thinkdfir.com/2022/01/04/i-can-see-and-hear-you-seeing-and-hearing-me/\n\n    Tags: #windows #registry\n\nauthor: Zach Stanford - @svch0st, Phill Moore - @phillmoore\ntype: CLIENT\n\nparameters:\n  - name: KeyList\n    description: List of reg locations and descriptions\n    type: csv\n    default: |\n        Glob,Description\n        HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\*\\NonPackaged\\*, SoftwareHive\n        HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\*\\NonPackaged\\*, UserHive\nsources:\n    - queries:\n        - |\n\n            SELECT * FROM foreach(\n                row=KeyList,\n                query={\n                    SELECT Description as SourceLocation,\n                        path_split(path=FullPath)[-3] as Accessed,\n                        regex_replace(source=basename(path=FullPath), re=\"#\", replace=\"/\") as Program,\n                        {SELECT timestamp(winfiletime=atoi(string=Data.value)) FROM glob(globs=FullPath+'\\\\LastUsedTimeStart', accessor=\"reg\")} as LastUsedTimeStart,\n                        {SELECT timestamp(winfiletime=atoi(string=Data.value)) FROM glob(globs=FullPath+'\\\\LastUsedTimeStop', accessor=\"reg\")} as LastUsedTimeStop,\n                        dirname(path=FullPath) as KeyPath\n                    FROM glob(globs=Glob, accessor=\"reg\")\n                    Where NOT Program = \"Value\"\n                }\n            )\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.CortexEDRDisabled","op":"set","definition":"name: Exchange.Windows.Registry.CortexEDRDisabled\nauthor: Rhys Jenkins @Rhysistance\ndescription: |\n    This artifact will attempt to identify Cortex EDR that has been disabled via regkey\nreference:\n  - https://mrd0x.com/cortex-xdr-analysis-and-bypass/\n\nparameters:\n - name: KeyGlob\n   default: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CryptSvc\\Parameters\\ServiceDll\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      SELECT Name,Data.value as DllName,Fqdn FROM glob(globs=KeyGlob, accessor=\"reg\") WHERE NOT DllName =~ \"cryptsvc\\.dll\"\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.Domain","op":"set","definition":"name: Exchange.Windows.Registry.Domain\ndescription: Checks the configured domain name on each endpoint\nauthor: Angry-bender\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: DomainHive\n    default: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Domain\nsources:\n  - queries:\n    - |\n            SELECT\n                ModTime,\n                OSPath.Dirname as registry_key,\n                OSPath.Basename as registry_name,\n                Data.value as registry_value\n            FROM glob(globs=DomainHive, accessor=\"registry\")\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.NetshHelperDLLs","op":"set","definition":"name: Exchange.Windows.Registry.NetshHelperDLLs\ndescription: |\n    # Enumerate all NetSh Helper DLLs\n\n    Inspired by this [tweet](https://twitter.com/SecurePeacock/status/1532011932315680769?s=20\u0026t=IFbej-qpkF6IB7ycewE31w),\n    this artifact enumerates all NetSh Helper DLLs to provide\n    opportunities to find outliers and potential persistence mechanisms \n    tied to [netsh.exe](https://lolbas-project.github.io/lolbas/Binaries/Netsh/)\n\n    I have run this hunt across 6K+ systems and identified the most common entries and provided\n    the `excludeCommon` option to exclude these. In very large environments there will likely still be FPs, \n    but they should be far and few.\n\n    References:\n\n    - https://attack.mitre.org/techniques/T1546/007/\n\n    - https://lolbas-project.github.io/lolbas/Binaries/Netsh/\n\n\nparameters:\n    - name: SearchRegistryGlob\n      default: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\NetSh\\**\n      description: Use a glob to define the files that will be searched.\n    - name: excludeCommon\n      description: \"Exclude common well-known entries.\"\n      type: bool\n\nauthor: Eric Capuano - @eric_capuano\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n        LET filteredResults \u003c= \n            SELECT Name, FullPath, Data.value AS HelperDLL, ModTime as Modified\n            FROM glob(globs=SearchRegistryGlob, accessor='registry')\n            // filter out entries found consistently across 1000s of systems in the wild\n            WHERE NOT (Name = \"2\" AND HelperDLL = \"ifmon.dll\")\n            AND NOT (Name = \"4\" AND HelperDLL = \"rasmontr.dll\")\n            AND NOT (Name = \"WcnNetsh\" AND HelperDLL = \"WcnNetsh.dll\")\n            AND NOT (Name = \"authfwcfg\" AND HelperDLL = \"authfwcfg.dll\")\n            AND NOT (Name = \"dhcpclient\" AND HelperDLL = \"dhcpcmonitor.dll\")\n            AND NOT (Name = \"dot3cfg\" AND HelperDLL = \"dot3cfg.dll\")\n            AND NOT (Name = \"fwcfg\" AND HelperDLL = \"fwcfg.dll\")\n            AND NOT (Name = \"hnetmon\" AND HelperDLL = \"hnetmon.dll\")\n            AND NOT (Name = \"napmontr\" AND HelperDLL = \"napmontr.dll\")\n            AND NOT (Name = \"netiohlp\" AND HelperDLL = \"netiohlp.dll\")\n            AND NOT (Name = \"nettrace\" AND HelperDLL = \"nettrace.dll\")\n            AND NOT (Name = \"nshhttp\" AND HelperDLL = \"nshhttp.dll\")\n            AND NOT (Name = \"nshipsec\" AND HelperDLL = \"nshipsec.dll\")\n            AND NOT (Name = \"nshwfp\" AND HelperDLL = \"nshwfp.dll\")\n            AND NOT (Name = \"p2pnetsh\" AND HelperDLL = \"p2pnetsh.dll\")\n            AND NOT (Name = \"peerdistsh\" AND HelperDLL = \"peerdistsh.dll\")\n            AND NOT (Name = \"rpc\" AND HelperDLL = \"rpcnsh.dll\")\n            AND NOT (Name = \"whhelper\" AND HelperDLL = \"whhelper.dll\")\n            AND NOT (Name = \"wlancfg\" AND HelperDLL = \"wlancfg.dll\")\n            AND NOT (Name = \"wshelper\" AND HelperDLL = \"wshelper.dll\")\n            AND NOT (Name = \"wwancfg\" AND HelperDLL = \"wwancfg.dll\")\n\n        LET Results \u003c= \n            SELECT Name, FullPath, Data.value AS HelperDLL, ModTime as Modified\n            FROM glob(globs=SearchRegistryGlob, accessor='registry')\n\n        SELECT *\n        FROM if(condition=excludeCommon,\n            then={ SELECT * FROM filteredResults},\n            else={ SELECT * FROM Results})\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.PrintNightmare","op":"set","definition":"name: Exchange.Windows.Registry.PrintNightmare\ndescription: |\n   CVE-2021-34527 or Windows Print Spooler Remote Code Execution Vulnerability\n   \n   A remote code execution vulnerability exists when the Windows Print Spooler service improperly performs privileged file operations. An attacker who successfully exploited this vulnerability could run arbitrary code with SYSTEM privileges. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.\n   \n   According to Microsoft, this vulnerability can only be exploited if the “NoWarningNoElevationOnInstall” key in the registry is set to 1. \n   \n   The artifact scans the device registry to check if the beforementioned key exists or not; if it is undefined or doesn’t exist, then the system is not vulnerable to the PrintNightmare. Otherwise, the system is considered to be vulnerable to exploitation.\n   \n   This vulnerability can be exploited using the Evil Printer attack.\n   \n   Changing the registry values from 1 to 0 or Disabling the spooler when it's not in use is recommended as the next step after applying the patch.\n   The following VQL query looks for the registry values to find a registry key named “NoWarningNoElevationOnInstall”.\n\n   \n   References:\n   \n   https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527\n\n   https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Diving-Into-Spooler-Discovering-Lpe-And-Rce-Vulnerabilities-In-Windows-Printer.pdf\n\n   https://nvd.nist.gov/vuln/detail/CVE-2021-34527\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nauthor: Daksh Gajjar - @dakshgajjar\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nparameters:\n  - name: SearchRegistryGlob\n    default: \\HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\**\n    description: Having NoWarningNoElevationOnInstall set to 1 makes your system vulnerable by design\n\nsources:\n  - query: |\n        SELECT  Name as KeyName,\n                FullPath,\n                Data.type as KeyType, \n                Data.value as KeyValue,\n                Sys,\n                ModTime as Modified\n        FROM glob(globs=SearchRegistryGlob, accessor='registry')\n        \n        WHERE KeyType = \"DWORD\"\n        AND KeyName =~ \"NoWarningNoElevationOnInstall\"\n                  \ncolumn_types:\n  - name: Modified\n    type: timestamp\n","id":78560752944729352,"_ts":1757377139}
{"setter":"api","artifact":"Exchange.Windows.Registry.TaskCache.HiddenTasks","op":"set","definition":"name: Exchange.Windows.Registry.TaskCache.HiddenTasks\nauthor: Zach Stanford - @svch0st\ndescription: |\n  This artefact will highlight any scheduled tasks missing the Security Descriptor (SD) value in the task cache. Without this value, the task is hidden from common query methods. \n  \n  Once a task is identified with the SD value missing, the arefact tries to pull additional information from the registry and XML file for the task. \n  \n  An example of this technique is used by the Tarrask malware.\n  \n  Reference:\n    - https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/\n  \nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: | \n            Select * from foreach(row={ \n                            SELECT *,\n                                FROM read_reg_key(globs='HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Schedule/TaskCache/Tree/**', accessor=\"reg\")\n                            Where SD = null\n                          },\n                      query={\n                            SELECT\n                                    Date,\n                                    Key.FullPath,\n                                    Path, \n                                    {SELECT * FROM Artifact.Windows.System.TaskScheduler(TasksPath=\"C:\\\\Windows\\\\System32\\\\Tasks\"+Path)} as TaskXML, \n                                    basename(path=Key.FullPath) as TaskID\n                            FROM read_reg_key(globs='HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Schedule/TaskCache/Tasks/*', accessor=\"reg\")\n                            WHERE TaskID = Id\n                      })\n\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Services.Hijacking","op":"set","definition":"name: Exchange.Windows.Services.Hijacking\ndescription: |\n   Service Executable Hijacking is a misconfiguration flaw, where a service runs an executable which has \n   overly permissive permissions on it (for example: \"Full Control\" permissions to \"Authenticated Users\").\n   If a service runs under the security context of a user with high permissions (such as: NT Authority\\SYSTEM), \n   and an attacker with low privileges is able to modify the executable that service is running (such as \n   replacing it with their own) - the service could run that executable with high privileges.\n   \n   This hunt finds all Windows services which are vulnerable to service executable hijacking. \n   It does so in the following manner:\n   1. Enumerate all services, and extract the full path of their executables.\n   2. Run an external Powershell script to enumerate the ACLs of those executables.\n   3. Display all relevant information regarding found vulnerable services.\n   \n   #services #hijacking\n\nauthor: \"Yaron King - @Sam0rai\"\n\ntype: CLIENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET services = SELECT *\n        FROM  Artifact.Windows.System.Services()\n\n        LET Script \u003c= tempfile(data='''\n                $glob = $args[0]\n                $pathsArray = $glob -split \";\"\n                $aclArray = @()\n                foreach($filePath in $pathsArray) {\n                foreach($acl in (Get-Acl $filePath).Access) {\n                $obj = new-object PSObject -Property @{\n                FilePath          = $filePath\n                IdentityReference = $acl.IdentityReference.Value\n                FileSystemRights  = $acl.FileSystemRights\n                IsInherited       = $acl.IsInherited\n                InheritanceFlags  = $acl.InheritanceFlags\n                PropagationFlags  = $acl.PropagationFlags\n                }\n                $aclArray += $obj\n                }\n                }\n                $aclArray | ConvertTo-Json\n                        ''', extension=\".ps1\")\n        \n        Let servicesPath = Select AbsoluteExePath, count() AS Count\n            FROM services\n            GROUP BY AbsoluteExePath\n        \n        LET ExecutableACLs = SELECT * FROM foreach(\n          row={\n            SELECT Stdout FROM execve(argv=[\"Powershell\", \"-ExecutionPolicy\",\n                \"bypass\", \"-file\", Script, join(array=servicesPath.AbsoluteExePath, sep=\";\")], length=1000000)\n          }, query={\n            SELECT * FROM parse_json_array(data=Stdout)\n        })\n        \n        // Dictionary of hard-coded File System Rights index numbers to human-readable strings\n        LET FileSystemRightsDict = dict(\n            `2032127`   = \"Full Control\",\n            `1180063`   = \"Read, Write\",\n            `1245631`   = \"Change\",\n            `1180095`   = \"ReadAndExecute, Write\",\n            `268435456` = \"FullControl (Sub Only)\")\n\n        LET ExecutableACLs_Filtered = SELECT FilePath, IdentityReference, get(item=FileSystemRightsDict, member=str(str=FileSystemRights)) AS Permissions, FileSystemRights, IsInherited, InheritanceFlags, PropagationFlags\n        FROM ExecutableACLs\n        WHERE (\n            IdentityReference != \"BUILTIN\\\\Administrators\" and\n            IdentityReference != \"NT AUTHORITY\\\\SYSTEM\" and\n            IdentityReference != \"NT SERVICE\\\\TrustedInstaller\"\n        ) \n        and (\n            FileSystemRights = 2032127 or -- NTFS permission \"Full Control\" \n            FileSystemRights = 1180063 or -- NTFS permission \"Read, Write\"\n            FileSystemRights = 1245631 or -- NTFS permission \"Change\"\n            FileSystemRights = 1180095 or -- NTFS permission \"ReadAndExecute, Write\"\n            FileSystemRights = 268435456  -- NTFS permission \"FullControl (Sub Only)\"  \n        )\n        \n        SELECT * FROM foreach(\n            row={SELECT * FROM ExecutableACLs_Filtered},\n            query={\n                SELECT Name, DisplayName, State, Status, StartMode, PathName, AbsoluteExePath as Command, UserAccount, Permissions, IdentityReference as UserWithPermissions, Created\n                FROM services\n                WHERE AbsoluteExePath = FilePath\n            }\n        )\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Ssh.AuthorizedKeys","op":"set","definition":"name: Exchange.Windows.Ssh.AuthorizedKeys\nauthor: Ján Trenčanský - j91321@infosec.exchange\ndescription: |\n    Find and parse ssh authorized keys files on Windows running OpenSSH service.\n\nreference:\n  - https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement?source=recommendations\n\nparameters:\n  - name: userSshKeyFiles\n    default: '.ssh\\authorized_keys*'\n    description: Glob of authorized_keys file relative to a user's home directory.\n\n  - name: adminSshKeyFiles\n    default: 'administrators_authorized_keys*'\n    description: Glob of administrator_authorized_keys\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\ntype: CLIENT\nsources:\n    - name: User Keys\n      query: |\n        LET authorized_keys = SELECT * from foreach(\n        row={\n          SELECT Uid, Name, Directory from Artifact.Windows.Sys.Users()\n        },\n        query={\n          SELECT OSPath, Mtime, Ctime, Uid\n          FROM glob(root=Directory, globs=userSshKeyFiles)\n        })\n      \n        SELECT * from foreach(\n            row=authorized_keys,\n            query={\n                SELECT Uid, OSPath, Key, Comment, Mtime\n                FROM split_records(\n            filenames=OSPath, regex=\" +\", columns=[\"Type\", \"Key\", \"Comment\"])\n        WHERE Type =~ \"ssh\"\n        })\n        \n    - name: Admin Keys\n      query: |\n        LET administrators_authorized_keys = SELECT OSPath, Mtime, Ctime, Uid FROM glob(root='C:\\\\ProgramData\\\\ssh\\\\', globs=adminSshKeyFiles)\n        SELECT * from foreach(\n          row=administrators_authorized_keys,\n          query={\n            SELECT Uid, OSPath, Key, Comment, Mtime\n            FROM split_records(\n          filenames=OSPath, regex=\" +\", columns=[\"Type\", \"Key\", \"Comment\"])\n        WHERE Type =~ \"ssh\"\n        })","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Sys.BitLocker","op":"set","definition":"name: Exchange.Windows.Sys.BitLocker\nauthor: Zane Gittins\ndescription: |\n   This artifact gets all Bitlocker volumes using PowerShell, including the recovery password.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET PowershellScript = '''$Results = @()\n        $BitlockerVolumes = Get-BitLockerVolume\n        $BitlockerVolumes |\n        ForEach-Object {\n            $RecoveryKey = [string]($_.KeyProtector).RecoveryPassword\n            # Only add results with valid recovery keys.\n            if ($RecoveryKey.Length -gt 5) {\n                $_ | Add-Member -MemberType NoteProperty -Name \"RecoveryPassword\" -Value $RecoveryKey\n                $Results += $_\n            }\n        }\n        \n        return ConvertTo-Json -InputObject @($Results)\n        '''\n        SELECT * FROM foreach(\n          row={\n            SELECT Stdout FROM execve(argv=[\"Powershell\", \"-ExecutionPolicy\",\n                \"unrestricted\", \"-c\", PowershellScript], length=1000000)\n          }, query={\n            SELECT * FROM parse_json_array(data=Stdout)\n        })\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Sys.LoggedInUsers","op":"set","definition":"name: Exchange.Windows.Sys.LoggedInUsers\nauthor: Zane Gittins\ndescription: |\n   Get all currently logged in users via wmi.\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT\ntype: CLIENT\n\nparameters:\n   - name: UserNameRegex\n     default: .\n     type: string\n     description: Filter by username.\n   - name: DomainRegex\n     default: .\n     type: string\n     description: Filter by domain.\n   - name: LogonTypeRegex\n     default: .\n     type: string\n     description: Filter by logon type. For example, 10 for remote.\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n     // Helper functions\n     LET _X(X) = parse_string_with_regex(regex=\"(^.+)(-\\\\d+)$\", string=X)\n     LET NormalizeTime(X) = format(\n         format=\"%s%03g00\",\n         args=[_X(X=X).g1, int(int=_X(X=X).g2) / 60])\n     LET ParseTime(X) = timestamp(\n         string=NormalizeTime(X=X),\n         format=\"20060102150405.999999-0700\")\n     LET ExtractDomain(X) = parse_string_with_regex(\n         string=X,\n         regex=['Domain=\\\\\"(.*?)\\\\\"']).g1\n     LET ExtractLogonName(X) = parse_string_with_regex(\n         string=X,\n         regex=['Name=\\\\\"(.*)\\\\\"']).g1\n     LET ExtractLogonID(X) = parse_string_with_regex(\n         string=X,\n         regex=['LogonId=\\\\\"([0-9]+)\\\\\"']).g1\n     LET FormatTime(Time) = timestamp(\n         string=regex_replace(source=Time, replace=\"-0\", re=\"-\"),\n         format=TimeFormat)\n     LET CurrentlyLoggedIn \u003c= SELECT ExtractDomain(X=Antecedent) AS Domain,\n                                     ExtractLogonName(X=Antecedent) AS LogonName,\n                                     ExtractLogonID(X=Dependent) AS CurrentLogonId\n       FROM wmi(query=\"SELECT * FROM win32_loggedonuser\", namespace=\"ROOT/CIMV2\")\n       WHERE LogonName =~ UserNameRegex\n     // WMI Queries\n     LET Sessions \u003c= SELECT *\n       FROM wmi(query=\"SELECT * FROM Win32_LogonSession\", namespace=\"ROOT/CIMV2\")\n     LET Processes \u003c= SELECT \n                             ExtractLogonID(X=Antecedent) AS LogonID,\n                             count() AS ProcessCount\n       FROM wmi(query=\"SELECT * from Win32_SessionProcess\", namespace=\"ROOT/CIMV2\")\n       GROUP BY LogonID\n     LET CurrentSessions = SELECT *, {\n                                    SELECT *\n                                    FROM CurrentlyLoggedIn\n                                    WHERE LogonID = CurrentLogonId\n                                     AND Domain =~ DomainRegex\n                                          AND LogonType =~ LogonTypeRegex\n                                  } AS LoginInfo,\n                                  {\n                                    SELECT *\n                                    FROM Sessions\n                                    WHERE LogonID = LogonId\n                                  } AS SessionInfo\n       FROM Processes\n     // Final query \n     SELECT \n            ParseTime(X=SessionInfo.StartTime) AS Timestamp,\n            LoginInfo.LogonName AS LogonName,\n            LoginInfo.Domain AS Domain,\n            ProcessCount,\n            SessionInfo.LogonType AS LogonType,\n            SessionInfo.LogonId AS LogonID,\n            SessionInfo.AuthenticationPackage AS AuthenticationPackage\n     FROM CurrentSessions\n     WHERE LogonName =~ UserNameRegex\n      AND Domain =~ DomainRegex\n           AND LogonType =~ LogonTypeRegex\n     ORDER BY Timestamp DESC\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Sysinternals.PSShutdown","op":"set","definition":"name: Exchange.Windows.Sysinternals.PSShutdown\ndescription: |\n   PsShutdown is a command-line utility similar to the shutdown utility from the Windows 2000 Resource Kit, but with the ability to do much more. In addition to supporting the same options for shutting down or rebooting the local or a remote computer, PsShutdown can logoff the console user or lock the console (locking requires Windows 2000 or higher). PsShutdown requires no manual installation of client software.\nauthor: Ian Boje\n\n# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT or NOTEBOOK\ntype: CLIENT\n\nparameters:\n   - name: Action\n     default: Reboot\n     type: choices\n     choices:\n        - Abort\n        - Suspend\n        - Hybernate\n        - Poweroff\n        - Lock\n        - Logoff console user\n        - Reboot\n        - Shutdown without poweroff\n        - Turn off monitor\n   - name: time\n     default: 30\n     description: -t Can be either seconds, or 24 hour clock\n   - name: abortable\n     type: bool\n     description: -c Allows user to cancel shutdown \n     default: Y\n   - name: force\n     type: bool\n     description: -f Forces all running applications to exit during the shutdown instead of giving them a chance to gracefully save their data.\n   - name: message\n     description: -m This option lets you specify a message to display to logged-on users when a shutdown countdown commences.\n   - name: msgtime\n     description: -v Display message for the specified number of seconds before the shutdown.  If set to 0, no dialog will be displayed.\n\ntools:\n    - name: PSShutdown64\n      url: https://live.sysinternals.com/tools/psshutdown64.exe\n      serve_locally: true\n     \nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET PSShutdown64bin \u003c= select * from Artifact.Generic.Utils.FetchBinary(ToolName=\"PSShutdown64\")\n        \n        LET ActionArg \u003c= \"-r\" -- Default if nothing matches\n        LET ActionArg \u003c= if(condition=Action=\"Suspend\", then=\"-d\", else=ActionArg)\n        LET ActionArg \u003c= if(condition=Action=\"Hybernate\", then=\"-h\", else=ActionArg)\n        LET ActionArg \u003c= if(condition=Action=\"Poweroff\", then=\"-k\", else=ActionArg)\n        LET ActionArg \u003c= if(condition=Action=\"Logoff console user\", then=\"-o\", else=ActionArg)\n        LET ActionArg \u003c= if(condition=Action=\"Reboot\", then=\"-r\", else=ActionArg)\n        LET ActionArg \u003c= if(condition=Action=\"Shutdown without poweroff\", then=\"-s\", else=ActionArg)\n        \n        \n        LET args \u003c= (\n            PSShutdown64bin[0].OSPath,\n            \"-accepteula\",\n            ActionArg,\n            \"-t\",\n            time,\n            if(condition=message, then=\"-m\", else=\"\"),\n            if(condition=message, then=message, else=\"\"),\n            if(condition=abortable, then=\"-c\", else=\"\"),\n            if(condition=force, then=\"-f\", else=\"\"),\n            if(condition=msgtime, then=\"-v\", else=\"\"),\n            if(condition=msgtime, then=msgtime, else=\"\")\n        )\n        \n        -- abort -a deletes all other switches\n        LET args \u003c= if(condition=Action=\"Abort\", then=(PSShutdown64bin[0].OSPath, \"-a\"), else=args)\n        -- so does lock -l\n        LET args \u003c= if(condition=Action=\"Lock\", then=(PSShutdown64bin[0].OSPath, \"-l\"), else=args)\n        -- monitor shutdown too \n        LET args \u003c= if(condition=Action=\"Turn off monitor\", then=(PSShutdown64bin[0].OSPath, \"-x\"), else=args)\n        \n        LET args \u003c= filter(list=args, regex=\".+\")\n        \n        SELECT *, args as command FROM execve(argv=args)\n        \n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.AccessControlList","op":"set","definition":"name: Exchange.Windows.System.AccessControlList\ndescription: |\n   This artifact displays the access control lists of files.\n\n   Note: This artifact uses Powershell to gather the information.\n\ntype: CLIENT\n\nparameters:\n   - name: Glob\n     description: A search expression that will be passed to Powershell\n     default: C:\\Windows\\System32\\Config\\s*\n   - name: ACLFilter\n     description: Only show files with ACLs that match this regex.\n     default: BUILTIN\\\\Users.+Allow\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows' OR OS = 'linux' OR OS = 'darwin'\n\n    query: |\n        LET Script \u003c= tempfile(data='''\n        $glob = $args[0]\n        Get-Acl $glob | select Path, Owner, Group, AccessToString | convertto-json\n        ''', extension=\".ps1\")\n\n        LET Results = SELECT parse_json_array(data=Stdout) AS Rows\n           FROM execve(argv=[\"powershell\", \"-executionpolicy\",\n               \"bypass\", \"-file\", Script, Glob], length=100000)\n\n        SELECT * FROM foreach(row=Results.Rows,\n        query={\n            SELECT parse_string_with_regex(string=Path, regex=\"FileSystem::(.+)\").g1 AS Path,\n                   Owner, Group, split(string=AccessToString, sep=\"\\n\") AS ACLS\n            FROM _value\n        })\n        WHERE ACLS =~ ACLFilter\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.AppCompatPCA","op":"set","definition":"name: Exchange.Windows.System.AppCompatPCA\ndescription: |\n   Parse the Program Compatibility Assistant launch dictionary for executable launch times.\n\nauthor: Eric Capuano - @eric_capuano@infosec.exchange\n\nreference:\n  - https://aboutdfir.com/new-windows-11-pro-22h2-evidence-of-execution-artifact/\n\ntype: CLIENT\nparameters:\n  - name: FileGlob\n    default: C:\\Windows\\appcompat\\pca\\PcaAppLaunchDic.txt\n  - name: ExecutableRegex\n    description: \"Regex of EXE of interest.\"\n    default: .\n  - name: SearchVSS\n    description: \"Add VSS into query.\"\n    type: bool\n\nsources:\n  - query: |\n\n      -- expand provided glob into a list of paths on the file system (fs)\n      LET fspaths \u003c= SELECT FullPath FROM glob(globs=expand(path=FileGlob))\n\n      -- function returning list of VSS paths corresponding to path\n      LET vsspaths(path) = SELECT FullPath\n        FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)\n\n      LET parse_log(FullPath) = SELECT FullPath,\n          parse_string_with_regex(\n            string=Line,\n            regex=\"^(?P\u003cExePath\u003e[^|]+)\\\\|\" +\n              \"(?P\u003cLastExecuted\u003e.*)\") as Record\n        FROM parse_lines(filename=FullPath)\n        WHERE Line\n          AND Record.ExePath =~ ExecutableRegex\n\n      LET logsearch(PathList) = SELECT * FROM foreach(\n            row=PathList,\n            query={\n                SELECT *\n                FROM parse_log(FullPath=FullPath)\n            })\n\n      LET include_vss = SELECT * FROM foreach(row=fspaths,\n            query={\n                SELECT *\n                FROM logsearch(PathList={\n                        SELECT FullPath FROM vsspaths(path=FullPath)\n                    })\n                GROUP BY Record\n              })\n\n      LET exclude_vss = SELECT * FROM logsearch(PathList={SELECT FullPath FROM fspaths})\n\n      SELECT\n        Record.ExePath as ExePath,\n        Record.LastExecuted as LastExecuted,\n        FullPath\n      FROM if(condition=SearchVSS,\n            then=include_vss,\n            else=exclude_vss)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.Recall.AllWindowEvents","op":"set","definition":"name: Exchange.Windows.System.Recall.AllWindowEvents\nauthor: |\n  Zach Stanford @svch0st\ndescription: |\n   This artefact will read and correlate several tables to do with Microsoft Recall.\n   \n   The main database is held here:\n      C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ukg.db\n        \n   This artefact will join multiple tables together to enrich the Window Capture events of recall. \n\n  \nparameters:\n  - name: ukgPath\n    default: /AppData/Local/CoreAIPlatform.00/UKP/*/ukg.db\n  - name: SQLiteQuery\n    default: |\n        SELECT WindowCapture.TimeStamp, WindowCapture.Name as EventName, WindowCapture.WindowTitle as WindowTitle, App.Name as AppName, App.Path as AppProcess FROM WindowCapture LEFT JOIN (SELECT  WindowId as wid, AppId FROM WindowCapture LEFT JOIN WindowCaptureAppRelation ON Id=WindowCaptureId WHERE WindowId is not NULL and AppId is not NULL GROUP BY WindowId, AppId ORDER BY WindowId) WindowApp ON WindowCapture.WindowId=WindowApp.wid LEFT JOIN App ON App.Id=WindowApp.AppId ORDER BY TimeStamp\n  - name: userRegex\n    default: .\n    type: regex\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n        LET db_files = SELECT * from foreach(\n          row={\n             SELECT Uid, Name AS User, Directory+ukgPath as globPath,\n                    expand(path=Directory) AS HomeDirectory\n             FROM Artifact.Windows.Sys.Users()\n             WHERE Name =~ userRegex\n          },\n          query={\n             SELECT User, OSPath, Mtime, HomeDirectory\n             FROM glob(globs=globPath)\n          })\n\n        SELECT timestamp(epoch=TimeStamp) as Timestamp,\n               EventName,\n               WindowTitle,\n               AppName,\n               AppProcess\n        FROM foreach(row=db_files,\n          query={\n            SELECT *,OSPath\n            FROM sqlite(\n              file=OSPath,\n              query=SQLiteQuery)\n          })\n\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.Recall.WindowCaptureEvent","op":"set","definition":"name: Exchange.Windows.System.Recall.WindowCaptureEvent\nauthor: |\n  Zach Stanford @svch0st\ndescription: |\n   This artefact will read and correlate several tables to do with Microsoft Recall.\n   \n   The main database is held here:\n      C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ukg.db\n        \n   With the images stored:\n      C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ImageStore\\\\*\n   \n   To view the snapshot images easily from the notebook output, right click and open image in a new tab. \n\n   \n   NOTE: There are many other very useful events in the database, this arefact just looks at the Capture Creation events. \n   \nparameters:\n  - name: ukgPath\n    default: /AppData/Local/CoreAIPlatform.00/UKP/*/ukg.db\n  - name: SQLiteQuery\n    default: |\n        SELECT WindowCapture.TimeStamp as TimeStamp, WindowCapture.Name as EventName, WindowCapture.WindowTitle as WindowTitle, WindowCapture.WindowId as WindowId, App.Path as Process, WindowCaptureTextIndex_content.c2 as OcrText, ImageToken FROM WindowCaptureTextIndex_content INNER JOIN WindowCapture ON WindowCapture.Id == WindowCaptureTextIndex_content.c0 INNER JOIN WindowCaptureAppRelation ON WindowCaptureAppRelation.WindowCaptureId == WindowCaptureTextIndex_content.c0 INNER JOIN App ON App.Id == WindowCaptureAppRelation.AppId WHERE WindowCapture.Name == \"WindowCaptureEvent\" AND OcrText IS NOT NULL\n\n  - name: userRegex\n    default: .\n    type: regex\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n        LET db_files = SELECT * from foreach(\n          row={\n             SELECT Uid, Name AS User, Directory+ukgPath as globPath,\n                    expand(path=Directory) AS HomeDirectory\n             FROM Artifact.Windows.Sys.Users()\n             WHERE Name =~ userRegex\n          },\n          query={\n             SELECT User, OSPath, Mtime, HomeDirectory\n             FROM glob(globs=globPath)\n          })\n\n        SELECT timestamp(epoch=TimeStamp) as Timestamp,\n               EventName,\n               WindowTitle,\n               WindowId,\n               Process,\n               OcrText,\n               upload(file=regex_replace(source=OSPath,re=\"ukg\\.db\",replace=\"ImageStore\\\\\"+ImageToken)) AS Capture\n        FROM foreach(row=db_files,\n          query={\n            SELECT *,OSPath\n            FROM sqlite(\n              file=OSPath,\n              query=SQLiteQuery)\n          })\n\ncolumn_types:\n- name: Capture\n  type: preview_upload\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.Services.SliverPsexec","op":"set","definition":"name: Exchange.Windows.System.Services.SliverPsexec\ndescription: |\n  This pack detects various artefacts left behind by default configurations of the C2 framework Sliver PsExec module\n  \n  Reference: https://www.microsoft.com/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/\nauthor: Zach Stanford - @svch0st\nprecondition:\n  SELECT OS from info() where OS = \"windows\"\n\nsources:\n  - name: Sliver PsExec - Services Registry Key\n    query: |\n        SELECT * FROM Artifact.Windows.System.Services() \n        WHERE Name =~ \"^Sliver\" or \n              DisplayName =~ \"^Sliver\" or \n              Description =~ \"Sliver implant\" or \n              PathName =~ \":\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\[a-zA-Z0-9]{10}\\\\.exe\"\n\n  - name: Sliver PsExec - Service Installed Event Log\n    query: |\n        SELECT * FROM Artifact.Windows.EventLogs.EvtxHunter(PathRegex=\"System.evtx\",IdRegex=\"^7045$\")\n        WHERE EventData.ServiceName =~ \"^Sliver$\" or \n             EventData.ImagePath =~ \":\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\[a-zA-Z0-9]{10}\\\\.exe\"\n\n\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.WMIProviders","op":"set","definition":"name: Exchange.Windows.System.WMIProviders\ndescription: |\n   List the WMI providers in the system.\n   \n   It is possible to laterally move by installing a fake provider in the system, and then calling\n   it remotely. This artifact enumerates all WMI providers and recovers the binary that runs when \n   loaded.\n   \n   Test using https://github.com/Cybereason/Invoke-WMILM (Will run as SYSTEM)\n   ```\n   Invoke-WMILM -Target localhost -Type Provider -Name notepad -Username test -Password test -Command notepad.exe\n   ```\n   \nreference:\n  - https://www.cybereason.com/blog/wmi-lateral-movement-win32\n\ntype: CLIENT\n\nparameters:\n   - name: BinaryIncludeRegex\n     default: .\n     type: regex \n   - name: BinaryExcludeRegex\n     type: regex\n   - name: ServerTypeRegex\n     type: regex \n     description: Only show these WMI provider types (e.g. LocalServer)\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n        LET Hits = SELECT CLSID, Name, {\n            SELECT Data.value AS Binary, basename(path=dirname(path=FullPath)) AS ServerType\n            FROM glob(globs=\"/*Server*/@\", root='''HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\''' + CLSID, accessor=\"reg\")\n            WHERE CLSID\n            limit 1\n        } AS Details\n        FROM wmi(query=\"Select * from __Win32Provider \")\n        \n        SELECT CLSID, Name, Details.ServerType AS ServerType, Details.Binary AS BinaryPath\n        FROM Hits\n        WHERE ServerType =~ ServerTypeRegex\n          AND BinaryPath =~ BinaryIncludeRegex\n          AND if(condition=BinaryExcludeRegex,\n            then=NOT BinaryPath =~ BinaryExcludeRegex,\n            else=TRUE)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.System.WindowsErrorReporting","op":"set","definition":"name: Exchange.Windows.System.WindowsErrorReporting\nauthor: Zach Stanford - @svch0st\ndescription: |\n   Parses several Windows Error Reporting (WER) files that contain information about crashed programs. \n   \n   This can include:\n   \n    * evidence historical malware execution that have crashed,\n    * unstable executables after being injected into, and \n    * loaded DLLs by other executables (eg rundll32.exe and regsvr32.exe)\n\n   After Windows 10, Report.wer files in the ProgramData directory also contain a SHA1 hash (similar to Amcache) which can assist investigators tracking down processes that have since been deleted.\n\nreference:   \n    - http://0xdabbad00.com/wp-content/uploads/2014/01/notes_on_wer.pdf\n    - https://medium.com/dfir-dudes/amcache-is-not-alone-using-wer-files-to-hunt-evil-86bdfdb216d7\n\ntype: CLIENT\n\nsources:\n  - name: AppCrashReport\n    query: |\n\n        LET files = SELECT OSPath FROM glob(globs=[\"C:/Users/*/AppData/Local/Microsoft/Windows/WER/*/*/Report.wer\",\n                                                     \"C:/ProgramData/Microsoft/Windows/WER/*/*/Report.wer\"])\n        \n        LET parsed_reports = SELECT * FROM foreach(row=files,\n                                                   query={\n                                                      SELECT OSPath,\n                                                             to_dict(item={\n                                                                        SELECT _key,_value \n                                                                        FROM parse_records_with_regex(file=utf16(string=read_file(filename=OSPath)),\n                                                                                                    accessor=\"data\",\n                                                                                                    regex=\"(?P\u003c_key\u003e.*)=(?P\u003c_value\u003e.*)\\r\\n\")\n                                                                        }\n                                                                    ) as Report\n                                                      FROM scope()\n                                                  })\n      \n        SELECT timestamp(winfiletime=int(int=Report.EventTime)) as timestamp,\n                Report.EventType,\n                Report.FriendlyEventName,\n                Report.AppName,\n                Report.AppPath,\n                Report.ApplicationIdentity,\n                if(condition=Report.TargetAppId=~'^W', -- Appears non-microsoft apps that have a hash only start with \"W\".\n                    then=strip(string=split(sep='!',string=Report.TargetAppId)[1],prefix='0000'), -- Prefix of 0000 similar th hash format in Amcache\n                    else=\"No hash information\") as SHA1,\n                Report.OriginalFilename,        \n                Report,\n                OSPath as ReportFileName\n        FROM parsed_reports\n        \n  - name: WERInternalMetadata\n    query: |\n    \n        LET files = SELECT OSPath FROM glob(globs=[\"C:/Users/*/AppData/Local/Microsoft/Windows/WER/*/*/*InternalMetadata.xml\",\n                                                     \"C:/ProgramData/Microsoft/Windows/WER/*/*/*InternalMetadata.xml\"])\n        \n        \n        LET parsed_reports = SELECT * FROM foreach(row=files,\n                                                   query={\n                                                      SELECT OSPath, parse_xml(\n                                                               accessor='data',\n                                                               file=regex_replace(\n                                                                    source=utf16(string=Data),\n                                                                    re='\u003c[?].+?\u003e',\n                                                                    replace='')) AS XML\n                                                      FROM read_file(filenames=OSPath)\n                                                  })\n      \n        SELECT  XML.WERReportMetadata.ReportInformation.CreationTime as timestamp,\n                XML.WERReportMetadata.ProcessInformation.ImageName as ImageName,\n                XML.WERReportMetadata.ProcessInformation.Pid as Pid,\n                XML.WERReportMetadata.ProcessInformation.ParentProcess.ProcessInformation.ImageName as ParentImageName,\n                XML.WERReportMetadata.ProcessInformation.ParentProcess.ProcessInformation.Pid As ParentPid, \n                XML.WERReportMetadata.ProblemSignatures.EventType as EventType,\n                XML.WERReportMetadata.ProblemSignatures.Parameter0 as Parameter0,\n                XML,\n                OSPath\n        FROM parsed_reports\n\n  - name: WERProcessTree\n    query: |\n    \n        LET files = SELECT OSPath FROM glob(globs=[\"C:/Users/*/AppData/Local/Microsoft/Windows/WER/*/*/*.csv\",\n                                                     \"C:/ProgramData/Microsoft/Windows/WER/*/*/*.csv\"])\n        \n        LET parsed_reports = SELECT * FROM foreach(row=files,\n                                                   query={\n                                                      SELECT *\n                                                      FROM parse_csv(filename=utf16(string=read_file(filename=OSPath)),accessor=\"data\")\n                                                  })\n      \n        SELECT *\n        FROM parsed_reports\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Timeline.Prefetch.Improved","op":"set","definition":"name: Exchange.Windows.Timeline.Prefetch.Improved\nauthor: Matt Green - @mgreen27\ndescription: |\n  NOTE: This is a fixed version of Windows.Timeline.Prefetch which is\n  available in the release binary after 0.7.0-3.\n\n  Windows keeps a cache of prefetch files. When an executable is run,\n  the system records properties about the executable to make it faster\n  to run next time. By parsing this information we are able to\n  determine when binaries are run in the past. On Windows10 we can see\n  the last 8 execution times and creation time (9 potential executions).\n\n  This artifact is a timelined output version of the standard Prefetch\n  artifact. There are several parameter's availible.\n    - dateAfter enables search for prefetch evidence after this date.\n    - dateBefore enables search for prefetch evidence before this date.\n    - binaryRegex enables to filter on binary name, e.g evil.exe.\n    - hashRegex enables to filter on prefetch hash.\n\nreference:\n  - https://www.forensicswiki.org/wiki/Prefetch\n\nparameters:\n    - name: prefetchGlobs\n      default: C:\\Windows\\Prefetch\\*.pf\n    - name: dateAfter\n      description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n      type: timestamp\n    - name: dateBefore\n      description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n      type: timestamp\n    - name: binaryRegex\n      description: \"Regex of executable name.\"\n      type: regex\n    - name: hashRegex\n      description: \"Regex of prefetch hash.\"\n      type: regex\n\nprecondition: SELECT OS From info() where OS = 'windows'\n\nsources:\n  - query: |\n\n      LET hostname \u003c= SELECT Fqdn FROM info()\n\n      SELECT  LastRunTimes as event_time,\n              hostname.Fqdn[0] as hostname,\n              \"Prefetch\" as parser,\n              message,\n              OSPath as source,\n              Executable as file_name,\n              CreationTime as prefetch_ctime,\n              ModificationTime as prefetch_mtime,\n              FileSize as prefetch_size,\n              Hash as prefetch_hash,\n              Version as prefetch_version,\n              PrefetchFileName as prefetch_file,\n              RunCount as prefetch_count\n      FROM foreach(\n      row={\n        SELECT *\n        FROM Artifact.Windows.Forensics.Prefetch(\n          prefetchGlobs=prefetchGlobs,\n          dateAfter=dateAfter,\n          dateBefore=dateBefore,\n          binaryRegex=binaryRegex,\n          hashRegex=hashRegex)\n      },\n      query={\n        SELECT *\n        FROM chain(a1={\n           SELECT *\n           FROM flatten(query={\n            SELECT Executable,\n                   FileSize,\n                   Hash,\n                   Version,\n                   LastRunTimes,\n                   \"Evidence of Execution: \" + Executable + format(\n                      format=\" Prefetch run count %v\", args=RunCount) as message,\n                   RunCount,\n                   OSPath,\n                   PrefetchFileName,\n                   CreationTime,\n                   ModificationTime,\n                   Binary\n            FROM scope()\n          })\n        }, b1={\n            -- One more row for creation time\n            SELECT Executable,\n                   FileSize,\n                   Hash,\n                   Version,\n                   CreationTime AS LastRunTimes,\n                   \"Evidence of Execution (Btime): \" + Executable + format(\n                      format=\" Prefetch run count %v\", args=RunCount) as message,\n                   RunCount,\n                   OSPath,\n                   PrefetchFileName,\n                   CreationTime,\n                   ModificationTime,\n                   Binary\n            FROM scope()\n        })\n        -- This group by applies on only a single prefetch file to\n        -- remove duplication with CreationTime\n        GROUP BY LastRunTimes\n      })\n      ORDER BY event_time\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Triage.HighValueMemory","op":"set","definition":"name: Exchange.Windows.Triage.HighValueMemory\n\ndescription: |\n  Dump process memory and upload to the server\n\n  Common Archive Utilities: Winrar, Winzip, 7-zip, Winscp, FileZilla\n\n  Common Exfil Utilities: robocopy, rclone, mega*\n\n  Consoles: cmd, powershell\n\nauthor: \"@kevinfosec - liteman\"\n\nparameters:\n  - name: processRegexCsv\n    default: |\n      processName\n      mega\n      winrar\n      winzip\n      7z\n      winscp\n      filezilla\n      robocopy\n      rclone\n      notepad\n      cmd\n      powershell\n    type: regex\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n\n      LET processRegexList \u003c= SELECT processName\n                              FROM parse_csv(filename=processRegexCsv, accessor='data')\n\n      LET processes(processRegex) = SELECT Name as ProcessName,\n                                          CommandLine,\n                                          Pid\n                                    FROM pslist()\n                                    WHERE Name =~ processRegex\n\n      LET processList = SELECT *\n                        FROM foreach(\n                                row=processRegexList,\n                                query={ SELECT * from processes(processRegex=processName) }\n                        )\n\n      SELECT *\n      FROM foreach(\n              row=processList,\n              query={\n                  SELECT ProcessName,\n                         CommandLine,\n                         Pid,\n                         FullPath,\n                         upload(file=FullPath,\n                                name=format(format=\"%v_%v\",args=[ProcessName,Pid])) as CrashDump\n                  FROM proc_dump(pid=Pid)\n              }\n            )\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Veeam.RestorePoints.BackupFiles","op":"set","definition":"name: Exchange.Windows.Veeam.RestorePoints.BackupFiles\n\ndescription: |\n  Parses the metadata found in Veeam full backup files (`.vbk`), Veeam incremental backup files (`.vib`) and Veeam reverse incremental backup files (`.vrb`) to extract relevant fields for each Restore Point.\n  \n  These files are generated by Veeam Backup \u0026 Replication during backup jobs. This artifact accepts full backup, incremental backup, and reverse incremental backup files from **unencrypted** backups of virtual and physical infrastructures.\n\nauthor: Synacktiv, Maxence Fossat - @cybiosity\n\ntype: CLIENT\n\nprecondition: SELECT OS FROM info() WHERE OS = 'windows'\n\nparameters:\n  - name: BackupRepositories\n    description: List of Backup Repositories where \".vbk\", \".vib\" and \".vrb\" files should be looked for.\n    type: csv\n    default: |\n      BackupRepoPath\n      C:/BackupRepo1\n      D:/BackupRepo2\n\nrequired_permissions:\n  - FILESYSTEM_READ\n\nsources:\n  - query: |\n      // ============================\n      // === Formatting functions ===\n      // ============================\n      \n      // Function to format XML properties\n      LET format_properties(Properties) = to_dict(item={ \n          SELECT AttrName AS _key,\n                 Value AS _value\n            FROM Properties\n      })\n\n      // Function to format disk_info capacity for HvAuxData\n      LET hv_disk_capacity(Disks) = to_dict(item= {\n          SELECT disk_info.Attrdisk_id AS _key,\n                 disk_info.Attrcapacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format Disk capacity for DesktopOibAuxData\n      LET desktop_disk_capacity(Disks) = to_dict(item= {\n          SELECT DevSetupInfo.AttrDevPath AS _key,\n                 Capacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format Disk capacity for COibAuxDataVmware\n      LET vmware_disk_capacity(Disks) = to_dict(item= {\n          SELECT `Uuid` AS _key,\n                 Capacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format OibFiles\n      LET oib_files_size(Files) = to_dict(item= {\n          SELECT AttrFileName AS _key,\n                 AttrSize AS _value\n            FROM Files\n      })\n      \n      // Restore Point type\n      LET restore_point_type = dict(\n          `0`='Full',\n          `1`='Increment'\n      )\n      \n      // Backup encryption state\n      LET back_enc_state = dict(\n          `0`='Unencrypted',\n          `2`='Encrypted'\n      )\n  \n      // ========================\n      // === Initial parsing ====\n      // ========================\n      \n      LET MetadataStart \u003c= '''\n      rule StartOffsetRule {\n          strings:\n              $start = \"\u003cOibSummary\u003e\"\n          condition: any of them\n      }\n      '''\n      LET MetadataEnd \u003c= '''\n      rule EndOffsetRule {\n          strings:\n              $end = \"\u003c/OibSummary\u003e\"\n          condition: any of them\n      }\n      '''\n      \n      // Listing all Storage files in the Backup Repositories\n      LET backup_repos = SELECT BackupRepoPath FROM BackupRepositories\n      LET backup_files = SELECT * FROM foreach(row=backup_repos,\n          query={\n              SELECT *\n                FROM glob(\n                    globs=[\n                        '/**/*.vbk',\n                        '/**/*.vib',\n                        '/**/*.vrb'\n                    ],\n                    root=BackupRepoPath,\n                    accessor='file'\n                )\n          })\n      \n      // Find last start offset of metadata for each Storage file\n      LET start_offsets= SELECT File.FullPath AS FilePath,\n             max(item=String.Offset) AS StartOffset\n        FROM yara(\n            files=backup_files.OSPath,\n            rules=MetadataStart,\n            start=0,\n            end=18446744073709551615,\n            number=100\n        )\n        GROUP BY File.FullPath\n        \n      // Find end offset for each start offset, extract and parse XML\n      LET xml = SELECT parse_xml(\n          accessor='data',\n          file=read_file(\n              filename=BackupFilePath,\n              offset=StartOffset,\n              length=EndOffset - StartOffset + 13\n          )\n      ) AS Metadata,\n      BackupFilePath\n        FROM foreach(row=start_offsets,\n        query={\n            SELECT File.FullPath AS BackupFilePath,\n                   StartOffset,\n                   String.Offset + StartOffset AS EndOffset\n              FROM yara(\n                  files=pathspec(\n                      DelegateAccessor='file',\n                      DelegatePath=FilePath,\n                      Path=str(str=StartOffset)\n                  ),\n                  accessor='offset',\n                  rules=MetadataEnd,\n                  end=20971520,\n                  number=1\n              )\n        })\n        WHERE Metadata\n\n      // =========================      \n      // === Objects In Backup ===\n      // =========================\n\n      // Extracting interesting fields from OIB, OibFiles, Object, SourceHost, Storage, Point and Backup\n      LET oib = SELECT BackupFilePath, \n              Metadata.OibSummary.OIB.AttrDisplayName AS DisplayName,\n              Metadata.OibSummary.OIB.AttrVmName AS VMName,\n              Metadata.OibSummary.OIB.AttrState AS State,\n              Metadata.OibSummary.OIB.AttrType AS Type,\n              Metadata.OibSummary.OIB.AttrAlgorithm AS Algorithm,\n              Metadata.OibSummary.OIB.AttrHealthStatus AS HealthStatus,\n              Metadata.OibSummary.OIB.AttrHasIndex AS HasIndex,\n              Metadata.OibSummary.OIB.AttrHasExchange AS HasExchange,\n              Metadata.OibSummary.OIB.AttrHasSharePoint AS HasSharePoint,\n              Metadata.OibSummary.OIB.AttrHasSql AS HasSQL,\n              Metadata.OibSummary.OIB.AttrHasAd AS HasAD,\n              Metadata.OibSummary.OIB.AttrHasOracle AS HasOracle,\n              Metadata.OibSummary.OIB.AttrHasPostgreSql AS HasPostgreSQL,\n              Metadata.OibSummary.OIB.AttrHasVeeamArchiver AS HasVeeamArchiver,\n              Metadata.OibSummary.OIB.AttrIsCorrupted AS IsCorrupted,\n              Metadata.OibSummary.OIB.AttrIsRecheckCorrupted AS IsRecheckCorrupted,\n              Metadata.OibSummary.OIB.AttrIsConsistent AS IsConsistent,\n              Metadata.OibSummary.OIB.AttrIsPartialActiveFull AS IsPartialActiveFull,\n              Metadata.OibSummary.OIB.AttrProductVersion AS ProductVersion,\n              Metadata.OibSummary.OIB.AttrProductVersionFlags AS ProductVersionFlags,\n              Metadata.OibSummary.OIB.AttrProductIsRentalLicense AS ProductIsRentalLicense,\n              Metadata.OibSummary.SourceHost.AttrName AS HostName,\n              Metadata.OibSummary.SourceHost.AttrHostInstanceId AS HostInstanceID,\n              Metadata.OibSummary.Backup.AttrJobName AS JobName,\n              Metadata.OibSummary.Backup.AttrPolicyName AS PolicyName,\n              Metadata.OibSummary.PrevFileName AS PreviousFileInChain,\n              back_enc_state[Metadata.OibSummary.Backup.AttrEncryptionState] AS BackupEncryptionState,\n              Metadata.OibSummary.OIB.AttrEffectiveMemoryMb AS TempMemory,\n              Metadata.OibSummary.Object.AttrViType || 'Physical machine' AS VirtualType,\n              Metadata.OibSummary.Object.AttrName AS ExtractName,\n              Metadata.OibSummary.Object.AttrObjectId AS ExtractID,\n              oib_files_size(Files=Metadata.OibSummary.OibFiles.File) AS ExtractableFilesSize,\n              parse_xml(file=Metadata.OibSummary.Storage.AttrPartialPath, accessor='data').Path.Elements AS BackupFile,\n              timestamp(string=Metadata.OibSummary.OIB.AttrCreationTimeUtc) AS CreationTimeUTC,\n              timestamp(string=Metadata.OibSummary.OIB.AttrCompletionTimeUtc) AS CompletionTimeUTC,\n              humanize(bytes=int(int=Metadata.OibSummary.OIB.AttrApproxSize)) AS ApproximateSize,\n              split(string=Metadata.OibSummary.Point.AttrNum, sep='\\\\.')[0] AS RestorePointNumber,\n              restore_point_type[Metadata.OibSummary.Point.AttrType] AS RestorePointType,\n              parse_xml(file=Metadata.OibSummary.Storage.`#text`, accessor='data').CBackupStats AS Stats,\n              parse_xml(file=Metadata.OibSummary.OIB.AttrAuxData, accessor='data').COibAuxData AS AuxData,\n              format_properties(\n                  Properties = parse_xml(file=Metadata.OibSummary.OIB.`#text`, accessor='data').GuestInfo.Property\n              ) AS GuestInfo\n        FROM xml\n      \n      // Expanding relevant fields into subfields\n      LET expand_oib = SELECT BackupFilePath, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, HostName, HostInstanceID, JobName, PolicyName, PreviousFileInChain, BackupEncryptionState, VirtualType, ExtractName, ExtractID, ExtractableFilesSize, BackupFile, CreationTimeUTC, CompletionTimeUTC, ApproximateSize, RestorePointNumber, RestorePointType,\n              format(\n                  format='%d MiB',\n                  args = int(int=TempMemory) || int(int=AuxData.DesktopOibAuxData.SystemConfiguration.RAMInfo.AttrTotalSizeMB)\n              ) AS Memory,\n              hv_disk_capacity(Disks=AuxData.HvAuxData.disks.disk)\n                + desktop_disk_capacity(Disks=AuxData.DesktopOibAuxData.Disk)\n                + vmware_disk_capacity(Disks=AuxData.COibAuxDataVmware.Disk)\n                AS DisksCapacity,\n              GuestInfo.GuestOsName AS GuestOSName,\n              GuestInfo.GuestOsType AS GuestOSType,\n              GuestInfo.DnsName AS GuestDNSName,\n              GuestInfo.`Ip` AS GuestIP,\n              GuestInfo.ToolsStatus AS GuestToolsStatus,\n              GuestInfo.ToolsVersionStatus AS GuestToolsVersionStatus,\n              Stats.BackupSize AS BackupSize,\n              Stats.DataSize AS DataSize,\n              Stats.DedupRatio AS DeduplicationRatio,\n              Stats.CompressRatio AS CompressionRatio\n        FROM oib\n        \n      // ===================\n      // === Final query ===\n      // ===================\n      \n      SELECT DisplayName,\n             CreationTimeUTC,\n             CompletionTimeUTC,\n             ApproximateSize,\n             DisksCapacity,\n             RestorePointNumber,\n             RestorePointType,\n             HostName,\n             HostInstanceID,\n             BackupFile,\n             BackupFilePath,\n             ExtractableFilesSize,\n             BackupSize,\n             DataSize,\n             DeduplicationRatio,\n             CompressionRatio,\n             VirtualType,\n             VMName,\n             Memory,\n             GuestOSName,\n             GuestOSType,\n             GuestDNSName,\n             GuestIP,\n             GuestToolsStatus,\n             GuestToolsVersionStatus,\n             State,\n             Type,\n             Algorithm,\n             HealthStatus,\n             HasIndex,\n             HasExchange,\n             HasSharePoint,\n             HasSQL,\n             HasAD,\n             HasOracle,\n             HasPostgreSQL,\n             HasVeeamArchiver,\n             IsCorrupted,\n             IsRecheckCorrupted,\n             IsConsistent,\n             IsPartialActiveFull,\n             ProductVersion,\n             ProductVersionFlags,\n             ProductIsRentalLicense,\n             JobName,\n             PolicyName,\n             BackupEncryptionState,\n             PreviousFileInChain,\n             ExtractName,\n             ExtractID\n        FROM expand_oib\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Veeam.RestorePoints.MetadataFiles","op":"set","definition":"name: Exchange.Windows.Veeam.RestorePoints.MetadataFiles\n\ndescription: |\n  Parses the metadata found in Veeam backup chain metadata files (`.vbm`) to extract relevant fields for each Restore Point.\n  \n  These files are generated by Veeam Backup \u0026 Replication during backup jobs. This artifact accepts metadata from **unencrypted** backups of virtual and physical infrastructures.\n\nauthor: Synacktiv, Maxence Fossat - @cybiosity\n\nreference:\n  - https://www.synacktiv.com/publications/using-veeam-metadata-for-efficient-extraction-of-backup-artefacts-13\n\ntype: CLIENT\n\nprecondition: SELECT OS FROM info() WHERE OS = 'windows'\n\nparameters:\n  - name: BackupRepositories\n    description: List of Backup Repositories where \".vbm\" files should be looked for.\n    type: csv\n    default: |\n      BackupRepoPath\n      C:/BackupRepo1\n      D:/BackupRepo2\n\nrequired_permissions:\n  - FILESYSTEM_READ\n\nsources:\n  - query: |\n      // ============================\n      // === Formatting functions ===\n      // ============================\n      \n      // Function to format XML properties\n      LET format_properties(Properties) = to_dict(item={ \n          SELECT AttrName AS _key,\n                 Value AS _value\n            FROM Properties\n      })\n\n      // Function to format disk_info capacity for HvAuxData\n      LET hv_disk_capacity(Disks) = to_dict(item= {\n          SELECT disk_info.CHvVmRctIdentifier.AttrFileId AS _key,\n                 disk_info.Attrcapacity AS _value\n            FROM Disks\n      })\n\n      // Function to format disk_info sizes for HvAuxData\n      LET hv_disk_size(Disks) = to_dict(item= {\n          SELECT disk_info.extent.Attrfilename AS _key,\n                 disk_info.extent.Attrsize AS _value\n            FROM Disks\n      })\n      \n      // Function to format CRawDiskInfo sizes for HvAuxData\n      LET hv_raw_disk_size(RawDisks) = to_dict(item= {\n          SELECT CRawDiskInfo.SourceFileName AS _key,\n                 CRawDiskInfo.ValidProcessedOffset AS _value\n            FROM RawDisks\n      })\n      \n      // Function to format Disk capacity for DesktopOibAuxData\n      LET desktop_disk_capacity(Disks) = to_dict(item= {\n          SELECT DevSetupInfo.AttrDevPath AS _key,\n                 Capacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format Disk sizes for DesktopOibAuxData\n      LET desktop_disk_size(Disks) = to_dict(item= {\n          SELECT OriginalDiskUniqueId AS _key,\n                 Capacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format Disk capacity for COibAuxDataVmware\n      LET vmware_disk_capacity(Disks) = to_dict(item= {\n          SELECT `Uuid` AS _key,\n                 Capacity AS _value\n            FROM Disks\n      })\n      \n      // Function to format Disk sizes for COibAuxDataVmware\n      LET vmware_disk_size(Disks) = to_dict(item= {\n          SELECT FlatFileName AS _key,\n                 ValidProcessedOffset AS _value\n            FROM Disks\n      })\n      \n      // Restore Point type\n      LET restore_point_type = dict(\n          `0`='Full',\n          `1`='Increment'\n      )\n      \n      // Backup encryption state\n      LET back_enc_state = dict(\n          `0`='Unencrypted',\n          `2`='Encrypted'\n      )\n\n\n\n\n      // ========================\n      // === Initial parsing ====\n      // ========================\n      \n      // Parsing XML for each Veeam backup chain metadata file\n      LET backup_repos = SELECT BackupRepoPath FROM BackupRepositories\n      LET xml = SELECT * FROM foreach(row=backup_repos,\n          query={\n              SELECT Name AS MetadataFile, \n                     parse_xml(file=OSPath) AS Metadata\n                FROM glob(globs='/**/*.vbm', root=BackupRepoPath, accessor='auto')\n          })\n      \n      // Extracting interesting fields from the parsed metadata\n      LET metadata = SELECT MetadataFile,\n             Metadata.BackupMeta.BackupMetaInfo.Oibs.OIB AS ObjectsInBackup,\n             Metadata.BackupMeta.BackupMetaInfo.Objects.Object AS Objects,\n             Metadata.BackupMeta.BackupMetaInfo.Hosts.Host AS Hosts,\n             Metadata.BackupMeta.BackupMetaInfo.Storages.Storage AS Storages,\n             Metadata.BackupMeta.BackupMetaInfo.Points.Point AS RestorePoints,\n             Metadata.BackupMeta.Backup AS Backups\n        FROM xml\n      \n\n      \n\n      // =========================      \n      // === Objects In Backup ===\n      // =========================\n      \n      // Expanding each Object In Backup (OIB) for each vbm file\n      LET oibs = SELECT * FROM foreach(row=metadata,\n          query={\n              SELECT MetadataFile, Objects, Hosts, Storages, RestorePoints, Backups,\n                     _value.AttrDisplayName AS DisplayName,\n                     _value.AttrVmName AS VMName,\n                     _value.AttrState AS State,\n                     _value.AttrType AS Type,\n                     _value.AttrAlgorithm AS Algorithm,\n                     _value.AttrHealthStatus AS HealthStatus,\n                     _value.AttrHasIndex AS HasIndex,\n                     _value.AttrHasExchange AS HasExchange,\n                     _value.AttrHasSharePoint AS HasSharePoint,\n                     _value.AttrHasSql AS HasSQL,\n                     _value.AttrHasAd AS HasAD,\n                     _value.AttrHasOracle AS HasOracle,\n                     _value.AttrHasPostgreSql AS HasPostgreSQL,\n                     _value.AttrHasVeeamArchiver AS HasVeeamArchiver,\n                     _value.AttrIsCorrupted AS IsCorrupted,\n                     _value.AttrIsRecheckCorrupted AS IsRecheckCorrupted,\n                     _value.AttrIsConsistent AS IsConsistent,\n                     _value.AttrNeedHealthCheckRepair AS NeedHealthCheckRepair,\n                     _value.AttrIsPartialActiveFull AS IsPartialActiveFull,\n                     _value.AttrProductVersion AS ProductVersion,\n                     _value.AttrProductVersionFlags AS ProductVersionFlags,\n                     _value.AttrProductIsRentalLicense AS ProductIsRentalLicense,\n                     _value.AttrObjectId AS ObjectID,\n                     _value.AttrStorageId AS StorageID,\n                     _value.AttrPointId AS RestorePointID,\n                     _value.AttrEffectiveMemoryMb AS TempMemory,\n                     timestamp(string=_value.AttrCreationTimeUtc) AS CreationTimeUTC,\n                     timestamp(string=_value.AttrCompletionTimeUtc) AS CompletionTimeUTC,\n                     humanize(bytes=int(int=_value.AttrApproxSize)) AS ApproximateSize,\n                     parse_xml(file=_value.AttrAuxData, accessor='data').COibAuxData AS AuxData,\n                     format_properties(\n                            Properties = parse_xml(file=_value.AttrGuestInfo, accessor='data').GuestInfo.Property\n                         ) AS GuestInfo\n                FROM foreach(row=ObjectsInBackup)\n          })\n      \n      // Correlating OIBs with Objects information\n      LET oibs_objects = SELECT * FROM foreach(row=oibs,\n          query={\n              SELECT MetadataFile, Hosts, Storages, RestorePoints, Backups, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, NeedHealthCheckRepair, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, StorageID, RestorePointID, CreationTimeUTC, CompletionTimeUTC, ApproximateSize,\n                     format(format='%d MiB',\n                         args = int(int=TempMemory) || int(int=AuxData.DesktopOibAuxData.SystemConfiguration.RAMInfo.AttrTotalSizeMB))\n                      AS Memory,\n                     hv_disk_capacity(Disks=AuxData.HvAuxData.disks.disk)\n                       + desktop_disk_capacity(Disks=AuxData.DesktopOibAuxData.Disk)\n                       + vmware_disk_capacity(Disks=AuxData.COibAuxDataVmware.Disk)\n                       AS DisksCapacity,\n                     hv_disk_size(Disks=AuxData.HvAuxData.disks.disk)\n                       + hv_raw_disk_size(RawDisks=AuxData.HvAuxData.raw_disks.CRawDiskBackupObject)\n                       + desktop_disk_size(Disks=AuxData.DesktopOibAuxData.Disk)\n                       + vmware_disk_size(Disks=AuxData.COibAuxDataVmware.Disk)\n                       AS ExtractableFilesSize,\n                     GuestInfo.GuestOsName AS GuestOSName,\n                     GuestInfo.GuestOsType AS GuestOSType,\n                     GuestInfo.DnsName AS GuestDNSName,\n                     GuestInfo.`Ip` AS GuestIP,\n                     GuestInfo.ToolsStatus AS GuestToolsStatus,\n                     GuestInfo.ToolsVersionStatus AS GuestToolsVersionStatus,\n                     _value.AttrViType || 'Physical machine' AS VirtualType,\n                     _value.AttrName AS ExtractName,\n                     _value.AttrObjectId AS ExtractID,\n                     _value.AttrHostId AS HostID\n                FROM foreach(row=Objects) WHERE _value.AttrId = ObjectID\n          })\n      \n      // Correlating OIBs with Hosts information\n      LET oibs_hosts = SELECT * FROM foreach(row=oibs_objects,\n          query={\n              SELECT MetadataFile, Storages, RestorePoints, Backups, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, NeedHealthCheckRepair, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, StorageID, RestorePointID, CreationTimeUTC, CompletionTimeUTC, ApproximateSize, Memory, DisksCapacity, ExtractableFilesSize, GuestOSName, GuestOSType, GuestDNSName, GuestIP, GuestToolsStatus, GuestToolsVersionStatus, VirtualType, ExtractName, ExtractID,\n                     _value.AttrName AS HostName,\n                     _value.AttrHostInstanceId AS HostInstanceID\n                FROM foreach(row=Hosts) WHERE _value.AttrId = HostID\n          })\n    \n      // Correlating OIBs with Storages information\n      LET oibs_storages = SELECT * FROM foreach(row=oibs_hosts,\n          query={\n              SELECT MetadataFile, RestorePoints, Backups, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, NeedHealthCheckRepair, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, RestorePointID, CreationTimeUTC, CompletionTimeUTC, ApproximateSize, Memory, DisksCapacity, ExtractableFilesSize, GuestOSName, GuestOSType, GuestDNSName, GuestIP, GuestToolsStatus, GuestToolsVersionStatus, VirtualType, ExtractName, ExtractID, HostName, HostInstanceID,\n                     parse_xml(file=_value.AttrPartialPath, accessor='data').Path.Elements AS BackupFile,\n                     _value.AttrFilePath AS BackupFilePath,\n                     parse_xml(file=_value.AttrStats, accessor='data').CBackupStats AS Stats\n                FROM foreach(row=Storages) WHERE _value.AttrId = StorageID\n          })\n          \n      // Correlating OIBs with Restore Points information\n      LET oibs_points = SELECT * FROM foreach(row=oibs_storages,\n          query={\n              SELECT MetadataFile, Backups, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, NeedHealthCheckRepair, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, CreationTimeUTC, CompletionTimeUTC, ApproximateSize, Memory, DisksCapacity, ExtractableFilesSize, GuestOSName, GuestOSType, GuestDNSName, GuestIP, GuestToolsStatus, GuestToolsVersionStatus, VirtualType, ExtractName, ExtractID, HostName, HostInstanceID, BackupFile, BackupFilePath,\n                     Stats.BackupSize AS BackupSize,\n                     Stats.DataSize AS DataSize,\n                     Stats.DedupRatio AS DeduplicationRatio,\n                     Stats.CompressRatio AS CompressionRatio,\n                     split(string=_value.AttrNum, sep='\\\\.')[0] AS RestorePointNumber,\n                     restore_point_type[_value.AttrType] AS RestorePointType,\n                     _value.AttrBackupId AS BackupID\n                FROM foreach(row=RestorePoints) WHERE _value.AttrId = RestorePointID\n          })\n          \n      // Correlating OIBs with Backups information\n      LET oibs_backups = SELECT * FROM foreach(row=oibs_points,\n          query={\n              SELECT MetadataFile, DisplayName, VMName, State, Type, Algorithm, HealthStatus, HasIndex, HasExchange, HasSharePoint, HasSQL, HasAD, HasOracle, HasPostgreSQL, HasVeeamArchiver, IsCorrupted, IsRecheckCorrupted, IsConsistent, NeedHealthCheckRepair, IsPartialActiveFull, ProductVersion, ProductVersionFlags, ProductIsRentalLicense, CreationTimeUTC, CompletionTimeUTC, ApproximateSize, Memory, DisksCapacity, ExtractableFilesSize, GuestOSName, GuestOSType, GuestDNSName, GuestIP, GuestToolsStatus, GuestToolsVersionStatus, VirtualType, ExtractName, ExtractID, HostName, HostInstanceID, BackupFile, BackupFilePath, BackupSize, DataSize, DeduplicationRatio, CompressionRatio, RestorePointNumber, RestorePointType,\n                     _value.AttrJobName AS JobName,\n                     _value.AttrPolicyName AS PolicyName,\n                     _value.AttrDirPath AS BackupDirectory,\n                     back_enc_state[_value.AttrEncryptionState] AS BackupEncryptionState\n                FROM foreach(row=Backups) WHERE _value.AttrId = BackupID\n          })\n\n       \n\n\n      // ===================\n      // === Final query ===\n      // ===================\n      \n      SELECT DisplayName,\n             CreationTimeUTC,\n             CompletionTimeUTC,\n             ApproximateSize,\n             DisksCapacity,\n             RestorePointNumber,\n             RestorePointType,\n             HostName,\n             HostInstanceID,\n             BackupFile,\n             BackupFilePath,\n             ExtractableFilesSize,\n             BackupSize,\n             DataSize,\n             DeduplicationRatio,\n             CompressionRatio,\n             VirtualType,\n             VMName,\n             Memory,\n             GuestOSName,\n             GuestOSType,\n             GuestDNSName,\n             GuestIP,\n             GuestToolsStatus,\n             GuestToolsVersionStatus,\n             State,\n             Type,\n             Algorithm,\n             HealthStatus,\n             HasIndex,\n             HasExchange,\n             HasSharePoint,\n             HasSQL,\n             HasAD,\n             HasOracle,\n             HasPostgreSQL,\n             HasVeeamArchiver,\n             IsCorrupted,\n             IsRecheckCorrupted,\n             IsConsistent,\n             NeedHealthCheckRepair,\n             IsPartialActiveFull,\n             ProductVersion,\n             ProductVersionFlags,\n             ProductIsRentalLicense,\n             JobName,\n             PolicyName,\n             BackupEncryptionState,\n             BackupDirectory,\n             MetadataFile,\n             ExtractName,\n             ExtractID\n        FROM oibs_backups\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.ETW.AMSI","op":"set","definition":"name: Exchange.Windows.ETW.AMSI\ndescription: |\n    This artifact uses the ETW provider:\n        (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: IocRegex\n    description: \"Regex of strings to filter for\"\n    default: .\n  - name: WhitelistRegex\n    description: \"Regex of strings to witelist\"\n  - name: AppNameRegex\n    description: \"Application name Regex to enable filtering on source.\"\n    default: .\n  - name: ExcludeAmsiHashList\n    description: \"Line seperated list of AMSI hashes to exclude\"\n    default: |\n        0xB95D39DB18570A2A6DB329A3FF0BB87B17720279A0AC6862C7D5BA66C8270BB1\n        0x9281522E94E9F3D4FBF4F679335D8A891B1FAE9933DCD993A0E2AE7CD8789953\n\nsources:\n  - query: |\n      -- split out Hash exclusions into array\n      LET HashExclusions \u003c= SELECT _value as AmsiHash\n        FROM foreach(row=split(sep='\\\\s+',string=ExcludeAmsiHashList))\n        WHERE AmsiHash\n        \n      -- watch ETW provider and first round data manipulation\n      LET hits = SELECT\n         timestamp(epoch=timestamp(string=System.TimeStamp).unix) as EventTime,\n         System,\n         get(member=\"EventData\") AS EventData\n      FROM watch_etw(guid=\"{2A576B87-09A7-520E-C21A-4942F0271D67}\")\n      WHERE EventData.appname =~ AppNameRegex\n        AND NOT EventData.hash in HashExclusions.AmsiHash\n\n      -- print rows\n      SELECT\n        EventTime,\n        EventData.appname as AppName,\n        EventData.contentname as ContentName,\n        utf16(string=\n            unhex(string=regex_replace(\n                source=EventData.Content,re='^0x',replace=''))\n        ) as Content,\n        process_tracker_callchain(id=System.ProcessID).Data[-1] as ProcessInfo,\n        process_tracker_callchain(id=System.ProcessID).Data as ProcessChain,\n        EventData.hash as AmsiHash\n      FROM hits\n      WHERE\n        Content =~ IocRegex\n        AND if(condition= WhitelistRegex,\n            then= NOT Content =~ WhitelistRegex,\n            else= True)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Bulk.File","op":"set","definition":"name: Exchange.Windows.Bulk.File\nauthor: Matt Green - @mgreen27\ndescription: |\n    Search for some simple bulk File IOCs and upload if desired.\n    Typical upload workflow may be to firstly search, then if returned\n    rows match expectations rerun query with upload tickbox selected.\n\n    NOTE: strings with comma \",\" requre quotes.\n\n    IocLookupTable csv details:\n\n    Glob - \"Quote\" items with { glob } barckets.\n    Whitelist - Velociraptor regex to whitelist FullPath field.\n    Description - Free text\n\nparameters:\n  - name: UploadHits\n    description: Upload hits to server.\n    type: bool\n  - name: Accessor\n    type: choices\n    default: auto\n    choices:\n      - auto\n      - ntfs\n      - file\n  - name: IocLookupTable\n    type: csv\n    default: |\n        TargetGlob,IgnoreRegex,Description\n        \"C:\\intel\\Logs\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Carbanak staging location\n        \"C:\\users\\public\\temp\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Carbanak staging location\n        \"C:\\Windows\\SystemApps\\*\\*.{ps1,vbs,js,bat,cpl}\",,Carbanak staging location\n        \"C:\\windows\\temp\\temp1\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Carbanak staging location\n        \"C:\\Windows\\System32\\spool*\\*.{ps1,vbs,js,bat,cpl}\",,Common staging location\n        \"C:\\Perflogs\\**\\*.{lnk,ps1,vbs,js,exe,dll,bat,cpl,zip,7z,rar}\",\\.(ini|txt|zip|etl|html|xml|xsl|log|blg)$,Staging location\n        \"C:\\ProgramData\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Staging location\n        \"C:\\ProgramData\\.*\\*.{bin,dat,txt,log,ps1,vbs,js,exe,dll,bat,cpl}\",,Copy-Paste staging location\n        \"C:\\Users\\Public\\**\\*.{lnk,ps1,vbs,js,exe,dll,bat,cpl,zip,7z,rar}\",C:\\\\Users\\\\Public\\\\Desktop\\\\[\\\\]+\\.lnk,Staging location\n        \"C:\\Users\\*\\Sounds\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Investigation staging\n        \"C:\\Windows\\Temp\\winsyslog\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Current investigation X1002\n        \"C:\\Windows\\Help\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Staging location\n        \"C:\\Windows\\twain_32\\*.{ps1,vbs,js,exe,dll,bat,cpl}\",,Staging location\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n\n    query: |\n      -- extract IOCs from lookupTable\n      LET hits = SELECT * FROM foreach(\n            row=IocLookupTable,\n            query={\n                SELECT\n                    OSPath,\n                    Name,\n                    dict(\n                        TargetGlob=TargetGlob,\n                        IgnoreRegex=IgnoreRegex,\n                        Description=Description\n                            ) as IocDetails,\n                    timestamp(epoch=Mtime) as Mtime,\n                    timestamp(epoch=Atime) as Atime,\n                    timestamp(epoch=Ctime) as Ctime,\n                    timestamp(epoch=Btime) as Btime,\n                    Size,\n                    IsLink\n                FROM glob(globs=TargetGlob,accessor=Accessor)\n                WHERE NOT IsDir\n                    AND NOT if(condition=IgnoreRegex,\n                        then=OSPath =~ IgnoreRegex,\n                        else=FALSE)\n            })\n\n      -- upload hits\n      LET upload_hits = SELECT *, upload(file=OSPath) FROM hits\n\n      -- output rows\n      SELECT *,\n        hash(path=OSPath) as Hash\n      FROM if(condition=UploadHits,\n            then= upload_hits,\n            else= hits)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.HashRunKeys","op":"set","definition":"name: Exchange.HashRunKeys\ndescription: |\n    Iterate over all the run keys and locate their binary then hash it.\n\n    Tags: #windows #registry #detection\n\nparameters:\n  - name: runKeys\n    default: |\n      HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\*\n\n  - name: pathRegex\n    type: hidden\n\n    # Pick the first part - either quoted or not.\n    default: \u003e-\n      (^\"(?P\u003cquoted_path\u003e[^\"]+)\"|(?P\u003cunquoted_path\u003e^[^ ]+))\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'windows'\n    query: |\n      LET paths = SELECT FullPath,Name, Data.value AS Value,\n               parse_string_with_regex(string=Data.value,\n                                       regex=pathRegex) as regData\n      FROM glob(globs=split(string=runKeys, sep=\"[, \\\\n]+\"),\n                accessor=\"reg\")\n      WHERE Data.value\n\n      -- Handle some variations we see in the value:\n      -- system32\\drivers\\XXX.sys -\u003e %systemRoot%\\System32\\\n      -- \\SystemRoot\\ -\u003e %SystemRoot%\\\n      LET normalized = SELECT *,\n           expand(path=\n              regex_replace(re='(?i)^system32\\\\\\\\',\n                            replace=\"%SystemRoot%\\\\system32\\\\\",\n              source=regex_replace(\n                  source=regData.quoted_path + regData.unquoted_path,\n                  re=\"^\\\\\\\\SystemRoot\\\\\\\\\",\n                  replace=\"%SystemRoot%\\\\\"))) AS RealPath\n      FROM paths\n\n      SELECT FullPath, Name, Value, RealPath,\n               hash(path=expand(path=RealPath)).SHA256 AS Hash\n      FROM normalized\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Linux.Kunai","op":"set","definition":"name: Exchange.Linux.Kunai\nauthor: Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange\ndescription: |\n   Kunai is a Linux-based security monitoring and threat hunting tool written in Rust.  This artifact parses the Kunai log file. \nreference:\n  - https://github.com/0xrawsec/kunai \nparameters:\n   - name: LogFile\n     default: kunai.log\n     description: Path of Kunai log file\n\nsources:\n  - precondition:\n      SELECT OS From info() where OS = 'linux'\n\n    query: |\n      SELECT\n        info.utc_time AS Timestamp,\n        info.host.hostname AS Hostname,\n        info.host.container AS _Container,\n        info.event.id AS EventID,\n        info.event.name AS EventName,\n        info.event.uuid AS EventUUID,\n        data.command_line AS CommandLine,\n        data.exe AS Exe,\n        data.path AS Path,\n        info.event.batch AS _EventBatch,\n        info.task AS Task,\n        info.parent_task AS ParentTask\n      FROM parse_jsonl(filename=LogFile)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Generic.Detection.log4jRCE","op":"set","definition":"name: Exchange.Generic.Detection.log4jRCE\nauthor: Matt Green - @mgreen27\ndescription: |\n  Detection for exploitation attempts against log4j RCE\n  vulnerability CVE-2021-44228.\n\n  By default this artifact will search for linux path glob: /var/logs/**\n\n  For Windows hosts please change the target path.\n  Some examples of path glob may include:\n\n  * Specific binary: `/var/logs/log.gz`\n  * Wildcards: `/var/log/*.gz`\n  * More wildcards: `/var/www/**/*.log`\n  * Multiple extentions: `/var/log/**/*\\.{log,gz}`\n  * Windows: `C:/Logs/**/*.{gz,log}` or `**/*.{gz,log}`\n\n  NOTE: this artifact runs the glob plugin with the nosymlink switch\n  turned on.  This will NOT follow any symlinks and may cause\n  unexpected results if unknowingly targeting a folder with symlinks.\n\nreference:\n  - https://github.com/Neo23x0/signature-base/blob/master/yara/expl_log4j_cve_2021_44228.yar\n\ntype: CLIENT\nparameters:\n  - name: PathGlob\n    description: Only file names that match this glob will be scanned.\n    default: /var/log/**\n  - name: SizeMax\n    description: maximum size of target file.\n  - name: SizeMin\n    description: minimum size of target file.\n  - name: UploadHits\n    type: bool\n  - name: DateAfter\n    type: timestamp\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: DateBefore\n    type: timestamp\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ssZ\"\n  - name: YaraUrl\n    description: If configured will attempt to download Yara rules form Url\n    default:\n  - name: ShortHandYara\n    description: Second option Yara choice is a Velociraptor shorthand Yara rule\n    default:\n  - name: YaraRule\n    description: Final Yara option and the default if no other options provided.\n    default: |\n        rule EXPL_Log4j_CallBackDomain_IOCs_Dec21_1 {\n           meta:\n              description = \"Detects IOCs found in Log4Shell incidents that indicate exploitation attempts of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://gist.github.com/superducktoes/9b742f7b44c71b4a0d19790228ce85d8\"\n              date = \"2021-12-12\"\n              score = 60\n           strings:\n              $xr1  = /\\b(ldap|rmi):\\/\\/([a-z0-9\\.]{1,16}\\.bingsearchlib\\.com|[a-z0-9\\.]{1,40}\\.interact\\.sh|[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}):[0-9]{2,5}\\/([aZ]|ua|Exploit|callback|[0-9]{10}|http443useragent|http80useragent)\\b/\n           condition:\n              1 of them\n        }\n\n        rule EXPL_JNDI_Exploit_Patterns_Dec21_1 {\n           meta:\n              description = \"Detects JNDI Exploit Kit patterns in files\"\n              author = \"Florian Roth\"\n              reference = \"https://github.com/pimps/JNDI-Exploit-Kit\"\n              date = \"2021-12-12\"\n              score = 60\n           strings:\n              $x01 = \"/Basic/Command/Base64/\"\n              $x02 = \"/Basic/ReverseShell/\"\n              $x03 = \"/Basic/TomcatMemshell\"\n              $x04 = \"/Basic/JettyMemshell\"\n              $x05 = \"/Basic/WeblogicMemshell\"\n              $x06 = \"/Basic/JBossMemshell\"\n              $x07 = \"/Basic/WebsphereMemshell\"\n              $x08 = \"/Basic/SpringMemshell\"\n              $x09 = \"/Deserialization/URLDNS/\"\n              $x10 = \"/Deserialization/CommonsCollections1/Dnslog/\"\n              $x11 = \"/Deserialization/CommonsCollections2/Command/Base64/\"\n              $x12 = \"/Deserialization/CommonsBeanutils1/ReverseShell/\"\n              $x13 = \"/Deserialization/Jre8u20/TomcatMemshell\"\n              $x14 = \"/TomcatBypass/Dnslog/\"\n              $x15 = \"/TomcatBypass/Command/\"\n              $x16 = \"/TomcatBypass/ReverseShell/\"\n              $x17 = \"/TomcatBypass/TomcatMemshell\"\n              $x18 = \"/TomcatBypass/SpringMemshell\"\n              $x19 = \"/GroovyBypass/Command/\"\n              $x20 = \"/WebsphereBypass/Upload/\"\n\n              $fp1 = \"\u003chtml\"\n           condition:\n              1 of ($x*) and not 1 of ($fp*)\n        }\n\n        rule EXPL_Log4j_CVE_2021_44228_JAVA_Exception_Dec21_1 {\n           meta:\n              description = \"Detects exceptions found in server logs that indicate an exploitation attempt of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b\"\n              date = \"2021-12-12\"\n              score = 60\n           strings:\n              $xa1 = \"header with value of BadAttributeValueException: \"\n\n              $sa1 = \".log4j.core.net.JndiManager.lookup(JndiManager\"\n              $sa2 = \"Error looking up JNDI resource\"\n           condition:\n              $xa1 or all of ($sa*)\n        }\n\n        rule EXPL_Log4j_CVE_2021_44228_Dec21_Soft {\n           meta:\n              description = \"Detects indicators in server logs that indicate an exploitation attempt of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/h113sdx/status/1469010902183661568?s=20\"\n              date = \"2021-12-10\"\n              modified = \"2021-12-13\"\n              score = 60\n           strings:\n              $x01 = \"${jndi:ldap:/\"\n              $x02 = \"${jndi:rmi:/\"\n              $x03 = \"${jndi:ldaps:/\"\n              $x04 = \"${jndi:dns:/\"\n              $x05 = \"${jndi:iiop:/\"\n              $x06 = \"${jndi:http:/\"\n              $x07 = \"${jndi:nis:/\"\n              $x08 = \"${jndi:nds:/\"\n              $x09 = \"${jndi:corba:/\"\n\n              $fp1 = \"\u003chtml\"\n           condition:\n              1 of ($x*) and not 1 of ($fp*)\n        }\n\n        rule EXPL_Log4j_CVE_2021_44228_Dec21_OBFUSC {\n           meta:\n              description = \"Detects obfuscated indicators in server logs that indicate an exploitation attempt of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/h113sdx/status/1469010902183661568?s=20\"\n              date = \"2021-12-12\"\n              modified = \"2021-12-13\"\n              score = 60\n           strings:\n              $x1 = \"$%7Bjndi:\"\n              $x2 = \"%2524%257Bjndi\"\n              $x3 = \"%2F%252524%25257Bjndi%3A\"\n              $x4 = \"${jndi:${lower:\"\n              $x5 = \"${::-j}${\"\n              $x6 = \"${${env:BARFOO:-j}\"\n              $x7 = \"${::-l}${::-d}${::-a}${::-p}\"\n              $x8 = \"${base64:JHtqbmRp\"\n\n              $fp1 = \"\u003chtml\"\n           condition:\n              1 of ($x*) and not 1 of ($fp*)\n        }\n\n        rule EXPL_Log4j_CVE_2021_44228_Dec21_Hard {\n           meta:\n              description = \"Detects indicators in server logs that indicate the exploitation of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/h113sdx/status/1469010902183661568?s=20\"\n              date = \"2021-12-10\"\n              modified = \"2021-12-12\"\n              score = 80\n           strings:\n              $x1 = /\\$\\{jndi:(ldap|ldaps|rmi|dns|iiop|http|nis|nds|corba):\\/[\\/]?[a-z-\\.0-9]{3,120}:[0-9]{2,5}\\/[a-zA-Z\\.]{1,32}\\}/\n              $x2 = \"Reference Class Name: foo\"\n              $fp1r = /(ldap|rmi|ldaps|dns):\\/[\\/]?(127\\.0\\.0\\.1|192\\.168\\.|172\\.[1-3][0-9]\\.|10\\.)/\n           condition:\n              1 of ($x*) and not 1 of ($fp*)\n        }\n\n        rule SUSP_Base64_Encoded_Exploit_Indicators_Dec21 {\n           meta:\n              description = \"Detects base64 encoded strings found in payloads of exploits against log4j CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/Reelix/status/1469327487243071493\"\n              date = \"2021-12-10\"\n              modified = \"2021-12-13\"\n              score = 70\n           strings:\n              /* curl -s  */\n              $sa1 = \"Y3VybCAtcy\"\n              $sa2 = \"N1cmwgLXMg\"\n              $sa3 = \"jdXJsIC1zI\"\n              /* |wget -q -O-  */\n              $sb1 = \"fHdnZXQgLXEgLU8tI\"\n              $sb2 = \"x3Z2V0IC1xIC1PLS\"\n              $sb3 = \"8d2dldCAtcSAtTy0g\"\n\n              $fp1 = \"\u003chtml\"\n           condition:\n              1 of ($sa*) and 1 of ($sb*)\n              and not 1 of ($fp*)\n        }\n\n        rule SUSP_JDNIExploit_Indicators_Dec21 {\n           meta:\n              description = \"Detects indicators of JDNI usage in log files and other payloads\"\n              author = \"Florian Roth\"\n              reference = \"https://github.com/flypig5211/JNDIExploit\"\n              date = \"2021-12-10\"\n              modified = \"2021-12-12\"\n              score = 70\n           strings:\n              $xr1 = /(ldap|ldaps|rmi|dns|iiop|http|nis|nds|corba):\\/\\/[a-zA-Z0-9\\.]{7,80}:[0-9]{2,5}\\/(Basic\\/Command\\/Base64|Basic\\/ReverseShell|Basic\\/TomcatMemshell|Basic\\/JBossMemshell|Basic\\/WebsphereMemshell|Basic\\/SpringMemshell|Basic\\/Command|Deserialization\\/CommonsCollectionsK|Deserialization\\/CommonsBeanutils|Deserialization\\/Jre8u20\\/TomcatMemshell|Deserialization\\/CVE_2020_2555\\/WeblogicMemshell|TomcatBypass|GroovyBypass|WebsphereBypass)\\//\n           condition:\n              filesize \u003c 100MB and $xr1\n        }\n\n        rule SUSP_EXPL_OBFUSC_Dec21_1{\n           meta:\n              description = \"Detects obfuscation methods used to evade detection in log4j exploitation attempt of CVE-2021-44228\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/testanull/status/1469549425521348609\"\n              date = \"2021-12-11\"\n              score = 60\n           strings:\n              /* ${lower:X} - single character match */\n              $x1 = { 24 7B 6C 6F 77 65 72 3A ?? 7D }\n              /* ${upper:X} - single character match */\n              $x2 = { 24 7B 75 70 70 65 72 3A ?? 7D }\n              /* URL encoded lower - obfuscation in URL */\n              $x3 = \"$%7blower:\"\n              $x4 = \"$%7bupper:\"\n              $x5 = \"%24%7bjndi:\"\n              $x6 = \"$%7Blower:\"\n              $x7 = \"$%7Bupper:\"\n              $x8 = \"%24%7Bjndi:\"\n\n              $fp1 = \"\u003chtml\"\n           condition:\n              1 of ($x*) and not 1 of ($fp*)\n        }\n\n        rule SUSP_JDNIExploit_Error_Indicators_Dec21_1 {\n           meta:\n              description = \"Detects error messages related to JDNI usage in log files that can indicate a Log4Shell / Log4j exploitation\"\n              author = \"Florian Roth\"\n              reference = \"https://twitter.com/marcioalm/status/1470361495405875200?s=20\"\n              date = \"2021-12-10\"\n              modified = \"2021-12-13\"\n              score = 70\n           strings:\n              $x1 = \"FATAL log4j - Message: BadAttributeValueException: \"\n           condition:\n              $x1\n        }\n\nsources:\n  - query: |\n      -- check which Yara to use\n      LET yara = SELECT * FROM if(condition=YaraUrl,\n            then= { SELECT Content FROM http_client( url=YaraUrl, method='GET') },\n            else= if(condition=ShortHandYara,\n                then= { SELECT ShortHandYara as Content FROM scope() },\n                else= { SELECT YaraRule as Content FROM scope() }))\n\n      -- time testing\n      LET time_test(stamp) =\n            if(condition= DateBefore AND DateAfter,\n                then= stamp \u003c DateBefore AND stamp \u003e DateAfter,\n                else=\n            if(condition=DateBefore,\n                then= stamp \u003c DateBefore,\n                else=\n            if(condition= DateAfter,\n                then= stamp \u003e DateAfter,\n                else= True\n            )))\n\n      -- first find all matching glob\n      LET files = SELECT FullPath, Name, Size , Mtime, Atime, Ctime, Btime\n        FROM glob(globs=PathGlob,nosymlink='True')\n        WHERE\n          NOT IsDir AND NOT IsLink\n          AND if(condition=SizeMin,\n            then= SizeMin \u003c Size,\n            else= True)\n          AND if(condition=SizeMax,\n            then=SizeMax \u003e Size,\n            else= True)\n          AND\n             ( time_test(stamp=Mtime)\n            OR time_test(stamp=Atime)\n            OR time_test(stamp=Ctime)\n            OR time_test(stamp=Btime))\n\n      LET hits = SELECT * FROM foreach(row=files,\n            query={\n                SELECT\n                    url(parse=FileName).Path as FullPath,\n                    Size,\n                    Mtime, Atime, Ctime, Btime,\n                    Rule, Tags, Meta,\n                    str(str=String.Data) AS HitContext,\n                    String.Offset AS HitOffset\n                FROM yara(rules=yara.Content[0],files=url(path=FullPath, scheme=\"file\"), accessor='gzip')\n                LIMIT 1\n            })\n\n      -- upload files that have hit\n      LET upload_hits=SELECT *,\n            upload(file=FullPath) AS Upload\n        FROM hits\n\n      -- return rows\n      SELECT * FROM if(condition=UploadHits,\n        then=upload_hits,\n        else=hits)\n","id":78560752944729352,"_ts":1757377140}
{"setter":"api","artifact":"Exchange.Windows.Detection.Malfind","op":"set","definition":"name: Exchange.Windows.Detection.Malfind\nauthor: Matt Green - @mgreen27\ndescription: |\n    This artifact checks the VAD for executable sections that are not maped to disk \n    and has suspicious content which may indicate process injection.\n    \n    User options allow targetting process, modifying suspicious content yara, or \n    upload of suspicious section.\n    \n    Default suspicious content includes headers: MZ, default cobalt strike stomped, \n    or well known suspicious strings, meterpreter and Cobalt Strike.\n    \n    Note: Add additional yara as desired.  \n    Expect some false positives and triage accordingly.  \n    \nparameters:\n  - name: ProcessRegex\n    description: A regex applied to process names.\n    default: .\n    type: regex\n  - name: PidRegex\n    default: .\n    type: regex\n  - name: ProtectionRegex\n    description: |\n        Protection of section. Default is Executable but can customise for other usecases.  \n        Examples: x for executable, r for read, w for write.  \n        (x|r|w) or xrw for multiple.\n        x-w for strict.\n    default: xrw\n    type: regex\n  - name: SectionDataGuiSize\n    description: Size of SectionData to show in gui. For large files, use UploadSection\n    default: 10000\n    type: int\n  - name: SuspiciousContent\n    description: A yara rule of suspicious section content \n    type: yara\n    default: |\n        rule win_cobalt_strike_auto {\n         meta:\n           author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n           date = \"2019-11-26\"\n           version = \"1\"\n           description = \"autogenerated rule brought to you by yara-signator\"\n           tool = \"yara-signator 0.2a\"\n           malpedia_reference = \"https://malpedia.caad.fkie.fraunhofer.de/details/win.cobalt_strike\"\n           malpedia_license = \"CC BY-SA 4.0\"\n           malpedia_sharing = \"TLP:WHITE\"\n\n         strings:\n           $sequence_0 = { 3bc7 750d ff15???????? 3d33270000 }\n           $sequence_1 = { e9???????? eb0a b801000000 e9???????? }\n           $sequence_2 = { 8bd0 e8???????? 85c0 7e0e }\n           $sequence_3 = { ffb5f8f9ffff ff15???????? 8b4dfc 33cd e8???????? c9 c3 }\n           $sequence_4 = { e8???????? e9???????? 833d?????????? 7505 e8???????? }\n           $sequence_5 = { 250000ff00 33d0 8b4db0 c1e908 }\n           $sequence_6 = { ff75f4 ff7610 ff761c ff75fc }\n           $sequence_7 = { 8903 6a06 eb39 33ff 85c0 762b 03f1 }\n           $sequence_8 = { 894dd4 8b458c d1f8 894580 8b45f8 c1e818 0fb6c8 }\n           $sequence_9 = { 890a 8b4508 0fb64804 81e1ff000000 c1e118 8b5508 0fb64205 }\n           $sequence_10 = { 33d2 e8???????? 48b873797374656d3332 4c8bc7 488903 49ffc0 }\n           $sequence_11 = { 488bd1 498d4bd8 498943e0 498943e8 }\n           $sequence_12 = { b904000000 486bc90e 488b542430 4c8b442430 418b0c08 8b0402 }\n           $sequence_13 = { ba80000000 e8???????? 488d4c2438 e8???????? 488d4c2420 8bd0 e8???????? }\n           $sequence_14 = { 488b4c2430 8b0401 89442428 b804000000 486bc004 }\n           $sequence_15 = { 4883c708 4883c304 49ffc3 48ffcd 0f854fffffff 488d4c2420 }\n\n        condition:\n            7 of them\n        }\n\n        rule win_meterpreter_auto {\n            meta:\n                author = \"Felix Bilstein - yara-signator at cocacoding dot com\"\n                date = \"2022-08-05\"\n                version = \"1\"\n                description = \"Detects win.meterpreter.\"\n                info = \"autogenerated rule brought to you by yara-signator\"\n                tool = \"yara-signator v0.6.0\"\n                signator_config = \"callsandjumps;datarefs;binvalue\"\n                malpedia_reference = \"https://malpedia.caad.fkie.fraunhofer.de/details/win.meterpreter\"\n                malpedia_rule_date = \"20220805\"\n                malpedia_hash = \"6ec06c64bcfdbeda64eff021c766b4ce34542b71\"\n                malpedia_version = \"20220808\"\n                malpedia_license = \"CC BY-SA 4.0\"\n                malpedia_sharing = \"TLP:WHITE\"\n\n            strings:\n                $sequence_0 = { e22b e5f6 4f 1c8b }\n                $sequence_1 = { 90 90 90 55 e4ec 53 8b22 }\n                $sequence_2 = { 50 686cd4408e ffd6 8b0d???????? 83c18a }\n                $sequence_3 = { 008b35a8c19f 006860 2f 0000 52 ffd6 }\n                $sequence_4 = { 8b87047945f4 6a01 50 52 c745fc00000000 ff08 98 }\n                $sequence_5 = { 57 40 388bf083c4cf 86f6 }\n                $sequence_6 = { 8932 8b700c 83c204 4e 3bce 74ef ff9a0c8b5c03 }\n                $sequence_7 = { 043b 8801 41 0fc2049088 0135???????? 4f 75b5 }\n                $sequence_8 = { 6c 50 048b 55 1491 48 }\n                $sequence_9 = { 76e1 8bf0 85f6 750e }\n\n            condition:\n                7 of them\n        }\n        rule suspicious {\n            meta:\n                author = \"Matt Green - @mgreen27\"\n                description = \"Suspicious unbacked on disk executable section content\"\n                date = \"2022-09-30\"\n\n            strings:\n                $header1 = \"MZ\"\n                $header2 = { 00 00 41 52 55 48 } // cobalt strike stomped dll\n\n                $body1 = \"This program cannot be run in DOS mode\" \n                $body2 = { FC E8 8? 00 00 00 60 }     // shellcode prologe in metasploit\n\n            condition:\n                $header1 at 0 or $header2\n                    or any of ($body*) \n        }\n        rule shellcode_get_eip\n        {\n            meta:\n                author = \"William Ballenthin\"\n                email = \"william.ballenthin@fireeye.com\"\n                license = \"Apache 2.0\"\n                copyright = \"FireEye, Inc\"\n                description = \"Match x86 that appears to fetch $PC.\"\n\n            strings:\n               $x86 = { e8 00 00 00 00 (58 | 5b | 59 | 5a | 5e | 5f) }\n\n            condition:\n               $x86\n        }\n\n        rule shellcode_peb_parsing\n        {\n            meta:\n                author = \"William Ballenthin\"\n                email = \"william.ballenthin@fireeye.com\"\n                license = \"Apache 2.0\"\n                copyright = \"FireEye, Inc\"\n                description = \"Match x86 that appears to manually traverse the TEB/PEB/LDR data.\"\n\n            strings:\n               $peb_parsing = { (64 a1 30 00 00 00 | 64 8b (1d | 0d | 15 | 35 | 3d) 30 00 00 00 | 31 (c0 | db | c9 | d2 | f6 | ff) [0-8] 64 8b ?? 30 ) [0-8] 8b ?? 0c [0-8] 8b ?? (0c | 14 | 1C) [0-8] 8b ?? (28 | 30) }\n               $peb_parsing64 = { (48 65 A1 60 00 00 00 00 00 00 00 | 65 (48 | 4C) 8B ?? 60 00 00 00 | 65 A1 60 00 00 00 00 00 00 00 | 65 8b ?? ?? 00 FF FF | (48 31 (c0 | db | c9 | d2 | f6 | ff) | 4D 31 (c0 | c9))  [0-16] 65 (48 | 4d | 49 | 4c) 8b ?? 60) [0-16] (48 | 49 | 4C) 8B ?? 18 [0-16] (48 | 49 | 4C) 8B ?? (10 | 20 | 30) [0-16] (48 | 49 | 4C) 8B ?? (50 | 60) }\n\n            condition:\n               $peb_parsing or $peb_parsing64\n        }\n\n        rule shellcode_stack_strings\n        {\n            meta:\n                author = \"William Ballenthin\"\n                email = \"william.ballenthin@fireeye.com\"\n                license = \"Apache 2.0\"\n                copyright = \"FireEye, Inc\"\n                description = \"Match x86 that appears to be stack string creation.\"\n\n            strings:\n                // stack string near the frame pointer.\n                $ss_small_bp = /(\\xC6\\x45.[a-zA-Z0-9 -~]){4,}\\xC6\\x45.\\x00/\n\n                // dword stack string near the frame pointer.\n                $ss_small_bp_dword = /(\\xC7\\x45.[a-zA-Z0-9 -~]\\x00[a-zA-Z0-9 -~]\\x00){2,}\\xC7\\x45..\\x00\\x00\\x00/\n\n                // stack strings further away from the frame pointer.\n                $ss_big_bp = /(\\xC6\\x85.[\\xF0-\\xFF]\\xFF\\xFF[a-zA-Z0-9 -~]){4,}\\xC6\\x85.[\\xF0-\\xFF]\\xFF\\xFF\\x00/\n\n                // stack string near the stack pointer.\n                $ss_small_sp = /(\\xC6\\x44\\x24.[a-zA-Z0-9 -~]){4,}\\xC6\\x44\\x24.\\x00/\n\n                // stack strings further away from the stack pointer.\n                $ss_big_sp = /(\\xC6\\x84\\x24.[\\x00-\\x0F]\\x00\\x00[a-zA-Z0-9 -~]){4,}\\xC6\\x84\\x24.[\\x00-\\x0F]\\x00\\x00\\x00/\n\n            condition:\n                $ss_small_bp or $ss_small_bp_dword or $ss_big_bp or $ss_small_sp or $ss_big_sp\n        }\n\n        rule shellcode_shikataganai_encoding\n        {\n            meta:\n                author    = \"Steven Miller\"\n                company   = \"FireEye\"\n                reference = \"https://www.fireeye.com/blog/threat-research/2019/10/shikata-ga-nai-encoder-still-going-strong.html\"\n            strings:\n                $varInitializeAndXorCondition1_XorEAX = { B8 ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 59 | 5A | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 40 | 41 | 42 | 43 | 45 | 46 | 47 ) ?? }\n                $varInitializeAndXorCondition1_XorEBP = { BD ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 58 | 59 | 5A | 5B | 5C | 5E | 5F ) [0-50] 31 ( 68 | 69 | 6A | 6B | 6D | 6E | 6F ) ?? }\n                $varInitializeAndXorCondition1_XorEBX = { BB ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 58 | 59 | 5A | 5C | 5D | 5E | 5F ) [0-50] 31 ( 58 | 59 | 5A | 5B | 5D | 5E | 5F ) ?? }\n                $varInitializeAndXorCondition1_XorECX = { B9 ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 58 | 5A | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 48 | 49 | 4A | 4B | 4D | 4E | 4F ) ?? }\n                $varInitializeAndXorCondition1_XorEDI = { BF ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 58 | 59 | 5A | 5B | 5C | 5D | 5E ) [0-50] 31 ( 78 | 79 | 7A | 7B | 7D | 7E | 7F ) ?? }\n                $varInitializeAndXorCondition1_XorEDX = { BA ?? ?? ?? ?? [0-30] D9 74 24 F4 [0-10] ( 58 | 59 | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 50 | 51 | 52 | 53 | 55 | 56 | 57 ) ?? }\n                $varInitializeAndXorCondition2_XorEAX = { D9 74 24 F4 [0-30] B8 ?? ?? ?? ?? [0-10] ( 59 | 5A | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 40 | 41 | 42 | 43 | 45 | 46 | 47 ) ?? }\n                $varInitializeAndXorCondition2_XorEBP = { D9 74 24 F4 [0-30] BD ?? ?? ?? ?? [0-10] ( 58 | 59 | 5A | 5B | 5C | 5E | 5F ) [0-50] 31 ( 68 | 69 | 6A | 6B | 6D | 6E | 6F ) ?? }\n                $varInitializeAndXorCondition2_XorEBX = { D9 74 24 F4 [0-30] BB ?? ?? ?? ?? [0-10] ( 58 | 59 | 5A | 5C | 5D | 5E | 5F ) [0-50] 31 ( 58 | 59 | 5A | 5B | 5D | 5E | 5F ) ?? }\n                $varInitializeAndXorCondition2_XorECX = { D9 74 24 F4 [0-30] B9 ?? ?? ?? ?? [0-10] ( 58 | 5A | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 48 | 49 | 4A | 4B | 4D | 4E | 4F ) ?? }\n                $varInitializeAndXorCondition2_XorEDI = { D9 74 24 F4 [0-30] BF ?? ?? ?? ?? [0-10] ( 58 | 59 | 5A | 5B | 5C | 5D | 5E ) [0-50] 31 ( 78 | 79 | 7A | 7B | 7D | 7E | 7F ) ?? }\n                $varInitializeAndXorCondition2_XorEDX = { D9 74 24 F4 [0-30] BA ?? ?? ?? ?? [0-10] ( 58 | 59 | 5B | 5C | 5D | 5E | 5F ) [0-50] 31 ( 50 | 51 | 52 | 53 | 55 | 56 | 57 ) ?? }\n            condition:\n                any of them\n        }\n        \n  - name: NumberOfHits\n    description: THis artifact will stop by default at one hit. This setting allows additional hits\n    default: 1\n    type: int\n  - name: ContextBytes\n    description: Include this amount of bytes around hit as context.\n    default: 0\n    type: int\n  - name: UploadSection\n    description: Upload suspicious section.\n    type: bool\n\n\nsources:\n  - query: |\n      LET processes = SELECT Pid, Name,Exe,CommandLine,CreateTime\n        FROM pslist()\n        WHERE Name =~ ProcessRegex\n            AND format(format=\"%d\", args=Pid) =~ PidRegex\n            AND log(message=\"Scanning pid %v : %v\", args=[Pid, Name])\n\n      LET hits = SELECT * FROM foreach(\n          row=processes,\n          query={\n            SELECT CreateTime,Pid, Name,\n                format(format='%x-%x', args=[Address, Address+Size]) AS AddressRange,\n                Protection, Address as _Address,\n                Size as SectionSize,\n                pathspec(\n                    DelegateAccessor=\"process\",\n                    DelegatePath=Pid,\n                    Path=Address) AS _PathSpec\n            FROM vad(pid=Pid)\n            WHERE NOT MappingName\n                AND Protection =~ ProtectionRegex\n          })\n          \n      LET results \u003c= SELECT *,\n            format(format='% x',args=read_file(\n                     accessor='offset',\n                     filename=_PathSpec,\n                     length=2)) as HexHeader,\n            magic(path=_PathSpec, accessor='offset') as DataMagic,\n            base64encode(string=read_file(\n                     accessor='offset',\n                     filename=_PathSpec,\n                     length= if(condition= SectionDataGuiSize \u003e SectionSize,\n                                then= SectionSize,\n                                else= SectionDataGuiSize)\n                        )) as SectionData,\n            YaraHit, _PathSpec\n        FROM foreach(row=hits,\n            query={\n                SELECT\n                    CreateTime,Pid, Name,_Address, AddressRange,Protection,SectionSize,\n                    enumerate(items=dict(\n                        Rule=Rule,\n                        Meta=Meta,\n                    \tTags=Tags,\n                    \tString=String)) as YaraHit,\n                    _PathSpec\n                FROM yara(\n                            accessor='offset',\n                            files=_PathSpec, \n                            rules=SuspiciousContent,\n                            end=SectionSize,  key='X', \n                            number=NumberOfHits,\n                            context=ContextBytes\n                        )\n                GROUP BY CreateTime,Pid, Name, AddressRange\n            })\n        \n        \n      LET upload_section = SELECT *,\n                upload(accessor='sparse', \n                  file=pathspec(\n                    DelegateAccessor=\"process\",\n                    DelegatePath=Pid,\n                    Path=[dict(Offset=_Address, Length=SectionSize),]), \n                    name=format(format='%v-%v_%v.bin',args= [ Name, Pid, AddressRange ])\n                    ) as SectionDump\n            FROM results\n            GROUP BY CreateTime,Pid, Name,_Address, AddressRange\n      \n      SELECT *,\n        process_tracker_callchain(id=Pid).Data as ProcessChain\n      FROM if(condition= UploadSection,\n                then= upload_section,\n                else= results)\n        \ncolumn_types:\n  - name: SectionData\n    type: base64hex\n","id":78560752944729352,"_ts":1757377141}
{"setter":"api","artifact":"Exchange.Linux.Sys.Modinfo","op":"set","definition":"name: Exchange.Linux.Sys.Modinfo\nauthor: Matt Green - @mgreen27\ndescription: |\n    Collects detailed metadata about Linux kernel modules using modinfo. Useful for \n    malicious kernel module hunting.\n\n    - Live mode (default) - Parses /proc/modules, then runs modinfo \u003cname\u003e for each loaded\n    module. Default search is /lib/modules/$(uname -r)/**/\u003cname\u003e.ko\n    - Disk mode - If ModuleTargetGlob is supplied, skips live\n    enumeration and instead uses glob, running modinfo \u003cpath\u003e for every matching glob hit. \n    \n    Both modes use ModuleNameRegex to filter by name.\nparameters:\n  - name: ModuleNameRegex\n    default: .\n  - name: ModuleTargetGlob\n    description: Glob to target. If set will bypass live analysis and use glob instead.\n    \nrequired_permissions:\n  - EXECVE\n  \nsources:\n  - precondition: |\n       SELECT OS\n       FROM info()\n       WHERE OS = 'linux'\n\n    query: |\n       LET proc_mod = SELECT Name,\n                             dict(Source='/proc/mod',\n                                  Name=Name,\n                                  Size=Size,\n                                  UseCount=UseCount,\n                                  UsedBy=UsedBy,\n                                  Status=Status,\n                                  Address=Address) AS SourceInfo\n         FROM Artifact.Linux.Proc.Modules()\n         WHERE Name =~ ModuleNameRegex\n       \n       LET target_glob = SELECT OSPath AS Name,\n                                dict(Source='glob',\n                                     OSPath=OSPath,\n                                     Size=Size,\n                                     Mtime=Mtime,\n                                     Magic=magic(path=OSPath)) AS SourceInfo\n         FROM glob(globs=ModuleTargetGlob)\n       \n       SELECT\n           SourceInfo,\n           if(condition=Extracted.filename, then=Extracted.filename, else=Stderr) AS Filename,\n           if(\n             condition=Extracted.name,\n             then=Extracted.name,\n             else=SourceInfo.Name) AS Name,\n           Extracted.alias AS Alias,\n           Extracted.license AS License,\n           Extracted.description AS Description,\n           Extracted.author AS Author,\n           Extracted.srcversion AS SrcVersion,\n           Extracted.depends AS Depends,\n           Extracted.retpoline AS Retpoline,\n           Extracted.intree AS Intree,\n           Extracted.vermagic AS Vermagic,\n           if(\n             condition=Extracted.filename\n              and (Extracted.signature OR Extracted.sig_key),\n             then=dict(\n               Id=Extracted.sig_id,\n               Signer=Extracted.signer,\n               Key=Extracted.sig_key,\n               Hashalgo=Extracted.sig_hashalgo,\n               Signature=Extracted.signature),\n             else='') AS Signature\n       FROM foreach(\n         row=if(\n           condition=ModuleTargetGlob,\n           then=target_glob,\n           else=proc_mod),\n         query={\n           SELECT\n           SourceInfo,\n           parse_string_with_regex(\n             string=Stdout,\n             regex=[\n                '''filename:\\s+(?P\u003cfilename\u003e[^\\n]*)\\n''', \n                '''alias:\\s+(?P\u003calias\u003e[^\\n]*)\\n''', \n                '''license:\\s+(?P\u003clicense\u003e[^\\n]*)\\n''', \n                '''description:\\s+(?P\u003cdescription\u003e[^\\n]*)\\n''', \n                '''author:\\s+(?P\u003cauthor\u003e[^\\n]*)\\n''', \n                '''srcversion:\\s+(?P\u003csrcversion\u003e[^\\n]*)\\n''', \n                '''depends:\\s+(?P\u003cdepends\u003e[^\\n]*)\\n''', \n                '''retpoline:\\s+(?P\u003cretpoline\u003e[^\\n]*)\\n''', \n                '''intree:\\s+(?P\u003cintree\u003e[^\\n]*)\\n''', \n                '''name:\\s+(?P\u003cname\u003e[^\\n]*)\\n''', \n                '''vermagic:\\s+(?P\u003cvermagic\u003e[^\\n]*)\\n''', \n                '''sig_id:\\s+(?P\u003csig_id\u003e[^\\n]*)\\n''', \n                '''signer:\\s+(?P\u003csigner\u003e[^\\n]*)\\n''', \n                '''sig_key:\\s+(?P\u003csig_key\u003e[A-Z0-9:\\s]*)\\n[^\\t]''', \n                '''sig_hashalgo:\\s+(?P\u003csig_hashalgo\u003e[^\\n]*)\\n''',\n                '''signature:\\s+(?P\u003csignature\u003e[A-Z0-9:\\n\\t]*)\\n([a-z]|$)'''\n                    ]) AS Extracted,\n           Stderr\n           FROM execve(\n             argv=[\"modinfo\", Name])\n         })\n       WHERE Name =~ ModuleNameRegex\n","id":78560752944729352,"_ts":1757377141}
