
name: Windows.Registry.Hunter
description: |
   This artifact parses and categorizes information for the registry.

   Build time: 2025-06-05T14:37:55Z

   Read more about this artifact here https://github.com/Velocidex/registry_hunter

   ## RemappingStrategy

   In order to present a unified view of all registry hives we remap various
   hives we remap various hives into the "registry" accessor. There are a
   number of strategies implemented for this:

   1. API - This strategy uses the API for the majority of hives including
      user hives. Therefore users who are not currently logged in will not
      have their NTUser.dat hives mounted.
   2. API And NTUser.dat - This strategy uses the API for most of the hives,
      except for all the raw user hives will be mapped in HKEY_USERS.
      Therefore all users will be visible.
   3. Raw Hives - This stragegy is most suitable for working off an image or
       acquired hive files. All raw hives will be mapped (include SYSTEM, SOFTWARE etc).

   Using the API will result in faster collection times, but may be some
   differences:

   * Some registry keys are blocked with API access, even for the system
     user - so we get permission denied for these. Therefore, even with the API
     stragegy above we remap the raw files into the "raw_registry" accessor.
     The rule may work around this by using this accessor directly.
   * Some hive files are not accessible and can only be accessible using the
     API (e.g. the BCD hives).

parameters:
- name: Categories
  type: multichoice
  default: |
   ["ASEP","ASEP Classes","Antivirus","Autoruns","Cloud Storage","Devices","Event Logs","Executables","Installed Software","Microsoft Exchange","Microsoft Office","Network Shares","Program Execution","Services","System Info","Third Party Applications","Threat Hunting","User Accounts","User Activity","Volume Shadow Copies","Web Browsers"]
  choices:
    - "ASEP"
    - "ASEP Classes"
    - "Antivirus"
    - "Autoruns"
    - "Cloud Storage"
    - "Devices"
    - "Event Logs"
    - "Executables"
    - "Installed Software"
    - "Microsoft Exchange"
    - "Microsoft Office"
    - "Network Shares"
    - "Program Execution"
    - "Services"
    - "System Info"
    - "Third Party Applications"
    - "Threat Hunting"
    - "User Accounts"
    - "User Activity"
    - "Volume Shadow Copies"
    - "Web Browsers"
- name: CategoryFilter
  description: If this is set we use the regular expression instead of the choices above.
  type: regex
- name: CategoryExcludedFilter
  description: Exclude any categories based on this regular expression
  type: regex
  default: XXXXXX
- name: DescriptionFilter
  type: regex
  default: .
- name: RootFilter
  type: regex
  default: .
- name: RemappingStrategy
  description: |
     In order to present a unified view of all registry hives we remap various hives
     into the "registry" accessor. This setting controls the strategy we use to do so.
     See more information in the artifact description.
  type: choices
  default: "API And NTUser.dat"
  choices:
   - API
   - API And NTUser.dat
   - Raw Hives

- name: RootDrive
  default: C:/
  description: |
     Path to the top level drive. If one of the PathTO* parameters are not
     specified, then we use this to figure out the usual paths to the hives.

- name: AlsoUploadHives
  type: bool
  description: If checked, we also upload all the hives.

- name: PathTOSAM
  description: "By default, hive is at C:/Windows/System32/Config/SAM"

- name: PathTOAmcache
  description: "By default, hive is at C:/Windows/appcompat/Programs/Amcache.hve"

- name: PathTOSecurity
  description: "By default, hive is at C:/Windows/System32/Config/SECURITY"

- name: PathTOSystem
  description: "By default, hive is at C:/Windows/System32/Config/SYSTEM"

- name: PathTOSoftware
  description: "By default, hive is at C:/Windows/System32/Config/SOFTWARE"

- name: PathTOUsers
  description: "By default, directory is at C:/Users"

- name: NTFS_CACHE_TIME
  type: int
  description: How often to flush the NTFS cache. (Default is never).
  default: "1000000"

- name: DEBUG
  type: bool
  description: Add more logging.

export: |
    LET _info <= SELECT * FROM info()

    -- On Non Windows systems we need to use case insensitive accessor or we might not find the right hives.
    LET DefaultAccessor <= if(condition=_info[0].OS =~ "windows", then="ntfs", else="file_nocase")
    LET HKLM <= pathspec(parse="HKEY_LOCAL_MACHINE", path_type="registry")
    LET RootDrive <= pathspec(Path=RootDrive)
    LET PathTOSAM <= PathTOSAM || RootDrive + "Windows/System32/config/SAM"
    LET PathTOAmcache <= PathTOAmcache || RootDrive + "Windows/appcompat/Programs/Amcache.hve"
    LET PathTOSystem <= PathTOSystem || RootDrive + "Windows/System32/Config/System"
    LET PathTOSecurity <= PathTOSecurity || RootDrive + "Windows/System32/Config/Security"
    LET PathTOSoftware <= PathTOSoftware || RootDrive + "Windows/System32/Config/Software"
    LET PathTOUsers <= PathTOUsers || RootDrive + "Users/"

    -- HivePath: The path to the hive on disk
    -- RegistryPath: The path in the registry to mount the hive
    -- RegMountPoint: The path inside the hive to mount (usually /)
    LET _map_file_to_reg_path(HivePath, RegistryPath, RegMountPoint, Accessor, Description) = dict(
       type="mount", description=Description,
       `from`=dict(accessor='raw_reg',
                   prefix=pathspec(
                      Path=RegMountPoint,
                      DelegateAccessor=Accessor,
                      DelegatePath=HivePath),
                   path_type='registry'),
        `on`=dict(accessor='registry',
                  prefix=RegistryPath,
                  path_type='registry'))

    LET _standard_mappings = (
       _map_file_to_reg_path(
          HivePath=PathTOSystem,
          RegistryPath="HKEY_LOCAL_MACHINE\\System\\CurrentControlSet",
          RegMountPoint="/ControlSet001",
          Accessor=DefaultAccessor,
          Description="Map SYSTEM Hive to CurrentControlSet"),
       _map_file_to_reg_path(
          HivePath=PathTOSoftware,
          RegistryPath="HKEY_LOCAL_MACHINE\\Software",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map Software hive to HKEY_LOCAL_MACHINE"),
       _map_file_to_reg_path(
          HivePath=PathTOSystem,
          RegistryPath="HKEY_LOCAL_MACHINE\\System",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map System hive to HKEY_LOCAL_MACHINE"),
       _map_file_to_reg_path(
          HivePath=PathTOSecurity,
          RegistryPath="HKEY_LOCAL_MACHINE\\Security",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map SECURITY Hive to HKEY_LOCAL_MACHINE"),
    )

    // Map raw hives for hives that are not normally accessible via API
    LET _unmounted_hive_mapping = (
      _map_file_to_reg_path(
          HivePath=PathTOSAM,
          RegistryPath="SAM",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map SAM to /SAM/"),
      _map_file_to_reg_path(
          HivePath=PathTOAmcache,
          RegistryPath="Amcache",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map Amcache to /Amcache/"),
    )

    LET _api_remapping <= (
        -- By default remap the entire "registry" accessor for API access.
        dict(type="mount",
          `from`=dict(accessor="registry", prefix='/', path_type='registry'),
          on=dict(accessor="registry", prefix='/', path_type="registry")),

       -- Always remap raw Security because the API stops us from reading the keys.
       _map_file_to_reg_path(
          HivePath=PathTOSecurity,
          RegistryPath="HKEY_LOCAL_MACHINE\\Security",
          RegMountPoint="/",
          Accessor=DefaultAccessor,
          Description="Map SECURITY Hive to HKEY_LOCAL_MACHINE"),
    )

    -- In API mode we sometimes can not access the keys due to permissions.
    -- These mapping ensure rules can specifically access the raw hives if they
    -- need to.
    LET _raw_hive_mapping_for_api <= (
      dict(type="mount",
        description="Map System Hive to raw_registry accessor",
        `from`=dict(accessor="raw_reg",
         prefix=pathspec(Path='/',
           DelegatePath=PathTOSystem,
           DelegateAccessor=DefaultAccessor),
         path_type='registry'),
       on=dict(accessor="raw_registry",
               prefix='/HKEY_LOCAL_MACHINE/System',
               path_type="registry")),
      dict(type="mount",
        description="Map Software Hive to raw_registry accessor",
        `from`=dict(accessor="raw_reg",
         prefix=pathspec(Path='/',
           DelegatePath=PathTOSoftware,
           DelegateAccessor=DefaultAccessor),
         path_type='registry'),
       on=dict(accessor="raw_registry",
               prefix='/HKEY_LOCAL_MACHINE/Software',
               path_type="registry")),
    )

    // The BCD hive is normally located on an unmounted drive so we
    // always map it with the API.
    LET _bcd_map <= (dict(
       type="mount",
       `from`=dict(accessor="registry", prefix='HKEY_LOCAL_MACHINE\\BCD00000000', path_type='registry'),
       on=dict(accessor="registry", prefix='HKEY_LOCAL_MACHINE\\BCD00000000', path_type="registry")))

    -- Map all the NTUser.dat files even in API mode because these are often not mounted.
    LET _map_ntuser = SELECT
    _map_file_to_reg_path(
      HivePath=OSPath,
      RegMountPoint="/",
      Accessor=DefaultAccessor,
      Description=format(format="Map NTUser.dat from User %v to HKEY_USERS",
                         args=OSPath[-2]),

      -- This is technically the SID but it is clearer to just use the username
      RegistryPath="HKEY_USERS\\" + OSPath[-2]) AS Mapping
    FROM glob(globs="*/NTUser.dat", root=PathTOUsers)

    LET _log_array(Message) = if(condition=log(message=Message), then=[])

    // Apply the mappings:
    LET RemapRules = if(condition=RemappingStrategy = "API",
       then=_api_remapping +
            _unmounted_hive_mapping +
            _raw_hive_mapping_for_api + _log_array(Message="Using API Mapping"),

    else=if(condition=RemappingStrategy = "API And NTUser.dat",
       then=_api_remapping +
            _map_ntuser.Mapping +
            _unmounted_hive_mapping +
            _raw_hive_mapping_for_api  +
            _log_array(Message="Using API And NTUser.dat Mapping"),

    else=_map_ntuser.Mapping +
         _unmounted_hive_mapping +
         _standard_mappings +
         _raw_hive_mapping_for_api +
         _log_array(Message="Using Raw Hives Mapping")))

    LET AppCompatFlagsPrograms(OSPath) = SELECT OSPath.Basename AS Program
       FROM glob(globs='Compatibility Assistant/{Store,Persisted}/*',
                 accessor="registry", root=OSPath)
    
    LET AppCompatCacheParser <= '''[
    ["HeaderWin10", "x=>x.HeaderSize", [
      ["HeaderSize", 0, "unsigned int"],
      ["Entries", "x=>x.HeaderSize", Array, {
          type: "Entry",
          sentinel: "x=>x.Size = 0",
          count: 10000,
          max_count: 10000,
      }]
    ]],
    ["HeaderWin8", 128, [
      ["Entries", 128, Array, {
          type: "EntryWin8",
          sentinel: "x=>x.EntrySize = 0",
          count: 10000,
          max_count: 10000,
      }]
    ]],
    
    ["EntryWin8", "x=>x.EntrySize + 12", [
      ["Signature", 0, "String", {
         length: 4,
      }],
      ["EntrySize", 8, "unsigned int"],
      ["PathSize", 12, "uint16"],
      ["Path", 14, "String", {
          length: "x=>x.PathSize",
          encoding: "utf16",
      }],
      ["LastMod", "x=>x.PathSize + 14 + 10", "WinFileTime"]
    ]],
    
    ["Entry", "x=>x.Size + 12", [
      ["Signature", 0, "String", {
         length: 4,
      }],
      ["Size", 8, "unsigned int"],
      ["PathSize", 12, "uint16"],
      ["Path", 14, "String", {
          length: "x=>x.PathSize",
          encoding: "utf16",
      }],
      ["LastMod", "x=>x.PathSize + 14", "WinFileTime"],
      ["DataSize", "x=>x.PathSize + 14 + 8", "uint32"],
      ["Data", "x=>x.PathSize + 14 + 8 + 4" , "String", {
          length: "x=>x.DataSize",
      }],
    
      # The last byte of the Data block is 1 for execution
      ["Execution", "x=>x.PathSize + 14 + 8 + 4 + x.DataSize - 4", "uint32"]
    ]],
    
    # This is the Win7 parser but we dont use it right now.
    ["HeaderWin7x64", 128, [
      ["Signature", 0, "uint32"],
      ["Entries", 128, "Array", {
          count: 10000,
          sentinel: "x=>x.PathSize = 0",
          type: EntryWin7x64,
      }]
    ]],
    ["EntryWin7x64", 48, [
      ["PathSize", 0, "uint16"],
      ["PathOffset", 8, "uint32"],
      ["Path", "x=>x.PathOffset - x.StartOf", "String", {
          encoding: "utf16",
          length: "x=>x.PathSize",
      }],
      ["LastMod", 16, "WinFileTime"]
    ]]
    
    ]'''
    
    LET AppCompatCacheWin10(Blob) = parse_binary(
        accessor="data",
        filename=Blob,
        profile=AppCompatCacheParser,
        struct="HeaderWin10")
    
    LET AppCompatCacheWin8(Blob) = parse_binary(
        accessor="data",
        filename=Blob,
        profile=AppCompatCacheParser,
        struct="HeaderWin8")
    
    LET AppCompatCache(Blob) = SELECT *
    FROM foreach(
      row=if(
        condition=AppCompatCacheWin10(Blob=Blob).HeaderSize IN (52, 48),
        then=AppCompatCacheWin10(Blob=Blob).Entries,
        else=AppCompatCacheWin8(Blob=Blob).Entries))
    
    LET FetchKeyValues(OSPath) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
    })
    
    LET GetDateFrom128Bit(x) = parse_binary(accessor="data",
      filename=x, profile='''
      [["X", 0, [
         ["year", 0, "uint16"],
         ["month", 2, "uint16"],
         ["day", 6, "uint16"],
         ["hour", 8, "uint16"],
         ["minute", 10, "uint16"],
         ["seconds", 12, "uint16"],
         ["Date", 0, "Value", {
            value: "x=>format(format='%04d-%02d-%02dT%02d:%02d:%02d', args=[x.year, x.month, x.day, x.hour, x.minute, x.seconds])"
          }]
      ]]]
      ''', struct="X").Date
    
    LET ExtractValueFromComment(x) = parse_string_with_regex(
      string=x.Metadata.Comment, regex=format(format="%v [=-] ([^,]+)", args=x.Data)).g1
    
    -- Map from binary integer to a winfiletime - handle both binary encoding and integers
    LET FILETIME(t) = if(condition=format(format="%T", args=[t,]) =~ "\\[\\]uint8",
       then=timestamp(winfiletime=parse_binary(accessor="data", filename=t, struct="uint64") || 0),
       else=timestamp(winfiletime=t || 0))
    
    -- Map from binary integer to a winfiletime - handle both binary encoding and integers
    LET IP(t) = if(condition=format(format="%T", args=[t,]) =~ "\\[\\]uint8",
       then=ip(netaddr4_le=parse_binary(accessor="data", filename=t, struct="uint32be") || 0),
       else=ip(netaddr4_le=t || 0))
    
    LET GetRawValue(OSPath) = stat(filename=OSPath, accessor="raw_registry").Data.value
    
    LET GetProviderDllForGUID(GUID) = GetValue(
        OSPath="HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\" + GUID + "\\InProcServer32\\@")
    
    LET _CharToString(X) = SELECT
      format(format="%c", args=_value) AS C FROM foreach(row=X)
    
    LET CharsToString(X) = join(array=_CharToString(X=X).C)
    LET _ParseFirewallRule(X) = to_dict(item={
       SELECT split(string=_value, sep_string="=")[0] AS _key,
              split(string=_value, sep_string="=")[1] AS _value
       FROM foreach(row=split(string=X, sep_string='|'))
       WHERE NOT _key =~ "^v"
    })
    
    LET ParseFirewallRule(X) = _ParseFirewallRule(X=X) +
       dict(Protocol=ProtocolLookup(X=_ParseFirewallRule(X=X).Protocol))
    
    LET MRUProfile <= '''
    [["Header", 0, [
       ["Array", 0, "Array", {
          "count": 500,
          "sentinel": "x=>NOT x",
          "type": "int32"
        }]
    ]]]
    '''
    
    LET CalculateMRUEx(OSPath) = SELECT split(string=utf16(string=GetValue(OSPath=OSPath + str(str=_value))), sep='\x00')[0] AS value
    FROM foreach(row=parse_binary(
           profile=MRUProfile,
           accessor="data",
           filename=GetValue(OSPath=OSPath + "MRUListEx") || "",
           struct="Header").Array)
    WHERE _value > 0
    
    LET _BAMPrograms(Root) = SELECT OSPath.Basename AS Program,
      timestamp(winfiletime=parse_binary(accessor="data",
          filename=Data.value, struct="uint64")) AS Timestamp
    FROM glob(accessor="registry", globs="*", root=Root)
    WHERE NOT Program =~ "^(Version|Sequence)"
    
    LET userAssistProfile = '''
      [
        ["Header", 0, [
          ["NumberOfExecutions", 4, "uint32"],
          ["LastExecution", 60, "WinFileTime", {"type":"uint64"}]
        ]]
      ]
    '''
    
    LET _ExtractUserAssist(Data) = parse_binary(accessor="data",
                      filename=Data,
                      profile=userAssistProfile, struct="Header")
    
    LET _RADAR(OSPath) = SELECT OSPath.Basename AS Program,
       timestamp(winfiletime=GetValue(OSPath=OSPath + "LastDetectionTime")) AS LastDetectionTime
    FROM glob(accessor="registry", globs='*', root=OSPath)
    
    LET _RecentFileList(OSPath) = SELECT Data.value AS F
    FROM glob(accessor="registry", globs='*', root=OSPath)
    WHERE OSPath.Basename =~ "File"
    
    LET _FeatureUsage(OSPath) = SELECT OSPath.Basename AS Application,
        Data.value AS Number
    FROM glob(accessor="registry", globs='*', root=OSPath)
    
    LET RDPMRU(OSPath) = SELECT Data.value AS Server
    FROM glob(accessor="registry", globs='*', root=OSPath + "Default")
    WHERE OSPath.Basename =~ "MRU"
    
    LET _ParseActions(Data)  = parse_binary(accessor="data",
                filename=Data, struct="Header",
                profile='''
    [["Header", 0, [
     ["__Ver", 0, "uint16"],
     ["__UserLen", 2, "uint32"],
     ["User", 6, "String", {length: "x=>x.__UserLen", encoding: "utf16"}],
     ["__ActionType", "x=>6 + x.__UserLen", "uint16"],
     ["ActionType", "x=>6 + x.__UserLen", "Enumeration", {
        type: "uint32",
        choices: {
          "26214": "BinaryAction",
          "30583": "ComHanlder",
          "34952": "Email",
          "39321": "MessageBox",
        }
     }],
     ["Action", "x=>6 + x.__UserLen + 2", "Union", {
       selector: "x=>x.__ActionType",
       choices: {
         "26214": BinaryAction,
         "30583": ComHandler,
       }
     }],
    ]],
    ["ComHandler", 0, [
     ["ClassID", 4, "GUID"],
     ["__DataLen", 20, uint32],
     ["Data", 24, "String", {
       "length": "x=>x.__DataLen",
       "encoding": "utf16",
     }]
    ]],
    ["GUID", 16, [
     ["__D1", 0, "uint32"],
     ["__D2", 4, "uint16"],
     ["__D3", 6, "uint16"],
     ["__D4", 8, "String", {"term": "", "length": 2}],
     ["__D5", 10, "String", {"term": "", "length": 6}],
     ["Value", 0, "Value", {
        "value": "x=>format(format='{%08x-%04x-%04x-%02x-%02x}', args=[x.__D1, x.__D2, x.__D3, x.__D4, x.__D5])"
    }]
    ]],
    ["BinaryAction", 0, [
     ["__BinLen", 4, "uint32"],
     ["Binary", 8, "String", {length: "x=>x.__BinLen", encoding: "utf16"}],
    ]]]
    ''')
    
    LET _ParseDynamicInfo(Data) = parse_binary(accessor="data",
                filename=Data, struct="Header",
                profile='''
    [["Header", 0, [
     ["__Ver", 0, "uint16"],
     ["Created", 4, "WinFileTime", {"type": "uint64"}],
     ["LastStart", 12, "WinFileTime", {"type": "uint64"}],
     ["LastStop", 20, "WinFileTime", {"type": "uint64"}],
     ["TaskState", 28, "uint32"],
     ["LastErrorCode", 32, "uint32"],
     ["LastSuccessfulRun", 36, "WinFileTime", {"type": "uint64"}],
    ]]]
    ''')
    
    LET _TaskCache(OSPath) = SELECT to_dict(item={
      SELECT OSPath.Basename AS _key,
        if(condition= OSPath.Basename =~ "DynamicInfo",
           then=_ParseDynamicInfo(Data=Data.value),
        else= if(condition= OSPath.Basename =~ "Actions",
           then=_ParseActions(Data=Data.value),
        else=Data.value)) AS _value
      FROM glob(accessor="registry", globs='*', root=OSPath)
    }) + dict(OSPath=OSPath) AS Details
    FROM glob(accessor="registry", globs='*', root=OSPath)
    
    LET _ServiceTypeLookup <= dict(`1`="KernelDriver", `2`="FileSystemDriver", `4`="Adapter", `8`="RecognizerDriver", `16`="Win32OwnProcess", `32`="Win32ShareProcess", `256`="InteractiveProcess", `96`="Win32ShareProcess")
    LET _ServiceStartModeLookup <= dict(`0`="Boot", `1`="System", `2`="Automatic", `3`="Manual", `4`="Disabled")
    
    LET _ServicesInfo(OSPath) =
        FetchKeyValuesWithRegex(OSPath=OSPath, Regex="Description|DisplayName|ServiceDll|Group|ImagePath|RequiredPrivileges|Type|Parameters|SERVICEDLL") +
        dict(Mtime=Mtime, Service=OSPath.Basename,
             TypeName=get(item=_ServiceTypeLookup, field=str(str=GetValue(OSPath=OSPath + "Type"))),
             StartName=get(item=_ServiceStartModeLookup, field=str(str=GetValue(OSPath=OSPath + "Start")))
        )
    
    LET FetchKeyValuesWithRegex(OSPath, Regex) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
      WHERE Name =~ Regex
    })
    
    LET _ProtocolLookup <= dict(`6`="TCP", `17`="UDP")
    LET ProtocolLookup(X) = get(item=_ProtocolLookup, field=X) || X
    
    LET GetValue(OSPath) = stat(filename=OSPath, accessor="registry").Data.value
    
    LET CalculateMRU(OSPath) = SELECT GetValue(OSPath=OSPath + g1) AS value
        FROM parse_records_with_regex(accessor="data",
        file=GetValue(OSPath=OSPath + "MRUList") || "", regex="(.)")
    
    LET ResolveSID(SID) = pathspec(parse=stat(accessor="registry",
        filename="HKEY_LOCAL_MACHINE/Software/Microsoft/Windows NT/CurrentVersion/ProfileList/" + SID + "/ProfileImagePath").Data.value).Basename
    
    LET FormatMAC(x) = parse_binary(accessor="data",
      filename=x, profile='''
      [["X", 0, [
        ["x0", 0, "uint8"],
        ["x1", 1, "uint8"],
        ["x2", 2, "uint8"],
        ["x3", 3, "uint8"],
        ["x4", 4, "uint8"],
        ["x5", 5, "uint8"],
        ["mac", 0, Value, {"value": "x=>format(format='%02x:%02x:%02x:%02x:%02x:%02x', args=[x.x0, x.x1, x.x2, x.x3, x.x4, x.x5])"}]
      ]]]
      ''', struct="X").mac
    
    

    -- This contains the queries for Full Query Rules - they skip the glob and just run arbitrary VQL.
    LET FullQueries <= parse_json_array(data=gunzip(string=base64decode(string="H4sIAAAAAAAA/6RV227jNhD9lQFffIFqBC36YkAPiizX2/iSWsoGxXJhUNLYIipxXHKcxNjk3wvKuTiGtxtg/UDPiLc5Z84Mv3wTI3SF1VvWZMRQRNttTM1WcayKCocQXUWQVrpp3QBKxQq0AzL1Hu6tZkYDTMCVdnCn6h2CYrCYEzHke7jXpqYNmQE+oAhErBg3ZPdiKK4tbaxqIHnAYtdeHog/asrFUIhALIn4YP21w3b9NMnAzzuQu4uL34oQOp3O5Cr5ezVdxNF0NYviyad5ImW6d4yNlDEZtlSnyBcX/VdXyhSd02RgpozaoJXyPeRTv9PpSJMm0yTOoA/j5WIGa7Koiqpr6T78Jg3A8/QivVZcBTBj3WAA85vpFKIUVkt1P1Ksjr7MkJWn0m9uj9zUlHdVUaBzZEMpLG60Y7uXImjnXNhi70nzFMC/npJ3Nx/lMIAXkoOTgPz651+pC+76ufCwYKocz6gMn/97PsgRstK1ew3xGPV7irqXNeWhRVWu1rrGrh+MajB8uf8ssF7Po+lJI56CUxUui5rMiWCyyqJimOwMa7MRgYh2XJEVQ3G5c4z2Uj0w2t/9JmoaNF4/twglMhYMOXEFXCEUZNZ6Az5GUKaEl4BAWdZrVbCDtaUGXiGOa7VxPxDne30UldKmq34iQ21+brY1qRLLcNcap7T2Asj2WwyliA+QxrpGKc7mrpXXQUdSxEMppbxxaJ03+n6ItlsvUW8uSTXabLxp2zS8WQNPnhQHFeY/i6/V32HB4FK5FlsAPozQD4O2nXwfzvlqORI5ALxAbvvETZos01fE6WKc3UbLxNszXVhytGbv3GpT0r2Deea9eGctGv6M1jeNZ6qOhNGuaV2d61rzHiLntGNl2sNSJtsS2D8w2D+wd171I+I5csrK8m47IfrHfbQC4spqB3+SQQe/QHz9aZnBI4xVPlaYwyNEhslogssaXaEVdLMKs2qmTEk9eIS8KUq0F7++q52sQhjMkwxG06mDWjvGErRpi2i0yOZJtkqzaJndXK8mi8VVCmjutCXjt0tzp6xWua8xi3DQMWjDdDhya8knD137Wng8DQ7kj56Akzb7JhKvkc/ekOZU7l+k+fA78b+vRHKETp7D3+l0grfLnsXW/9jGr9/rkdLcTpJl8oJOPH39LwAA//8bto8RsgcAAA==")))

    LET AllFullQueries <=
        SELECT * FROM FullQueries
        WHERE Category =~ CategoryFilter
          AND Description =~ DescriptionFilter

    -- This contains the metadata for Glob rules.
    LET _MD <= parse_json_array(data=gunzip(string=base64decode(string="")))
    LET MD(DescriptionFilter, RootFilter, CategoryFilter, CategoryExcludedFilter) =
     SELECT Glob, Category, Description,
            get(field="Details") AS Details,
            get(field="Comment") AS Comment,
            get(field="Filter") AS Filter, Root
     FROM _MD
     WHERE Description =~ DescriptionFilter
       AND Root =~ RootFilter
       AND Category =~ CategoryFilter
       AND NOT Category =~ CategoryExcludedFilter

    LET AllRules <=
      SELECT * FROM MD(DescriptionFilter=DescriptionFilter, RootFilter=RootFilter,
        CategoryFilter=CategoryFilter, CategoryExcludedFilter=CategoryExcludedFilter)

    LET AllGlobs <=
      SELECT Root, enumerate(items=Glob) AS Globs
      FROM AllRules
      GROUP BY Root

sources:
- name: Remapping
  query: |
    SELECT * FROM RemapRules

  notebook:
  - type: none

- name: Rules
  query: |
    SELECT * FROM chain(a=AllRules, b=AllFullQueries)
  notebook:
  - type: none

- name: Globs
  notebook:
  - type: none

  query: |
    SELECT * FROM AllGlobs

- name: Uploads
  notebook:
  - type: none

  query: |
   LET UploadFiles = SELECT OSPath AS SourceFile, Size,
       Btime AS Created,
       Ctime AS Changed,
       Mtime AS Modified,
       Atime AS LastAccessed,
       upload(file=OSPath, accessor=DefaultAccessor, mtime=Mtime) AS Upload
    FROM glob(accessor=DefaultAccessor, globs=[
       PathTOSAM, PathTOAmcache, PathTOSystem,
       PathTOSecurity, PathTOSoftware, PathTOUsers + "*/ntuser.dat*"
    ])

   SELECT * FROM if(condition=AlsoUploadHives, then=UploadFiles)

- name: Results
  notebook:
    - type: vql
      output: "<h1>All Results</h1>Press recalculate to View"
      template: |
         SELECT * FROM source(source="Results")
    - type: vql
      output: "<h1>Category ASEP</h1>Press recalculate to View"
      template: |
         /*
         # Category ASEP
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''ASEP''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category ASEP Classes</h1>Press recalculate to View"
      template: |
         /*
         # Category ASEP Classes
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''ASEP Classes''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Antivirus</h1>Press recalculate to View"
      template: |
         /*
         # Category Antivirus
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Antivirus''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Autoruns</h1>Press recalculate to View"
      template: |
         /*
         # Category Autoruns
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Autoruns''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Cloud Storage</h1>Press recalculate to View"
      template: |
         /*
         # Category Cloud Storage
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Cloud Storage''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Devices</h1>Press recalculate to View"
      template: |
         /*
         # Category Devices
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Devices''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Event Logs</h1>Press recalculate to View"
      template: |
         /*
         # Category Event Logs
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Event Logs''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Executables</h1>Press recalculate to View"
      template: |
         /*
         # Category Executables
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Executables''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Installed Software</h1>Press recalculate to View"
      template: |
         /*
         # Category Installed Software
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Installed Software''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Microsoft Exchange</h1>Press recalculate to View"
      template: |
         /*
         # Category Microsoft Exchange
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Microsoft Exchange''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Microsoft Office</h1>Press recalculate to View"
      template: |
         /*
         # Category Microsoft Office
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Microsoft Office''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Network Shares</h1>Press recalculate to View"
      template: |
         /*
         # Category Network Shares
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Network Shares''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Program Execution</h1>Press recalculate to View"
      template: |
         /*
         # Category Program Execution
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Program Execution''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Services</h1>Press recalculate to View"
      template: |
         /*
         # Category Services
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Services''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category System Info</h1>Press recalculate to View"
      template: |
         /*
         # Category System Info
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''System Info''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Third Party Applications</h1>Press recalculate to View"
      template: |
         /*
         # Category Third Party Applications
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Third Party Applications''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Threat Hunting</h1>Press recalculate to View"
      template: |
         /*
         # Category Threat Hunting
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Threat Hunting''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category User Accounts</h1>Press recalculate to View"
      template: |
         /*
         # Category User Accounts
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''User Accounts''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category User Activity</h1>Press recalculate to View"
      template: |
         /*
         # Category User Activity
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''User Activity''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Volume Shadow Copies</h1>Press recalculate to View"
      template: |
         /*
         # Category Volume Shadow Copies
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Volume Shadow Copies''' AND Description =~ "."
         GROUP BY Description
    - type: vql
      output: "<h1>Category Web Browsers</h1>Press recalculate to View"
      template: |
         /*
         # Category Web Browsers
         */

         -- Adjust the Description Regex to focus on specific rules.
         SELECT Description, count() AS Count,
                OSPath AS Key, Mtime, Details FROM source()
         WHERE Category = '''Web Browsers''' AND Description =~ "."
         GROUP BY Description
  query: |
    LET GlobsMD <= to_dict(item={
      SELECT Root AS _key, Globs AS _value FROM AllGlobs
    })

    LET ShouldLog <= NOT DEBUG

    LET Cache <= memoize(query={
       SELECT Glob, Category, Description,
              Details, Filter, Comment
       FROM AllRules
       WHERE ShouldLog || log(
           message="Add to cache %v %v", args=[Glob, Description], dedup=-1)
    }, key="Glob", period=100000)

    LET _ <= remap(config=dict(remappings=RemapRules))

    LET Result = SELECT OSPath, Mtime,
       Data.value AS Data,
       get(item=Cache, field=Globs[0]) AS Metadata,
       Globs[0] AS _Glob,
       IsDir
    FROM foreach(row={
       SELECT _key AS Root, _value AS GlobsToSearch
       FROM items(item=GlobsMD)
       WHERE Root =~ RootFilter
         AND log(message="Will search with globs %v at Root point %v",
             dedup=-1, args=[GlobsToSearch, Root])

    }, query={
       SELECT * FROM glob(globs=GlobsToSearch, root=Root, accessor="registry")
    })
    WHERE ShouldLog || log(
          message="Glob %v OSPath %v Metadata %v",
          args=[Globs[0], OSPath, Metadata], dedup=-1)

    LET GlobRules = SELECT Metadata.Description AS Description,
           Metadata.Category AS Category,
           OSPath, Mtime, Data AS _RawData,
           eval(func=Metadata.Details || "x=>x.Data") || Data AS Details,
           Metadata AS _Metadata
    FROM Result
    WHERE eval(func=Metadata.Filter || "x=>NOT IsDir")

    SELECT * FROM chain(
    a=GlobRules,
    b={
      SELECT * FROM foreach(row=AllFullQueries, query={
        SELECT * FROM query(query=Query, inherit=TRUE)
      })
    })
