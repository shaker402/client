name: Windows.Sigma.Base
description: |
  This artifact builds the basic set of log sources and field
  mappings used for Sigma on Windows.

  NOTE: This artifact does not include any rules. You can launch it
  with rules provided to the SigmaRules parameter or call it from
  another artifact with a set of rules passed to the SigmaRules
  parameter.

  This artifact was built on 2025-05-17T02:07:15Z

type: CLIENT

parameters:
  - name: ROOT
    description: The Event Log Directory we use to read all logs
    default: C:/Windows/System32/WinEvt/Logs/

  - name: Debug
    type: bool
    description: Enable full debug trace

  - name: RuleLevel
    type: choices
    default: All
    choices:
      - "Critical"
      - "Critical and High"
      - "Critical, High, and Medium"
      - "All"

  - name: RuleStatus
    type: choices
    default: All Rules
    choices:
      - Stable
      - Stable and Experimental
      - Stable and Test
      - All Rules

  - name: RuleTitleFilter
    type: regex
    default: .
    description: Use this to filter only some rules to match

  - name: RuleExclusions
    type: csv
    description: |
      This table are rules that will be excluded by Title Regex
    default: |
      RuleTitleRegex,Reason
      noisy,All rules marked noisy should be disabled by default.

  - name: DateAfter
    description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp

  - name: DateBefore
    description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp

  - name: SigmaRules
    description: If provided we use these rules instead of the built in set.

  - name: NTFS_CACHE_TIME
    type: int
    description: How often to flush the NTFS cache. (Default is never).
    default: "1000000"
export: |
  LET X = scope()

  LET DateAfterTime <= X.DateAfter || timestamp(epoch="1600-01-01")
  LET DateBeforeTime <= X.DateBefore || timestamp(epoch="2200-01-01")

  LET ExcludeRegex <= if(condition=X.RuleExclusions,
       then=join(array=RuleExclusions.RuleTitleRegex, sep="|"),
       else="XXXXXXX")

  LET RuleStatusRegex <= get(item=dict(
       `Stable`="stable",
       `Stable and Experimental`="stable|experimental",
       `Stable and Test`="stable|test",
       `All Rules`="."), member=X.RuleStatus || "All Rules")

  LET RuleLevelRegex <= get(item=dict(
       `Critical`="critical",
       `Critical and High`="critical|high",
       `Critical, High, and Medium`="critical|high|medium|default",
       `All`="."), member=X.RuleLevel || "All")

  LET MandatoryLabelLookup <= dict(
      `S-1-16-0`= 'UNTRUSTED',
      `S-1-16-4096`= 'LOW_INTEGRITY',
      `S-1-16-8192`= 'MEDIUM_INTEGRITY',
      `S-1-16-8448`= 'MEDIUM_HIGH_INTEGRITY',
      `S-1-16-12288`= 'HIGH_INTEGRITY',
      `S-1-16-16384`= 'SYSTEM_INTEGRITY',
      `S-1-16-20480`= 'PROTECTED_PROCESS')

  LET TokenElevationTypeLookup <= dict(
      `%%1936`= 'FULL_TOKEN',
      `%%1937`= 'ELEVATED_TOKEN',
      `%%1938`= 'LIMITED_TOKEN')

  // Helpers for VQL rules
  LET FetchKeyValues(OSPath) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
  })

  LET GetValue(OSPath) = stat(filename=OSPath, accessor="registry").Data.value
  LET Hostname <= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname

  
  LET LogSources <= sigma_log_sources(
  
    `*/windows/application`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Application.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/applocker`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
       ROOT + "/Microsoft-Windows-AppLocker%4MSI and Script.evtx",
       ROOT + "/Microsoft-Windows-AppLocker%4EXE and DLL.evtx",
       ROOT + "/Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx",
       ROOT + "/Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx",
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/appmodel-runtime`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-AppModel-Runtime%4Admin.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/appxdeployment-server`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-AppxPackaging%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/appxpackaging-om`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-AppxPackaging%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/bits-client`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Bits-Client%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/capi2`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-CAPI2/Operational")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/certificateservicesclient-lifecycle-system`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/codeintegrity-operational`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-CodeIntegrity%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/diagnosis-scripted`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Diagnosis-Scripted%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/dns-client`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-DNS Client Events%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/dns-server`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/DNS Server.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/dns-server-analytic`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-DNS-Server%4Analytical.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/driver-framework`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/firewall-as`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/ldap_debug`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-LDAP-Client%4Debug.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/lsa-server`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-LSA%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/microsoft-servicebus-client`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-ServiceBus-Client.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/msexchange-management`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/MSExchange Management.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/ntlm`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-NTLM%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/openssh`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/OpenSSH%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/powershell`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-PowerShell%4Operational.evtx",
        ROOT + "/PowerShellCore%4Operational.evtx",
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/powershell-classic`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *, EventData + dict(
        Data=EventData.Data[2],
        HostApplication=parse_string_with_regex(
          regex="HostApplication=([^\\r\\n]+)",
          string=EventData.Data[2]).g1) AS EventData
     FROM parse_evtx(filename=ROOT + "/Windows PowerShell.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/security`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Security.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/security-mitigations`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Security-Mitigations.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/shell-core`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Shell-Core%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/smbclient-security`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-SmbClient%4Security.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/sysmon`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Sysmon%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/system`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/System.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/taskscheduler`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-TaskScheduler%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/terminalservices-localsessionmanager`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/vhdmp`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-VHDMP%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/windefend`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Windows Defender%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `*/windows/wmi`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-WMI-Activity%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },
    `process_creation/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-Sysmon%4Operational.evtx",
        ROOT + "/Security.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
       AND System.EventID.Value = 1 OR System.EventID.Value = 4688
    },
    `ps_classic_provider_start/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Windows PowerShell.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime AND System.EventID.Value = 600
    },
    `ps_classic_start/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Windows PowerShell.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime AND System.EventID.Value = 400
    },
    `ps_module/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-PowerShell%4Operational.evtx",
        ROOT + "/PowerShellCore%4Operational.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime AND System.EventID.Value = 4103
    },
    `ps_script/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-PowerShell%4Operational.evtx",
        ROOT + "/PowerShellCore%4Operational.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime AND System.EventID.Value = 4104
    },
    `registry_add/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-Sysmon%4Operational.evtx",
        ROOT + "/Security.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime AND System.EventID.Value = 12 OR System.EventID.Value = 4657
    },
    `registry_event/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-Sysmon%4Operational.evtx",
        ROOT + "/Security.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
       AND System.EventID.Value IN (12, 13, 14) OR System.EventID.Value = 4657
    },
    `registry_set/windows/*`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=[
        ROOT + "/Microsoft-Windows-Sysmon%4Operational.evtx",
        ROOT + "/Security.evtx"
     ])
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
       AND System.EventID.Value = 13 OR System.EventID.Value = 4657
    },
    `antivirus/windows/windefend`={
     SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *
     FROM parse_evtx(filename=ROOT + "/Microsoft-Windows-Windows Defender%4Operational.evtx")
     WHERE Timestamp >= DateAfterTime AND Timestamp <= DateBeforeTime
    },`velociraptor/info/*`={ SELECT * FROM info() })
  

  LET FieldMapping <= parse_json(data=gunzip(string=base64decode(string="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")))

  LET DefaultDetails <= parse_json(data=gunzip(string=base64decode(string="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")))

  LET DefaultDetailsLambda = '''x=>get(item=DefaultDetails,
       member=format(format="%v/%v",
          args=[x.System.Provider.Name, x.System.EventID.Value])
      ) || x.Message || x.UserData || x.EventData'''
  LET RuleFilterLambda = '''x=>x.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''

  -- The Keywords field is actually not very useful but it trips
  -- Elastic so we remove it.
  -- https://github.com/Velocidex/velociraptor/issues/3856
  LET SystemMask <= dict(Keywords=TRUE)
sources:
- query: |
   LET Result = SELECT Timestamp,
         System.Computer AS Computer,
         System.Channel AS Channel,
         System.EventID.Value AS EID,
         _Rule.Level AS Level,
         _Rule.Title AS Title,
         System.EventRecordID AS RecordID,
         Details,
         dict(System=System - SystemMask,
              EventData=X.EventData || X.UserData,
              Message=X.Message) AS _Event,
         _Match, *
   FROM sigma(
     rules=split(string=SigmaRules, sep="\n---+\r?\n"),
     log_sources= LogSources, debug=Debug,
     default_details=DefaultDetailsLambda,
     rule_filter=RuleFilterLambda,
     field_mapping= FieldMapping)

   SELECT * FROM if(condition=Debug, then={
     SELECT * FROM Result
   }, else={
     SELECT Timestamp, Computer, Channel , EID,
            Level, Title, RecordID, Details, _Event,
            X.Enrichment AS Enrichment
     FROM Result
   })
