{"Name":"DetectRaptor.Windows.Detection.Amcache","Description":"Bulk indicator hunt over Amcache\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Zach Stanford - @svch0st","SHA1":"838829f91ecc09df9acba4d44638d0ebe8942ceb"}
{"Name":"DetectRaptor.Windows.Detection.Applications","Description":"Bulk indicator hunt over Windows.Sys.Programs.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"d1c696c07c43bc8610d334d1333f6109c2174651"}
{"Name":"DetectRaptor.Windows.Detection.BinaryRename","Description":"This artifact will detect renamed binaries commonly abused by adversaries.\n\nBinary rename is a defence evasion technique used to bypass brittle process\nname and path based detections. Observed in use across\nall stages of the attack lifecycle it is a technique used by a large\nselection of actors from commodity malware crews through to Nation States.\n\nAdd additional entries to the VersionInfoTable parameter. For straight\ndetection on an Internal or Original name, the Filename entry can be set to\nan unlikely value - e.g ANY or left blank.\n","Author":"Matt Green - @mgreen27","SHA1":"893b2eae6f744623e91629fa0bfe19f90bc63a31"}
{"Name":"DetectRaptor.Windows.Detection.Bootloaders","Description":"This artifact collects EFI files with matching SHA256 hashes in the\nthe Bootloaders project.\n\nThe artifact is automatically generated by DetectRaptor with an API \nextract of Bootloaders.io entries.\n\nNOTE: artifact requires FAT accessor availible in Velociraptor 0.71\n","Author":"Matt Green - @mgreen27","SHA1":"c87476fa94fdfd2e7540fe038b6fa64c9b9caa4a"}
{"Name":"DetectRaptor.Windows.Detection.Evtx","Description":"Bulk indicator hunt over Windows.EventLogs.EvtxHunter.\n\n- Use DateAfter and DateBefore to box timeframe.\n- VSS is supported but keep in mind potential performance impact.\n- Detection content is hidden, please make changes to the artifact prior to \nrunning.\n- Use suggested notebooks to speed up triage.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"fd13f19213d0f56a15c0738999beba4357aeb661"}
{"Name":"DetectRaptor.Windows.Detection.HijackLibsEnv","Description":"This artifact searches for Environment Variables (default systemroot|windir)\nassociated to each process and reports if set to non default.\n\nIf a hit is found, next steps is to check loaded module paths using\nWindows.System.DLLs.\n","Author":"Matt Green - @mgreen27","SHA1":"cb955dc0932beb17dc79eb98f3c24d7486f21433"}
{"Name":"DetectRaptor.Windows.Detection.HijackLibsMFT","Description":"Bulk indicator hunt over Windows.NTFS.MFT for potential hijacked dlls.\n\nThe artifact is automatically generated by DetectRaptor with an API extract \nof Hijacklibs not including environment variable examples.\n\nThe artifact searches for DllName, then excludes expected path. Untrusted \nAuthenticode or entries without a subject reference to Vendor are in scope.\n\nExpect false positives, context fields have also been included for scoping.\n","Author":"Matt Green - @mgreen27","SHA1":"809d376a8bcb6ca71b714dda77a075a91d53b47b"}
{"Name":"DetectRaptor.Windows.Detection.Powershell.ISEAutoSave","Description":"Bulk indicator hunt over Powershell ISEAutoSave files.\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"7ab6c8aa0c866f819de39543049d3773cb66abb2"}
{"Name":"DetectRaptor.Windows.Detection.LolDriversMalicious","Description":"This artifact collects AMCache entries with a matching SHA1 in the \nLolDrivers project.\n\nThe artifact is automatically generated by DetectRaptor with an API \nextract of LolDrivers entries.\n\nNOTE: AMCache can be unreliable. For example, SHA1 of large files will \nonly use the first ~21MB.\n","Author":"Matt Green - @mgreen27","SHA1":"b35150ec2676a8159daedb0057ff39aa0d1df85b"}
{"Name":"DetectRaptor.Windows.Detection.LolDriversVulnerable","Description":"This artifact collects AMCache entries with a matching SHA1 in the \nLolDrivers project.\n\nThe artifact is automatically generated by DetectRaptor with an API \nextract of LolDrivers entries.\n\nNOTE: AMCache can be unreliable. For example, SHA1 of large files will \nonly use the first ~21MB.\n","Author":"Matt Green - @mgreen27","SHA1":"a44c13bf6865d39c15038e5c52e1d5cf1c9b127b"}
{"Name":"DetectRaptor.Windows.Detection.Yara.LolDrivers","Description":"Scans system driver directories using Malware and Vulnerability yara rules \nfrom LolDriver project.\n\nThe artifact is automatically generated by DetectRaptor weekly updating latest \nyara.   \n","Author":"Matt Green - @mgreen27 - inspired by Kaizar Lehri and Blake McDermott from the artifact exchange","SHA1":"d6eed4dd04f9a29f54fc5c008ff331d38b8597a9"}
{"Name":"DetectRaptor.Windows.Detection.LolRMM","Description":"This artifact hunts for Remote Monitoring and Management (RMM) tools using the \nLolRMM project. The goal is to detect installed or running instances.\n\nDetectraptor generates a Regex csv that is pulled locally to the Velociraptor \nserver via the tools management capability.\n\nNOTE: This artifact may not detect RMMs that are not installed, renamed or \nusing custom DNS.\n\nSpecial thanks to Herbert Bärschneider for inspiring this artifact on the \nArtifact Exchange. :)\n","Author":"Matt Green - @mgreen27 and Herbert Bärschneider","SHA1":"c5f99e316c52fd40b63febcca7d4d40cb9836e6c"}
{"Name":"DetectRaptor.Windows.Detection.MFT","Description":"Bulk indicator hunt over Windows.NTFS.MFT.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"24471af24d4bc146e686a7b416ce1535cb4d2647"}
{"Name":"DetectRaptor.Server.ManageContent","Description":"This artifact is used to manage DetectRaptor VQL content into Velociraptor. \nDesigned to run every X seconds it will execute content_chain.\n\nDefault is every 4 hours.\n","Author":"Matt Green - @mgreen27","SHA1":"74499de2b9c05fca6059c81c763235230a8632dc"}
{"Name":"DetectRaptor.Windows.Detection.NamedPipes","Description":"Bulk indicator hunt over NamedPipes in velociraptor. The \nartifact checks both Windows.System.Handles and Sysmon for\ntelemetry.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"fcc1ca30a17da8c370e7fc78e0b326edd263e779"}
{"Name":"DetectRaptor.Windows.Registry.NetworkProvider","Description":"Adversaries may register malicious network provider dynamic link libraries \n(DLLs) to capture cleartext user credentials during the authentication process. \nNetwork provider DLLs allow Windows to interface with specific network \nprotocols and can also support add-on credential management functions.\n\nThis artifact enumerates NetworkProvider ProviderPath registry key entries \nand enriches DLLPath for triage assitance. If there are rows generated we also \nenumerate the ProviderOrder key.\n\nNOTE: By default we exclude common providers with validated authenticode. \nIn some rare cases there may be issues enriching results, check for hash value.\n\n`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\\ProviderOrder`\n- Specifies the order in which software-based network providers are accessed \nby Windows when connecting or enumerating network resources.\n\n`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\HWOrder\\ProviderOrder` \n- Specifies the order for hardware-based network providers. This can include \nnetwork resources managed by specific hardware adapters or hardware-optimized network connections.\n\nHWOrder\\ProviderOrder Often mirrors the software provider order but may \ninclude specialized or hardware-specific providers, depending on installed \nhardware or network devices.\n","Author":"Matt Green - @mgreen27","SHA1":"3cf3c962b0da53cbaf026bf9c97bdd272909405b"}
{"Name":"DetectRaptor.Windows.Detection.Powershell.PSReadline","Description":"Bulk indicator hunt over Windows.System.Powershell.PSReadline\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Zach Stanford - @svch0st, Matt Green -@mgreen27","SHA1":"bf1c0747f60e718e5dd68073b7e21262c394097a"}
{"Name":"DetectRaptor.Server.StartHunts","Description":"This is an automatically generated artifact that can be used to execute \nDetectRaptor hunts.\n\nUse the ArtifactRegex filter for targeting.  \nIf Timeout, CpuLimit or IopsLimit is blank, the artifact default will be used.\n","Author":"Matt Green - @mgreen27","SHA1":"1678e61b0efa51ec6a432d9a0c2775b547630523"}
{"Name":"DetectRaptor.Windows.Detection.Webhistory","Description":"Bulk indicator hunt over Velociraptor Webhistory artifacts.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27, special thanks to JLockwood and @anrgy-bender for sqlite queries","SHA1":"ac15328972f0f1ad36fa6a401063ff5fd25ba4da"}
{"Name":"DetectRaptor.Generic.Detection.YaraFile","Description":"This artifact is a bulk yara file hunt.\n\nYara generated for this artifact is automatically generated by DetectRaptor.\nDefault yara set extracts all Yara-Forge FILE based rules.\n \nNOTE: \n\n- this artifact by default targets whole disk. This can be resource intensive. \nIt is reccomended to target queries if possible.\n- this artifact runs the glob plugin with the nosymlink switch turned on. This \nwill NOT follow any symlinks and may cause unexpected results if unknowingly \ntargeting a folder with symlinks.\n- This artifact uses compiled rules. Additional rule context can be found at\nhttps://github.com/mgreen27/DetectRaptor/blob/master/yara/yara-rules-full.yar\n\nSome examples of path glob may include:\n\n  - Specific binary: ```/usr/bin/ls```\n  - Wildcards: ```/var/www/*.js```\n  - More wildcards: ```/var/www/**/*.js```\n  - Multiple extentions: ```/var/www/*.{php,aspx,js,html}```\n  - Windows: ```C:/Users/**/*.{exe,dll,ps1,bat}```\n  - Windows: ```C:\\Users\\**\\*.{exe,dll,ps1,bat}```\n","Author":"Matt Green - @mgreen27","SHA1":"fdc9d499e995b8ebc6b1e547b1277eced216a2dd"}
{"Name":"DetectRaptor.Linux.Detection.YaraProcessLinux","Description":"This artifact is a bulk yara hunt for Linux Process Yara.\n\nThis artifact is automatically generated by DetectRaptor.\nDefault yara set extracts all yara-forge yara rules with \"memory\" string.\n\nAdditional detection can be added to the artifact as desired.\n","Author":"Matt Green - @mgreen27","SHA1":"513550bc08b91b566f63936a1a47a7282157faaa"}
{"Name":"DetectRaptor.Macos.Detection.YaraProcessMacos","Description":"This artifact is a bulk yara hunt for Macos Process Yara.\n\nThis artifact is automatically generated by DetectRaptor.\nDefault yara set extracts all yara-forge yara rules with \"memory\" string.\n\nAdditional detection can be added to the artifact as desired.\n\nNOTE: MacOS process scanning can throw up several access errors caused by OS\nmemory permissions.\n","Author":"Matt Green - @mgreen27","SHA1":"ebba757c1f2016cbca9aca893234b43091f49db9"}
{"Name":"DetectRaptor.Windows.Detection.YaraProcessWin","Description":"This artifact is a bulk yara hunt for Windows Process Yara.\n\nThis artifact is automatically generated by DetectRaptor.\nDefault yara set extracts all yara-forge yara rules with \"memory\" string.\n\nAdditional detection can be added to the artifact as desired.\n","Author":"Matt Green - @mgreen27","SHA1":"18d313e1b5b727c8b0003eff804c23ea97d18fbe"}
{"Name":"DetectRaptor.Generic.Detection.YaraWebshell","Description":"This artifact is a bulk yara hunt for webshells that leverages a Glob \ntarget.\n\nThis artifact is automatically generated by DetectRaptor.\nDefault yara set extracts all yara-forge yara rules with \"webshell\" string.\n\nAdditional webshell detection can be added to the artifact as desired.\n","Author":"Matt Green - @mgreen27","SHA1":"d50823677ac2c64c4fb1fc2bea04954b56cd2297"}
{"Name":"DetectRaptor.Windows.Detection.ZoneIdentifier","Description":"Bulk indicator hunt over Windows.NTFS.ADSHunter checking for files with \nsuspicious Zone.Identifier alternate data streams.  \n\nTargetFolder - enables targeting specific drive or folder path    \nHostUrlRegex - regex filter for HostUrl feild, default is interesting extensions only.\n\nThis artifact is automatically generated by DetectRaptor.\n","Author":"Matt Green - @mgreen27","SHA1":"60e5cb4d60481909a95692433696a535c8ec91f4"}
