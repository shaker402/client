{"Name":"Exchange.Windows.ActiveDirectory.PrivilegedUsers","Description":"If on a Domain Controller (ProductType = 2), recursively enumerate\nmembership of privileged groups, then for each user, collect\ndetails relevant to an investigation: Create Date, Last Logon,\nGroup Membership, SID\n\nIf not on a Domain Controller, return nothing\n","Author":"liteman @kevinfosec"}
{"Name":"Exchange.Server.Enrichment.AI.Anthropic","Description":"Query Anthropic AI for analysis of data.\n\nParamaters:\n\n* `PrePrompt` - Added as preprompt. Default is: \n\"You are a Cyber Incident Responder and need to analyze data. You have an eye \nfor detail and like to use short precise technical language. Analyze the \nfollowing data and provide summary analysis:\"\n* `Prompt` - Is User prompt as string: When pushing a dict object via \nPromtData good practice is add some strings related to the type of data for \nanalysis or artifact name to provide context.\n* `PromptData` - add optional object to be serialized and added to the User prompt.\n* `Model` - Model to use for your request. Default is claude-3-7-sonnet-20250219\n* AnthropicVersion - anthropic-version header\n* `MaxTokens` - Set max token size  default 64000\n\nThis artifact can be called from within another artifact (such as one looking \nfor files) to enrich the data made available by that artifact.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Registry.AteraNetworks","Description":"Find AteraNetworks configuration details in the registry.\nThis artifact is best combined with Windows.Forensics.FilenameSearch \nsearching for the string \"atera\".\n","Author":"original author Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Windows.Carving.BRc4","Description":"This artifact extracts Brute Ratel C4 (BRc4) configuration from a byte stream, \nprocess or file on disk. BRc4 is an emerging red-teaming and adversarial \nattack simulation tool.\n\nThe User can define bytes, file glob, process name or pid regex as a target.\nThe artifact firstly discovers BruteRatel configuration and extracts bytes, \nbefore parsing with Velociraptor Binary Parser.\n\n* BRc4's configuration consits of 8 characters inside several sections. \n* Character lists reversed in order\n* This list of characters is: either base64 + RC4 encoded or in clear text. \n\nThis content simply carves the configuration and does not unpack files on\ndisk. That means pointing this artifact as a packed or obfuscated file may not\nobtain the expected results.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.System.BinaryVersion","Description":"This artifact will search the MFT for any matching filenames and return\nbinary details. This artifact can be used to find all instances of a \nbinary on disk so its great for scoping both legititimate and illegitimate \nfiles.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.EventLogs.Bitsadmin","Description":"This content will extract BITS Transfer events and enable filtering by URL \nand TLD.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Forensics.UEFI.BootApplication","Description":"This artifact parses Windows MeasuredBoot TCGLogs to extract PathName of \nEV_EFI_Boot_Services_Application events, which can assist detection of \npotential ESP based persistance.  \n\n\\EFI\\Microsoft\\Boot\\bootmgfw.efi - the Windows boot manager on systems with \nUEFI firmware.\n\n\nThe artifact leverages Velociraptor tools to deploy and execute a powershell \nmodule to parse TCGLogs on disk and memory.\n\nNOTE:\n\n- Recommended to host TCGLogTools and TCGLogToolsExecution locally to mitigate github connection limits.\n- AllParsedTCGLog can be large and is best suited to triage.\n- Thank you to mattifestation for TCGTools!\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Carving.BumbleBee","Description":"This artficat will detect running BumbleBee processes and subsequently extract the command and control servers with the destination port 443.\n","Author":"Angelo Violetti @SEC Defence"}
{"Name":"Exchange.Windows.Registry.CVE_2021_40444","Description":"This artifact will enable both application and removal of the\nreccomended mitigation for CVE-2021-40444.\n\nDisabling the installation of all ActiveX controls in Internet\nExplorer mitigates this attack. This can be accomplished for all\nsites by updating the registry. Previously-installed ActiveX\ncontrols will continue to run, but do not expose this\nvulnerability.\n\nTo disable installing ActiveX controls in Internet Explorer in all\nzones\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\0]\n\"1001\"=dword:00000003\n\"1004\"=dword:00000003\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\1]\n\"1001\"=dword:00000003\n\"1004\"=dword:00000003\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2]\n\"1001\"=dword:00000003\n\"1004\"=dword:00000003\n\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\3]\n\"1001\"=dword:00000003\n\"1004\"=dword:00000003\n```\n\nThis sets the `URLACTION_DOWNLOAD_SIGNED_ACTIVEX` (0x1001) and\n`URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX` (0x1004) to `DISABLED` (3) for all\ninternet zones for 64-bit and 32-bit processes. New ActiveX controls will\nnot be installed. Previously-installed ActiveX controls will continue to run.\n\n**NOTE**: if both AddMitigation and DeleteMitigation is selected\nDeleteMitigation will take preference. Reboot may be required.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.EventLogs.CondensedAccountUsage","Description":"This artifact will extract condensed information on logon / logoff events.\n\nSecurity channel - EventIDs in 4624, 4625, 4634, 4647, 4648, 4672, 4778,\n4779, 4800, 4801, 4802, and 4803.\n\nExclude by default events related to:  \n  - UserName egal to SYSTEM, ANONYMOUS LOGON, LOCAL SERVICE, NETWORK\n    SERVICE, or %ComputerName%$.  \n  - Domain egal to NT AUTHORITY, Font Driver Host, or Window Manager.\n \nInspired from work by Brian Maloney and @0x47617279.  \nThanks to Mike Cohen (scudette) for its help optimizing the query.  \n","Author":"Thomas DIOT (Qazeer)"}
{"Name":"Exchange.Linux.Detection.ConfluenceLogs","Description":"This artifact enables grep of Linux logs and targets strings observed in \nexploitation of CVE-2022-26134.\n\nCVE-2022-26134, a critical unauthenticated remote code execution vulnerability \nin Confluence Server and Confluence Data Center. \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Generic.Detection.Confluence_CVE_2023_22527","Description":"This artifact detects evidence of exploitation of Confluence RCE CVE-2023-22527.\n\nThe artifact checks conf_access logs for a malicious POST request and should \nreturn full line of any hit (IP address and http code).\n\nNote: the underlying artifact uses Generic.Detection.Yara.Glob(). \nPlease run he notbook suggestion view hit strings for further analysis.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.MobaXterm.Passwords","Description":"Extract MobaXterm encrypted saved Master Passwords, Passwords and Credentials from registry.\nFurther information regarding decryption can be found here: https://www.xmcyber.com/blog/extracting-encrypted-credentials-from-common-tools-2/\n","Author":"Yaron King - @Sam0rai"}
{"Name":"Exchange.Windows.WinSCP.Passwords","Description":"Extract WinSCP obfuscated saved passwords from registry.\nFurther information regarding deobfuscation can be found here: https://www.xmcyber.com/blog/extracting-encrypted-credentials-from-common-tools-2/\n","Author":"Yaron King - @Sam0rai"}
{"Name":"Exchange.Server.Analysis.CyberChefServer","Description":"Analyze/transform data with CyberChef-server.\n\nNote that this requires an accessible Cyberchef-server instance to\nwork.\n\nIf you prefer not to run a local instance, you might consider\naltering the artifact to leverage something like\nhttps://prod.apifor.io.\n\n**Reference**: https://github.com/gchq/CyberChef-server\n\n**Examples**:\n\n  This artifact can be called from within another artifact to\n  analyze/transform the data made available by that artifact.\n\n  `SELECT * from Artifact.Exchange.Analysis.CyberchefServer(Input=$YOURDATA,Recipe=$YOURRECIPE)`\n\n  If a default recipe is used, only the input will need to be passed, like so:\n\n  `SELECT * from Artifact.Exchange.Analysis.CyberchefServer(Input=$YOURDATA)`\n\n\n  The server metadata store can be used to store the URL of\n  Cyberchef-server (with a key value of `CyberChefServerURL`).\n\n  Examples of recipes can be found here:\n\n  https://github.com/mattnotmax/cyberchef-recipes\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.CyberTriage.Collector","Description":"Runs the Cyber Triage (http://cybertriage.com) Collector to copy forensic artifacts for automated analysis. The Dynamic collection will include EXEs, DLLs, and other files referenced by artifacts.\nThe output of the collection can be saved to a Velociraptor server, a Cyber Triage server, or cloud storage (S3 or Azure).\nConfiguration information is available at - https://docs.cybertriage.com/en/latest/chapters/integrations/velociraptor_collect.html\nIt requires the Velociraptor server to have copies of the Cyber Triage Deployer script and optional configuration files.\nHistory. 1.0 - Initial artifact creation\nContact support@cybertriage.com with any questions.\nCopyright (c) 2025 Sleuth Kit Labs LLC. All rights reserved.","Author":""}
{"Name":"Exchange.Windows.Applications.Cylance","Description":"Parse Cylance logs.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Applications.DIEC","Description":"Execute DetectItEasy (console version) on specified paths and\nreturn rows of results to hunt/filter on binaries based types of\nfiles (E.g.: Packed binaries and its packers)\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Windows.Registry.DefenderConfig","Description":"Thit artifact enables extracting Windows Defender configuration from \nSOFTWARE registry hive.\n\nAvailible parameters enable filtering on RegKey, KeyName or KeyValue.\n\n1. KeyRegex - Regex for string in registry key. For example we could use \nExclusions\\\\Process for process exclusions\n2. NameRegex - Regex for KeyName. For example we could use process.exe \nfor a process in exclusions or specific setting name of interest.\n3. ValueRegex - Regex for KeyValue.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Applications.DefenderDHParser","Description":"This artifact leverages Windows Defender DetectionHistory tool to parse and return\nthe parameters of Windows Defender detections contained in Detection History files.\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Windows.Utils.DefenderExclusion","Description":"**Adds a Microsoft Defender real-time scanning process exclusion for\nVelociraptor.**\n\nGenerally you should not need to use this unless Defender is interfering\nwith your collections.\nThis may happen if the collection uses tools or associated files that\ntrigger Microsoft Defender detections.\n\nSome initial info is also gathered to aid with troubleshooting.\n\nThe exclusion is checked every minute by default and reapplied if necessary.\n\nAs a side-effect the exclusion also makes some collection operations faster,\nparticularly those that are filesystem-intensive and that use the OS 'file'\naccessor.\n\n#### Notes\n\n- Exclusions *do* apply to some Microsoft Defender for Endpoint capabilities,\nsuch as attack surface reduction rules.\n- Exclusions *do* apply to potentially unwanted apps (PUA) detections as well.\n- Exclusions *do* apply to some ASR rule exclusions. See [Attack surface\nreduction rules reference - Microsoft Defender Antivirus exclusions and ASR\nrules](https://learn.microsoft.com/en-us/defender-endpoint/attack-surface-reduction-rules-reference#microsoft-defender-antivirus-exclusions-and-asr-rules).\n- Excluded files can still trigger Endpoint Detection and Response (EDR)\nalerts and other detections. To exclude files broadly, add them to the\nMicrosoft Defender for Endpoint custom indicators.\n- See References below to learn more about Defender exclusions in general.\n\nA more compact version of this artifact is listed below which can be included\nin the client configuration, as shown, and run with the\n`Client.additional_event_artifacts` setting. This will run the artifact\nas an event artifact as long as the client is running, starting even before\nenrollment. This may be useful if there are specific clients where Defender\nis causing problems.\n\n```yaml\nautoexec:\n  artifact_definitions:\n  - name: Windows.Utils.DefenderExclusionCompact\n    precondition: SELECT OS From info() where OS = \"windows\"\n    parameters:\n      - name: CmdApply\n        default: \"powershell.exe -ExecutionPolicy Unrestricted -encodedCommand\"\n    sources:\n      - query: |\n          LET schedule = SELECT * FROM clock(period=60)\n          LET HostInfo \u003c= SELECT * FROM info()\n          SELECT {\n                   SELECT *\n                   FROM execve(\n                     argv=[commandline_split(command=CmdApply) + base64encode(\n                       string=utf16_encode(\n                         string=format(\n                           format='Add-MpPreference -ExclusionProcess \"%v\"',\n                           args=HostInfo[0].Exe)))])\n                   WHERE log(\n                     message=\"Applied process exclusion: %v\",\n                     args=HostInfo[0].Exe,\n                     level=\"INFO\")\n                 }\n          FROM schedule\n Client:\n   additional_event_artifacts:\n   - Windows.Utils.DefenderExclusionCompact\n ```\n","Author":"@predictiple - 2024-08-18\n"}
{"Name":"Exchange.Windows.Applications.DefenderQuarantineExtract","Description":"Extracts Quarantine Files from Windows Defender.\n\nThis artifact decrypts the RC4 encrypted Windows Defender Quarantined files\nand returns information about it. If it is a PE, it also parses the PE.\n\nYou may also choose to upload the extracted binaries for deeper malware analysis.\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Server.Utils.DeleteClientLabel","Description":"This artifact completely removes a client from the data store if a configured\nlabel is set.\n\nWe reccomend running as a server artifact then if happy with actions add as an\naction for monitoring.\n\nBe careful with this one: there is no way to recover old\ndata. However, if the client still exists, it will just\nautomatically re-enroll when it next connects. You will still be able\nto talk to it, it is just that old collected data is deleted.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Server.Import.DetectRaptor","Description":"DetectRaptor is a collection of publicly availible Velociraptor detection content. \nMost content is managed by a series of csv files and artifacts are automatically updated.\n\nThis artifact will import the latest DetectRaptor bundle into the current server.\n\nA SHA1 of the imported DetectRaptor collection is stored in server metadata \nfor versioning.  \nA SHA1 of each artifact is generated on import to enable versioning confirmation.\n\nLast updated: 2023-09-09.   \n\nCurrent artifacts include:  \n\n- Windows.Detection.Amcache\n- Windows.Detection.Applications\n- Windows.Detection.BinaryRename\n- Windows.Detection.Evtx\n- Windows.Detection.HijackLibsEnv\n- Windows.Detection.HijackLibsMFT\n- Windows.Detection.LolDrivers\n- Windows.Detection.MFT\n- Windows.Detection.NamedPipes\n- Windows.Detection.Powershell.ISEAutoSave\n- Windows.Detection.Powershell.PSReadline\n- Windows.Detection.Webhistory\n- Windows.Detection.ZoneIdentifier\n- Server.StartHunts\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Detection.Application.CursedChrome","Description":"Detects the [Cursed Chrome](https://github.com/mandatoryprogrammer/CursedChrome) extension. Starts by searching for permissive extensions configured within `Secure Preferences`. Locates the path of the extensions and scans using Yara.\n","Author":"Matt Dri - @mattdri-ir"}
{"Name":"Exchange.Docker.Image.Export","Description":"Uses the Docker UNIX socket to export a Docker image to a\ntempfile and upload to Velociraptor.\n\nAnalysis Tips:  \n    - https://jellyparks.com/posts/compromised-container-analysis-primer/\n\n#docker\n","Author":"Brady Semm - @btsemm / DoppioRistretto"}
{"Name":"Exchange.Windows.ESET.Logs","Description":"Parse logs from ESET antivirus products. This log contains information about detections made by the ESET modules such as Real-time filesystem proteciton, Firewall, HIPS, Device Control, HTTP filter, AMSI Scanner etc.\n","Author":"Ján Trenčanský - j91321@infosec.exchange"}
{"Name":"Exchange.Generic.Detection.EffluenceWebshell","Description":"This artifact detects Effluence Webshell observed deployed during exploitation \nof Atlassian Confluence CVE-2023-22515.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Label.User","Description":"This artifact watches for new client enrollments and automatically\nlabel the client with the required label if the user exists.\n\nThis artifact can be the starting point for automatically labeling\na machine based on any other property - just change the artifact to\nwatch and the result filter.\n\n#server #event #labels\n","Author":""}
{"Name":"Exchange.Server.Enrichment.Gimphash","Description":"Calculate the Gimphash for a Golang binary.\n\nSee: https://github.com/NextronSystems/gimphash\n\nThis artifact can be called from within another artifact (such as one looking for Golang binaries) to enrich the data made available by that artifact.\n\nEx.\n\n`SELECT * from Artifact.Server.Enrichment.Gimphash(File=$YOURFILE)`\n\nNOTE: You will need to change the tool URL if using Linux as your server OS.\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Windows.EventLogs.Hayabusa.Takajo","Description":"[Takajo] (https://github.com/Yamato-Security/takajo) is a fast forensics analyzer\nfor Hayabusa results written in Nim. Takajō means \"Falconer\" in Japanese\nand was chosen as it analyzes Hayabusa's \"catches\" (results).\n\nFirst, it will call Exchange.Windows.EventLogs.Hayabusa to execute the following commandline to create the hayabusa_results.jsonl: \"hayabusa.exe json-timeline -d \u003cEVTX-DIR\u003e -L -o hayabusa_results.jsonl -w -p verbose\"\nThen, it will be launched Takajo with \"automagic\" option: which executes as many commands as possible and output results to a \"case-0\" folder and will upload all the content with the following commandline: \"takajo.exe automagic -t hayabusa_tempdir/ -o case-0 \"\nAll the output results will be uploaded.\n","Author":"Eric Capuano - @eric_capuano, Whitney Champion - @shortxstack, Zach Mathis - @yamatosecurity"}
{"Name":"Exchange.Windows.System.PowerShell.DetectResponder","Description":"This artifact allows to detect responder in the environment\nhttps://tcm-sec.com/llmnr-poisoning-and-how-to-prevent-it/\n","Author":"Dhruv Majumdar, Jamie Bhoohe"}
{"Name":"Exchange.Windows.Binary.Exports","Description":"This artifact can be used to extract all binary exports to research\npotential lolbins.  Selecting the AllBinaryInfo tickbox will return\ncomplete Binary information.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Applications.FTKImager","Description":"Create an E01 Image of the C drive using FTK Imager (Command Line\nVersion)\n\nSourceDriveToImage usually will be 0 (as in \\\\.\\PHYSICALDRIVE0)\nfor the C: drive, on a Windows system.\n\nIf you intend to image the secondary drive, use, for example,\nSourceDriveToImage = 1, for \\\\.\\PHYSICALDRIVE1\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Windows.Forensics.FileZilla","Description":"This artifact enumerate's all user directories on a system and will\nparse three files within a users AppData\\Roaming\\FileZilla\ndirectory: filezilla.xml, recentservers.xml, and queue.sqlite3\n\nThe three files provide valuable data to incident responders if data was\nexfiltrated using FileZilla.\n\n- filezilla.xml - contains saved user settings\n- recentservers.xml - contains recently accessed servers\n- queue.sqlite3 - contains multiple tables that can be used to identify what\nfiles were exfiltrated and to where (remote hostname and file path).\n\nUsing the sqlite() plugin, VR will parse user's queue.sqlite3 file and\njoin data from various tables.\n\nYou can read more about filezilla.xml and recentservers.xml forensic\nartifacts here: \nhttps://www.hecfblog.com/2013/09/daily-blog-93-filezilla-artifacts.html\n\nThe queue.sqlite3 does not have much documentation out there that I could\nfind. However, it is a sqlite database that contains 5 tables: files,\nlocal_paths, remote_paths, servers, and sqlite_sequence that provide \nvaluable information to incident responders and shed light on what data\nwas exfiltrated by a threat actor.\n","Author":"Dan Kelly - @dan_kelly17"}
{"Name":"Exchange.Server.Findflows","Description":"This artifact enables searching over client flow results with regex\nand returns a link to the Flow for followup.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Server.PostProcess.FluentBit","Description":"Post-process collection results using [Fluent Bit](https://fluentbit.io/).\n\nFluent Bit will read the JSONL-formattted results file for each completed\nclient collection, which can then be modified, filtered, and forwarded to\nany of it's large number of supported\n[outputs](https://docs.fluentbit.io/manual/pipeline/outputs).\nThe specific outputs used here are just for demonstration purposes, and you\ncan easily change the Fluent Bit pipeline config to use a different one.\n\nThe processed data is _not_ returned to Velociraptor - it is shipped to\nexternal destinations. Although it is possible to read back the data from\nstdout it's pointless to do so, unless perhaps you're testing something new\nor troubleshooting some issue.\n\n#### How it works\n\nResults files are processed individually, per artifact or\nartifact/namedsource.\n\n- If a collection consists of multiple artifacts, only the ones specified in\n  `ClientArtifactsToWatch` will be processed.\n- If an artifact contains multiple named sources, then only the ones\n  designated in `ClientArtifactsToWatch` will be processed.\n\nEnrichments and transformations can be added to Fluent Bit's pipeline via\nits Processors and Filters, or alternatively (and probably more easily) such\nthings can be done on the receiving end.\n\nThis artifact configures Fluent Bit via a YAML config file. This config file\ncontains the pipeline definition, parser definitions, and other config\noptions. This is easier to work with rather than specifying everything on\nthe command line, especially if you want to define more complex pipelines.\n\nVelociraptor's `execve()` plugin runs programs in an isolated environment,\ninto which  some of env variables are injected via the `env` argument. The\ndata in these variables augments the flow data: `ClientId`, `FlowId`, and\n`ArtifactName` are added to the processed records for downstream tracking\npurposes, but you may choose not to do so. The artifact injects these into\nthe execve environment and the Fluent config specifies the var =\u003e field\nmapping to retrieve them.\n\nTo avoid unnecessarily exposing credentials for the external systems\n(outputs) we store these in environment variables so that they aren't\nwritten to any logs. In the Fluent Bit config we specify which env vars to\nretrieve the values from using the `${VARIABLE}` notation.\n\nThese sensitive variables are defined in text files, to which access will be\nrestricted. A utility program called `envdir` is used to read and populate\nthe environment with these variables. This program is available in the\nofficial repos for most Linux distributions, and can be installed as\nfollows:\n\n```sh\nsudo apt install daemontools\n```\n\nThe files containing the sensitive env vars can be created as follows (as\nroot):\n\n```sh\nmkdir /etc/opensearch_creds\necho \"192.168.1.104\" \u003e /etc/opensearch_creds/OPENSEARCH_HOST\necho \"9200\" \u003e /etc/opensearch_creds/OPENSEARCH_PORT\necho \"admin\" \u003e /etc/opensearch_creds/OPENSEARCH_USER\necho \"ONEtwo333$$$\" \u003e /etc/opensearch_creds/OPENSEARCH_PASSWD\n```\n\nIf your Velociraptor is running as a service then only the `velociraptor`\nservice account needs access to the credential files, and in that case set\npermissions on them so that only that specific user has access:\n\n```sh\nchown -v velociraptor:velociraptor /etc/opensearch_creds/*\nchmod -v 600 /etc/opensearch_creds/*\n```\n\nExtra fields - `ClientId`, `FlowId`, and `ArtifactName` - are added to the\nprocessed records for downstream tracking purposes, but you may choose not\nto do so, or to add other fields. The artifact injects these into the execve\nenvironment and the Fluent config specifies the var -\u003e field mapping to\nretrieve them.\n\nWe don't parse any timestamp from the data because Velociraptor doesn't have\na primary timestamp field, nor even require any timestamps in results.\n\n#### Server preparation checklist\n\n1. Fluent Bit should be installed on the server. It's best to install it\n   [from the official repos](https://docs.fluentbit.io/manual/installation/linux)\n   in which case the binary should be located at\n   `/opt/fluent-bit/bin/fluent-bit`.\n2. Install the `envdir` utility via the `daemontools` package, as described\n   above.\n3. Create and secure the sensitive environment variable files, as described\n   above.\n\n#### Other command line data processors\n\nOther log forwarders such as Logstash and Filebeats work similarly, in\nprinciple, to Fluent Bit. So this artifact could be used as the basis for\nother forwarders or any other command line applications that consume JSONL\nformat. Any other CLI apps that read and process JSONL data could be used in\nthe same way using the basic processing logic contained in this artifact.\nHowever, fast startup time is a critical aspect because the application\nneeds to be launched for each targeted flow, so bloated apps such as\nLogstash are likely to be impractical when used this way. Fluent Bit is\nlightweight and fast!\n\nThis artifact could also be easily modified to watch for server collection\ncompletions instead of client collections.\n\n#### Tested with\n\n- Fluent Bit v4.0.3\n- Velociraptor v0.74.5\n- Opensearch v3.1.0\n\n---\n\nTags: #post-processing #Elasticsearch #OpenSearch #Splunk #Graylog #BigQuery\n#Chronicle #CloudWatch #Amazon #S3 #Azure #Datadog #Dynatrace #InfluxDB\n#Kafka #LogDNA #Loki #Oracle #PostgreSQL\n","Author":"@predictiple - 2025-07-13\n"}
{"Name":"Exchange.FreeBSD.Sys.Utx","Description":"Parse the utx file of the system (similar to wtmp on Linux). This covers user sessions, boots, shutdowns and system time changes.\nBecause FreeBSD discards fields for the entries of the utx file based on type (see `man getutxent`), no direct parsing of the file using \"vtypes\" is done (too complicated for me to define a structure for parsing), but rather native tools are used for accessing the data.\n\nUsing a value of \"time\" with the \"userRegex\" Parameter will give you all entries related to boots, shutdowns and system time changes.\n\nBeware: logout times are given in localtime! Furthermore, that column is not automatically parsed into timestamp values, because the tool output is not consistently a recognizable datetime.\n","Author":"Herbert Bärschneider"}
{"Name":"Exchange.Server.Enrichment.AI.Gemini","Description":"Query Gemini AI for analysis of data.\n\nParamaters:\n\n* `PrePrompt` - Added as preprompt. Default is: \n\"You are a Cyber Incident Responder and need to analyze data. You have an eye \nfor detail and like to use short precise technical language. Analyze the \nfollowing data and provide summary analysis:\"\n* `Prompt` - Is User prompt as string: When pushing a dict object via \nPromtData good practice is add some strings related to the type of data for \nanalysis or artifact name to provide context.\n* `PromptData` - add optional object to be serialized and added to the User prompt.\n* `Model` - Model to use for your request. Default is gemini-2.0-flash\n* `MaxTokens` - Set max token size  default 64000\n\nThis artifact can be called from within another artifact (such as one looking \nfor files) to enrich the data made available by that artifact.\n\ne.g\n\n`LET results = SELECT field1, field2, field3.... FROM source() WHERE ...`  \n`SELECT * FROM Artifact.Server.Enrichment.AI.Gemini(Prompt=\"Review Autoruns data:\",PromptData=results)`\n\nNOTE: there appears to be a bug in serialize() that is causing some issues in some large collections. \nIf you run into issues try reducing token size and filtering unnecessary data. \nThis is resolved in head 0.74.2 commit:99dba70 and full 1000000 tokens can be used\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Generic.Collection.UAC","Description":"This artifact leverages UAC (Unix-like Artifacts Collector) to collect artifacts\nfrom Unix-like systems, and then upload the output to the Velociraptor server.\n","Author":"Thiago Canozzo Lahr - @tclahr"}
{"Name":"Exchange.Generic.CommonLogFormat.AccessLogs","Description":"Parses Apache access logs to extract detailed request information.\n","Author":"Harsh Jaroli, Krishna Patel, Antonio Blescia (TheThMando)"}
{"Name":"Exchange.Generic.Detection.LunasecLog4shell","Description":"Uses the Log4Shell scanner of Lunasec to scan the file systems of\nall drives of the host for any sign of vulnerabilities related to\nLog4shell\n","Author":"Marinus Boekelo \u0026 Noël Keijzer - Northwave CERT"}
{"Name":"Exchange.Generic.Detection.WebShells","Description":"This artifact looks for evidence of a web shell being present on the system. It targets Windows and Linux hosts.\nThe artifact should be run on web servers, be it dedicated web servers or systems with integrated web servers. \nFor such machines, find the root directory of the web server and change the artifact parameters as needed.\n\nMultiple indicators for web shells are used: \n* files with suspicious strings commonly used in web shells\n* suspicious processes being spawned by the webserver process (Windows only)\n* recently created and changed files under the webroot directory\nFalse-positives might arise from web sites with remote code execution functionality willingly built in as well as recent changes to the served web sites.\nThe artifact was envisioned for hunting after potential malicious activity, so noise should be expected with the output.\n","Author":"Herbert Bärschneider @SEC Defence"}
{"Name":"Exchange.Generic.Events.TrackNetworkConnections","Description":"This artifact is meant for monitoring network connections on clients.\nIt periodically queries the existing network connections and emits lines for differences (new connections and missing/removed ones).\nNetwork connections are tracked and compared based on following elements: process id, layer 3 protocol, layer 4 protocol, local address used, local port used, remote address used, remote port used.\n\nThe network connection information is enriched with process information to make it easier to analyze emited lines.\n","Author":"Herbert Bärschneider @SEC Consult"}
{"Name":"Exchange.Generic.Forensics.CyLR","Description":"Uses CyLR tool to do live forensic on the host.\n\nNote this requires syncing the CyLR binary from the host.\n","Author":""}
{"Name":"Exchange.Server.Alerts.GenericMonitor","Description":"This is a template artifact to allow alerting on a monitoring artifact.\n\nSimply enter ArtifactName and modify VQL as desired.\n","Author":""}
{"Name":"Exchange.Linux.Sys.Getcap","Description":"Inspects extended file capabilities with getcap.  \nSince Linux 2.6.24, setcap can attach fine-grained privilege bits to \nexecutables, letting them perform the specific privileged actions they \nrequire instead of running as root.   \nIf a binary that’s writable or executable by non-privileged users is granted \nexcessive capabilities, attackers can exploit it for privilege escalation.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Remediation.Glob","Description":"This artifact uses glob to remove a file or folder.  \nTo recursively target a folder: ```C:\\folder\\path{,\\**}```  \nTo target multiple folders: ```C:\\{folder2\\path2{,\\**},folder\\path{,\\**}}``` \nhowever advised to just run 2 collections...   \n  \n WARNING: There has been a bug in older versions of Velociraptor that ```\\**```\n glob path will select all files. PLEASE SCOPE FIRST and use appropriate targeting.\n \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Registry.HVCI","Description":"This artifact will return the Enabled KeyValue in the Hypervisor-protected Code \nIntegrity (HVCI) registry path. An adversary may set the Enabled key to 0 \nif they intend to manipulate UEFI boot process.\n\nThe artifact will group by KeyName, KeyValue and KeyType to account for \nmultiple control sets.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Registry.HiddenUsers","Description":"Find hidden user accounts through registry values on the filesystem.\n\nIn Windows, adversaries may hide user accounts via settings in the Registry. \nFor example, an adversary may add a value to the Windows Registry \n(via Reg or other means) that will hide the user \"test\" from \nthe Windows login screen: \n\nreg.exe ADD 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList' /v test /t REG_DWORD /d 0 /f.\n\n* ATT\u0026CK tactic: Defense Evasion, Hide Artifacts: Hidden Users\n* ATT\u0026CK technique: T1564.002\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Windows.Memory.HollowsHunter","Description":"Use hollows_hunter to detect suspicious process injections.\n\nUpload any findings to the server, including process dumps.\n","Author":""}
{"Name":"Exchange.IPCheck.Virustotal","Description":"Submit a IP to Virustotal. Default Public API restriction is 4 requests/min (Inspired on Virustotal file Check created by Wes Lambert -- @therealwlambert).\n\nThis artifact can be called from within another artifact \n\nEx.\n\n  `SELECT * from Artifact.IPCheck.Virustotal(DestIP=$IP)`\n\n   EX 2\n   \n   Check ip into a netstat: \n   Call the artifact -\u003e Windows.Network.NetstatEnriched\n   \n    `SELECT * FROM source() WHERE DestIP != \"127.0.0.1\" AND Pid = 14604  (malicious connection)`\n    VT Notebook analysis.\n    \n    `LET VTKey \u003c= \"Your key\"`\n    `Let Results = SELECT * from source() WHERE DestIP != \"127.0.0.1\" AND DestIP`\n    `GROUP BY DestIP`\n    `SELECT *, {SELECT VTRating FROM Artifact.IPCheck.Virustotal(VirustotalKey=VTKey, ip=DestIP) } AS VTResults FROM foreach(row=Results)`\n    `ORDER BY VTResults DESC`\n","Author":"Adrian Lopez Moreno @AdrianX21"}
{"Name":"Exchange.IRIS.Sync.Asset","Description":"Synchronizes client information from Velociraptor to [DFIR-IRIS](https://dfir-iris.org/).\n\nParses available information from clients such as network interfaces, IP addresses, asset type and applied labels.\nOnce it has been added, the asset ID from DFIR-IRIS will be added as client metadata and `IRIS` will be added as label.\n\nIf this artifact is applied on a client that has the asset ID set in its metadata, it won't be readded but rather\nupdated: Labels and the compromised status will by synchronized.\n\n*Tested with Dfir-Iris API v2.0.4 (IRIS v2.4.7)*\n\n#### Hints:\n\n- If it fails to add the client to IRIS, it will assign the `IRIS-ERROR` label to it. A successful run afterwards will remove it.\n- It is **recommended** to add the parameters with 'Iris' prefix to the \u003ca href=\"#/host/server\"\u003eServer Metadata\u003c/a\u003e to ease the usage of the artifact. The metadata can alternatively be set from a notebook using VQL similar to this example:\n\n```\nSELECT server_set_metadata(IrisURL=\"https://dfir-iris.local:4433\",\n                           IrisKey=\"This-is-an_API_KEY\",\n                           IrisCaseId=\"1\",\n                           IrisRootCA='''-----BEGIN CERTIFICATE-----\n                           \u003c...\u003e\n                           -----END CERTIFICATE-----'''),server_metadata() FROM scope()\n```\n\n- You can define the compromise status of a system when creating and when updating the information. **However, if an asset is categorized as *compromised*, you cannot change the status using this artifact.** This is a safety measure to mitigate a potential high impact error. Beside that, you can freely change the status between *No*, *Unknown* and *To be determined*.\n- The true power of this artifact lies in the ability to quickly add many clients to DFIR-IRIS. As it is usually not needed to add all clients that are enrolled in Velociraptor to IRIS but rather an excerpt of important, suspicious, or compromised systems, you will *most likely use this artifact from within a notebook*.\n\n#### Example:\n\nto add just a few systems and have the results of the operation as JSON:\n\n```VQL\nSELECT client_id,{SELECT * FROM Artifact.Exchange.IRIS.Sync.Asset(clientId=client_id,isCompromised=\"Y\")} FROM clients(search=\"label:compromised\")\n```\n\n**Example** to add many systems in a performant way and have the results in well-structured columns.\n\n```VQL\nSELECT * FROM foreach(row={SELECT * FROM clients(search=\"label:suspicious\")},query={SELECT * FROM Artifact.Exchange.IRIS.Sync.Asset(clientId=client_id,isCompromised=\"UNK\")},async=true)\n```\n**ATTENTION: ALWAYS USE ASYNC=FALSE IF CLIENTS ARE PRESENT IN THE TABLE MULTIPLE TIMES! OTHERWISE THESE ASSETS MIGHT BE DUPLICATED IN IRIS!!!**\n","Author":"Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult) | Updated 2024-08 - [10root Cyber Security] (https://10root.com)"}
{"Name":"Exchange.IRIS.Timeline.Add","Description":"Adds Velociraptor rows as timeline entries to [DFIR-IRIS](https://dfir-iris.org/).\n\nLinks the assets and IOCs as specified in the parameters. Additionally, if the client does not yet exist in Iris, this artifact will leverage the **IRIS.Sync.Asset** artifact to add the asset to Iris first and link it in the event.\n\n*Tested with Dfir-Iris API v2.0.4 (IRIS v2.4.7)*\n\n#### Notes:\n\n- The following parameters are *mandatory*:\n  1. **Timestamp**: This specifies the name of the field in the source containing the event timestamp. For this artifact to parse it correctly the field should contain a parsed timestamp object. If you are using this artifact from a global notebook then the field is probably already parsed. If not then you should ensure that it is parsed in your source using the `timestamp` function.\n  2. **Title**: This specifies the name of the field in the source containing the event title which will be used on the Iris timeline.\n\n#### Hints:\n\n- It is **recommended** to add the parameters with 'Iris' prefix to the \u003ca href=\"#/host/server\"\u003eServer Metadata\u003c/a\u003e to ease the usage of the artifact. The metadata can alternatively be set from a notebook using VQL similar to this example:\n\n```\nSELECT server_set_metadata(IrisURL=\"https://dfir-iris.local:4433\",IrisKey=\"This-is-an_API_KEY\",IrisCaseId=\"1\",IrisRootCA='''-----BEGIN CERTIFICATE-----\n\u003c...\u003e\n-----END CERTIFICATE-----'''),server_metadata() FROM scope()\n```\n\n- The true power of this artifact lies in the ability to quickly add many entries to DFIR-IRIS. You will *most likely use this artifact from within a notebook*.\n- There is a basic mechanism established to stop duplicates from being added. An event is compared to existing entries based on asset name, flow id, timestamp and the description. You can add multiple events happening at the same time for the same asset originating from the same flow as long as the description varies, e.g. by including dynamic details of the activity that differentiates between the events at the same time like a process name.\n\n#### Notebook usage example:\n\n```VQL\nLET ClientId \u003c= '''C.daa3bab35a125058'''\nLET FlowId \u003c= '''F.CPTTPTRO63LF6'''\nLET ArtifactName \u003c= '''Windows.Timeline.MFT'''\n\n-- This is the query that should return the events you want to add to Iris.\n-- You might want to add a WHERE clause to filter out unwanted events or\n-- select only specific fields. In this example we limit it to 10 records.\nLET eventsToAdd = SELECT * FROM source(artifact=ArtifactName)\n                  LIMIT 10\n\nSELECT * FROM foreach(\n  row={\n    SELECT to_dict(item=_value) AS event,\n           serialize(format=\"json\", item=_value) AS raw_event\n    FROM items(item={ SELECT * FROM eventsToAdd })\n  },\n  query={\n    SELECT *\n    FROM Artifact.IRIS.Timeline.Add(\n      AdditionalAssetId=\"1,2,3\",\n      AddToGraph=true,\n      AddToSummary=false,\n      IocId=\"8,9,10\",\n      Category=\"pers\",\n      clientId=ClientId,\n      Description=format(\n        format=\"Malicious file dropped to the system to establish persistence.\\nFile path: %v\\nActivity: %v\",\n        args=[event.path, event.message]),\n      RawEvent=raw_event,\n      DisableSSLVerify=true,\n      FlowId=FlowId,\n      Timestamp=event.event_time,\n      Title=\"Persistence established via Autostart Location\")\n  },\n  async=false)\n```\n**ATTENTION: ALWAYS USE ASYNC=FALSE OTHERWISE ANY ASSETS THAT NEED TO BE CREATED MIGHT BE DUPLICATED!!!**\n","Author":"Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult) | Updated 2024-08 - [10root Cyber Security] (https://10root.com)"}
{"Name":"Exchange.Windows.System.Powershell.ISEAutoSave","Description":"This artifact hunts for Powershell ISE autosave files and extracts ISE user \nconfig.\n\nPowershell ISE generates auto-save files for if the editor crashes.  \nuser.config holds ISE session metadata including a MRU for the relevant user.  \n","Author":""}
{"Name":"Exchange.Windows.Detection.IdatLoader","Description":"This artifact enables running Yara over processes in memory.\nTargeting detection of IDAT Loader and final payloads \nobserved in field.  \n\nNote: may see some false positives on security tools, \nadd to whitelist appropriately.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Memory.InjectedThreadEx","Description":"This artifact runs Get-InjetedThreadEx to detect process injection and hooking.\n\n The artifact uses environment variables to configure the scan and outputs \n parsed fields, as well as a raw section. Some of the scanning options include: \n Default, Brief and Aggressive. The User can also target a specific ProcessId.\n\n For all process scanning the recommendation would be first run in brief mode, \n then add more aggressive scanning as required. The default timeout has been \n increased significantly to cover aggressive scanning mode.  \n\n IMPORTANT NOTES::\n \n - this query is complex powershell. Run it after a scriptblock hunt as it \n will generate scriptblock logs, even if not configured.\n - Some EPP/EDR tools may block the scriptblock execution, please ensure \n exclusions are made for velociraptor child powershell processes.  \n - The default output for Default and Aggressive scan excludes Thread User \n information, however this can be confired by the field IsUniqueThreadToken \n and if 'True' checked in raw data in the Windows.Memory.InjectedThreadEx/RawResults \n namespace.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Applications.KACE_SW_Process","Description":"This artifact parses the KACE software monitoring sqlite database - ksw_process.db\nwhich provides excellent third party evidence of execution that may \nbe useful during investigation or detection work.  \n\nThe artifact can also be modified to target other KACE sqlite databases or set \ntimebounds using stime or etime fields.  \n  e.g:    \n  `SELECT * FROM process WHERE stime \u003e '2023-01'`   \n  `SELECT * FROM process WHERE etime \u003c '2022-12-25'`  \n  `SELECT * FROM process WHERE stime \u003e '2023-01' AND etime \u003c '2023-01-06'`     \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Remediation.KillProcess","Description":"Quick and dirty monitoring artifact to kill a process by Image Name.\nWe monitor the Microsoft-Windows-Kernel-Process ETW provider and leverage \ntaskkill to kill the process.\n\nThere are no guardrails on this artifact please be VERY careful adding new entries.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.MacOS.Forensics.KnockKnock","Description":"This artifact will run Knocknock to collect autorun output.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Label.DomainController","Description":"This artifact watches for completion of the `watchArtifact`\nand assigns the given `setLabel` if the `WHERE` condition is matched.\n\nAnytime the `Windows.System.Services` hunt is run across the environment,\nresults will be interpreted by this server-side artifact.\n\nIn this configuration, it will match on all systems running \n\"Active Directory Domain Services\" which likely indicates the system\nis a Domain Controller and will label it as such.\n","Author":"Eric Capuano - @eric_capuano"}
{"Name":"Exchange.Linux.Persistence.LdPreload","Description":"Parses the GNU glibc **LD_PRELOAD** mechanism. Any path listed in \n`/etc/ld.so.preload` or assigned to `LD_PRELOAD` is force‑loaded into every \ndynamically linked executable. A single \nrogue entry therefore grants system‑wide code execution and persistence at\nprocess start‑up.\n\nThe artifact has two scopes:\n\n• Parses `/etc/ld.so.preload`   \n• Checks `/proc/\u003cpid\u003e/environ` for an `LD_PRELOAD=` entry.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Linux.Applications.Docker.Ps","Description":"Get Docker containers by connecting to the docker.socket. Same as running `docker ps`","Author":"Ján Trenčanský - j91321@infosec.exchange"}
{"Name":"Exchange.Linux.Applications.WgetHSTS","Description":"Wget creates a HSTS log file in a user's home directory.  This can\ncontain forensically relevant information.\n","Author":""}
{"Name":"Exchange.Linux.Carving.SSHLogs","Description":"Linux systems typically store audit events in syslog. In particular successful \nssh logins are especially important for some investigations.\n\nUnfortunately they are sometimes deleted by attackers or rotated out. If you \nare desperate it might be worth trying to carve for ssh login events.\n\n### NOTES\n\n1. Syslog does not typically store the year in the date - since carving can \n   recover very old records it might be difficult to pinpoint the time.\n2. This artifact will take a long time! You probably will have to increase \n   the timeout. \n","Author":""}
{"Name":"Exchange.Linux.Collection.Autoruns","Description":"This artifact collects various autorun files for upload.\nBased on TriagePersistence from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.BrowserExtensions","Description":"Collect Browser Extensions and upload them.\nBased on TriageWebBrowserExtensions from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.BrowserHistory","Description":"Collect Browser History and upload them.\nBased on TriageWebBrowserHistory from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.CatScale","Description":"This is a simple artifact that leverages Cat-Scale to collect many\ndifferent artifacts from a Linux host, then uploads the results to\nthe Velociraptor server.\n\nFrom the project's description:\n\n\"Linux CatScale is a bash script that uses live of the land tools\nto collect extensive data from Linux based hosts. The data aims to\nhelp DFIR professionals triage and scope incidents. An Elk Stack\ninstance also is configured to consume the output and assist the\nanalysis process.\"\n\nhttps://github.com/FSecureLABS/LinuxCatScale\n\nhttps://labs.f-secure.com/tools/cat-scale-linux-incident-response-collection/\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Linux.Collection.DBConfig","Description":"Collect database configurations and upload them.\nBased on TriageDatabaseConfigsAndLogs from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.History","Description":"Collect history files from unix/linux utilities and upload them.\nBased on TriageHistory from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.ExtractKthread","Description":"This artifact parses `/proc/[0-9]*/status` files and extracts the `ProcessName` and `Kthread` values. Helpful for identifying imposter processes.\n","Author":"Andy Swift"}
{"Name":"Exchange.Linux.Collection.NetworkConfig","Description":"Collect network config files and upload them.\nBased on TriageNetwork from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.SysConfig","Description":"Collect system configurations and upload them.\nBased on TriageSystemConfiguration from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.SysLogs","Description":"Collect system logs and upload them.\nBased on TriageSystemLogs from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Collection.UserConfig","Description":"Collect user configurations and upload them.\nBased on TriageUserConfiguration from forensicartifacts.com\n","Author":"alternate"}
{"Name":"Exchange.Linux.Debian.GPGKeys","Description":"Extract keys, fingerprints and identities from GPG keys.\n\nThis artifact runs the tool \"gpg\" (must be installed on the system) on the\nfiles found matching the globs in KeyringFiles. The files need not be keyrings.\n\nEvery entry consists of a public or secret key, optional subkeys and optional\nidentities. This artifact may be useful in other artifacts to inspect GPG\nfiles or GPG data in order to correlate keys by their IDs, or look at connected\nuser IDs.\n\nThis artifact doesn't provide any information about whether a key is\n\"trustworthy\".\n\nNote that some keyring files contain a lot of subkeys and identities.\n\nThe following columns are returned by this artifact:\n\n  - OSPath: Path to the key file\n  - KeyInfo: dict with the following entries:\n    - Type: pub|sub\n    - ID\n    - Fingerprint\n    - Algorithm\n    - Validity\n    - Created\n    - Expiry\n  - SubKeys: array of dicts with the same structure as KeyInfo\n  - UserIDs: array of strings (name and e-mail)\n","Author":""}
{"Name":"Exchange.Linux.Detection.BruteForce","Description":"\nLinux detection brute force module.\nThis code is based on https://github.com/RCarras/linforce/blob/main/linforce.sh\n   \nThis module uses btmp/wtmp files to search for possible brute force attacks comparing:\n\n* Wtmp (successful attempts) and btmp (failed attempts) Logs.\n* Time interval between failed login attempts, and against successful logins.\n\nType of attacks:\n\n* Basic Brute Force Attack: multiple consecutive attempts from an IP.\n* Password Spraying: multiple consecutive attempts from different users with the same password.  \n* Dynamic IP Attack: multiple consecutive attempts from different IPs.\n\nCreators:\n\n* Rafael Carrasco: https://www.linkedin.com/in/rafael-carrasco-vilaplana-3199a492\n* David Rosado: https://www.linkedin.com/in/david-rosado-soria-4416b8230\n","Author":""}
{"Name":"Exchange.Linux.Detection.CVE20214034","Description":"This artifact lists processes running as root that were spawns by processes that are not\nrunning as root. This kind of behavior is normal for things like sudo or su but for other\nprocesses (especially /bin/bash) it could represent a process launched via CVE-2021-4034.\n\nThe artifact looks for running processes with this property as well as search the auth\nlog files for evidence of past execution of this exploit.\n","Author":""}
{"Name":"Exchange.Linux.Detection.Honeyfiles","Description":"This artifact deploys honeyfiles according to the Honeyfiles CSV parameter. It then monitors access to these files using eBPF.  The process tracker must be enabled, we use this to enrich events. You also must be using Velociraptor \u003e= 0.74 to support eBPF. Honeyfiles created by this artifact are removed at exit.\n\n* TargetPath - Location to create honeyfile.\n* Enabled - Only generate the honeyfile if this is set to 'Y'\n* MagicBytes - The starting magic bytes of the honeyfile.\n* MinSize,MaxSize - The size of the honeyfile will be a random value between MinSize and MaxSize.\n","Author":"Zane Gittins \u0026 Matt Green (@mgreen27)."}
{"Name":"Exchange.Linux.Detection.IncorrectPermissions","Description":"NOTE: Requires velociraptor 0.7.1 or higher. – Alternatively, import the\nartifact dependency Linux.Sys.Groups manually into your installation.\n\nThis artifacts checks a number of files and directories to verify whether\nthey have the expected owner, group owner and mode. A file with an incorrect\nowner may allow attackers to modify important system files. Similarly,\nincorrect mode, like word-writable configuration or passwd/shadow files may\nalso be signs of serious misconfiguration or signs of malicious activity.\n\nThe parameter FilesToInspect contains lines of globs to search for. Each\nline may specify expected user, expected group, expected file mode and\nexpected directory mode. It is very important that the order of the lines\nis in order of increasing specificity. For example:\n\n```csv\n/etc/*,root,root,644,755\n/etc/?shadow*,,shadow,640,\n```\n\nHere, every file in the directory /etc is expected to be owned by root:root\nand have file permissions set to 644, and group permissions set to 755.\nThe files under /etc matching \"?shadow*\" are still expected to be owned by\nroot, since the override for user is empty, but the group is no longer\nexpected to be \"root\", but \"shadow\". File permissions should be \"640\"\ninstead of \"644\". Note that this is an example and will most likely return\nhits, since a number of files in /etc have different owners and modes.\n\n\"User\" may either be an integer (UID) or a string (username). \"Group\"\nmay be either an integer (GID) or a string (group name). The names for all\nUIDs and GIDs are looked up and displayed along with their IDs in the result.\n\nModes may be specified in either octal numbers or strings.\n\nModes specified in octal numbers, e.g. 755, 640, 1777, are matched\nusing a regular expression, so that both \"0640\", \"640\" and \"100640\" matches\n\"100640\". An implicit anchor, '$', is used to match against the end of the\noctal mode string.\n\nWhen using mode strings (NumericMode unchecked), modes take the format\n\"-rwx-r-x-r-x\". Regex comparison is used, and an implicit '$' anchor\nis inserted at the end of the string. String modes allows for verifying only\ncertain bits of permissions, like ensuring that only the owner has write \naccess, no one has permission to execute, but read access is not important:\n\"r.-.--.--\". Or ensuring that SUID/GUID is not set. For finding files\nspecifically with SUID set, look at Linux.Sys.SUID.\n\nMixing both formats is not supported and will result in unexpected results.\n\nThis artifact can also be used to look for all files owned by root with\nworld-writable permissions, for instance. Uncheck NumericMode, add a glob,\nselect \"root\" as owner and enter any invalid permission string in UserMode.\nThis will return every file owned by root. In the notebook, add something\nlike \"WHERE Mode=~'w.$'\" to the query. The User field may also be empty,\nessentially returning every file in the glob as long as the UserMode field\ncontains an invalid value. This turns this artifact into a file finder-like\ntool with metadata like username and group names for further processing.\n\nThe following columns are returned:\n\n  - OSPath\n  - IsDir\n  - UID\n  - User\n  - EUser (expected user from FilesToInspect)\n  - GID\n  - Group\n  - EGroup (expected group from FilesToInspect)\n  - Mode (file/directory mode/permissions)\n  - EMode (expected file/directory mode from FilesToInspect)\n  - Mismatch (a comma-separated string of one or several of \"uid\", \"gid\" and \"mode\")\n  - Mtime\n  - Ctime\n  - Atime\n\nNote that the artifacts used to look up usernames and group names use the\nfiles /etc/passwd and /etc/group. You will have to modify this artifact to\nuse `getent passwd`/`getent group` to use NSS and get users and groups from\nActive Directory etc.\n\nThe provided default values in FilesToInspect is an example only.\n","Author":"Andreas Misje – @misje"}
{"Name":"Exchange.Linux.Detection.MemFD","Description":"This artifact will parse /proc/*/exe files and look for processes \n that have been executed from memory via memfd_create()\n","Author":"alternate"}
{"Name":"Exchange.Linux.Detection.SSHKeyFileCmd","Description":"This artifact will parse ~/.ssh/authorized_keys and ~/.ssh/id_*.pub looking for the command option\nto detect potential persistence\n","Author":"alternate"}
{"Name":"Exchange.Linux.Detection.vRealizeLogInsightExploitation","Description":"Checks for exploitation of vRealize Log Insight VMSA-2023-0001 exploitation \nartifacts. The presence of a path traversal in the FileName field\nis evidence of compromise. There is still a path to exploitation without\nleveraging the path traversal vuln. Any attempt to run\nREMOTE_PAK_DOWNLOAD_COMMAND from a non-vRealize server is malicious.\n#VMWare #vRealize #exploit\n","Author":"ACEResponder.com"}
{"Name":"Exchange.Linux.Event.Network.Nethogs","Description":"Monitor network use per process using the tool \"nethogs\". This artifact will\nlist all processes that produces (non-local) network traffic on the client.\nThe NetstatEnriched artifact is used to provide detailed information about the\nprocess using netstat and the process tracker, along with the bytes received\nand sent in bytes per second.\n\nNote that the tool/package \"nethogs\" needs to be installed before calling this\nartifact. Set the paramater InstallNethogs to true in order to automatically\ninstall the package and its dependencies (Debian-based systems only).\n\nUsing techniques like stacking, rare occurances of processes contacting the\nInternet can be spotted. Notebook suggestions give you total traffic overview,\nas well as boilerplate code to plot the traffic for a selected process.\n","Author":"Andreas Misje - @misje"}
{"Name":"Exchange.Linux.Forensics.EnvironmentVariables","Description":"This artifact detects potential persistence mechanisms on Linux systems by analyzing environment variable files and login scripts.  \n\n**MITRE ATT\u0026CK**: [T1546.004](https://attack.mitre.org/techniques/T1546/004/)\n","Author":"Idan Beit-Yosef @ ibyf0r3ns1cs"}
{"Name":"Exchange.Linux.Forensics.ProcFD","Description":"This artifact collects metadata about open file descriptors from active processes on a Linux system. \nOutputs include regular files, sockets, device files, and deleted files used by each process.\n","Author":"Chris DiSalle - @chrisdfir"}
{"Name":"Exchange.Linux.Forensics.RecentlyUsed","Description":"Parses the 'recently-used.xbel' XML file for all standard Linux users.\n\nThis file notably records a list of recent files accessed by applications and is also an alternative source for download history.\n","Author":"Deepak Sharma - @rxurien"}
{"Name":"Exchange.Linux.Forensics.Targets","Description":"This artifact collects all necessary artifacts files and directories from Linux operating system. \n","Author":"Cedric MAURUGEON - @kidrek"}
{"Name":"Exchange.Linux.LogAnalysis.ChopChopGo","Description":"\nThis artifact leverages ChopChopGo to enable usage of Sigma rules to faciliate detection within Linux logs.\n\nFrom the project's description:\n\n`ChopChopGo inspired by Chainsaw utilizes Sigma rules for forensics artifact recovery, enabling rapid and comprehensive analysis of logs and other artifacts to identify potential security incidents and threats on Linux.`\n","Author":"Wes Lambert - @therealwlambert, @weslambert@infosec.exchange"}
{"Name":"Exchange.Linux.Memory.AVML","Description":"Acquires a full memory image in LiME output format. We download\navml and use it to acquire a full memory image.\nNOTE: This artifact usually transfers a lot of data. You should\nincrease the default timeout to allow it to complete.\n","Author":"Zawadi Done - @zawadidone"}
{"Name":"Exchange.Linux.Network.NM.Connections","Description":"NetworkManager is a popular high-level interface for configuring\nnetworks in Linux systems, in particular Ubuntu and other Debian-based\nflavours. This artifact lists the NetworkManager state, all configured\nconnections and their settings, as well as when the connections were\nlast activated. A list of BSSIDs per connection is also retrieved.\n\nAll the information is retrieved from NetworkManager configuration\nfiles and other state files. Connection information is stored in\nthe /etc/NetworkManager/system-connections as long as the \"keyfile\"\nplugin is selected in /etc/NetworkManager/NetworkManager.conf (this\nis the default). Note that by default, NetworkManager doesn't manage\nconnections defined in /etc/network/interfaces.\n\nWhether the connections are currently active is not stored in file\nand must be queried using using nmcli or through dbus. This artifact\nruns nmcli as an external program to retrieve this information.\nInformation such as IP addresses, routes, DNS servers, available Wi-Fi\nnetworks and other settings will also be collected through nmcli.\n\nThis artifact also exports two functions, parse_ini(filename) and\nparse_ini_as_dict(filename), which may be useful to parse INI files\nin other artifacts.\n","Author":"Andreas Misje - @misje"}
{"Name":"Exchange.Linux.Network.Nethogs","Description":"Monitor network use per process using the tool \"nethogs\". This artifact will\nlist all processes that produces (non-local) network traffic on the client.\nThe NetstatEnriched artifact is used to provide detailed information about the\nprocess using netstat and the process tracker, along with the bytes received\nand sent in bytes per second.\n\nNote that the tool/package \"nethogs\" needs to be installed before calling this\nartifact. Set the parameter InstallNethogs to true in order to automatically\ninstall the package and its dependencies (Debian-based systems only).\n\nUsing techniques like stacking, rare occurances of processes contacting the\nInternet can be spotted. Notebook suggestions give you total traffic overview,\nas well as boilerplate code to plot the traffic for a selected process.\n\nAlso see Linux.Event.Network.Nethogs for a nethogs event artifact.\n","Author":"Andreas Misje - @misje"}
{"Name":"Exchange.Linux.Network.Netstat.Watcher","Description":"Collects a one-time snapshot of current non-LISTEN remote connections and a continuous diff stream of added/removed/changed connections. Loopback destinations are excluded by default (127.0.0.1 and ::1) via a configurable regex.  The sampling interval (SampleIntervalSec) and the overall monitoring window (MonitorDurationSec) are fully parameterized. Each record includes process metadata via process_tracker_get\n","Author":"Antonio Blescia (TheThMando)"}
{"Name":"Exchange.Linux.Remediation.Quarantine.IPTables","Description":"Quarantine a Linux host using iptables rules.\n\nNOTE: This is still a work in progress and may not work exactly as expected.  Only use this artifact in a TEST environment/lab. It has been tested against Ubuntu hosts with iptables enabled.\n\nNOTE: There is now a built in Linux.Remediation.Quarantine which works a bit better\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Linux.Sys.APTHistory","Description":"APT (Advanced Package Tool) maintains a log of software installation/removal/upgrades, as well as associated command-line invocations.\n\nThis artifact parses the APT `history.log`, as well as archived history logs to provide this information.\n","Author":""}
{"Name":"Exchange.Linux.Sys.JournalCtl","Description":"Parse the output of the journalctl command. Journalctl is an interface to the systemd journal, which records information about system events.\n","Author":"Wes Lambert -- @therealwlambert/@weslambert@infosec.exchange"}
{"Name":"Exchange.Linux.Sys.SystemdTimer","Description":"List and parse content of Systemd timers.","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Linux.Sysinternals.Sysmon","Description":"Parses syslog for Sysmon events on Linux\n\n**Reference**: https://github.com/Sysinternals/SysmonForLinux\n\nThis artifact can also be modified to forward events (as a client\nevent artifact), similar to Windows.Sysinternals.SysmonLogForward.\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Linux.Sysinternals.SysmonEvent","Description":"Parses syslog for Sysmon events on Linux using a unix domain socket.\n\nNOTE: This is an experimental patch for sysmon that gets it to write events \nto a unix domain socket. \n\nUntil it merges upstream you can get it from here:\n\n**Reference**: https://github.com/Velocidex/SysmonForLinux\n","Author":""}
{"Name":"Exchange.Linux.System.BashLogout","Description":"Capture Bash logout files for examination of abnormal activity. \n\nBash logout files are used to run certain commands upon user logout, such as clearing the shell or terminal state. An adversary could leverage this capability to clear logs, cover tracks, delete files, etc.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.Linux.System.PAM","Description":"This artifact enumerates applicable lines from the files that reside in `/etc/PAM.d/`. This information can be useful for auditing and compliance purposes, or to identify suspicious activity on Linux systems.\n\nFor example, we could use the `RecordFilter` parameter to check for the presence of `pam_exec.so`, which can be used within PAM configuration to invoke arbitrary scripts.  \n\n\nFrom MITRE ATT\u0026CK:\n\nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is PAM_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow\n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as PAM_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.\n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Applications.Cache","Description":"Applications can use the NSURL cache to store specific data that is useful to the operation of the application in a `Cache.db` file on disk. The data contained within this file could potentially be useful to investigators or incident responders, such as URLs that were accessed, as well as data requested or returned.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.Applications.Firefox.History","Description":"Read all Users Firefox history.\n","Author":"https://github.com/x64-julian"}
{"Name":"Exchange.MacOS.Applications.KnowledgeC","Description":"On macOS, the KnowledgeC DB can provide various details around application activities and usage, as well as device power status.\n\nMore information about this database can be found here: \n\nhttps://www.mac4n6.com/blog/2018/8/5/knowledge-is-power-using-the-knowledgecdb-database-on-macos-and-ios-to-determine-precise-user-and-application-usage\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Applications.NetworkUsage","Description":"On macOS, the NetUsage DB can provide various details around application network utilization. With this artifact, we can get an idea of what applications are utilizing the network for communications and to what degree. We can also identify if usage has occurred through a WIFI network or a wired network.\n\nMore information about this database can be found here: \n\nhttp://www.mac4n6.com/blog/2019/1/6/network-and-application-usage-using-netusagesqlite-amp-datausagesqlite-ios-databases\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Applications.Notes","Description":"This artifact provides details about notes taken using the default Notes application on macOS.  These notes can be useful during an investigation, especially if tied to interesting files.  \n\nDeleted notes and attachments can also be recovered in some instances.\n\nThe SQL query within this artifact was primarily derived from Yogesh Khatri's referenced blog post.\n\nNOTE: This artifact may not cover all attachments at this time, and there are many more great pieces of data to discover! More information can be found in the `ZICCLOUDSYNCINGOBJECT` table.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Applications.Safari.Downloads","Description":"Parses Safari downloads for all standard macOS users\n\n**NOTE**: By default Safari download history is only retained for 24 hours\n","Author":"Deepak Sharma - @rxurien"}
{"Name":"Exchange.MacOS.Applications.Safari.History","Description":"Parses Safari history database\n","Author":"Deepak Sharma - @rxurien"}
{"Name":"Exchange.MacOS.Applications.SavedState","Description":"On macOS, certain application state is saved in `/Users/*/Library/Saved Application State/`. \n\nWe can check these files to determine the last time an application was opened, the title of the application window, and when the application/window was later restored, such as after login or reboot.\n\nIn general, the following has been observed:\n\n- The 'SavedState' files are created when the application is started.\n- `SavedState` directory - `Btime` - Last time the application was opened by the user.\n- `SavedState` directory - `ModTime` - When the application state was last restored (such as after login/reboot).\n- `data.data` files - the actual data within the app, such as the scrollback for a `Terminal` window. The data within can be an (AES-128-CBC) encrypted blob. This data can be decrypted using the appropriate `NSDataKey` value found in `windows.plist`.\n- `data.data` - `ModTime` - changes when new data is added to the state, for example, when interacting with the Terminal application.\n- `windows.plist` -- contains the name of application windows (NSTitle, as well as other information such as:\n  - `NSDataKey` \n  - `NSDockMenu.name` -- names respective to the user's dock/etc.\n  - `NSWindowID` -- can be used to link the `NSDataKey` to the `PersistentUIRecord` value in the `data.data` file. \n- `windows.plist` - `BTime` - last time application was restored\n- `windows.plist` - `ModTime` - changes when new data is added to the state, for example, when interacting with the Terminal application.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Collection.Aftermath","Description":"This is a simple artifact that leverages Afermath to collect many different forensic artifacts from a macOS host, then uploads the results to the Velociraptor server.\n\nFrom the project's description:\n\nAftermath is a Swift-based, open-source incident response framework.\n\nAftermath can be leveraged by defenders in order to collect and subsequently analyze the data from the compromised host. Aftermath can be deployed from an MDM (ideally), but it can also run independently from the infected user's command line.\n\nhttps://github.com/jamf/aftermath\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.MacOS.Files.FileMonitor","Description":"This artifact parses Objective-See's FileMonitor log.\n\nMore information about Objective-See and FileMonitor can be found here:\n\nhttps://objective-see.org/products/utilities.html\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.MacOS.Forensics.ASL","Description":"This artifact parses the ASL (Apple System Log) v2 files located at \n/private/var/log/asl/*.asl\n","Author":"Yogesh Khatri (@swiftforensics), CyberCX"}
{"Name":"Exchange.MacOS.Logs.MacMonitor","Description":"This artifact parses JSONL-formatted logs generated by MacMonitor.\n","Author":""}
{"Name":"Exchange.MacOS.Network.ApplicationLayerFirewall","Description":"This artifact provides information around the configuration of the application firewall for a macOS host. \n\nThis can be useful for auditing to ensure compliance, overall safety, or to identify tampering with allowed application connections or firewall-related restrictions.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.Network.Bluetooth","Description":"Collect information about connected or paired Bluetooth-enabled devices.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.Network.DHCP","Description":"It can be useful to view DHCP lease information on an endpoint.  If the  `LeaseLength`, `RouterIPAddress`, `SSID`, or other values are not as expected,  it could potentially indicate a rogue DHCP server on the network, or just misconfiguration.\n\nEither way, the information provided by this artifact can be used to help defenders find unexpected DHCP lease configuration.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.Network.LittleSnitch","Description":"This is artifact parses Little Snitch's network traffic log.\n\nMore information about Little Snitch can be found here:\nhttps://www.obdev.at/products/littlesnitch/index.html\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.MacOS.Network.RecentWifiNetworks","Description":"This artifact looks for recent Wifi networks to which a host has joined. This can be useful in determining where a machine has been, or if a user has joined an illegitimate or unauthorized wireless network.\n*Tested on macOS Monterey","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.ParallelsVM.SuspendedMemory","Description":"Looks for suspended Parallels VM owned by any user on a MacOS system. Can automatically upload the virtual memory files if found.\n\nIf a \"*.mem.sh\" file exists, that VM is running and not suspended.\n\n**NOTE:** Uploading the Parallels memory file can take a while due to the size.\n","Author":"Brady Semm - @btsemm"}
{"Name":"Exchange.MacOS.Sys.Automator","Description":"This artifact collects information about Automator actions and workflows. \n\nIt can be used to identify malicious actions inserted into common/default workflows, or non-standard workflows.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.Sys.BashHistory","Description":"This artifact is a modified version of the Linux.Sys.BashHistory artifact that enables grep of Bash and alternate shell history and *session* files.\n\nSession files can be helpful in determining an approximate timeframe in which certain commands were run (the session start/end time), as traditional history files do not provide this information. \n\nhttp://www.swiftforensics.com/2018/05/bash-sessions-in-macos.html\n\nThis artifact can also be used to target other files located in the user profile such as\n*_profile and *rc files.\nshell history: /{root,home/*}/.*_history\nprofile: /{root,home/*}/.*_profile\n*rc file: /{root,home/*}/.*rc\n\ntags: .bash_history .bash_profile .bashrc\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.System.LocationServices","Description":"This artifact looks for applications that are registered and allowed for use of location services by checking the plist file in `/var/db/locationd/clients.plist`.  \nThis can be useful to help determine if these settings have been modified by an attacker to perform location tracking.\n\nFor more information about how location services could be abused, see the following:\n\nhttps://medium.com/@slyd0g/where-in-the-world-is-carmen-sandiego-abusing-location-services-on-macos-10e9f4eefb71\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.MacOS.System.Man","Description":"`man` is typically used to provide information about how to use various commands. It's configuration file is located at `/private/etc/man.conf` on most macOS systems.\n\nWhile root access is required to do so, this configuration could be modified by an adversary to stealthily achieve persistence in an environment. \n\nThis artifact collects any entries in `man.conf` which appear to specify a non-default binary for use with `man` or `whatis`.\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.System.MountedDiskImages","Description":"This artifact checks for mounted disk images using the `hdiutil` command.\n","Author":"Wes Lambert -- @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.UnifiedLogHunter","Description":"This artifact allows for live hunting through Apple's Unified Logs using the native `log` command.\n\nThe Unified Logs can be a great resource for learning about system events. There are many logging subsystems that can provide a wealth of data for investigators.\n\nHowever, users should ensure their searches are scoped appropriately (date/time/event type/etc), as a lot of data can be returned, which could affect the ability to review the collected data or potentially impact client performance.\n\nThe `Predicate` parameter can be used to filter logs. Example filters are included as artifact parameters.\n\nUsers may need to adjust the `Length` parameter to accomodate a large number of events being returned.\n\nIf you would like to perform an offline collection, or only care about collecting the raw files associated with this data, consider using [Exchange.MacOS.UnifiedLogParser](https://docs.velociraptor.app/exchange/artifacts/pages/macos.unifiedlogparser/).\n","Author":"Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.MacOS.UnifiedLogParser","Description":"\nThis is a simple, un-optimized artifact that leverages Mandiant's `macos-unifiedlogs`/`unifiedlog_parser` to obtain parsed log information from macOS's Unified Log.\n\nFrom the project's description:\n\nA simple Rust library that can help parse the macOS Unified Log files.\n\nUnified Logs were introduced in macOS version 10.12 (Sierra, 2016). Part of Apple's goal to create a unified log format for all Apple products. They exist on macOS, iOS, watchOS, tvOS. The Unified Logs replace many of the old log formats Apple used. This simple library can be used to parse files.\n\nAdditional information: https://github.com/mandiant/macos-UnifiedLogs\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.Applications.OfficeMacros.MacroRaptor","Description":"This artifact implements OleTools MacroRaptor capability in VQL.\n\nUse as a Hunt or triage capability.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.MagicWeb","Description":"This artifact will find evidence of NOBELIUM’s MagicWeb.\n\nThe artifact consists of two checks:\n\n1. Search for non default PublicKeyToken references in the \nMicrosoft.IdentityServer.Servicehost.exe.config file (31bf3856ad364e35 default).  \n2. Search for untrusted authenticode Microsoft.IdentityServer.*.dll files\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Generic.Detection.ManageEngineLog","Description":"This artifact will enable discovery of logs associated with observed exploitation \nof critical ManageEngine vulnerability: CVE-2022-47966.\n\nThe artifact leverages Yara.Glob to scan ManageEngine logs and is cross \nplatform.\n","Author":"Matt Green - @mgreen27, Jason Frost - @jaysonfrost2"}
{"Name":"Exchange.Windows.EventLogs.MoveIt","Description":"This Artifact enables scoping EventLogs from Progress Software's MoveIT File\nTransfer. It is designed to assist in identifying exfiltration resulting from\nthe exploitation of CVE-2023-34362\n\nThis artifact parses EvtxHunter output and returns a set of fields in results.\nAn unparsed data field is availible in the hidden _RawData field.\n\nThere are several parameter's available for search leveraging regex.\n\n  - EvtxGlob glob of EventLogs to target. Default to MoveIt.evtx but can be targeted.\n  - dateAfter enables search for events after this date.\n  - dateBefore enables search for events before this date.\n  - IocRegex enables regex search over the message field.\n  - IgnoreRegex enables a regex whitelist for the Message field.\n  - IdRegex enables a regex query to select specific event Ids.\n  - VSSAnalysisAge enables searching over VSS.\n\nNOTE: MoveIT event logging may not be turned on by default.\n","Author":"Rapid7 team -  Ted Samuels, @mgreen27 \u0026 @scudette"}
{"Name":"Exchange.Windows.Detection.MoveIt","Description":"This is an artifact to detect exploitation of a MoveIt critical vulnerability \nobserved in the wild. CVE-2023-34362\n\nThe artifact enables detection via:\n\n- Yara: webshell, assembly and IIS logs\n- Evtx: IP ioc list and regex search\n\nLast updated: 2023-06-05T06:46Z\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.MsdtFollina","Description":"This artifact will search Microsoft Support Diagnostic Tool logs for evidence \nof ms-msdt Follina exploitation (CVE-2022-30190).\n\nThe exploit appears to add a recursive path \"../../\" to a TargetPath field \ninside the PCW.debugreport.xml.\n\nPCW.debugreport.xml can be found inside %localappdata%\\Diagnostics or \n%localappdata%\\ElevatedDiagnostics for elevated instances.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Notebooks.Admin.Flows","Description":"This notebooks lists all recent flows/collections across all orgs on the\nplatform. It may be used for auditing or as a means of finding a collection\npreviously scheduled.\n\nBy default it will only look for the last five flows per client, and return a\nmaximum of 50 flows altogether. Adjust the LIMITs as needed. Hunts are ignored\nby default, but may be included by setting IgnoreHunts to True.\n\nLinks are created for clients and flows, but in order for these to work, you\nneed to set the [server metadata](/app/index.html?org_id=root#/host/server)\nfield \"VelociraptorServerURL\". If not set, https://127.0.0.1:8889 is used.\n","Author":"Andreas Misje – @misje"}
{"Name":"Exchange.Windows.Detection.Ntdsutil","Description":"This artifact will extract evidence of Ntdsutil abuse from the application\neventlog. The artifact targets the string \"ntds.dit\" in event IDs: 216, 325,\n326 and 327.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Applications.OfficeServerCache","Description":"Return Office Internet Server Cache Registry keys and values in\norder to identify possible C2 URLs from malicious opened Office\ndocuments.\n\nSuch keys should be written by exploits such as CVE-2021-40444\n(Microsoft MSHTML Remote Code Execution Vulnerability)\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Server.Enrichment.AI.Ollama","Description":"This artifact allows enrichment using Ollama AI. \n\nParamaters:\n\n* `PrePrompt` - Is initial prompt default is: \"You are a Cyber Incident \nResponder and need to analyze data. You have an eye for detail and like to use \nshort precise technical language. Analyze the following data and provide \nsummary analysis:\"  \n* `Prompt` - Is secondary prompt, good practice is add some strings related to \nthe type of data for analysis or artifact name to provide context.\n* `PromptData` - add object to be serialized and added to the prompt.\n* `Model` - Model to use for your request.\n* `TargetUri` - Ollama target URI\n* `MaxPromptSize` - If set will cut the final prompt to this size in bytes to \nassist maintaining context limits\n\nThis artifact can be called from within another artifact (such as one looking \nfor files) to enrich the data made available by that artifact.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.Onenote","Description":"This artifact enables detection of malicious .one files and can also be used \nas an embedded file and metadata parser.\n\nThe artifact uses glob targeting and checks file headers to detect .one file \ntypes in scope. Secondly the artifact looks for EmbeddedFile and Metadata headers.   \nFinally the artifact will parse the .one file from discovered offsets and \nenable filters to determine rows returned.  \n \nBy default filters target suspicious file content and metadata title text \nobserved in the wild.\nModify ContentRegex to ```.``` to include all.  \n\nThe artifact also allows upload of both embedded files and source .one files.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.PSList.VTLookup","Description":"Combination of PSList with Virus Total reputation lookup using the Virus Total Server Enrichment Artifact by Wes Lambert.\n","Author":"Chris Jones - CPIRT"}
{"Name":"Exchange.Windows.System.PowerEfficiencyDiagnostics","Description":"This artifact parses the XML Energy Reports from the Power Efficiency \nDiagnostics feature of Windows, returning the processes which had high \nCPU usage, including which \n\nSome tools utilized by threat actors will generate high CPU usage and so \nare recorded in these reports.\n","Author":"Eduardo Mattos - @eduardfir"}
{"Name":"Exchange.Alert.Windows.EVTX.PowerPickHostVersion","Description":"\nThis artifact by itself only indicates that the PowerPick tool may have\nbeen invoked on the client. To capture additional context, ensure that\nPowershell script block and module logging are enabled on the clients and\ndeploy the Windows.ETW.Powershell artifact from the Exchange.\n\n-----\n\nThis artifact is based on on PowerPick research by Crowdstrike in \nhttps://www.crowdstrike[.]com/blog/getting-the-bacon-from-cobalt-strike-beacon/\n\nAs noted in the blog post, when PowerPick tool is run, the PowerShell logs\non the target system may contain an EID 400 event where the\nHostVersion and EngineVersion fields in the message have different values.\n\nIn recent puprle team exercises, we observed that the mismatched HostVersion\nvalue was always \"1.0\", providing a simple way to monitor for this activity \nas a backup to other PowerShell or CobaltStrike rules.\n\nIf this artifact generates an event on a client, check the PowerShell Operational\nlogs for suspicious 410x events (especially 4104).  If the Windows.ETW.Powershell\nartifact is also enabled on the client and did not fire an event, update that\nartifact's IOC list with the new information and redeploy it.\n","Author":"sbattaglia-r7"}
{"Name":"Exchange.Windows.ETW.Powershell","Description":"This artifact enables Powershell scriptblock and commandlet load monitoring.  \nIt uses the ETW provider: Microsoft-Windows-PowerShell  \n\nDetection logic is managed by several global ignore entries and an IOC csv.  \n\n##### Global Ignore  \nIgnoreProcessExe - Process exe path to ignore  \nIgnoreParentProcessExe - Parent exe path for child generated events to ignore  \nIgnoreParentProcessName - Ignore events generated by a child process \n  \n##### IocCsv \nName - detection name  \nType - type of detection: ScriptBlock,Commandlet or ScriptBlock|Commandlet  \nRegex - regex to search for  \nIgnore - regex to ignore  \nDateModified - date detection last modified  \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.PrefetchHunter","Description":"This artifact enables hunting prefetch entries for accessed files of interest. \n\nReturned results include relevant prefetch information like executable, accessed \nfile, and prefetch metadata.  \n\nFor example hunting MSBuild template files generated by an attack framework:  \n  ExecutableRegex = msbuild.exe   \n  TargetRegex = \\\\Windows\\\\Temp\\\\\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.PrintNightmare","Description":"This artifact returns any binaries in the Windows/spool/drivers/**\nfolders with an untrusted Authenticode entry.\n\nIt can be used to hunt for dll files droped during exploitation of\nCVE-2021-1675 - PrintNightmare.\n\nTo query all attached ntfs drives: check the AllDrives switch.\n\nI have added several filters to uplift search capabilities from the\noriginal MFT artifact. Due to the multi-drive features, the MFTPath\nwill output the MFT path of the entry.\n\nAvailable filters include:\n- FullPath regex\n- FileName regex\n- Time bounds to select files with a timestamp within time ranges\n- FileSize bounds\n\n![Sample output](https://github.com/mgreen27/velociraptor-docs/raw/patch-5/content/exchange/artifacts/PrintNightmare.png)\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Monitoring.PrintNightmare","Description":"This artifact returns ETW PrintService events for potential\nPrintNightmare activity.  CVE-2021-1675 and CVE-2021-34527\n\nIt monitors for DRIVER_ADDED events and enriches with binary\ninformation for payload DataFile. Hunt for unexpected drivers with\nmalicious DataFiles.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Remediation.PrintSpooler","Description":"This artifact will enable mitigation of PrintSpooler exploitation\nused by PrintNightmare - CVE-2021-34527 and CVE-2021-1675.\n\nThere are two selectable mitigations:\n\n  - disabling the print spooler service.\n  HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Spooler\\Start = 4 (service disabled).\n\n  - disable remote registration of the spool service.\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Printers\\RegisterSpoolerRemoteRpcEndPoint = 2 (RegisterSpoolerRemoteRpcEndPoint disables).\n\nNOTE: ChangeServiceStartup will set to disable, not stop the\nprintspool service.  Its always reccomended to use group policy to\ndeploy these settings.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.System.PrinterDriver","Description":"This artifact will enumerate installed PrintDrivers using the\nWin32_PrinterDriver wmi class and parse each DriverPath, ConfigFile\nand DataFile.\n\nHunt by searching for untrusted binaries or suspicious removed\nbinararies for evidence of previous exploitation.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Remediation.Process","Description":"This artifact enables killing a process by Name, Path or PID.\n\nWARNING: This is dangerous content as there are no guardrails. \nScope remediation first then ReallyDoIt to kill process.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.ProxyHunter","Description":"This artifact detects evidence of several common proxy tools.\n\n1. Hunt through Event Logs for potential evidence of proxy tool commandline.\n2. Checks active connections for proxy tool commandline (for active threat)\n3. Checks port proxy registry key for OS level forwarding\n\nNOTE: this artifact is Windows only. Similar queries for 2. can be run on linux and macos\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.PublicIP","Description":"This artifact queries for RDP and Authentication events with a Public IP\nsource. The artifact uses Windows.EventLogs.RDPAuth and has several built in\nnotebooks for analysis.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Carving.Qakbot","Description":"This artifact enables Qakbot payload detection and configuration extraction \nfrom a byte stream, process or file on disk. The artifact runs a yara scan \nas a detection step, then attempts to process the payload to extract \nconfiguration.\n\nQakBot or QBot, is a modular malware first observed in 2007 that has been \nhistorically known as a banking Trojan. Qbot is used to steal credentials, \nfinancial, or other data, and in recent years, regularly a loader for other \nmalware leading to hands on keyboard ransomware. \n\nQakbot (Qbot) payloads have an RC4 encoded configuration, located inside two \nPE resources. Encoded strings and xor key can also be found inside the .data \nsection starting at a specific offset. \n\nSome of the options available cover changes observed in the last year in the \ndecryption process to allow simplified decoding workflow:\n\n- StringOffset - the offset of the string xor key and encoded strings.\n- PE resource type - the configuration is typically inside 2 resources.\n- Unescaped key string - this field is typically reused over samples\n- Type of encoding: single or double, double being the more recent.\n- Worker threads for bulk analysis / research use cases.\n\nThe decryption used is fairly simple with the first pass RC4 found in \nencoded strings embedded in the malware and is often reused from previous \nsamples. \n\nEach decoded output includes the first 20 bytes in hex as the SHA1 of the \ndata as verification. The second pass RC4 key is the next 20 bytes in hex, \nSecond pass RC4 decoding has the same verification of decrypted data.\n\nNOTE: Requires 0.6.8 for PE dump\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.EventLogs.RecordIDCheck","Description":"This artifact will compare EventLog records and report on\nabnormalities in RecordID sequence and optional time gap. The\nartifact can be used for both hunting, remote or local analysis.\n\nThere are several parameter's available.\n  - EvtxGlob glob of EventLogs to target. Default to all but can be targeted.\n  - PathRegex enables filtering on evtx path for specific log targetting.\n  - DateAfter enables search for events after this date.\n  - DateBefore enables search for events before this date.\n  - MaxTimeDifference enables flaging temporal gaps between Events. Note also potential false positives on machines turned off.\n  - SearchVSS enables searching over VSS\n\nNote: Please use with caution this artifact can potentially be heavy\non the endpoint.  Temporal analysis is turned off by default due to\npotential for false positives during machine shutdown. Sequential\nfalse positives may also occur very occasionally.\n\nversion: 0.6.1\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Remediation.Registry","Description":"This artifact uses glob to remove a registry key.\n\nTypeRegex allows targeting of key or value. For service remediation key, for \nrun key remediation SZ or .   \n\nWARNING: PLEASE SCOPE FIRST and use appropriate targeting.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.RemoteIconForcedAuth","Description":"Attackers plant SCF, URL, and LNK files with malicious icon file paths\non file shares to escalate privileges or maintain persistence. This attack\nonly requires the user to browse to the location of the malicious file.\nThis artifact enumerates file shares and returns an event for each file with a\nremote icon. It can also scan a target root directory since attackers commonly\nuse other locations like desktops.\n","Author":"ACEResponder.com"}
{"Name":"Exchange.Generic.Detection.Yara.SSH","Description":"This is a server artifact that enables running Generic.Detection.Yara.Glob \nover ssh.\n\nThis artifact can be used to run against a single server or against a list of \nservers via notebook foreach.\n\nKeys are passed as path on disk to preserve potential key leakage. You can also \nmodify the artifact to allow server_metadata to be passed.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Registry.ScheduledTasks","Description":"This artefact will collect Scheduled task information from the registry without \nrelying on the existance of an XML file in C:\\\\Windows\\\\System32\\\\Tasks.\n\nThe artifact will attempt to find relevant XML data if exists.\nThere is also an option to show only tasks  missing a Security Descriptor.\n\nTODO: cleanup, write test and add to main repo\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Triage.ScreenConnect","Description":"This artifact extracts useful data for triage of ConnectWise ScreenConnect\nCVE-2024-1709 and CVE-2024-1708 impacting versions 23.9.7 and prior.\n\nThis artifact will:\n\n1. Check for Webshells in ```/App_Extensions/**/*.{aspx,ashx}``` path.\nSome observed legitimate webapp strings have been excluded.\nNOTE: Use WebshellsUSN to find potential exploits that cleanup shells.\n\n2. Parse ```C:\\Program Files\\ScreenConnect\\App_data\\User.Xml``` file.\nUsually this file is set during first use and reset during exploit.\nCheck for timestamp discrepancies and obviously evil usernames/email\n(@poc.com).\n\n3. Parse ```security.db```.\nAdd time filter. Results are stacked, check for unusual access patterns\nand malicious IPs.\n\n4. List and upload (optionally) all ScreenConnect files.\n\nCollect additional artifacts as desired for support.\n","Author":"Matt Green - @mgreen27 - Rapid7 Labs"}
{"Name":"Exchange.Server.Alerts.IRIS.Case.Create","Description":"Create an IRIS case when monitored artifacts complete with results.  Adds the ClientId, FlowId as tags to the case.  Adds the FQDN as an asset.\n\nLearn more about IRIS, here: https://dfir-iris.org/\n\nIt is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Server.Alerts.Mattermost","Description":"Create a Slack/Mattermost notification when a client Flow (with artifacts of interest) has finished. Cancelled collections and collections with artifacts that don't satisfy preconditions do not create notifications when they are stopped.\n","Author":"Andreas Misje – @misje"}
{"Name":"Exchange.Server.Alerts.Monitor.IRIS","Description":"Create an IRIS alert when monitored artifacts complete with results. Alerts are available starting in version 2.1.0 of IRIS.\nhttps://github.com/dfir-iris/iris-web/releases/tag/v2.1.0\n\nLearn more about IRIS, here: https://dfir-iris.org/\n\nIt is recommended to use the Server Metadata section to store credentials, instead of having to store directly inside the artifact.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Server.Alerts.TrackNetworkConnections","Description":"This artifact alerts on network connections tracked by Velociraptor on clients.\nRequires the client_event artifact 'Generic.Events.TrackNetworkConnections' to be enabled.\n\nYou can filter alerts based on FQDN of the client, process name, remote ip and remote port.\nOnly created network connections are alerted on (meaning you don't get an alert when the system removes the connection).\nYou should use those filters, else there be spam to be had :D\n","Author":"Herbert Bärschneider @SEC Consult"}
{"Name":"Exchange.Server.Enrichment.EchoTrail","Description":"\nThis is a process execution enrichment artifact that can be called from within another artifact (such as one looking at running processes) to enrich the \ndata made available by that artifact. We are calling the EchoTrail v2 API which is still in beta. \n\nNOTE: The EchoTrail free API is limited to 25 queries per day which is very low for most use cases. This artifact may send more than 25 queries at the API!\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.EchoTrail(lookup_image='C:\\Windows\\system32\\svchost.exe', lookup_parent_image='C:\\Windows\\explorer.exe')`\n\nAdditional lookup parameters that can be passed:\n\n  - `lookup_hostname`: The hostname which the execution occurred on (for host-specific prevelance metrics)\n  - `lookup_image_hash`: The SHA256 hash of the process image \n  - `lookup_parent_image_hash`: The SHA256 hash of the process parent image\n  - `lookup_commandline`: Command line arguments of the process\n","Author":"Eric Capuano - @eric_capuano"}
{"Name":"Exchange.Server.Enrichment.IRIS.IOCLookup","Description":"Query an IRIS instance for an indicator.\n\nTo learn more about IRIS, see: https://dfir-iris.org/\n\nThis artifact can be called from within another artifact to enrich the data made available by that artifact.\n\nNOTE: This artifact queries for all IOCs, and does not associate IOCs to first-order cases. This will be improved in the future.\n\nEx.\n\n  `SELECT * from Artifact.Server.IRIS.IOCLookup(IOC=$YOURIOC)`\n","Author":""}
{"Name":"Exchange.Server.Enrichment.MalwareBazaar","Description":"Query MalwareBazaar for a hash.\n\nTo learn more about MalwareBazaar, see: https://bazaar.abuse.ch/\n\nThis artifact can be called from within another artifact to enrich the data made available by that artifact.\n\n  Ex.\n\n    `SELECT * from Artifact.Server.Enrichment.MalwareBazaar(Hash=$YourMD5OrSHA1OrSHA256)`\n\n  If querying for an alternate hash, specify the hash type, like so:\n\n    `SELECT * from Artifact.Server.Enrichment.MalwareBazaar(Hash=$YOURHASH, HashType=$YourGimphashOrImphash)`\n","Author":""}
{"Name":"Exchange.Server.Enrichment.AI.OpenAI","Description":"Query OpenAI for analysis of data.\n\nParamaters:\n\n* `PrePrompt` - Is System prompt default is: \"You are a Cyber Incident \nResponder and need to analyze data. You have an eye for detail and like to use \nshort precise technical language. Analyze the following data and provide \nsummary analysis:\"  \n* `Prompt` - Is User prompt as string. When pushing a dict object via PromtData \ngood practice is add some strings related to the type of data for analysis or \nartifact name to provide context.\n* `PromptData` - add optional object to be serialized and added to the User prompt.\n* `Model` - Model to use for your request.\n* `MaxPromptSize` - If set will cut the final prompt to this size in bytes to \nassist maintaining context limits\n\nThis artifact can be called from within another artifact (such as one looking \nfor files) to enrich the data made available by that artifact.\n","Author":"Matt Green - @mgreen27 refactored orginal from Wes Lambert - @therealwlambert|@weslambert@infosec.exchange"}
{"Name":"Exchange.Server.Enrichment.SecureAnnex","Description":"Submit an extension to the Secure Annex API.\n\nhttps://app.secureannex.com/settings/api\n\nThis artifact can be called from within another artifact, like one looking for installed Chrome extensions, to enrich the data coming back with vulnerability information from Secure Annex.\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.SecureAnnex(ExtensionId=$EXTENSION_ID,ExtensionVersion=$EXTENSION_VERSION,ApiKey=$API_KEY)`\n","Author":"Whitney Champion -- bsky.app/profile/whit.zip"}
{"Name":"Exchange.Server.Enrichment.Strelka.FileScan","Description":"Submit a file to Strelka for analysis using `strelka-oneshot`.\n\nFor more information about Strelka and `strelka-oneshot`, see:\n\nhttps://target.github.io/strelka/#/?id=strelka-oneshot\n\nThis artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.Strelka.FileScan(FileToScan=$YOURFILE)`\n\nNOTE: The default time to wait for scan results is set to 60 seconds. This timeout can be changed by altering the value for the `StrelkaTimeout` variable.\n","Author":"Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange"}
{"Name":"Exchange.Server.Enrichment.Sublime.EmailAnalysis","Description":"Submit an email to Sublime for analysis.\n\nhttps://sublime.security/\n\nBy default, this artifact returns matches for active detection rules.\n\nThis artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.Sublime(Message=$YourBase64EncodedMessage)`\n","Author":"Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange"}
{"Name":"Exchange.Server.Enrichment.ThreatFox","Description":"Query ThreatFox for an indicator.\n\nTo learn more about ThreatFox, see: https://threatfox.abuse.ch\n\nThis artifact can be called from within another artifact to enrich the data made available by that artifact.\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.ThreatFox(AuthKey=$YOURKEY,IOC=$YOURIOC)`\n\nIf querying for an MD5 or SHA256 hash, specify the IOC type, like so:\n\n  `SELECT * from Artifact.Server.Enrichment.ThreatFox(AuthKey=$YOURKEY,IOCType=Hash)`\n","Author":""}
{"Name":"Exchange.Server.Enrichment.Virustotal.FileScan","Description":"Submit a file to Virustotal for analysis.  \n\nThis artifact is based on the multipart/form-data example here:\n\nhttps://docs.velociraptor.app/knowledge_base/tips/multiparts_uploads/\n\nThis artifact can be called from within another artifact (such as one looking for files) to enrich the data made available by that artifact.\n\nEx.\n\n  `SELECT * from Artifact.Server.Enrichment.Virustotal.FileScan(FileToScan=$YOURFILE)`\n\nNOTE: The default time to wait for scan results is set to 60 seconds. In the future, this artifact will be optimized to poll for result status instead of using a static wait interval.\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Server.Hunt.Comparison","Description":"This artifact is used to compare other artifacts from two different hunts. The basic idea is that a baseline (Hunt 1) is created from selected artifacts before an attack. A second hunt (Hunt 2) can then be carried out after the attack using the same artifacts. Now, using this script, artifacts from both hunts can be compared. This allows legitimate activities to be filtered out and makes it easier to identify malicious activities in Hunt2.\n\nFurthermore, when comparing artifacts, it is necessary to select columns (here the identifying_column) that should be used for the comparison in both artifacts, since a comparison of complete data sets leads to errors. Because many artifacts contain timestamps that update. The use of values such as hashes therefore makes sense.\n\nFor example, the following artifacts and their identifying columns can be used to compare to a baseline:\n\n- Windows.System.Pslist - Hash\n- Windows.Forensics.Prefetch - Hash\n- Windows.Sysinternals.Autoruns - SHA-256\n- Windows.Sys.AllUsers - Name\n","Author":"Denis Kiffer"}
{"Name":"Exchange.Server.Import.WatchLocalDirectory","Description":"This is an artifact that will monitor a local path for collections, \nwhich it will then ingest. \n","Author":""}
{"Name":"Exchange.Server.Import.WatchS3Directory","Description":"This is an artifact that will monitor an S3 path for collections, \nwhich it will then ingest. \n","Author":""}
{"Name":"Exchange.Server.Monitor.Autolabeling.Clients","Description":"This server side event monitoring artifact watches for new client enrollments and automatically labels them according to their domain roles.\n\n* Standalone \u0026 Member Workstations will get the label `Workstation` assigned.\n* Standalone \u0026 Member Servers will get the label `Server` assigned.\n* Primary \u0026 Backup Domain Controller will get the label `Domain Controller` assigned.\n* Linux Systems will get the label `Linux` assigned.\n\nRelabeling of all clients even after they were enrolled can be achieved by starting a hunt for `Generic.Client.Info`. The labels are either Set or Cleared so it is fine to re-apply the label many times. See https://docs.velociraptor.app/knowledge_base/tips/automating_labels/\n","Author":"Stephan Mikiss @StephMikiss"}
{"Name":"Exchange.Server.Notification.Mastodon","Description":"Create a post on a Mastodon server. This could be used for automated alerting purposes, sharing IOCs, etc.\n\nThis artifact can be called from within another artifact to include data from the artifact results in the message/status.\n\nThis could also be turned into a server event artifact to send a notification or post to Mastodon when a particular event occurs.\n\nEx.\n\n  `SELECT * from Artifact.Server.Notification.Mastodon(Status=YourMessage/Status)`\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Server.Notification.Mattermost","Description":"Send notification via Mattermost webhook as described in \u003chttps://developers.mattermost.com/integrate/webhooks/incoming/\u003e\n","Author":"Hilko Bengen \u003cbengen@hilluzination.de\u003e"}
{"Name":"Exchange.Server.Slack.Clients.Enrolled","Description":"Send a message to slack when clients become enrolled.\n\nThis artifact triggers when a client is interrogated within 60\nseconds of it being seen for the first time.\n","Author":""}
{"Name":"Exchange.Server.Telegram.Clients.Enrolled","Description":"Send a message to telegram when clients become enrolled.\n\nThis artifact triggers when a client is interrogated within 60\nseconds of it being seen for the first time. You can manually\nconfigure information such as FirstSeenDelay, timestamp, etc.\n\nInspired by `Server.Slack.Clients.Enrolled`.\n","Author":"td - @tuedenn"}
{"Name":"Exchange.Server.Utils.BackupAzure","Description":"This server monitoring artifact will automatically zip and backup\nany collected artifacts to Azure blob storage.\n\nYou will need to provide a SasURL to upload to the container. The\ncredentials can be given as parameters or they will be taken from\nthe server metadata.\n\nBased on Server.Utils.BackupS3.\n\nThanks to @shortxstack and @Recon_InfoSec\n","Author":""}
{"Name":"Exchange.Server.Utils.OrphanedFlows","Description":"Sometimes flows are deleted but there is still outstanding data for\nthem in flight. The server will continue to save this data after the\nflow is deleted.\n\nThis happens when a hunt is deleted (thereby deleting all its flows)\nbut there are in flight collections still outstanding.\n","Author":""}
{"Name":"Exchange.Server.Utils.QuerySummary","Description":"Takes a query and outputs number of unique items per column, as well as the top 10 most frequently occuring items","Author":"Clay Norris, Mike Cohen"}
{"Name":"Exchange.Server.Utils.ScheduledDeletion","Description":"Schedules Server.Utils.DeleteMonitoringData to cleanup server monitoring data.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Detection.SmoothOperator","Description":"This artifact searches for evidence of trojanised 3CXDesktopApp.\n\nCurrently Windows specific, Yara glob can be repurposed for MacOS. \nTargeting /Contents/Frameworks/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib  \n\nThere are three methods of detection:\n\n1. Yara glob - searches known install paths and applies yara looking for binary attributes.\n2. Process Memory - Searches for compromised 3CXDesktopApp running using Windows.System.VAD.\n3. AMCache - Searches for compromised 3CXDesktopApp.exe versions in AMCache.\n\nImpacted 3CXDesktopApp:\n\n- Windows: 18.12.407 \u0026 18.12.416\n- MacOS: 18.11.1213, 18.12.402, 18.12.407 \u0026 18.12.416\n\nNOTE: artifact tested on 0.6.8 - should also work on on 0.6.7.  \nBe aware that the YARA rules are intentionally written in a way that is less strict \u0026 may\n\n 1. detect other malicious samples created in the time frame in which the known malicious samples were created\n 2. lead to some FPs\n \nThank you to @cyb3rops for sharing rules.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Splunk.Events.Clients","Description":"This server monitoring artifact will watch a selection of client\nmonitoring artifacts for new events and push those to a splunk\nindex.\n\nNOTE: You must ensure you are collecting these artifacts from the\nclients by adding them to the \"Client Events\" GUI.\n\nTo configure the event collector properly a couple steps need to be\ncompleted prior to setting up this event:\n  1. Configure an index to ingest the data.\n     * Go to Settings \u003e Index.\n     * New Index.\n  2. Configure the collector.\n     * Go to Settings \u003e Data Inputs \u003e HTTP Event Collector.\n     * Add New.\n     * Name does not matter, but ensure indexer acknowledgement is OFF.\n     * Set `Selected Indexes` to the index configured in step 1.\n     * Save API key for this event.\n  3. Set Global settings.\n     * Go to Settings \u003e Data Inputs \u003e HTTP Event Collector \u003e Global Settings\n     * Ensure `All Tokens` is set to ENABLED\n     * Copy the HTTP Port Number for this event\n  4. Configure your Splunk props.conf and tranforms.conf\n     * Add the following to props.conf\n      [vql]\n      INDEXED_EXTRACTIONS = json\n      DATETIME_CONFIG = CURRENT\n      TZ = GMT\n      category = Custom\n      pulldown_type = 1\n      TRANSFORMS-vql-sourcetype = vql-sourcetype,vql-timestamp\n      TRUNCATE = 512000\n      KV_MODE = none\n      AUTO_KV_JSON = false\n     * Add the following to transforms.conf\n      [vql-sourcetype]\n      INGEST_EVAL = sourcetype=lower(src_artifact)\n      [vql-timestamp]\n      INGEST_EVAL = _time=case( \\\n                    src_artifact=\"artifact_Linux_Search_FileFinder\",strptime(CTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_System_VFS_ListDirectory\",strptime(ctime,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                    src_artifact=\"artifact_Windows_Timeline_MFT\",strptime(event_time,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                    src_artifact=\"artifact_Windows_NTFS_MFT\",strptime(Created0x10,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                    src_artifact=\"artifact_Windows_EventLogs_Evtx\",strptime(TimeCreated,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Custom_Windows_EventLogs_System_7045\",strptime(TimeCreated,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_EventLogs_RDPAuth\",strptime(EventTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Analysis_EvidenceOfExecution_UserAssist\",strptime(LastExecution,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Analysis_EvidenceOfExecution_Amcache\",strptime(KeyMTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_System_Amcache_InventoryApplicationFile\",strptime(LastModified,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Search_FileFinder\",strptime(CTime,\"%Y-%m-%dT%H:%M:%S.%NZ\"), \\\n                    src_artifact=\"artifact_Windows_Applications_NirsoftBrowserViewer\",strptime(Visited,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Registry_RecentDocs\",strptime(LastWriteTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_Clients\",strptime(InsertDate,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_DNS\",strptime(LastSeen,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Forensics_UserAccessLogs_SystemIdentity\",strptime(CreationTime,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Custom_Windows_Application_IIS_IISLogs\",strptime(event_time,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_MacOS_Applications_Chrome_History\",strptime(last_visit_time,\"%Y-%m-%dT%H:%M:%SZ\"), \\\n                    src_artifact=\"artifact_Windows_Registry_UserAssist\",strptime(LastExecution,\"%Y-%m-%dT%H:%M:%SZ\") \\\n                    )\n\n\n     \u003e Note: `Enable SSL` only works if SSL is properly configured on your\n     Splunk server -- meaning you have proper certificates and DNS. If you are\n     accessing your Splunk instance by IP, `Enable SSL` should be set to OFF.\n","Author":"@jurelou, Modified By @SilverKnightKMA"}
{"Name":"Exchange.Windows.Carving.SquirrelWaffle","Description":"This artifact yara-scans memory or process dumps for unpacked\nSquirrelWaffle Dlls, decodes the configuration and returns the C2s\nand the payload.\n\nDepending on the initial infection vector (the macro within .doc or\n.xls maldoc), SquirrelWaffle packed droper will be loaded by either rundll32\nor regsvr32 and unpack itself in memory.\n\nThe decoded configurations found so far contain (1) a list of C2\nURLS, (2*) *may* contain a list of C2 IPs, and lastly, (3)\ncontains the command \"regsvr32.exe -s\". The command is used to\nlaunch its second-stage payload downloaded from its C2 addresses,\nas a \".txt\" file that is in fact a disguised PE, to be loaded in\nmemory.\n\n### NOTE\nThis content simply carves the configuration and does not unpack\nfiles on disk. That means pointing this artifact as a packed or\nobfuscated file will not obtain the expected results.\n","Author":"Eduardo Mattos - @eduardfir \u0026 Kostya Iliouk - @kostyailiouk"}
{"Name":"Exchange.Windows.Analysis.SuspiciousWMIConsumers","Description":"This artifact reports suspicious WMI Event Consumers and their associated Filters\nthat may indicate a malicious abuse for persistence.\n\nNOTE: This artifact uses the same logic as Windows.Persistence.PermanentWMIEvents \nhowever, this artifact narrows down the reported results based on a research by SANS.\n","Author":"Amged Wageh - @amgdgocha"}
{"Name":"Exchange.Windows.Detection.SysAid","Description":"Detects artifacts associated with post exploitation activity of \nLaceTempest related to the SysAid 0day.\n\nThere are several sub artifact scopes, with configurable regex parameters to \ntarget.\n\n- Yara.Process: Targets observed malware and cobalt strike via process yara\n- Disk.Ntfs: targets known disk IOCs via Windows.ntfs.mft\n- Forensic.Usn: targets known disk IOCs via USN journal\n- Evtx.Defender: Searches Defender event logs for evidence of associated alerts\n- Evtx.NetworkIOC: targets known strings of network IOCs in Firewall, Sysmon logs.\n- Evtx.PowershellIOC: targets known strings of powershell IOCs in Powershell logs.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Sysinternals.SysmonArchive","Description":"If configured, Sysmon EID 23: FileDelete enables archiving file deletes on \ndisk. The challenges of this configuration is management of the archive \nfolder which can grow to be significant size and use up disk space.  \n\nThis artifact enables management of the archive, listing files and removing \nold files over a configured maximum.\n\nFor monitoring: Use in combination with Windows.Events.SysmonArchive\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Events.SysmonArchiveMonitor","Description":"This artifact enables automatic management of the Sysmon archive folder.\n\nFileDelete is a super usefuil capability offered by Sysmon enabling archive\nof deleted files. It is typically used to archive interesting files or to target\ncollection during an active engagement.\n\nRequrements: Windows.Sysinternals.SysmonArchive\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Events.SysmonRegistry","Description":"This artifact enables monitoring for registry events of interest via the Sysmon \nETW proiver.\n\nThe artifact requires Sysmon installed collecting registry events 12,13 and 14.  \nIt is also reccomended to run Windows.Events.TrackProcesses as this also \nincludes a base level Sysmon install.\n\nMonitoring is configured by a csv KeyRegex which has the following fields:  \n  * Regex - a regex to select registry key events of interest.  \n  * FilterRegex - a regex to filter out keys.  \n  * FilterProcess - a regex to filter out Image field - \n  e.g ```C:\\\\Windows\\\\regedit\\.exe$```.  \n  * Details - a description of the Detection.   \n  * ATT\u0026CK - a MITRE ATT\u0026CK reference.  \n  \nNote: This artifact may be impacted by your Sysmon configuration. \nGenerally it is more efficient to filter at the kernel level via Sysmon \nconfigurtion.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Triage.Sysmon","Description":"This artifact allows collecting Sysmon Events for Triage around a timestamp.\n\nBy default collection will be 600 seconds from the current time and allows \nfast triage of a machine with recent telemetry.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Carving.SystemBC","Description":"This artifact extracts SystemBC RAT configuration from a byte stream, \nprocess or file on disk.\n\nThe User can define bytes, file glob, process name or pid regex as a target.\nThe artifact firstly discovers configuration and extracts bytes, \nbefore parsing with Velociraptor Binary Parser.\n\nThis content simply carves the configuration and does not unpack files on\ndisk. That means pointing this artifact as a packed or obfuscated file may not\nobtain the expected results.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Forensics.TabState","Description":"This artifact parses notepad TabState files in available in Windows 11.\n\nIn Windows 11, notepad has implemented a feature to repopulate previously \nopen notepad tabs - both saved and unsaved. This data is stored on disk and \nprovides an interesting opportunity for DFIR practitioners.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.TeamViewerLanguage","Description":"This artifact enables collection of TeamViewer log entries for keyboard layout \nchanges.  \n\nThe artifact firstly searches for TeamViewer log filenames, then applies yara \nto extract log lines. The artifact by default hunts for Chinese, Vietnamese \nand Russian language changes as priority, then uses a catch all for generic \nchanges. You can add additional targeted yara as desired to sort output.  \n\nIn each log entry there are two language codes, the first being keyboard \nlayout of the connecting system and the second one the default input profile \nof the target host. The same language codes could indicate legitimate support.\n\nLookup Language codes at the Microsoft link for references. Examples below:  \n\n0409 - US English  \n0419 - Russian  \n0804 - Chinese Simplified  \n0404 - Chinese Traditional  \n042a - Vietnamese  \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.Termsrv","Description":"This artifact detects patched TerminalService / Remote Desktop (RDP) dynamic link library or ServiceDll - \ntermsrv.dll.\n\nATT\u0026CK T1505.005. Non Terminal Services Windows systems (e.g Windows 10 or 11) do not allow \nconcurrent users to RDP into the machine at the same time. Typically a notice \nis displayed to the logged-on user requesting access and notifying of the \nimpending log off. As a defence evasion technique threat actors have been \nknown to patch termsrv.dll to evade detections.\n\nThe artifact collects 3 potential detection points:\n\n1. In memory - targeting termsrv.dll mapped file for the patch bytes\n2. On disk - targeting and file named termsrv.dll\n3. Services - targeting any unutual ServiceDll path or an untrusted authenticode ServiceDll\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Forensics.ThumbCache","Description":"ThumbCache_xx.db parser. \n\nWindows 8 and above is supported. This does NOT parse Win7/Vista caches.\n\nBy default, for resident files, the NAME field in a cache entry contains the\nASCII equivalent of the cache id, a 64 bit number. However for some deleted \nfiles and files residing on external hosts or external storage, there is \neither a file name, full UNC path or an alternate representation such as:\n    ```\u003cVOLUME NAME\u003e?\u003cVOLUME NUMBER\u003e?\u003cFILENAME\u003e ```  \n    or  \n    ```\u003cVOLUME NAME\u003e?\u003cVOLUME NUMBER\u003e?\u003cMFT REFERENCE NUMBER\u003e```  \n    or  \n    ```\\\\\u003chostname\u003e\\c$\\\u003cfile path\u003e```\n    \nThis artifact \u003cb\u003eomits\u003c/b\u003e the default resident files by removing any entries that \nlook like the cache ids leaving behind the \u003cb\u003einteresting files\u003c/b\u003e, usually \nreferences to external disks or deleted files. At times there are references\nto external files that may be useful to an investigation, when other \nartifacts have been removed.\n","Author":"Yogesh Khatri - @SwiftForensics / CyberCX"}
{"Name":"Exchange.Windows.NTFS.Timestomp","Description":"This artifact enables triage to detect potential time stomped files.\n\nChecks:\n\n- $STANDARD_INFORMATION “B” time prior to $FILE_NAME “B” time\n- $STANDARD_INFORMATION “B” or \"M\" time has nanosecond precision. \n- PE compile time prior to any $STANDARD_INFORMATION time stamp.  \n\nOptional:  \n\n- $STANDARD_INFORMATION “M” time prior to ShimCache timestamp\n- $STANDARD_INFORMATION times prior to $I30 slack \"B\" or \"M\" times.\n- Full PE metadata output.\n\nNote: If an option is selected the artifact will also output additional metadata for context.\n\nAvailable filters include:  \n  PathRegex (OSPath): e.g ^C:\\\\folder\\\\file\\.ext$ or partial \\\\folder\\\\folder2\\\\ or string|string2|string3  \n  FileRegex: ^filename.ext$ or partial string1|string2  \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Forensics.Trawler","Description":"Trawler [https://github.com/joeavanzato/Trawler] is a PowerShell script designed to help Incident\nResponders rapidly identify potential adversary persistence mechanisms on Windows.  It is similar\nin nature to PersistenceSniper with additional targeted checks as well as the capability to operate\nagainst a 'dead box' (mounted drive). The output is simplified compared to PersistenceSniper, providing\nthe user with the details needed to kick off an investigation into any identified mechanisms.\nThink of these tools as autoruns on steroids.\n\nPlease ensure the Velociraptor binary (and child powershell process) are excluded in any EDR/AV products.\n","Author":"Joe Avanzato"}
{"Name":"Exchange.Windows.Monitor.USBPlugIn","Description":"Monitor for plug in of USB volume.  Output drive letter for\nadditional enrichment artifacts\n","Author":""}
{"Name":"Exchange.Windows.Detection.USBYara","Description":"Run yara over usb when USB is plugged into machine.  Return context\nand hit details.\n\nThis artifact requires:\n\n  * Windows.Monitor.USBPlugIn (imported from Exchange)\n  * Generic.Detection.Yara.Glob\n\nYara rule deployed and target path can be modified.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.UnattendXML","Description":"This artifact will find unscrubbed passwords in unattend.xml answer files. This \nfile is used for non interactive Windows installation.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Linux.Volatility.Create.Profile","Description":"This artifact is used to create the profile to the environnements Debian / Ubuntu.\n","Author":"URCA (Corentin Garcia / Emmanuel Mesnard)"}
{"Name":"Exchange.Windows.Persistence.VscodeTasks","Description":"This artifact parses VSCode configuration files to find potenital \npersistence.\n\nTerminal Profiles via settings.json  \nVisual Studio tasks via tasks.json  \n\nThe artifact has configurable options to Include all tasks and settings for \nvisibility. \n\nNOTE: experimental - additional research may include Visual Studio Code Extensions\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.ETW.WMIEventing","Description":"This artifact collects events associated with creation and deletion of WMI \nEvent Consumers. All Event Consumers created under any namespace will \ngenerate events which are filtered on event consumer classes.  \n\nIt uses the ETW provider:\nMicrosoft-Windows-WMI-Activity {1418ef04-b0b4-4623-bf7e-d74ab47bbdaa}  \nNote: This provider events have support on Windows 10+\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.WS_FTP","Description":"This is an artifact to detect exploitation of a Progress Software's WS_FTP \ncritical vulnerability observed in the wild.\n\nCVE-2023–40044 is a severe .NET deserialization vulnerability in WS_FTP \nServer’s Ad Hoc Transfer module, allowing a pre-authenticated attacker to \nexecute remote commands on the server’s operating system.   \n\nCVE-2023–42657 is a directory traversal vulnerability, enabling attackers to \nperform file operations outside their authorized WS_FTP folder path and \noperate on the underlying OS.   \n\nBoth vulnerabilities are critical, with CVSS scores of 8.8 and 9.9 \nrespectively, and affect versions prior to 8.7.4 and 8.8.2​.\n\nThe artifact enables detection via:\n\n- Yara: IIS logs\n- Evtx: Application Event Logs IIS exception   \n\nBoth methods target observed IPs and the string /AHT/AhtApiService.asmx which \nis part of the vulnerable module.\nNote: no direct evidence of exploitation observed in application logs, only \nexceptions that otherwise seem rare around the time of exploitation.\n\n\nLast updated: 2023-10-01T13:15Z\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Analysis.Capa","Description":"Analyze PE, ELF, or shellcode files with capa.\n\n\"capa detects capabilities in executable files. You run it against\na PE, ELF, or shellcode file and it tells you what it thinks the\nprogram can do. For example, it might suggest that the file is a\nbackdoor, is capable of installing services, or relies on HTTP to\ncommunicate.\"\n\nhttps://github.com/fireeye/capa\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.Applications.AnyDesk.LogParser","Description":"Parses the AnyDesk ad.trace log file.\n\nInfo such as connection times, clipboard activity, and remote host information are captured.\n","Author":"Rob Homewood, angry-bender and Yogesh Khatri (@swiftforensics)"}
{"Name":"Exchange.Windows.Applications.AnyDesk","Description":"This parses AnyDesk logs to retrieve information about AnyDesk usage. It includes source IP addresses, AnyDesk ID's, and filetransfers.\n\nParts of below code was used from Matt Green - @mgreen27\n","Author":"Jos Clephas - @DfirJos"}
{"Name":"Exchange.Windows.Applications.DefenderHistory","Description":"This artifact parses the Windows Defender files generated on threat detection and returns\nthe contained parameters created by Windows Defender about the detected threat. \n\nBy default with no parameters DefenderHistory parses \n\"C:/ProgramData/Microsoft/Windows Defender/Scans/History/Service/DetectionHistory/**\"\nA different TargetGlob can be entered.\n\nBased on the research work done by Jordan Klepser @JordanKlepser\nhttps://github.com/jklepsercyber/defender-detectionhistory-parser \n","Author":"Roman Makuch - @rmakuch Kanstantsin Ilioukevitch - @kostyailiouk"}
{"Name":"Exchange.Windows.Applications.FreeFileSync","Description":"This artefact can be used to retrieve and parse some FreeFileSync file in order to:\n- Identify the latest account used to transfer data and the remote ip adresse destination in the case of SFTP protocol with the qeury GlobalInfo\n- Identify the latest transfered files with Latest Data Transfer\n- Identify the presence of others interesting logs about previous or attempt of files transfer\n\nIn the case of logs files, only the html version has been parsed\n\nThese query were made in the context of the use of legitimate data transfer tools by an attacker.\nYou can read more about it on https://www.synacktiv.com/publications/legitimate-exfiltration-tools-summary-and-detection-for-incident-response-and-threat\n","Author":"Nathanaël Ndong, Synacktiv"}
{"Name":"Exchange.Windows.Applications.GoodSync","Description":"This artefact can be used to retrieve and parse some GoodSync file in order to\n- identify configured Good Sync account;\n- identify data and time of transfered files.\n\nThis artifact have been created to identify potential exfiltrated files using GoodSync tool.\nYou can read more about it on https://www.synacktiv.com/publications/legitimate-exfiltration-tools-summary-and-detection-for-incident-response-and-threat\n","Author":"Nathanaël Ndong, Synacktiv"}
{"Name":"Exchange.Windows.Applications.LECmd","Description":"Execute Eric Zimmerman's LECmd and return output for analysis.\nCreated using @eduardfir SBECmd VQL as a quide.  \nLECmd is a CLI tool for analyzing lnk data. Learn more - https://github.com/EricZimmerman/LECmd\n","Author":"Carlos Cajigas @carlos_cajigas"}
{"Name":"Exchange.Windows.Applications.MouseWithoutBorders","Description":"This artifact parses Microsoft Mouse Without Borders (MWB) runtime logs, module interface logs and the settings file.\n\n\n* It's recommended to use the Sort and Stack features to handle repeated events effectively.\n","Author":"Mohamed Sultan"}
{"Name":"Exchange.Windows.AttackSimulation.AtomicRedTeam","Description":"This artifact allows you to run Atomic Red Team tests on Windows\nendpoints using Invoke-AtomicRedTeam. Linux and MacOS endpoints\nwill soon be supported.\n\nNOTE: All tests may not work out OOB. You may notice interference\nor inoperability of some tests with Windows Defender/antivirus/EDR\nenabled. Best-effort checks are made using the built-in\n**-GetPreReqs** flag. This is an initial PoC, and as such, much\ntesting is needed, and feedback is welcome.\n\n**Reference:**\n\nhttps://github.com/redcanaryco/invoke-atomicredteam\n\n**Description:**\n\nInvoke-AtomicRedTeam is a PowerShell module to execute tests as\ndefined in the atomics folder of Red Canary's Atomic Red Team\nproject. The \"atomics folder\" contains a folder for each Technique\ndefined by the MITRE ATT\u0026CK™ Framework. Inside of each of these\n\"T#\" folders you'll find a yaml file that defines the attack\nprocedures for each atomic test as well as an easier to read\nmarkdown (md) version of the same data.\n\n- Executing atomic tests may leave your system in an undesirable\n  state. You are responsible for understanding what a test does\n  before executing.\n\n- Ensure you have permission to test before you begin.\n\n- It is recommended to set up a test machine for atomic test\n  execution that is similar to the build in your environment. Be\n  sure you have your collection/EDR solution in place, and that\n  the endpoint is checking in and active.\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Windows.Audit.CISCat_Lite","Description":"This artifact runs the CISCat-Lite tool on the target machine and uploads the html output on the velociraptor server.\n\nCIS-CAT Lite is a free tool from the Center for Internet Security that helps in assessing and improving IT security configurations. \nIt enables unlimited system scans, provides compliance scores, and offers remediation steps based on CIS Benchmarks. \nThis tool is useful for organizations seeking to enhance their technology security.\n\nThe artifact has been configured to perform a standard scan of a Windows 10 Enterprise machine. \nTo select the baseline and profiles, execute the command \".\\Assessor-CLI.bat -i\"\n","Author":"Antonio Blescia (TheThMando)"}
{"Name":"Exchange.Windows.EventLogs.DeepBlueCLI","Description":"DeepBlueCLI - a PowerShell Module for Threat Hunting via Windows Event Logs","Author":"Anthony Hannouille - @AnthoLaMalice"}
{"Name":"Exchange.Windows.Detection.BruteRatel","Description":"This hunt runts the Immersive Labs yara rule (https://github.com/Immersive-Labs-Sec/BruteRatel-DetectionTools/blob/main/BruteRatel.yar) across select files to identify the known Brute Ratel config strings. \n","Author":"Luke Fardell"}
{"Name":"Exchange.Windows.Detection.Honeyfiles","Description":"This artifact deploys honeyfiles according to the Honeyfiles CSV parameter. It then monitors access to these files using etw.  The process tracker must be enabled, we use this to enrich etw events. Honeyfiles created by this artifact are removed at exit.\n\n* TargetPath - Location to create honeyfile.\n* Enabled - Only generate the honeyfile if this is set to 'Y'\n* MagicBytes - The starting magic bytes of the honeyfile.\n* MinSize,MaxSize - The size of the honeyfile will be a random value between MinSize and MaxSize.\n","Author":"Zane Gittins \u0026 Matt Green (@mgreen27)."}
{"Name":"Exchange.Windows.Detection.ISOMount","Description":"Following Microsoft's decision to block macros by default on MS\nOffice applications, threat actors are increasingly using container\nfiles such as ISO files to distribute malware.  This artifact will\nextract evidence of container files being mounted that may be\nmalicious from the Microsoft-Windows-VHDMP-Operational EventLog.\nThe artifact targets the string \".(iso|vhd|vhdx|img)$\" in event\nIDs: 1 (mount), 2 (unmount) and 12 (type, path, handle).\n","Author":"Conor Quinn - @ConorQuinn92, updated Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.Keylogger","Description":"This artifact is my attempt at implementing keylogger detection based on research presented by [Asuka Nakajima at NULLCON](https://speakerdeck.com/asuna_jp/nullcon-goa-2025-windows-keylogger-detection-targeting-past-and-present-keylogging-techniques) using the Microsoft-Windows-Win32k ETW provider.\n\n* Polling based keyloggers - Event id 1003 (GetAsyncKeyState) with MsSinceLastKeyEvent \u003e 100 and BackgroundCallCount \u003e 400\n* Hooking based keyloggers - Event id 1002 (SetWindowsHookEx) with FilterType = WH_KEYBOARD_LL\n* RawInput based keyloggers - Event id 1001 (RegisterRawInputDevices) with Flags = RIDEV_INPUT_SINK\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Detection.Network.Changed","Description":"Detects when a new network is added or removed from the system via the NetworkList registry keys.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Detection.PipeHunter","Description":"Takes a pipe name and returns the owning process and access rights. The primary\nmotivation for this artifact is a vulnerability in RemCom. RemCom is most \nnotably used by impacket psexec.py. It creates a null DACL for its \ncommunication pipe. This means a low privileged user\ncould use a stale pipe to get remote execution as SYSTEM. If you uncover any\nnamed pipes with the name RemCom_communication, investigate the owning proc\nand remove it from the system.\n#impacket\n","Author":"ACEResponder.com"}
{"Name":"Exchange.Windows.Detection.ProxyLogon.ProxyShell","Description":"This artifact hunts for CVE-2021-27065 (Microsoft Exchange ProxyLogon RCE)\nand CVE-2021-31207 (Microsoft Exchange ProxyShell RCE) exploitation by parsing \nentries in the 'MSExchange Management.evtx' log.\n\nThis log file is unique to Exchange and can be useful when ECP logs are\nno longer available. \n\nProxyLogon webshell detection syntax is specific to \n'China Chopper' via the PowerShell 'Set-OabVirtualDirectory' cmdlet.\n\nProxyShell webshell detection syntax is specific to PowerShell \n'New-MailboxExportRequest' and 'New-ExchangeCertificate' cmdlets.\n","Author":"Deepak Sharma - @rxurien"}
{"Name":"Exchange.Windows.Detection.ScmanagerBackdoor","Description":"Checks for overly permissive DACLs on scmanager. Low priv Users with\nKA - SDDL_KEY_ALL could launch SYSTEM services. \n","Author":"ACEResponder.com"}
{"Name":"Exchange.Windows.Detection.WonkaVision","Description":"\nThis artifact analyzes Kerberos tickets and attempts to determine if they are forged, using WonkaVision by @4ndr3w6s and @exploitph.\n\nAfter analysis, notable events are documented in the native Windows Application log, and are easily reviewable using the `Exhange.Windows.EventLogs.WonkaVision` artifact.\n\nhttps://github.com/0xe7/WonkaVision\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Windows.Scanner.Yara.Parsed","Description":"Instructions: Upload a yara signature file (signature file must be named yara.yas) and yara64.exe in a single zip file called yara.zip.\nThis artifact is an alternative way to scan processes, or recursively scan the C:\\ with a yara file containing multiple yara rules, utilizing the official yara tool. \n\nThis artifact will drop the yara.zip file onto the client in a temporary directory, unzip the binary and yara file, \nand then iterate through every running process or file on disk. Finally, it will delete the temporary directory.  \n","Author":"Dennis Yarizadeh + Chris Jones - Check Point Incident Response Team"}
{"Name":"Exchange.Windows.ETW.DNSOfflineCollector","Description":"This artifact collects DNS queries for a specified duration. It can be used \nwith an Offline Collector (which is not the case with Windows.ETW.DNS).\nIt uses the artifact (Windows.ETW.DNS) that was built by Matt Green - @mgreen27\n","Author":"Jos Clephas - @DfirJos"}
{"Name":"Exchange.Windows.ETW.DetectProcessSpoofing","Description":"Detects Process parent spoofing such as SelectMyParent.exe or\nCobalt Strike select PPID.\n\nNOTE: for short lasting processes it is expected to report NULL\nfor CommandLine and Username fields as enrichment failed.\n","Author":""}
{"Name":"Exchange.Windows.ETW.ScreenshotTaken","Description":"This artifact detects screen captures by correlating events from the Microsoft-Windows-Win32k ETW provider which are triggered by common Windows API calls made when taking a screenshot. This can be useful for detecting remote access trojans, infostealers, and data exfiltration. Tested against Sliver, Meterpreter, and Empire. This will also trigger on legitimate tools such as ZoomIt, Greenshot, MsTeams, etc. which can be excluded on a case by case basis via the ProcessExceptionsRegex parameter.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.EventLogs.Aurora","Description":"This artifact is a wrapper around the Windows.EventLogs.EvtxHunter artifact. It searches the Windows Application event log for logs being written by Nextron System's Aurora/Aurora Lite ('AuroraAgent' provider).\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.EventLogs.Chainsaw","Description":"\nThis artifact leverages Chainsaw to enable usage of Sigma rules\n(in addition to built-in rules) to faciliate detection within\nWindows Event Logs.\n\nFrom the project's description:\n\n\"Chainsaw provides a powerful ‘first-response’ capability to\nquickly identify threats within Windows event logs.  It offers a\ngeneric and fast method of searching through event logs for\nkeywords, and by identifying threats using built-in detection\nlogic and via support for Sigma detection rules.\"\n\nhttps://github.com/countercept/chainsaw\n","Author":"Wes Lambert - @therealwlambert, James Dorgan - @FranticTyping, Alex Korntizer - @AlexKornitzer"}
{"Name":"Exchange.Windows.EventLogs.EvtxHussar","Description":"Grab important events from Windows logs (.evtx) using [EvtxHussar](https://github.com/yarox24/EvtxHussar).\nAlso upload PowerShell ScriptBlocks (reconstructed as files).\n\nFollowing categories are supported:\u003cbr /\u003e\n- Antivirus (Symantec, Windows Defender)\u003cbr /\u003e\n- Accounts (Users related operations)\u003cbr /\u003e\n- Audit (Log cleared, Policy changed)\u003cbr /\u003e\n- Windows Firewall \u003cbr /\u003e\n- Logons\u003cbr /\u003e\n- Powershell events\u003cbr /\u003e\n- Processes\u003cbr /\u003e\n- RDP\u003cbr /\u003e\n- ScheduledTasks (creation/modification/execution)\u003cbr /\u003e\n- Services\u003cbr /\u003e\n- WinRM\u003cbr /\u003e\n- Boot up/Restart/Shutdown\u003cbr /\u003e\n- SMB\n\nNote: If no logs from specific category will be found, source will remain empty.\u003cbr /\u003e\nBased on version 1.7 of EvtxHussar.\n","Author":"Jarosław Oparka - @yarox24"}
{"Name":"Exchange.Windows.EventLogs.Hayabusa","Description":"[Hayabusa](https://github.com/Yamato-Security/hayabusa) is a\nWindows event log fast forensics timeline generator and threat\nhunting tool.\n\nThis artifact runs Hayabusa on the endpoint against the specified\nWindows event log directory, and generates and uploads a single CSV/JSONL\nfile for further analysis with excel, timeline explorer, elastic\nstack, jq, etc.\n","Author":"Eric Capuano - @eric_capuano, Whitney Champion - @shortxstack, Zach Mathis - @yamatosecurity, Fukusuke Takahashi - @fukusuket"}
{"Name":"Exchange.Windows.EventLogs.LogonSessions","Description":"This artifact searches for logon and logoff events within Security event logs identified\nby Event ID 4624 and 4634. These logon/logoff events are grouped by \"TargetLogonId\" field\ninto \"logon sessions\". For each of these logon sessions, start, end and duration\nare derived\n","Author":"Marinus Boekelo - Northwave"}
{"Name":"Exchange.Windows.EventLogs.RDPClientActivity","Description":"This artifact retrieves outgoing RDP session activity from the\nMicrosoft-Windows-TerminalServices-RDPClient event logs. It aggregates\nsessions based on ActivityID and outputs hostname, timeframe and disconnect reasons.\nThe latter is filled using a dict that was taken from MS Docs (see references)\n","Author":"Marinus Boekelo - Northwave"}
{"Name":"Exchange.Windows.EventLogs.RPCFirewall","Description":"Collect RPC Firewall logs from Windows hosts\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.EventLogs.RemoteAccessVPN","Description":"This Artifact enables scoping EventLogs from Microsoft VPN, served by\nRemote Access Service server role.\nIt is designed to assist in identifying VPN connections on organizations that\nare using Microsoft VPN service. It targets both server and client side logs.\n\nThis artifact parses EvtxHunter output and returns a set of fields in results.\nAn unparsed data field is availible in the hidden _RawData field.\n\nThere are several parameter's available for search leveraging regex.\n\n  - ClientEvtxGlob glob of VPN Client EventLogs to target. Default to Application.evtx.\n  - ServerEvtxGlob glob of VPN Server EventLogs to target. Default to System.evtx.\n  - NPSLogsGlob glob of NPS Server Text Logs to target.\n  - dateAfter enables search for events after this date.\n  - dateBefore enables search for events before this date.\n  - IocRegex enables regex search over the message field.\n  - IgnoreRegex enables a regex whitelist for the Message field.\n  - VSSAnalysisAge enables searching over VSS.\n","Author":"Théo Letailleur, Synacktiv"}
{"Name":"Exchange.Windows.EventLogs.SysmonProcessEnriched.yaml","Description":"Gather sysmon process creation events from the sysmon operational event log. Enrich with authenticode signature of image and call chain.\nCaches authenticode signature by the hash of the image for an hour to reduce number of times it fetches the authenticode signature.\nPrerequisites: Sysmon, and the process tracker artifact.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.EventLogs.WonkaVision","Description":"Collect WonkaVision logs from Windows hosts.\n\nWonkaVision is a utility developed by @4ndr3w6S and @exploitph that is used to detect forged Kerberos tickets.\n\nThis artifact allows users to run the utility (if desired) and collect the relevant logs from the Windows Application log.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.EventLogs.Zircolite","Description":"Zircolite is a standalone tool that can be used to apply Sigma rules to EVTX files on endpoints in an effort to quickly parse large datasets and surface detections.\n            \nYou can read more about Zircolite below:\n    \nhttps://github.com/wagga40/Zircolite\n    \nNOTE: This artifact may take several minutes to run, depending on the size of EVTX files being analyzed.\n","Author":"Wes Lambert -- @therealwlambert"}
{"Name":"Exchange.Windows.Events.TrackProcesses.UseExistingSysmonOnly","Description":"**This is a modified version of Windows.Events.TrackProcesses for servers\nthat do not use the Inventory service.  It assumes that Sysmon\nis already installed and running. The option to forward updates to the server\nis also removed.**\n\nThis artifact uses sysmon and pslist to keep track of running\nprocesses using the Velociraptor process tracker.\n\nThe Process Tracker keeps track of exited processes, and resolves\nprocess callchains from it in memory cache.\n\nThis event artifact enables the global process tracker and makes it\npossible to run many other artifacts that depend on the process\ntracker.\n","Author":""}
{"Name":"Exchange.Windows.Forensics.AdvancedPortScanner","Description":"This Velociraptor artifact is tailored for forensics analysis of Angry IP Scanner usage on Windows platforms. This facilitates the identification of how Angry IP Scanner was configured and used, aiding in DFIR investigations. It examines registry keys HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner and HKEY_USERS\\\\*\\\\SOFTWARE\\\\Famatech\\\\advanced_port_scanner\\\\State for retrieve some informations about:\n   \n- run: Displays the version of Advanced Port Scanner\n- locale_timestamp: Indicates the time in EPOCH (UTC +0) at which the application was first launched\n- locale: Displays the language chosen for the graphical interface, may prove useful to have an idea of the native language of a threat actor (it is necessary to correlate with a modus operandi in order not to fall into the trap of a false flag)\n- LastPortsUsed: Displays the last ports used in the last scan\n- LastRangeUsed: Displays the last IP range used in the last scan\n- IpRangesMruList: Displays all the IP ranges scanned by the tool, the first digit of each prefix in this list indicates the frequency of scans for each range\n- PortsMruList: Displays all the ports that have been scanned by the tool, the first digit of each prefix in this list indicates the frequency of scans for each port\n- SearchMruList: Displays all the IP addresses or hostnames that have been searched using the GUI's \"search\" feature\n","Author":"Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect)"}
{"Name":"Exchange.Windows.Forensics.AngryIPScanner","Description":"This Velociraptor artifact is tailored for forensic analysis of Angry IP Scanner usage on Windows platforms. This facilitates the identification of how Angry IP Scanner was configured and used, aiding in DFIR investigations. It examines HKEY_USERS\\\\*\\\\SOFTWARE\\\\JavaSoft\\\\Prefs\\\\ipscan from the registry for retrieve some informations about:\n  \n  - language: Displays the language used in the GUI, may prove useful to have an idea of the language used by a threat actor (it is necessary to correlate with a modus operandi in order not to fall into the trap of a false flag)\n  - Version: Displays the version of Angry IP Scanner\n  - LastVersionCheck: Captures the last time (EPOCH format in UTC +0) when the application checked for an update\n  - PortScanConfiguration: Displays the selected ports for scanning\n","Author":"Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect)"}
{"Name":"Exchange.Windows.Forensics.Clipboard","Description":"This artifact will show the Clipboard activity.\n\nThe artefact ActivitiesCache.db has started to log clipboard activity since Windows 10 version 1803.\n\nThe prerequisite for clipboard data to be logged by this artefact relies on the system having two settings checked:\n    Clipboard history enabled \n    Clipboard sync across devices \n\nStartTime (epoch time) – When the data was first copied to the clipboard \n\nExpirationTime (epoch time) – When the data will be deleted from the ActivitiesCache.db (roughly 12 hours) \n\nClipboardPayload – Base64 encoded string of the clipboard contents, but here it is decoded, and the clipboard content is shown  \n\nPayload – This field tells you where the clipboard data was copied from! \n\nActivityType – Type 10 means data resides in clipboard, Type 16 shows if data was copied or pasted\n","Author":"Hisham Adwan with the help of Velo Community"}
{"Name":"Exchange.Windows.Forensics.Jumplists_JLECmd","Description":"* Execute Eric Zimmerman's JLECmd to parse AUTOMATICDESTINATIONS-MS and CUSTOMDESTINATIONS-MS files in C:\\ drive recursively and return output for analysis. (jlecmd.exe -d C:/ --csvf -csv tmpdir results.csv).\n* JLECmd.zip is downloaded from the URL to 'C:\\Program Files\\Velociraptor\\Tools' folder.\n* JLECmd.zip can be uploaded to Velociraptor Server in order to copy it to the clients in case there is no internet connection.\n* Created using @carlos_cajigas LECmd VQL as a quide.\n* JLECmd is a CLI tool for analyzing Custom Destinations jump list data. Learn more - https://github.com/EricZimmerman/JLECmd\n","Author":"Orhan Emre @orhan_emre"}
{"Name":"Exchange.Windows.Forensics.NotificationsDatabase","Description":"Parses the Win10/11 notifications database, which contains events for badges, tiles, and toasts shown to each user.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Forensics.PersistenceSniper","Description":"PersistenceSniper is a Powershell module that can be used by Blue Teams, Incident\nResponders and System Administrators to hunt persistences implanted in Windows machines.\nIt is also available on Powershell Gallery and it is digitally signed with a valid code\nsigning certificate. The tool is under active development with new releases coming out\nregularly, so make sure to use the up-to-date version.\nhttps://github.com/last-byte/PersistenceSniper\n\nNOTE: the Rapid7 team has observed this artifact fail with some EDR/EPP tools deployed\nwith Powershell prevention capabilities. Please ensure the Velociraptor binary (and\nchild powershell) are excluded in these tools.\nNow DiffCSVUrl is downloaded during generation of the \ncollector, not during execution.\n","Author":"Chris Jones - CPIRT | FabFaeb | Antonio Blescia (TheThMando) | 0xdeadcell"}
{"Name":"Exchange.Windows.Forensics.RecentFileCache","Description":"Parses the RecentFileCache as evidence of execution artifact existing on older Windows systems (\u003c= Win 7).\n\nFull path, Drive letter and the binary name will be parsed. The order represents the timeline of the execution flow. However, there are no timestamps included in this artifact.\n","Author":"Stephan Mikiss @stephmikiss (SEC Defence @SEC Consult)"}
{"Name":"Exchange.Windows.Forensics.SoftPerfectNetworkScanner","Description":"This Velociraptor artifact is tailored for forensic analysis of SoftPerfect Network Scanner (NetScan) usage on Windows platforms. This facilitates the identification of how SoftPerfect Network Scanner was configured and used, aiding in DFIR investigations. It parse the MFT to search and retrieve the content of two files:\n\n- netscan.lic: display information related to the program's graphical user interface language configuration and license details, including the license name for example\n- netscan.xml: display information regarding the tool's configuration (selected scan ports, history of scanned IP ranges...)\n","Author":"Julien Houry - @y0sh1mitsu (CSIRT Airbus Protect), Matt Green - @mgreen27 (ntfs performance update)"}
{"Name":"Exchange.Windows.Forensics.WindowsNotepadParser","Description":"Runs the WindowsNotepadParser (https://github.com/ogmini/Notepad-State-Library) tool to collect and parse \nforensic artifacts related to Windows Notepad on Windows 11. \n\nDocumentation and details about the artifacts can be found at - https://github.com/ogmini/Notepad-State-Library\n\n### History\n\n- 1.0 - Creation\n","Author":"ogmini https://ogmini.github.io/"}
{"Name":"Exchange.Windows.Generic.Internet.BlockAccess","Description":"Simply adds a new inbound or outbound firewall rule that filters traffic by allowing or blocking network packets that match the specified criteria via `netsh advfirewall add rule` command. Applicable in case of blocking Internet access.\n\nHOW it does:\n\n- Use a configurable lookup table to generate additional entries.\n  - Using `nslookup` command first to get IP from specific domain\n- An optional `MessageBox` may also be configured to alert all logged in users.\n  - The message will be truncated to 256 characters.\n- After advfirewall rules application, connection back to the Velociraptor\nfrontend is tested and the rule removed if connection unavailable.\n- To remove rule, select the `RemoveRule` checkbox.\n- To update rule, simply rerun the artifact.\n\nWHY advfirewall?\n\n- The `netsh ipsec` and `netsh firewall` contexts are provided for backwards-compatibility with Windows 2000/XP/2003 (Now they are all **EOL**). \n- `Netsh AdvFirewall` applies to: Windows 7, Windows Server 2008, Windows Server 2008 R2, Windows Vista.\n- If you are new to advfirewall, please check reference link from MS first for more information.\n\nNOTE: Test carefully before running at scale in production environment\n\nInspired by `Windows.Remediation.Quarantine` from Matt Green - @mgreen27 (use netsh IPsec)\n","Author":"TueDenn - @tuedenn"}
{"Name":"Exchange.Windows.Hunter.Yara.LOLDrivers","Description":"This artifact scans system driver directories using two user-supplied YARA rules:\n\nOne for malware detection and another for vulnerability detection. If no rules are supplied the artifact runs its encoded rule sets by default, which are these one's from Florian Roth: https://github.com/magicsword-io/LOLDrivers/tree/main/detections/yara \n\nMatching files will show the match type as either \"malware\" or \"vulnerability\".\n\nMatching files can also be optionally uploaded.\n\nThis artifact is modeled after `Custom.Generic.Detection.Yara.Glob`.\n","Author":"Kaizar Lehri and Blake McDermott"}
{"Name":"Exchange.Windows.LastDomainUsers","Description":"Enumerate Domain Users by creation date. This artifact can be used to quickly detect new domain accounts that may have been created by attackers. This artifact must be run on Domain Joined systems with the PowerShell Active Directory module installed.","Author":"AnthoLaMalice - Anthony Hannouille"}
{"Name":"Exchange.Windows.Mounted.Mass.Storage","Description":"Find drives/usb mass storage that were mounted\n","Author":"Yaniv Radunsky \u0026 Kobi Arami @ 10root cyber security"}
{"Name":"Exchange.Windows.NTFS.MFT.HiveNightmare","Description":"This artifact uses Windows.NTFS.MFT (By Matt Green - @mgreen27) to\nfind several files created as part of the POC tooling for\nHiveNightmare (CVE-2021-36934):\n\n  - \\hive_sam_ - https://github.com/FireFart/hivenightmare\n  - \\SAM-20 - https://github.com/GossiTheDog/HiveNightmare\n  - \\SAM-haxx - https://github.com/GossiTheDog/HiveNightmare\n  - \\Sam.save - PowerShell version\n  - \\Sam.hive - https://github.com/WiredPulse/Invoke-HiveNightmare\n  - C:\\windows\\temp\\sam - https://github.com/cube0x0/CVE-2021-36934\n\nSee Florian Roth's rule here:\n- https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/win_hivenightmare_file_exports.yml\n","Author":"Zach Stanford - @svch0st"}
{"Name":"Exchange.Windows.Nirsoft.LastActivityView","Description":"LastActivityView is a tool for Windows operating system that\ncollects information from various sources on a running system, and\ndisplays a log of actions made by the user and events occurred on\nthis computer. The activity displayed by LastActivityView includes:\nRunning .exe file, Opening open/save dialog-box, Opening file/folder\nfrom Explorer or other software, software installation, system\nshutdown/start, application or system crash, network\nconnection/disconnection and more...\n","Author":"Yaniv Radunsky @ 10rootCyberSecurity"}
{"Name":"Exchange.Windows.Office.MRU","Description":"This artifact enables hunting for recently used Office Documents.\n\nThe artifact takes a Registry path, and extracts the Most Recently Used (= MRU) files list from Microsoft Office products (i.e.: Word, Excel, Powerpoint).\n","Author":"Yaron King - @Sam0rai"}
{"Name":"Exchange.Windows.Registry.Bulk.ComputerName","Description":"This looks through registry on all disks to determine the hostname for cases where multiple disks are mounted\n","Author":"Angry-bender"}
{"Name":"Exchange.Windows.Registry.COMAutoApprovalList","Description":"This artifact will return COM objects that auto-elevate and bypass UAC (these could potentially be used by adversaries/malware to elevate privileges), and cross-reference the class ID with a name where able.\n","Author":"Wes Lambert - @therealwlambert"}
{"Name":"Exchange.Windows.Registry.CapabilityAccessManager","Description":"The ConsentStore in CapabilityAccessManager can provide insight to\nwhat resources binaries have had access to, such as the microphone\nand webcam. This artefact returns non-Microsoft executables (ie:\nentries listed in the `NonPackaged` path).\n\nAdditional Resources:\n\n* https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072\n* https://thinkdfir.com/2022/01/04/i-can-see-and-hear-you-seeing-and-hearing-me/\n\nTags: #windows #registry\n","Author":"Zach Stanford - @svch0st, Phill Moore - @phillmoore"}
{"Name":"Exchange.Windows.Registry.CortexEDRDisabled","Description":"This artifact will attempt to identify Cortex EDR that has been disabled via regkey\n","Author":"Rhys Jenkins @Rhysistance"}
{"Name":"Exchange.Windows.Registry.Domain","Description":"Checks the configured domain name on each endpoint","Author":"Angry-bender"}
{"Name":"Exchange.Windows.Registry.NetshHelperDLLs","Description":"# Enumerate all NetSh Helper DLLs\n\nInspired by this [tweet](https://twitter.com/SecurePeacock/status/1532011932315680769?s=20\u0026t=IFbej-qpkF6IB7ycewE31w),\nthis artifact enumerates all NetSh Helper DLLs to provide\nopportunities to find outliers and potential persistence mechanisms \ntied to [netsh.exe](https://lolbas-project.github.io/lolbas/Binaries/Netsh/)\n\nI have run this hunt across 6K+ systems and identified the most common entries and provided\nthe `excludeCommon` option to exclude these. In very large environments there will likely still be FPs, \nbut they should be far and few.\n\nReferences:\n\n- https://attack.mitre.org/techniques/T1546/007/\n\n- https://lolbas-project.github.io/lolbas/Binaries/Netsh/\n","Author":"Eric Capuano - @eric_capuano"}
{"Name":"Exchange.Windows.Registry.PrintNightmare","Description":"CVE-2021-34527 or Windows Print Spooler Remote Code Execution Vulnerability\n\nA remote code execution vulnerability exists when the Windows Print Spooler service improperly performs privileged file operations. An attacker who successfully exploited this vulnerability could run arbitrary code with SYSTEM privileges. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.\n\nAccording to Microsoft, this vulnerability can only be exploited if the “NoWarningNoElevationOnInstall” key in the registry is set to 1. \n\nThe artifact scans the device registry to check if the beforementioned key exists or not; if it is undefined or doesn’t exist, then the system is not vulnerable to the PrintNightmare. Otherwise, the system is considered to be vulnerable to exploitation.\n\nThis vulnerability can be exploited using the Evil Printer attack.\n\nChanging the registry values from 1 to 0 or Disabling the spooler when it's not in use is recommended as the next step after applying the patch.\nThe following VQL query looks for the registry values to find a registry key named “NoWarningNoElevationOnInstall”.\n\n\nReferences:\n\nhttps://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527\n\nhttps://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Diving-Into-Spooler-Discovering-Lpe-And-Rce-Vulnerabilities-In-Windows-Printer.pdf\n\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-34527\n","Author":"Daksh Gajjar - @dakshgajjar"}
{"Name":"Exchange.Windows.Registry.TaskCache.HiddenTasks","Description":"This artefact will highlight any scheduled tasks missing the Security Descriptor (SD) value in the task cache. Without this value, the task is hidden from common query methods. \n\nOnce a task is identified with the SD value missing, the arefact tries to pull additional information from the registry and XML file for the task. \n\nAn example of this technique is used by the Tarrask malware.\n\nReference:\n  - https://www.microsoft.com/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/\n","Author":"Zach Stanford - @svch0st"}
{"Name":"Exchange.Windows.Services.Hijacking","Description":"Service Executable Hijacking is a misconfiguration flaw, where a service runs an executable which has \noverly permissive permissions on it (for example: \"Full Control\" permissions to \"Authenticated Users\").\nIf a service runs under the security context of a user with high permissions (such as: NT Authority\\SYSTEM), \nand an attacker with low privileges is able to modify the executable that service is running (such as \nreplacing it with their own) - the service could run that executable with high privileges.\n\nThis hunt finds all Windows services which are vulnerable to service executable hijacking. \nIt does so in the following manner:\n1. Enumerate all services, and extract the full path of their executables.\n2. Run an external Powershell script to enumerate the ACLs of those executables.\n3. Display all relevant information regarding found vulnerable services.\n\n#services #hijacking\n","Author":"Yaron King - @Sam0rai"}
{"Name":"Exchange.Windows.Ssh.AuthorizedKeys","Description":"Find and parse ssh authorized keys files on Windows running OpenSSH service.\n","Author":"Ján Trenčanský - j91321@infosec.exchange"}
{"Name":"Exchange.Windows.Sys.BitLocker","Description":"This artifact gets all Bitlocker volumes using PowerShell, including the recovery password.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Sys.LoggedInUsers","Description":"Get all currently logged in users via wmi.\n","Author":"Zane Gittins"}
{"Name":"Exchange.Windows.Sysinternals.PSShutdown","Description":"PsShutdown is a command-line utility similar to the shutdown utility from the Windows 2000 Resource Kit, but with the ability to do much more. In addition to supporting the same options for shutting down or rebooting the local or a remote computer, PsShutdown can logoff the console user or lock the console (locking requires Windows 2000 or higher). PsShutdown requires no manual installation of client software.\n","Author":"Ian Boje"}
{"Name":"Exchange.Windows.System.AccessControlList","Description":"This artifact displays the access control lists of files.\n\nNote: This artifact uses Powershell to gather the information.\n","Author":""}
{"Name":"Exchange.Windows.System.AppCompatPCA","Description":"Parse the Program Compatibility Assistant launch dictionary for executable launch times.\n","Author":"Eric Capuano - @eric_capuano@infosec.exchange"}
{"Name":"Exchange.Windows.System.Recall.AllWindowEvents","Description":"This artefact will read and correlate several tables to do with Microsoft Recall.\n\nThe main database is held here:\n   C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ukg.db\n     \nThis artefact will join multiple tables together to enrich the Window Capture events of recall. \n","Author":"Zach Stanford @svch0st\n"}
{"Name":"Exchange.Windows.System.Recall.WindowCaptureEvent","Description":"This artefact will read and correlate several tables to do with Microsoft Recall.\n\nThe main database is held here:\n   C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ukg.db\n     \nWith the images stored:\n   C:\\Users\\\\*\\AppData\\Local\\CoreAIPlatform.00\\UKP\\{DA73A0DB-DDF4-4A81-9506-CCB5DE8B0F14}\\ImageStore\\\\*\n\nTo view the snapshot images easily from the notebook output, right click and open image in a new tab. \n\n\nNOTE: There are many other very useful events in the database, this arefact just looks at the Capture Creation events. \n","Author":"Zach Stanford @svch0st\n"}
{"Name":"Exchange.Windows.System.Services.SliverPsexec","Description":"This pack detects various artefacts left behind by default configurations of the C2 framework Sliver PsExec module\n\nReference: https://www.microsoft.com/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/\n","Author":"Zach Stanford - @svch0st"}
{"Name":"Exchange.Windows.System.WMIProviders","Description":"List the WMI providers in the system.\n\nIt is possible to laterally move by installing a fake provider in the system, and then calling\nit remotely. This artifact enumerates all WMI providers and recovers the binary that runs when \nloaded.\n\nTest using https://github.com/Cybereason/Invoke-WMILM (Will run as SYSTEM)\n```\nInvoke-WMILM -Target localhost -Type Provider -Name notepad -Username test -Password test -Command notepad.exe\n```\n","Author":""}
{"Name":"Exchange.Windows.System.WindowsErrorReporting","Description":"Parses several Windows Error Reporting (WER) files that contain information about crashed programs. \n\nThis can include:\n\n * evidence historical malware execution that have crashed,\n * unstable executables after being injected into, and \n * loaded DLLs by other executables (eg rundll32.exe and regsvr32.exe)\n\nAfter Windows 10, Report.wer files in the ProgramData directory also contain a SHA1 hash (similar to Amcache) which can assist investigators tracking down processes that have since been deleted.\n","Author":"Zach Stanford - @svch0st"}
{"Name":"Exchange.Windows.Timeline.Prefetch.Improved","Description":"NOTE: This is a fixed version of Windows.Timeline.Prefetch which is\navailable in the release binary after 0.7.0-3.\n\nWindows keeps a cache of prefetch files. When an executable is run,\nthe system records properties about the executable to make it faster\nto run next time. By parsing this information we are able to\ndetermine when binaries are run in the past. On Windows10 we can see\nthe last 8 execution times and creation time (9 potential executions).\n\nThis artifact is a timelined output version of the standard Prefetch\nartifact. There are several parameter's availible.\n  - dateAfter enables search for prefetch evidence after this date.\n  - dateBefore enables search for prefetch evidence before this date.\n  - binaryRegex enables to filter on binary name, e.g evil.exe.\n  - hashRegex enables to filter on prefetch hash.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Triage.HighValueMemory","Description":"Dump process memory and upload to the server\n\nCommon Archive Utilities: Winrar, Winzip, 7-zip, Winscp, FileZilla\n\nCommon Exfil Utilities: robocopy, rclone, mega*\n\nConsoles: cmd, powershell\n","Author":"@kevinfosec - liteman"}
{"Name":"Exchange.Windows.Veeam.RestorePoints.BackupFiles","Description":"Parses the metadata found in Veeam full backup files (`.vbk`), Veeam incremental backup files (`.vib`) and Veeam reverse incremental backup files (`.vrb`) to extract relevant fields for each Restore Point.\n\nThese files are generated by Veeam Backup \u0026 Replication during backup jobs. This artifact accepts full backup, incremental backup, and reverse incremental backup files from **unencrypted** backups of virtual and physical infrastructures.\n","Author":"Synacktiv, Maxence Fossat - @cybiosity"}
{"Name":"Exchange.Windows.Veeam.RestorePoints.MetadataFiles","Description":"Parses the metadata found in Veeam backup chain metadata files (`.vbm`) to extract relevant fields for each Restore Point.\n\nThese files are generated by Veeam Backup \u0026 Replication during backup jobs. This artifact accepts metadata from **unencrypted** backups of virtual and physical infrastructures.\n","Author":"Synacktiv, Maxence Fossat - @cybiosity"}
{"Name":"Exchange.Windows.ETW.AMSI","Description":"This artifact uses the ETW provider:\n    (Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}\n","Author":""}
{"Name":"Exchange.Windows.Bulk.File","Description":"Search for some simple bulk File IOCs and upload if desired.\nTypical upload workflow may be to firstly search, then if returned\nrows match expectations rerun query with upload tickbox selected.\n\nNOTE: strings with comma \",\" requre quotes.\n\nIocLookupTable csv details:\n\nGlob - \"Quote\" items with { glob } barckets.\nWhitelist - Velociraptor regex to whitelist FullPath field.\nDescription - Free text\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.HashRunKeys","Description":"Iterate over all the run keys and locate their binary then hash it.\n\nTags: #windows #registry #detection\n","Author":""}
{"Name":"Exchange.Linux.Kunai","Description":"Kunai is a Linux-based security monitoring and threat hunting tool written in Rust.  This artifact parses the Kunai log file. \n","Author":"Wes Lambert -- @therealwlambert, @weslambert@infosec.exchange"}
{"Name":"Exchange.Generic.Detection.log4jRCE","Description":"Detection for exploitation attempts against log4j RCE\nvulnerability CVE-2021-44228.\n\nBy default this artifact will search for linux path glob: /var/logs/**\n\nFor Windows hosts please change the target path.\nSome examples of path glob may include:\n\n* Specific binary: `/var/logs/log.gz`\n* Wildcards: `/var/log/*.gz`\n* More wildcards: `/var/www/**/*.log`\n* Multiple extentions: `/var/log/**/*\\.{log,gz}`\n* Windows: `C:/Logs/**/*.{gz,log}` or `**/*.{gz,log}`\n\nNOTE: this artifact runs the glob plugin with the nosymlink switch\nturned on.  This will NOT follow any symlinks and may cause\nunexpected results if unknowingly targeting a folder with symlinks.\n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Windows.Detection.Malfind","Description":"This artifact checks the VAD for executable sections that are not maped to disk \nand has suspicious content which may indicate process injection.\n\nUser options allow targetting process, modifying suspicious content yara, or \nupload of suspicious section.\n\nDefault suspicious content includes headers: MZ, default cobalt strike stomped, \nor well known suspicious strings, meterpreter and Cobalt Strike.\n\nNote: Add additional yara as desired.  \nExpect some false positives and triage accordingly.  \n","Author":"Matt Green - @mgreen27"}
{"Name":"Exchange.Linux.Sys.Modinfo","Description":"Collects detailed metadata about Linux kernel modules using modinfo. Useful for \nmalicious kernel module hunting.\n\n- Live mode (default) - Parses /proc/modules, then runs modinfo \u003cname\u003e for each loaded\nmodule. Default search is /lib/modules/$(uname -r)/**/\u003cname\u003e.ko\n- Disk mode - If ModuleTargetGlob is supplied, skips live\nenumeration and instead uses glob, running modinfo \u003cpath\u003e for every matching glob hit. \n\nBoth modes use ModuleNameRegex to filter by name.\n","Author":"Matt Green - @mgreen27"}
